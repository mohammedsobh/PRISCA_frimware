
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00003f02  00003f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000147  00800152  00800152  00004088  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033f7  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb1  00000000  00000000  000076ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001772  00000000  00000000  000086b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00009e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084e  00000000  00000000  0000a434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a86  00000000  00000000  0000ac82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000c708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_19>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x156>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x5e>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e2 e0       	ldi	r30, 0x02	; 2
     216:	ff e3       	ldi	r31, 0x3F	; 63
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a2 35       	cpi	r26, 0x52	; 82
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	a2 e5       	ldi	r26, 0x52	; 82
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a9 39       	cpi	r26, 0x99	; 153
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 34 04 	call	0x868	; 0x868 <main>
     238:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <Vo+0x1>
     2f4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
     334:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <R2>
     338:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <R2+0x1>
     33c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <R2+0x2>
     340:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <logR2>
     350:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <logR2+0x1>
     354:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <logR2+0x2>
     358:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     3cc:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <T>
     3d0:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <T+0x1>
     3d4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <T+0x2>
     3d8:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
     3e8:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <Tc>
     3ec:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <Tc+0x1>
     3f0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Tc+0x2>
     3f4:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	64 97       	sbiw	r28, 0x14	; 20
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	dc 01       	movw	r26, r24
     424:	fe 01       	movw	r30, r28
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     42c:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <get_value+0x22>
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	23 c0       	rjmp	.+70     	; 0x484 <__stack+0x25>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     43e:	fd 01       	movw	r30, r26
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	80 81       	ld	r24, Z
     446:	86 13       	cpse	r24, r22
     448:	1b c0       	rjmp	.+54     	; 0x480 <__stack+0x21>
			v [j] = String[j+i+1];
     44a:	f9 01       	movw	r30, r18
     44c:	e4 0f       	add	r30, r20
     44e:	f5 1f       	adc	r31, r21
     450:	8f 01       	movw	r16, r30
     452:	0a 0f       	add	r16, r26
     454:	1b 1f       	adc	r17, r27
     456:	f8 01       	movw	r30, r16
     458:	71 81       	ldd	r23, Z+1	; 0x01
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	8c 0f       	add	r24, r28
     460:	9d 1f       	adc	r25, r29
     462:	84 0f       	add	r24, r20
     464:	95 1f       	adc	r25, r21
     466:	fc 01       	movw	r30, r24
     468:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r')|| (String [j+i+2] == '\n'))
     46a:	f8 01       	movw	r30, r16
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	80 32       	cpi	r24, 0x20	; 32
     470:	99 f0       	breq	.+38     	; 0x498 <__stack+0x39>
     472:	8d 30       	cpi	r24, 0x0D	; 13
     474:	89 f0       	breq	.+34     	; 0x498 <__stack+0x39>
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	79 f0       	breq	.+30     	; 0x498 <__stack+0x39>
			break;
			j++;
     47a:	4f 5f       	subi	r20, 0xFF	; 255
     47c:	5f 4f       	sbci	r21, 0xFF	; 255
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
		}
		else
			i++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     484:	fd 01       	movw	r30, r26
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <__stack+0x27>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	ea 1b       	sub	r30, r26
     490:	fb 0b       	sbc	r31, r27
     492:	2e 17       	cp	r18, r30
     494:	3f 07       	cpc	r19, r31
     496:	98 f2       	brcs	.-90     	; 0x43e <get_value+0x34>
			j++;
		}
		else
			i++;
	}
	return (atof(v));
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
}
     4a0:	64 96       	adiw	r28, 0x14	; 20
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <get_SEvalue>:
void get_SEvalue (char* Str,char Sch,char Ech)
{
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	7c 01       	movw	r14, r24
		}
		else
			S++;
	}

}
     4d8:	cd b6       	in	r12, 0x3d	; 61
     4da:	de b6       	in	r13, 0x3e	; 62
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     4dc:	fc 01       	movw	r30, r24
     4de:	01 90       	ld	r0, Z+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <get_SEvalue+0x28>
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	8f 01       	movw	r16, r30
     4e8:	08 1b       	sub	r16, r24
     4ea:	19 0b       	sbc	r17, r25
	char RXStr[lens];
     4ec:	58 01       	movw	r10, r16
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	a8 1a       	sub	r10, r24
     4f2:	b1 08       	sbc	r11, r1
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	a0 1b       	sub	r26, r16
     4fa:	b1 0b       	sbc	r27, r17
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	be bf       	out	0x3e, r27	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	ad bf       	out	0x3d, r26	; 61
     506:	2d b7       	in	r18, 0x3d	; 61
     508:	3e b7       	in	r19, 0x3e	; 62
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
     50e:	f7 01       	movw	r30, r14
     510:	80 81       	ld	r24, Z
     512:	68 13       	cpse	r22, r24
     514:	42 c0       	rjmp	.+132    	; 0x59a <get_SEvalue+0xe4>
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f0 e0       	ldi	r31, 0x00	; 0
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     51a:	d7 01       	movw	r26, r14
     51c:	ae 0f       	add	r26, r30
     51e:	bf 1f       	adc	r27, r31
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	8c 91       	ld	r24, X
     524:	d9 01       	movw	r26, r18
     526:	8c 93       	st	X, r24
 				Str[j] = RXStr[j];
     528:	d7 01       	movw	r26, r14
     52a:	8c 93       	st	X, r24
				if ((Str [j+S+2] == Ech))
     52c:	32 96       	adiw	r30, 0x02	; 2
     52e:	ee 0d       	add	r30, r14
     530:	ff 1d       	adc	r31, r15
     532:	80 81       	ld	r24, Z
     534:	48 13       	cpse	r20, r24
     536:	1a c0       	rjmp	.+52     	; 0x56c <get_SEvalue+0xb6>
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
     538:	81 2c       	mov	r8, r1
     53a:	91 2c       	mov	r9, r1
				if ((Str [j+S+2] == Ech))
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
					{
						Str[j+1] = ' ';
     540:	f7 01       	movw	r30, r14
     542:	e8 0d       	add	r30, r8
     544:	f9 1d       	adc	r31, r9
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	81 83       	std	Z+1, r24	; 0x01
						int i = j+2;
     54a:	2e 5f       	subi	r18, 0xFE	; 254
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
						while(i < lens-1)
     54e:	2a 15       	cp	r18, r10
     550:	3b 05       	cpc	r19, r11
     552:	64 f5       	brge	.+88     	; 0x5ac <get_SEvalue+0xf6>
     554:	f7 01       	movw	r30, r14
     556:	e2 0f       	add	r30, r18
     558:	f3 1f       	adc	r31, r19
     55a:	01 50       	subi	r16, 0x01	; 1
     55c:	11 09       	sbc	r17, r1
     55e:	e0 0e       	add	r14, r16
     560:	f1 1e       	adc	r15, r17
						{
							Str[i] = 0;
     562:	11 92       	st	Z+, r1
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
					{
						Str[j+1] = ' ';
						int i = j+2;
						while(i < lens-1)
     564:	ee 16       	cp	r14, r30
     566:	ff 06       	cpc	r15, r31
     568:	e1 f7       	brne	.-8      	; 0x562 <get_SEvalue+0xac>
     56a:	20 c0       	rjmp	.+64     	; 0x5ac <get_SEvalue+0xf6>
     56c:	39 01       	movw	r6, r18
     56e:	bf ef       	ldi	r27, 0xFF	; 255
     570:	6b 1a       	sub	r6, r27
     572:	7b 0a       	sbc	r7, r27
     574:	b7 01       	movw	r22, r14
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
							i++;
						}
						break;
					}
				else
					j++;
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     582:	91 91       	ld	r25, Z+
     584:	d3 01       	movw	r26, r6
     586:	9d 93       	st	X+, r25
     588:	3d 01       	movw	r6, r26
 				Str[j] = RXStr[j];
     58a:	49 01       	movw	r8, r18
     58c:	db 01       	movw	r26, r22
     58e:	9d 93       	st	X+, r25
     590:	bd 01       	movw	r22, r26
				if ((Str [j+S+2] == Ech))
     592:	80 81       	ld	r24, Z
     594:	84 13       	cpse	r24, r20
     596:	f3 cf       	rjmp	.-26     	; 0x57e <get_SEvalue+0xc8>
     598:	d3 cf       	rjmp	.-90     	; 0x540 <get_SEvalue+0x8a>
     59a:	d7 01       	movw	r26, r14
     59c:	11 96       	adiw	r26, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
					j++;
			}
			break;
		}
		else
			S++;
     5a2:	31 96       	adiw	r30, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     5a4:	8d 91       	ld	r24, X+
     5a6:	86 13       	cpse	r24, r22
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <get_SEvalue+0xec>
     5aa:	b7 cf       	rjmp	.-146    	; 0x51a <get_SEvalue+0x64>
		}
		else
			S++;
	}

}
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de be       	out	0x3e, r13	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd be       	out	0x3d, r12	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	08 95       	ret

000005d4 <get_int>:
int get_int (char* String,char ch)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	2a 97       	sbiw	r28, 0x0a	; 10
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	dc 01       	movw	r26, r24
     5ee:	fe 01       	movw	r30, r28
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	ce 01       	movw	r24, r28
     5f4:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     5f6:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     5f8:	e8 17       	cp	r30, r24
     5fa:	f9 07       	cpc	r31, r25
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <get_int+0x22>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	23 c0       	rjmp	.+70     	; 0x64e <get_int+0x7a>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     608:	fd 01       	movw	r30, r26
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	80 81       	ld	r24, Z
     610:	86 13       	cpse	r24, r22
     612:	1b c0       	rjmp	.+54     	; 0x64a <get_int+0x76>
			v [j] = String[j+i+1];
     614:	f9 01       	movw	r30, r18
     616:	e4 0f       	add	r30, r20
     618:	f5 1f       	adc	r31, r21
     61a:	8f 01       	movw	r16, r30
     61c:	0a 0f       	add	r16, r26
     61e:	1b 1f       	adc	r17, r27
     620:	f8 01       	movw	r30, r16
     622:	71 81       	ldd	r23, Z+1	; 0x01
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c 0f       	add	r24, r28
     62a:	9d 1f       	adc	r25, r29
     62c:	84 0f       	add	r24, r20
     62e:	95 1f       	adc	r25, r21
     630:	fc 01       	movw	r30, r24
     632:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r') || (String [j+i+2] == '\n'))
     634:	f8 01       	movw	r30, r16
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	99 f0       	breq	.+38     	; 0x662 <get_int+0x8e>
     63c:	8d 30       	cpi	r24, 0x0D	; 13
     63e:	89 f0       	breq	.+34     	; 0x662 <get_int+0x8e>
     640:	8a 30       	cpi	r24, 0x0A	; 10
     642:	79 f0       	breq	.+30     	; 0x662 <get_int+0x8e>
			break;
			j++;
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	02 c0       	rjmp	.+4      	; 0x64e <get_int+0x7a>
		}
		else
			i++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     64e:	fd 01       	movw	r30, r26
     650:	01 90       	ld	r0, Z+
     652:	00 20       	and	r0, r0
     654:	e9 f7       	brne	.-6      	; 0x650 <get_int+0x7c>
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	ea 1b       	sub	r30, r26
     65a:	fb 0b       	sbc	r31, r27
     65c:	2e 17       	cp	r18, r30
     65e:	3f 07       	cpc	r19, r31
     660:	98 f2       	brcs	.-90     	; 0x608 <get_int+0x34>
			j++;
		}
		else
			i++;
	}
	return (atoi(v));
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	0e 94 b1 18 	call	0x3162	; 0x3162 <atoi>
}
     66a:	2a 96       	adiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <find>:
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     680:	dc 01       	movw	r26, r24
     682:	0d 90       	ld	r0, X+
     684:	00 20       	and	r0, r0
     686:	e9 f7       	brne	.-6      	; 0x682 <find+0x2>
     688:	fc 01       	movw	r30, r24
     68a:	9d 01       	movw	r18, r26
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	31 09       	sbc	r19, r1
     690:	07 c0       	rjmp	.+14     	; 0x6a0 <find+0x20>
	{
		if (String [i] == ch){
     692:	91 91       	ld	r25, Z+
     694:	96 17       	cp	r25, r22
     696:	49 f0       	breq	.+18     	; 0x6aa <find+0x2a>
			f = 1;
			break;
		}
		else if ((String [i] == '\r')|| (String [i] == '\n'))
     698:	9d 30       	cpi	r25, 0x0D	; 13
     69a:	49 f0       	breq	.+18     	; 0x6ae <find+0x2e>
     69c:	9a 30       	cpi	r25, 0x0A	; 10
     69e:	49 f0       	breq	.+18     	; 0x6b2 <find+0x32>
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     6a0:	e2 17       	cp	r30, r18
     6a2:	f3 07       	cpc	r31, r19
     6a4:	b1 f7       	brne	.-20     	; 0x692 <find+0x12>
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
	while(i < strlen(String))
	{
		if (String [i] == ch){
			f = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
     6b2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     6b4:	08 95       	ret

000006b6 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	6a 01       	movw	r12, r20
     6c6:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     6c8:	28 81       	ld	r18, Y
     6ca:	39 81       	ldd	r19, Y+1	; 0x01
     6cc:	4a 81       	ldd	r20, Y+2	; 0x02
     6ce:	5b 81       	ldd	r21, Y+3	; 0x03
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
    *current_pos = new_pos;
     6d8:	c8 82       	st	Y, r12
     6da:	d9 82       	std	Y+1, r13	; 0x01
     6dc:	ea 82       	std	Y+2, r14	; 0x02
     6de:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <pin_direction>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     6ee:	41 11       	cpse	r20, r1
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <pin_direction+0x1e>
     6f2:	e8 2f       	mov	r30, r24
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	21 81       	ldd	r18, Z+1	; 0x01
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <pin_direction+0x14>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	6a 95       	dec	r22
     704:	e2 f7       	brpl	.-8      	; 0x6fe <pin_direction+0x10>
     706:	82 2b       	or	r24, r18
     708:	81 83       	std	Z+1, r24	; 0x01
     70a:	08 95       	ret
     70c:	e8 2f       	mov	r30, r24
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	21 81       	ldd	r18, Z+1	; 0x01
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <pin_direction+0x2e>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	6a 95       	dec	r22
     71e:	e2 f7       	brpl	.-8      	; 0x718 <pin_direction+0x2a>
     720:	80 95       	com	r24
     722:	82 23       	and	r24, r18
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	08 95       	ret

00000728 <pin_write>:
     728:	44 23       	and	r20, r20
     72a:	69 f0       	breq	.+26     	; 0x746 <pin_write+0x1e>
     72c:	e8 2f       	mov	r30, r24
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	22 81       	ldd	r18, Z+2	; 0x02
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	02 c0       	rjmp	.+4      	; 0x73c <pin_write+0x14>
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	6a 95       	dec	r22
     73e:	e2 f7       	brpl	.-8      	; 0x738 <pin_write+0x10>
     740:	82 2b       	or	r24, r18
     742:	82 83       	std	Z+2, r24	; 0x02
     744:	08 95       	ret
     746:	e8 2f       	mov	r30, r24
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	22 81       	ldd	r18, Z+2	; 0x02
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <pin_write+0x2e>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	6a 95       	dec	r22
     758:	e2 f7       	brpl	.-8      	; 0x752 <pin_write+0x2a>
     75a:	80 95       	com	r24
     75c:	82 23       	and	r24, r18
     75e:	82 83       	std	Z+2, r24	; 0x02
     760:	08 95       	ret

00000762 <port_direction>:
     762:	61 11       	cpse	r22, r1
     764:	05 c0       	rjmp	.+10     	; 0x770 <port_direction+0xe>
     766:	e8 2f       	mov	r30, r24
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	81 83       	std	Z+1, r24	; 0x01
     76e:	08 95       	ret
     770:	e8 2f       	mov	r30, r24
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	11 82       	std	Z+1, r1	; 0x01
     776:	08 95       	ret

00000778 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     778:	e8 2f       	mov	r30, r24
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	62 83       	std	Z+2, r22	; 0x02
     77e:	08 95       	ret

00000780 <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     780:	e8 2f       	mov	r30, r24
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	02 c0       	rjmp	.+4      	; 0x790 <pin_XOR+0x10>
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <pin_XOR+0xc>
     794:	28 27       	eor	r18, r24
     796:	22 83       	std	Z+2, r18	; 0x02
     798:	08 95       	ret

0000079a <Init>:
				STEP[3] = 0;
				sei();
			}
	}
}
void Init(void){
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     7a6:	81 b3       	in	r24, 0x11	; 17
     7a8:	80 6b       	ori	r24, 0xB0	; 176
     7aa:	81 bb       	out	0x11, r24	; 17
	pin_direction (D, 2, input );
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	80 e3       	ldi	r24, 0x30	; 48
     7b2:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	DDRC = 0XFF;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     7ba:	8a b3       	in	r24, 0x1a	; 26
     7bc:	80 6f       	ori	r24, 0xF0	; 240
     7be:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     7c0:	87 b3       	in	r24, 0x17	; 23
     7c2:	83 60       	ori	r24, 0x03	; 3
     7c4:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     7c6:	87 e8       	ldi	r24, 0x87	; 135
     7c8:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     7ca:	3e 9a       	sbi	0x07, 6	; 7
	GICR |= 0x40;
     7cc:	8b b7       	in	r24, 0x3b	; 59
     7ce:	80 64       	ori	r24, 0x40	; 64
     7d0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0x11;
     7d2:	85 b7       	in	r24, 0x35	; 53
     7d4:	81 61       	ori	r24, 0x11	; 17
     7d6:	85 bf       	out	0x35, r24	; 53
	UART_INIT();
     7d8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <UART_INIT>
	init_Stack();
	motor_init();
     7dc:	0e 94 5f 13 	call	0x26be	; 0x26be <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     7e0:	0f 2e       	mov	r0, r31
     7e2:	fb ee       	ldi	r31, 0xEB	; 235
     7e4:	cf 2e       	mov	r12, r31
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	df 2e       	mov	r13, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	17 e6       	ldi	r17, 0x67	; 103
     7ee:	e1 2e       	mov	r14, r17
     7f0:	16 e6       	ldi	r17, 0x66	; 102
     7f2:	f1 2e       	mov	r15, r17
     7f4:	06 ec       	ldi	r16, 0xC6	; 198
     7f6:	10 e4       	ldi	r17, 0x40	; 64
     7f8:	a8 01       	movw	r20, r16
     7fa:	97 01       	movw	r18, r14
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	88 e7       	ldi	r24, 0x78	; 120
     802:	93 e4       	ldi	r25, 0x43	; 67
     804:	0e 94 8c 13 	call	0x2718	; 0x2718 <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     808:	0f 2e       	mov	r0, r31
     80a:	ff ec       	ldi	r31, 0xCF	; 207
     80c:	cf 2e       	mov	r12, r31
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	df 2e       	mov	r13, r31
     812:	f0 2d       	mov	r31, r0
     814:	a8 01       	movw	r20, r16
     816:	97 01       	movw	r18, r14
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	88 e7       	ldi	r24, 0x78	; 120
     81e:	93 e4       	ldi	r25, 0x43	; 67
     820:	0e 94 8c 13 	call	0x2718	; 0x2718 <Pid_init>
	/*set fast PWM mode with non-inverted output*/
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     824:	8f b5       	in	r24, 0x2f	; 47
     826:	81 6a       	ori	r24, 0xA1	; 161
     828:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     82a:	8e b5       	in	r24, 0x2e	; 46
     82c:	81 64       	ori	r24, 0x41	; 65
     82e:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     830:	85 b5       	in	r24, 0x25	; 37
     832:	8e 66       	ori	r24, 0x6E	; 110
     834:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     836:	83 b7       	in	r24, 0x33	; 51
     838:	81 68       	ori	r24, 0x81	; 129
     83a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0) | (1 << OCIE0);
     83c:	89 b7       	in	r24, 0x39	; 57
     83e:	83 60       	ori	r24, 0x03	; 3
     840:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     842:	12 be       	out	0x32, r1	; 50
	OCR0 = 125;
     844:	8d e7       	ldi	r24, 0x7D	; 125
     846:	8c bf       	out	0x3c, r24	; 60
	Recive_Data(String);
     848:	83 e3       	ldi	r24, 0x33	; 51
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Recive_Data>
	Transmit_Data("welcome we are PRISCA\0");
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
	sei();
     858:	78 94       	sei
}
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	08 95       	ret

00000868 <main>:
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	e4 97       	sbiw	r28, 0x34	; 52
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
    Init();
     87c:	0e 94 cd 03 	call	0x79a	; 0x79a <Init>
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     880:	45 e0       	ldi	r20, 0x05	; 5
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	65 e2       	ldi	r22, 0x25	; 37
     886:	72 e0       	ldi	r23, 0x02	; 2
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     890:	45 e0       	ldi	r20, 0x05	; 5
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	6b e0       	ldi	r22, 0x0B	; 11
     896:	72 e0       	ldi	r23, 0x02	; 2
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     8a0:	45 e0       	ldi	r20, 0x05	; 5
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	63 e8       	ldi	r22, 0x83	; 131
     8a6:	72 e0       	ldi	r23, 0x02	; 2
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     8b0:	45 e0       	ldi	r20, 0x05	; 5
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	61 ec       	ldi	r22, 0xC1	; 193
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	8f e0       	ldi	r24, 0x0F	; 15
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	SPMM[0] = atof(X_pos);
     8c0:	85 e2       	ldi	r24, 0x25	; 37
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
     8c8:	05 e1       	ldi	r16, 0x15	; 21
     8ca:	12 e0       	ldi	r17, 0x02	; 2
     8cc:	d8 01       	movw	r26, r16
     8ce:	6d 93       	st	X+, r22
     8d0:	7d 93       	st	X+, r23
     8d2:	8d 93       	st	X+, r24
     8d4:	9c 93       	st	X, r25
     8d6:	13 97       	sbiw	r26, 0x03	; 3
	SPMM[1] = atof(Y_pos);
     8d8:	8b e0       	ldi	r24, 0x0B	; 11
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
     8e0:	f8 01       	movw	r30, r16
     8e2:	64 83       	std	Z+4, r22	; 0x04
     8e4:	75 83       	std	Z+5, r23	; 0x05
     8e6:	86 83       	std	Z+6, r24	; 0x06
     8e8:	97 83       	std	Z+7, r25	; 0x07
	SPMM[2] = atof(Z_pos);
     8ea:	83 e8       	ldi	r24, 0x83	; 131
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
     8f2:	d8 01       	movw	r26, r16
     8f4:	18 96       	adiw	r26, 0x08	; 8
     8f6:	6d 93       	st	X+, r22
     8f8:	7d 93       	st	X+, r23
     8fa:	8d 93       	st	X+, r24
     8fc:	9c 93       	st	X, r25
     8fe:	1b 97       	sbiw	r26, 0x0b	; 11
	SPMM[4] = atof(E_pos);
     900:	81 ec       	ldi	r24, 0xC1	; 193
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
     908:	f8 01       	movw	r30, r16
     90a:	60 8b       	std	Z+16, r22	; 0x10
     90c:	71 8b       	std	Z+17, r23	; 0x11
     90e:	82 8b       	std	Z+18, r24	; 0x12
     910:	93 8b       	std	Z+19, r25	; 0x13
					Transmit_Data("ok\0");
					break;
				}
				status = 0;
				RXch = 0;
				STEP[0] = 0;
     912:	0f 2e       	mov	r0, r31
     914:	f7 ea       	ldi	r31, 0xA7	; 167
     916:	2f 2e       	mov	r2, r31
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	3f 2e       	mov	r3, r31
     91c:	f0 2d       	mov	r31, r0
							{
								STEP[0] = sub_function (&old_val_1, xc)*SPMM[0]*(I/I);     //call function to extract first step
								STEP[1] = sub_function (&old_val_2, yc)*SPMM[1]*(J/J);    //call function to extract second step
							}
						}
						STEP[2] = 0;
     91e:	29 aa       	std	Y+49, r2	; 0x31
     920:	3a aa       	std	Y+50, r3	; 0x32
						STEP[3] = SPMM[3];
     922:	0b ab       	std	Y+51, r16	; 0x33
     924:	1c ab       	std	Y+52, r17	; 0x34
	SPMM[2] = atof(Z_pos);
	SPMM[4] = atof(E_pos);
	/****************************************************/
	while (1)
	{
			if (RXch == 'M')
     926:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <RXch>
     92a:	8d 34       	cpi	r24, 0x4D	; 77
     92c:	09 f0       	breq	.+2      	; 0x930 <main+0xc8>
     92e:	00 c5       	rjmp	.+2560   	; 0x1330 <main+0xac8>
			{
				status = 1;
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <status>
				cli();
     936:	f8 94       	cli
				switch (val)
     938:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
     93c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
     940:	8b 36       	cpi	r24, 0x6B	; 107
     942:	91 05       	cpc	r25, r1
     944:	09 f4       	brne	.+2      	; 0x948 <main+0xe0>
     946:	c6 c2       	rjmp	.+1420   	; 0xed4 <main+0x66c>
     948:	3c f5       	brge	.+78     	; 0x998 <main+0x130>
     94a:	84 35       	cpi	r24, 0x54	; 84
     94c:	91 05       	cpc	r25, r1
     94e:	8c f4       	brge	.+34     	; 0x972 <main+0x10a>
     950:	82 35       	cpi	r24, 0x52	; 82
     952:	91 05       	cpc	r25, r1
     954:	0c f0       	brlt	.+2      	; 0x958 <main+0xf0>
     956:	62 c1       	rjmp	.+708    	; 0xc1c <main+0x3b4>
     958:	81 31       	cpi	r24, 0x11	; 17
     95a:	91 05       	cpc	r25, r1
     95c:	09 f4       	brne	.+2      	; 0x960 <main+0xf8>
     95e:	89 c0       	rjmp	.+274    	; 0xa72 <main+0x20a>
     960:	24 f4       	brge	.+8      	; 0x96a <main+0x102>
     962:	02 97       	sbiw	r24, 0x02	; 2
     964:	08 f4       	brcc	.+2      	; 0x968 <main+0x100>
     966:	4f c0       	rjmp	.+158    	; 0xa06 <main+0x19e>
     968:	d9 c4       	rjmp	.+2482   	; 0x131c <main+0xab4>
     96a:	42 97       	sbiw	r24, 0x12	; 18
     96c:	09 f4       	brne	.+2      	; 0x970 <main+0x108>
     96e:	88 c0       	rjmp	.+272    	; 0xa80 <main+0x218>
     970:	d5 c4       	rjmp	.+2474   	; 0x131c <main+0xab4>
     972:	8c 35       	cpi	r24, 0x5C	; 92
     974:	91 05       	cpc	r25, r1
     976:	09 f4       	brne	.+2      	; 0x97a <main+0x112>
     978:	83 c1       	rjmp	.+774    	; 0xc80 <main+0x418>
     97a:	2c f4       	brge	.+10     	; 0x986 <main+0x11e>
     97c:	84 35       	cpi	r24, 0x54	; 84
     97e:	91 05       	cpc	r25, r1
     980:	09 f4       	brne	.+2      	; 0x984 <main+0x11c>
     982:	7e c0       	rjmp	.+252    	; 0xa80 <main+0x218>
     984:	cb c4       	rjmp	.+2454   	; 0x131c <main+0xab4>
     986:	88 36       	cpi	r24, 0x68	; 104
     988:	91 05       	cpc	r25, r1
     98a:	09 f4       	brne	.+2      	; 0x98e <main+0x126>
     98c:	84 c2       	rjmp	.+1288   	; 0xe96 <main+0x62e>
     98e:	8a 36       	cpi	r24, 0x6A	; 106
     990:	91 05       	cpc	r25, r1
     992:	09 f4       	brne	.+2      	; 0x996 <main+0x12e>
     994:	92 c2       	rjmp	.+1316   	; 0xeba <main+0x652>
     996:	c2 c4       	rjmp	.+2436   	; 0x131c <main+0xab4>
     998:	8e 3c       	cpi	r24, 0xCE	; 206
     99a:	91 05       	cpc	r25, r1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <main+0x138>
     99e:	5c c3       	rjmp	.+1720   	; 0x1058 <main+0x7f0>
     9a0:	bc f4       	brge	.+46     	; 0x9d0 <main+0x168>
     9a2:	82 37       	cpi	r24, 0x72	; 114
     9a4:	91 05       	cpc	r25, r1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <main+0x142>
     9a8:	a4 c2       	rjmp	.+1352   	; 0xef2 <main+0x68a>
     9aa:	4c f4       	brge	.+18     	; 0x9be <main+0x156>
     9ac:	8d 36       	cpi	r24, 0x6D	; 109
     9ae:	91 05       	cpc	r25, r1
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <main+0x14c>
     9b2:	f0 c0       	rjmp	.+480    	; 0xb94 <main+0x32c>
     9b4:	8e 36       	cpi	r24, 0x6E	; 110
     9b6:	91 05       	cpc	r25, r1
     9b8:	09 f4       	brne	.+2      	; 0x9bc <main+0x154>
     9ba:	92 c2       	rjmp	.+1316   	; 0xee0 <main+0x678>
     9bc:	af c4       	rjmp	.+2398   	; 0x131c <main+0xab4>
     9be:	8c 38       	cpi	r24, 0x8C	; 140
     9c0:	91 05       	cpc	r25, r1
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <main+0x15e>
     9c4:	2a c3       	rjmp	.+1620   	; 0x101a <main+0x7b2>
     9c6:	8e 3b       	cpi	r24, 0xBE	; 190
     9c8:	91 05       	cpc	r25, r1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <main+0x166>
     9cc:	05 c1       	rjmp	.+522    	; 0xbd8 <main+0x370>
     9ce:	a6 c4       	rjmp	.+2380   	; 0x131c <main+0xab4>
     9d0:	85 3f       	cpi	r24, 0xF5	; 245
     9d2:	31 e0       	ldi	r19, 0x01	; 1
     9d4:	93 07       	cpc	r25, r19
     9d6:	09 f4       	brne	.+2      	; 0x9da <main+0x172>
     9d8:	7c c3       	rjmp	.+1784   	; 0x10d2 <main+0x86a>
     9da:	5c f4       	brge	.+22     	; 0x9f2 <main+0x18a>
     9dc:	8e 32       	cpi	r24, 0x2E	; 46
     9de:	51 e0       	ldi	r21, 0x01	; 1
     9e0:	95 07       	cpc	r25, r21
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <main+0x17e>
     9e4:	59 c3       	rjmp	.+1714   	; 0x1098 <main+0x830>
     9e6:	84 3f       	cpi	r24, 0xF4	; 244
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	96 07       	cpc	r25, r22
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <main+0x188>
     9ee:	48 c1       	rjmp	.+656    	; 0xc80 <main+0x418>
     9f0:	95 c4       	rjmp	.+2346   	; 0x131c <main+0xab4>
     9f2:	86 3f       	cpi	r24, 0xF6	; 246
     9f4:	71 e0       	ldi	r23, 0x01	; 1
     9f6:	97 07       	cpc	r25, r23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <main+0x194>
     9fa:	42 c1       	rjmp	.+644    	; 0xc80 <main+0x418>
     9fc:	87 3f       	cpi	r24, 0xF7	; 247
     9fe:	91 40       	sbci	r25, 0x01	; 1
     a00:	09 f4       	brne	.+2      	; 0xa04 <main+0x19c>
     a02:	bb c3       	rjmp	.+1910   	; 0x117a <main+0x912>
     a04:	8b c4       	rjmp	.+2326   	; 0x131c <main+0xab4>
				{
					case 0: case 1:
						STEP[0] = 0;
     a06:	f1 01       	movw	r30, r2
     a08:	10 82       	st	Z, r1
     a0a:	11 82       	std	Z+1, r1	; 0x01
     a0c:	12 82       	std	Z+2, r1	; 0x02
     a0e:	13 82       	std	Z+3, r1	; 0x03
						STEP[1] = 0;
     a10:	14 82       	std	Z+4, r1	; 0x04
     a12:	15 82       	std	Z+5, r1	; 0x05
     a14:	16 82       	std	Z+6, r1	; 0x06
     a16:	17 82       	std	Z+7, r1	; 0x07
						STEP[2] = 0;
     a18:	10 86       	std	Z+8, r1	; 0x08
     a1a:	11 86       	std	Z+9, r1	; 0x09
     a1c:	12 86       	std	Z+10, r1	; 0x0a
     a1e:	13 86       	std	Z+11, r1	; 0x0b
						STEP[3] = 0;
     a20:	14 86       	std	Z+12, r1	; 0x0c
     a22:	15 86       	std	Z+13, r1	; 0x0d
     a24:	16 86       	std	Z+14, r1	; 0x0e
     a26:	17 86       	std	Z+15, r1	; 0x0f
						F = 0;
     a28:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <F>
     a2c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <F+0x1>
     a30:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <F+0x2>
     a34:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <F+0x3>
						Fe = 0;
     a38:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <Fe>
     a3c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <Fe+0x1>
     a40:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <Fe+0x2>
     a44:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <Fe+0x3>
						SE0 = 0.0;
     a48:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <SE0>
     a4c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <SE0+0x1>
     a50:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <SE0+0x2>
     a54:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <SE0+0x3>
						SB = 0.0;
     a58:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <SB>
     a5c:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <SB+0x1>
     a60:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <SB+0x2>
     a64:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <SB+0x3>
						Transmit_Data("ok\0");
     a68:	87 e9       	ldi	r24, 0x97	; 151
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     a70:	59 c4       	rjmp	.+2226   	; 0x1324 <main+0xabc>
					case 17:
						motor_init();
     a72:	0e 94 5f 13 	call	0x26be	; 0x26be <motor_init>
						Transmit_Data("ok\0");
     a76:	87 e9       	ldi	r24, 0x97	; 151
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     a7e:	52 c4       	rjmp	.+2212   	; 0x1324 <main+0xabc>
					case 18: case 84:
						wait = (get_int(String ,'S')*1000);
     a80:	63 e5       	ldi	r22, 0x53	; 83
     a82:	83 e3       	ldi	r24, 0x33	; 51
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     a8a:	fc 01       	movw	r30, r24
     a8c:	28 ee       	ldi	r18, 0xE8	; 232
     a8e:	33 e0       	ldi	r19, 0x03	; 3
     a90:	e2 9f       	mul	r30, r18
     a92:	c0 01       	movw	r24, r0
     a94:	e3 9f       	mul	r30, r19
     a96:	90 0d       	add	r25, r0
     a98:	f2 9f       	mul	r31, r18
     a9a:	90 0d       	add	r25, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	09 2e       	mov	r0, r25
     aa0:	00 0c       	add	r0, r0
     aa2:	aa 0b       	sbc	r26, r26
     aa4:	bb 0b       	sbc	r27, r27
     aa6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <wait>
     aaa:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <wait+0x1>
     aae:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <wait+0x2>
     ab2:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <wait+0x3>
						XEN_DES = find(String ,'X');
     ab6:	68 e5       	ldi	r22, 0x58	; 88
     ab8:	83 e3       	ldi	r24, 0x33	; 51
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	0e 94 40 03 	call	0x680	; 0x680 <find>
     ac0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <XEN_DES>
						YEN_DES = find(String ,'Y');
     ac4:	69 e5       	ldi	r22, 0x59	; 89
     ac6:	83 e3       	ldi	r24, 0x33	; 51
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 40 03 	call	0x680	; 0x680 <find>
     ace:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <YEN_DES>
						ZEN_DES = find(String ,'Z');
     ad2:	6a e5       	ldi	r22, 0x5A	; 90
     ad4:	83 e3       	ldi	r24, 0x33	; 51
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	0e 94 40 03 	call	0x680	; 0x680 <find>
     adc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ZEN_DES>
						EEN_DES = find(String ,'E');
     ae0:	65 e4       	ldi	r22, 0x45	; 69
     ae2:	83 e3       	ldi	r24, 0x33	; 51
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 40 03 	call	0x680	; 0x680 <find>
     aea:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <EEN_DES>
						motor_EN_DES('X',XEN_DES);
     aee:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <XEN_DES>
     af2:	88 e5       	ldi	r24, 0x58	; 88
     af4:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
						motor_EN_DES('Y',YEN_DES);
     af8:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <YEN_DES>
     afc:	89 e5       	ldi	r24, 0x59	; 89
     afe:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
						motor_EN_DES('Z',YEN_DES);
     b02:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <YEN_DES>
     b06:	8a e5       	ldi	r24, 0x5A	; 90
     b08:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
						motor_EN_DES('E',EEN_DES);
     b0c:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <EEN_DES>
     b10:	85 e4       	ldi	r24, 0x45	; 69
     b12:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
						if(wait != 0)
     b16:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <wait>
     b1a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <wait+0x1>
     b1e:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <wait+0x2>
     b22:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <wait+0x3>
     b26:	89 2b       	or	r24, r25
     b28:	8a 2b       	or	r24, r26
     b2a:	8b 2b       	or	r24, r27
     b2c:	71 f1       	breq	.+92     	; 0xb8a <main+0x322>
						{
							sei();
     b2e:	78 94       	sei
							while(wait > 0)
     b30:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <wait>
     b34:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <wait+0x1>
     b38:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <wait+0x2>
     b3c:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <wait+0x3>
     b40:	18 16       	cp	r1, r24
     b42:	19 06       	cpc	r1, r25
     b44:	1a 06       	cpc	r1, r26
     b46:	1b 06       	cpc	r1, r27
     b48:	f4 f4       	brge	.+60     	; 0xb86 <main+0x31e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b4a:	8f e9       	ldi	r24, 0x9F	; 159
     b4c:	9f e0       	ldi	r25, 0x0F	; 15
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <main+0x2e6>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <main+0x2ec>
     b54:	00 00       	nop
							{
								_delay_ms(1);
								wait --;
     b56:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <wait>
     b5a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <wait+0x1>
     b5e:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <wait+0x2>
     b62:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <wait+0x3>
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	a1 09       	sbc	r26, r1
     b6a:	b1 09       	sbc	r27, r1
     b6c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <wait>
     b70:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <wait+0x1>
     b74:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <wait+0x2>
     b78:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <wait+0x3>
						motor_EN_DES('Z',YEN_DES);
						motor_EN_DES('E',EEN_DES);
						if(wait != 0)
						{
							sei();
							while(wait > 0)
     b7c:	18 16       	cp	r1, r24
     b7e:	19 06       	cpc	r1, r25
     b80:	1a 06       	cpc	r1, r26
     b82:	1b 06       	cpc	r1, r27
     b84:	14 f3       	brlt	.-60     	; 0xb4a <main+0x2e2>
							{
								_delay_ms(1);
								wait --;
							}
							motor_init();
     b86:	0e 94 5f 13 	call	0x26be	; 0x26be <motor_init>
						}
						Transmit_Data("ok\0");
     b8a:	87 e9       	ldi	r24, 0x97	; 151
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     b92:	c8 c3       	rjmp	.+1936   	; 0x1324 <main+0xabc>
					case 109:
						SE0 = get_value(String,'S');
     b94:	63 e5       	ldi	r22, 0x53	; 83
     b96:	83 e3       	ldi	r24, 0x33	; 51
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b9e:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <SE0>
     ba2:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <SE0+0x1>
     ba6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <SE0+0x2>
     baa:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <SE0+0x3>
						sei();
     bae:	78 94       	sei
						while(getTemp(T0) < SE0);
     bb0:	80 e4       	ldi	r24, 0x40	; 64
     bb2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     bb6:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <SE0>
     bba:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <SE0+0x1>
     bbe:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <SE0+0x2>
     bc2:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <SE0+0x3>
     bc6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     bca:	88 23       	and	r24, r24
     bcc:	8c f3       	brlt	.-30     	; 0xbb0 <main+0x348>
						Transmit_Data("ok\0");
     bce:	87 e9       	ldi	r24, 0x97	; 151
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     bd6:	a6 c3       	rjmp	.+1868   	; 0x1324 <main+0xabc>
					case 190:
						SB = get_value(String,'S');
     bd8:	63 e5       	ldi	r22, 0x53	; 83
     bda:	83 e3       	ldi	r24, 0x33	; 51
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     be2:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <SB>
     be6:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <SB+0x1>
     bea:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <SB+0x2>
     bee:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <SB+0x3>
						sei();
     bf2:	78 94       	sei
						while(getTemp(T2) < SB);
     bf4:	82 e4       	ldi	r24, 0x42	; 66
     bf6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     bfa:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <SB>
     bfe:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <SB+0x1>
     c02:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <SB+0x2>
     c06:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <SB+0x3>
     c0a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     c0e:	88 23       	and	r24, r24
     c10:	8c f3       	brlt	.-30     	; 0xbf4 <main+0x38c>
						Transmit_Data("ok\0");
     c12:	87 e9       	ldi	r24, 0x97	; 151
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     c1a:	84 c3       	rjmp	.+1800   	; 0x1324 <main+0xabc>
					case 82:case 83:
						old_val_1 = 0;
     c1c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <old_val_1>
     c20:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <old_val_1+0x1>
     c24:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <old_val_1+0x2>
     c28:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <old_val_1+0x3>
						old_val_2 = 0;
     c2c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <old_val_2>
     c30:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <old_val_2+0x1>
     c34:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <old_val_2+0x2>
     c38:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <old_val_2+0x3>
						old_val_3 = 0;
     c3c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
     c40:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
     c44:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end+0x2>
     c48:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x3>
						STEP[0] = 0;
     c4c:	d1 01       	movw	r26, r2
     c4e:	1d 92       	st	X+, r1
     c50:	1d 92       	st	X+, r1
     c52:	1d 92       	st	X+, r1
     c54:	1c 92       	st	X, r1
     c56:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = 0;
     c58:	f1 01       	movw	r30, r2
     c5a:	14 82       	std	Z+4, r1	; 0x04
     c5c:	15 82       	std	Z+5, r1	; 0x05
     c5e:	16 82       	std	Z+6, r1	; 0x06
     c60:	17 82       	std	Z+7, r1	; 0x07
						STEP[2] = 0;
     c62:	18 96       	adiw	r26, 0x08	; 8
     c64:	1d 92       	st	X+, r1
     c66:	1d 92       	st	X+, r1
     c68:	1d 92       	st	X+, r1
     c6a:	1c 92       	st	X, r1
     c6c:	1b 97       	sbiw	r26, 0x0b	; 11
						STEP[3] = 0;
     c6e:	14 86       	std	Z+12, r1	; 0x0c
     c70:	15 86       	std	Z+13, r1	; 0x0d
     c72:	16 86       	std	Z+14, r1	; 0x0e
     c74:	17 86       	std	Z+15, r1	; 0x0f
						Transmit_Data("ok\0");
     c76:	87 e9       	ldi	r24, 0x97	; 151
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     c7e:	52 c3       	rjmp	.+1700   	; 0x1324 <main+0xabc>
     c80:	e5 e2       	ldi	r30, 0x25	; 37
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	4b e0       	ldi	r20, 0x0B	; 11
     c86:	52 e0       	ldi	r21, 0x02	; 2
     c88:	23 e8       	ldi	r18, 0x83	; 131
     c8a:	32 e0       	ldi	r19, 0x02	; 2
     c8c:	a1 ec       	ldi	r26, 0xC1	; 193
     c8e:	b1 e0       	ldi	r27, 0x01	; 1
     c90:	8d 01       	movw	r16, r26
					case 92:case 500:case 502:
						for (int i = 0 ; i < 10 ; i ++)
						{
							X_pos[i] = 0;
     c92:	11 92       	st	Z+, r1
							Y_pos[i] = 0;
     c94:	da 01       	movw	r26, r20
     c96:	1d 92       	st	X+, r1
     c98:	ad 01       	movw	r20, r26
							Z_pos[i] = 0;
     c9a:	d9 01       	movw	r26, r18
     c9c:	1d 92       	st	X+, r1
     c9e:	9d 01       	movw	r18, r26
							E_pos[i] = 0;
     ca0:	d8 01       	movw	r26, r16
     ca2:	1d 92       	st	X+, r1
     ca4:	8d 01       	movw	r16, r26
						STEP[2] = 0;
						STEP[3] = 0;
						Transmit_Data("ok\0");
					break;
					case 92:case 500:case 502:
						for (int i = 0 ; i < 10 ; i ++)
     ca6:	6f e2       	ldi	r22, 0x2F	; 47
     ca8:	72 e0       	ldi	r23, 0x02	; 2
     caa:	6e 17       	cp	r22, r30
     cac:	7f 07       	cpc	r23, r31
     cae:	89 f7       	brne	.-30     	; 0xc92 <main+0x42a>
							X_pos[i] = 0;
							Y_pos[i] = 0;
							Z_pos[i] = 0;
							E_pos[i] = 0;
						}
						if (val == 92)
     cb0:	8c 35       	cpi	r24, 0x5C	; 92
     cb2:	91 05       	cpc	r25, r1
     cb4:	99 f5       	brne	.+102    	; 0xd1c <main+0x4b4>
						{
							SPMM[0] = get_value(String,'X');
     cb6:	68 e5       	ldi	r22, 0x58	; 88
     cb8:	83 e3       	ldi	r24, 0x33	; 51
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     cc0:	a5 e1       	ldi	r26, 0x15	; 21
     cc2:	b2 e0       	ldi	r27, 0x02	; 2
     cc4:	6d 93       	st	X+, r22
     cc6:	7d 93       	st	X+, r23
     cc8:	8d 93       	st	X+, r24
     cca:	9c 93       	st	X, r25
     ccc:	13 97       	sbiw	r26, 0x03	; 3
							SPMM[1] = get_value(String,'Y');
     cce:	69 e5       	ldi	r22, 0x59	; 89
     cd0:	83 e3       	ldi	r24, 0x33	; 51
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     cd8:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <SPMM+0x4>
     cdc:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <SPMM+0x5>
     ce0:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <SPMM+0x6>
     ce4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <SPMM+0x7>
							SPMM[2] = get_value(String,'Z');
     ce8:	6a e5       	ldi	r22, 0x5A	; 90
     cea:	83 e3       	ldi	r24, 0x33	; 51
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     cf2:	60 93 1d 02 	sts	0x021D, r22	; 0x80021d <SPMM+0x8>
     cf6:	70 93 1e 02 	sts	0x021E, r23	; 0x80021e <SPMM+0x9>
     cfa:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <SPMM+0xa>
     cfe:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <SPMM+0xb>
							SPMM[3] = get_value(String,'E');
     d02:	65 e4       	ldi	r22, 0x45	; 69
     d04:	83 e3       	ldi	r24, 0x33	; 51
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d0c:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <SPMM+0xc>
     d10:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <SPMM+0xd>
     d14:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <SPMM+0xe>
     d18:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <SPMM+0xf>
						}
						if (val == 502)
     d1c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
     d20:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
     d24:	86 3f       	cpi	r24, 0xF6	; 246
     d26:	91 40       	sbci	r25, 0x01	; 1
     d28:	e1 f5       	brne	.+120    	; 0xda2 <main+0x53a>
						{
							SPMM[0] = FSPMM[0];
     d2a:	e0 e7       	ldi	r30, 0x70	; 112
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	a2 81       	ldd	r26, Z+2	; 0x02
     d34:	b3 81       	ldd	r27, Z+3	; 0x03
     d36:	e5 e1       	ldi	r30, 0x15	; 21
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
							SPMM[1] = FSPMM[1];
     d42:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FSPMM+0x4>
     d46:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FSPMM+0x5>
     d4a:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FSPMM+0x6>
     d4e:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FSPMM+0x7>
     d52:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPMM+0x4>
     d56:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <SPMM+0x5>
     d5a:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <SPMM+0x6>
     d5e:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <SPMM+0x7>
							SPMM[2] = FSPMM[2];
     d62:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FSPMM+0x8>
     d66:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FSPMM+0x9>
     d6a:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FSPMM+0xa>
     d6e:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FSPMM+0xb>
     d72:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <SPMM+0x8>
     d76:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <SPMM+0x9>
     d7a:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <SPMM+0xa>
     d7e:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <SPMM+0xb>
							SPMM[3] = FSPMM[3];
     d82:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FSPMM+0xc>
     d86:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FSPMM+0xd>
     d8a:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FSPMM+0xe>
     d8e:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FSPMM+0xf>
     d92:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <SPMM+0xc>
     d96:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <SPMM+0xd>
     d9a:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <SPMM+0xe>
     d9e:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <SPMM+0xf>
						}
						sprintf(X_pos,dtostrf(SPMM[0], 2,3,"%f"));
     da2:	a5 e1       	ldi	r26, 0x15	; 21
     da4:	b2 e0       	ldi	r27, 0x02	; 2
     da6:	6d 91       	ld	r22, X+
     da8:	7d 91       	ld	r23, X+
     daa:	8d 91       	ld	r24, X+
     dac:	9c 91       	ld	r25, X
     dae:	0e e4       	ldi	r16, 0x4E	; 78
     db0:	11 e0       	ldi	r17, 0x01	; 1
     db2:	23 e0       	ldi	r18, 0x03	; 3
     db4:	42 e0       	ldi	r20, 0x02	; 2
     db6:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	e5 e2       	ldi	r30, 0x25	; 37
     dc0:	f2 e0       	ldi	r31, 0x02	; 2
     dc2:	ff 93       	push	r31
     dc4:	ef 93       	push	r30
     dc6:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Y_pos,dtostrf(SPMM[1], 2,3,"%f"));
     dca:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <SPMM+0x4>
     dce:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <SPMM+0x5>
     dd2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SPMM+0x6>
     dd6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <SPMM+0x7>
     dda:	23 e0       	ldi	r18, 0x03	; 3
     ddc:	42 e0       	ldi	r20, 0x02	; 2
     dde:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	4b e0       	ldi	r20, 0x0B	; 11
     de8:	52 e0       	ldi	r21, 0x02	; 2
     dea:	5f 93       	push	r21
     dec:	4f 93       	push	r20
     dee:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Z_pos,dtostrf(SPMM[2], 2,3,"%f"));
     df2:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <SPMM+0x8>
     df6:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <SPMM+0x9>
     dfa:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SPMM+0xa>
     dfe:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SPMM+0xb>
     e02:	23 e0       	ldi	r18, 0x03	; 3
     e04:	42 e0       	ldi	r20, 0x02	; 2
     e06:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	83 e8       	ldi	r24, 0x83	; 131
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(E_pos,dtostrf(SPMM[3], 2,3,"%f"));
     e1a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <SPMM+0xc>
     e1e:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <SPMM+0xd>
     e22:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <SPMM+0xe>
     e26:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <SPMM+0xf>
     e2a:	23 e0       	ldi	r18, 0x03	; 3
     e2c:	42 e0       	ldi	r20, 0x02	; 2
     e2e:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     e32:	9f 93       	push	r25
     e34:	8f 93       	push	r24
     e36:	e1 ec       	ldi	r30, 0xC1	; 193
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	ff 93       	push	r31
     e3c:	ef 93       	push	r30
     e3e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     e42:	45 e0       	ldi	r20, 0x05	; 5
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	65 e2       	ldi	r22, 0x25	; 37
     e48:	72 e0       	ldi	r23, 0x02	; 2
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
						EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     e52:	45 e0       	ldi	r20, 0x05	; 5
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	6b e0       	ldi	r22, 0x0B	; 11
     e58:	72 e0       	ldi	r23, 0x02	; 2
     e5a:	85 e0       	ldi	r24, 0x05	; 5
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
						EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     e62:	45 e0       	ldi	r20, 0x05	; 5
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	63 e8       	ldi	r22, 0x83	; 131
     e68:	72 e0       	ldi	r23, 0x02	; 2
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
						EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     e72:	45 e0       	ldi	r20, 0x05	; 5
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	61 ec       	ldi	r22, 0xC1	; 193
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	8f e0       	ldi	r24, 0x0F	; 15
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
						Transmit_Data("ok\0");
     e82:	87 e9       	ldi	r24, 0x97	; 151
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	47 c2       	rjmp	.+1166   	; 0x1324 <main+0xabc>
					case 104:
						SE0 = get_value(String,'S');
     e96:	63 e5       	ldi	r22, 0x53	; 83
     e98:	83 e3       	ldi	r24, 0x33	; 51
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ea0:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <SE0>
     ea4:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <SE0+0x1>
     ea8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <SE0+0x2>
     eac:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <SE0+0x3>
						Transmit_Data("ok\0");
     eb0:	87 e9       	ldi	r24, 0x97	; 151
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     eb8:	35 c2       	rjmp	.+1130   	; 0x1324 <main+0xabc>
					case 106:
						OCR2 = get_value(String,'S');
     eba:	63 e5       	ldi	r22, 0x53	; 83
     ebc:	83 e3       	ldi	r24, 0x33	; 51
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ec4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     ec8:	63 bd       	out	0x23, r22	; 35
						Transmit_Data("ok\0");
     eca:	87 e9       	ldi	r24, 0x97	; 151
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     ed2:	28 c2       	rjmp	.+1104   	; 0x1324 <main+0xabc>
					case 107:
						OCR2 = 0;
     ed4:	13 bc       	out	0x23, r1	; 35
						Transmit_Data("ok\0");
     ed6:	87 e9       	ldi	r24, 0x97	; 151
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;	
     ede:	22 c2       	rjmp	.+1092   	; 0x1324 <main+0xabc>
					case 110:
						NumberOfPLine = 0;
     ee0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <NumberOfPLine+0x1>
     ee4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <NumberOfPLine>
						Transmit_Data("ok\0");
     ee8:	87 e9       	ldi	r24, 0x97	; 151
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
     ef0:	19 c2       	rjmp	.+1074   	; 0x1324 <main+0xabc>
     ef2:	e5 e2       	ldi	r30, 0x25	; 37
     ef4:	f2 e0       	ldi	r31, 0x02	; 2
     ef6:	8b e0       	ldi	r24, 0x0B	; 11
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	a3 e8       	ldi	r26, 0x83	; 131
     efc:	b2 e0       	ldi	r27, 0x02	; 2
     efe:	ad 01       	movw	r20, r26
					case 114:
						for (int i = 0 ; i < 10 ; i ++)
						{
							X_pos[i] = 0;
     f00:	11 92       	st	Z+, r1
							Y_pos[i] = 0;
     f02:	dc 01       	movw	r26, r24
     f04:	1d 92       	st	X+, r1
     f06:	cd 01       	movw	r24, r26
							Z_pos[i] = 0;
     f08:	da 01       	movw	r26, r20
     f0a:	1d 92       	st	X+, r1
     f0c:	ad 01       	movw	r20, r26
					case 110:
						NumberOfPLine = 0;
						Transmit_Data("ok\0");
					break;
					case 114:
						for (int i = 0 ; i < 10 ; i ++)
     f0e:	b2 e0       	ldi	r27, 0x02	; 2
     f10:	ef 32       	cpi	r30, 0x2F	; 47
     f12:	fb 07       	cpc	r31, r27
     f14:	a9 f7       	brne	.-22     	; 0xf00 <main+0x698>
						{
							X_pos[i] = 0;
							Y_pos[i] = 0;
							Z_pos[i] = 0;
						}
						sprintf(X_pos,dtostrf(old_val_1, 2,3,"%f"));
     f16:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <old_val_1>
     f1a:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <old_val_1+0x1>
     f1e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <old_val_1+0x2>
     f22:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <old_val_1+0x3>
     f26:	0e e4       	ldi	r16, 0x4E	; 78
     f28:	11 e0       	ldi	r17, 0x01	; 1
     f2a:	23 e0       	ldi	r18, 0x03	; 3
     f2c:	42 e0       	ldi	r20, 0x02	; 2
     f2e:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	e5 e2       	ldi	r30, 0x25	; 37
     f38:	f2 e0       	ldi	r31, 0x02	; 2
     f3a:	ff 93       	push	r31
     f3c:	ef 93       	push	r30
     f3e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Y_pos,dtostrf(old_val_2, 2,3,"%f"));
     f42:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <old_val_2>
     f46:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <old_val_2+0x1>
     f4a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <old_val_2+0x2>
     f4e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <old_val_2+0x3>
     f52:	23 e0       	ldi	r18, 0x03	; 3
     f54:	42 e0       	ldi	r20, 0x02	; 2
     f56:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	4b e0       	ldi	r20, 0x0B	; 11
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	5f 93       	push	r21
     f64:	4f 93       	push	r20
     f66:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Z_pos,dtostrf(old_val_3, 2,3,"%f"));
     f6a:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <__data_end>
     f6e:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <__data_end+0x1>
     f72:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end+0x2>
     f76:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x3>
     f7a:	23 e0       	ldi	r18, 0x03	; 3
     f7c:	42 e0       	ldi	r20, 0x02	; 2
     f7e:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	83 e8       	ldi	r24, 0x83	; 131
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	9f 93       	push	r25
     f8c:	8f 93       	push	r24
     f8e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						char pos[21]={'X',
     f92:	88 e5       	ldi	r24, 0x58	; 88
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	e5 e2       	ldi	r30, 0x25	; 37
     f98:	f2 e0       	ldi	r31, 0x02	; 2
     f9a:	80 81       	ld	r24, Z
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <X_pos+0x1>
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <X_pos+0x2>
     fa8:	8c 83       	std	Y+4, r24	; 0x04
     faa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <X_pos+0x3>
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <X_pos+0x4>
     fb4:	8e 83       	std	Y+6, r24	; 0x06
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	99 e5       	ldi	r25, 0x59	; 89
     fbc:	98 87       	std	Y+8, r25	; 0x08
     fbe:	ab e0       	ldi	r26, 0x0B	; 11
     fc0:	b2 e0       	ldi	r27, 0x02	; 2
     fc2:	9c 91       	ld	r25, X
     fc4:	99 87       	std	Y+9, r25	; 0x09
     fc6:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <Y_pos+0x1>
     fca:	9a 87       	std	Y+10, r25	; 0x0a
     fcc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Y_pos+0x2>
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <Y_pos+0x3>
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Y_pos+0x4>
     fdc:	9d 87       	std	Y+13, r25	; 0x0d
     fde:	8e 87       	std	Y+14, r24	; 0x0e
     fe0:	8a e5       	ldi	r24, 0x5A	; 90
     fe2:	8f 87       	std	Y+15, r24	; 0x0f
     fe4:	e3 e8       	ldi	r30, 0x83	; 131
     fe6:	f2 e0       	ldi	r31, 0x02	; 2
     fe8:	80 81       	ld	r24, Z
     fea:	88 8b       	std	Y+16, r24	; 0x10
     fec:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <Z_pos+0x1>
     ff0:	89 8b       	std	Y+17, r24	; 0x11
     ff2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Z_pos+0x2>
     ff6:	8a 8b       	std	Y+18, r24	; 0x12
     ff8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Z_pos+0x3>
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <Z_pos+0x4>
    1002:	8c 8b       	std	Y+20, r24	; 0x14
    1004:	1d 8a       	std	Y+21, r1	; 0x15
									X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],
									' ','Y',
									Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
									' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\0'};
						Transmit_Data(pos);
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	85 c1       	rjmp	.+778    	; 0x1324 <main+0xabc>
					case 140:
						SB = get_value(String,'S');
    101a:	63 e5       	ldi	r22, 0x53	; 83
    101c:	83 e3       	ldi	r24, 0x33	; 51
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1024:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <SB>
    1028:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <SB+0x1>
    102c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <SB+0x2>
    1030:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <SB+0x3>
						if (SB == 0)
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    103e:	81 11       	cpse	r24, r1
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <main+0x7e0>
						{
							BED_Activ = 0;
    1042:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <BED_Activ>
    1046:	03 c0       	rjmp	.+6      	; 0x104e <main+0x7e6>
						}
						else
						{
							BED_Activ = 1;
    1048:	31 e0       	ldi	r19, 0x01	; 1
    104a:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <BED_Activ>
						}
						Transmit_Data("ok\0");
    104e:	87 e9       	ldi	r24, 0x97	; 151
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;		
    1056:	66 c1       	rjmp	.+716    	; 0x1324 <main+0xabc>
					case 206:
						old_val_1 = 0;
    1058:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <old_val_1>
    105c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <old_val_1+0x1>
    1060:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <old_val_1+0x2>
    1064:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <old_val_1+0x3>
						old_val_2 = 0;
    1068:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <old_val_2>
    106c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <old_val_2+0x1>
    1070:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <old_val_2+0x2>
    1074:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <old_val_2+0x3>
						old_val_3 = 0;
    1078:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
    107c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
    1080:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end+0x2>
    1084:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x3>
						homeSet = 1;
    1088:	41 e0       	ldi	r20, 0x01	; 1
    108a:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <homeSet>
						Transmit_Data("ok\0");
    108e:	87 e9       	ldi	r24, 0x97	; 151
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    1096:	46 c1       	rjmp	.+652    	; 0x1324 <main+0xabc>
					case 302:
						SE0 = get_value(String,'S');
    1098:	63 e5       	ldi	r22, 0x53	; 83
    109a:	83 e3       	ldi	r24, 0x33	; 51
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    10a2:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <SE0>
    10a6:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <SE0+0x1>
    10aa:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <SE0+0x2>
    10ae:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <SE0+0x3>
						if (SE0 <= 25 )
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	48 ec       	ldi	r20, 0xC8	; 200
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	1c f0       	brlt	.+6      	; 0x10c8 <main+0x860>
						{
							Fextrud = 1;
    10c2:	51 e0       	ldi	r21, 0x01	; 1
    10c4:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <Fextrud>
						}
						Transmit_Data("ok\0");
    10c8:	87 e9       	ldi	r24, 0x97	; 151
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    10d0:	29 c1       	rjmp	.+594    	; 0x1324 <main+0xabc>
					case 501:
						EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    10d2:	45 e0       	ldi	r20, 0x05	; 5
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	65 e2       	ldi	r22, 0x25	; 37
    10d8:	72 e0       	ldi	r23, 0x02	; 2
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
						EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    10e2:	45 e0       	ldi	r20, 0x05	; 5
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	6b e0       	ldi	r22, 0x0B	; 11
    10e8:	72 e0       	ldi	r23, 0x02	; 2
    10ea:	85 e0       	ldi	r24, 0x05	; 5
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
						EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    10f2:	45 e0       	ldi	r20, 0x05	; 5
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	63 e8       	ldi	r22, 0x83	; 131
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	8a e0       	ldi	r24, 0x0A	; 10
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
						EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    1102:	45 e0       	ldi	r20, 0x05	; 5
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	61 ec       	ldi	r22, 0xC1	; 193
    1108:	71 e0       	ldi	r23, 0x01	; 1
    110a:	8f e0       	ldi	r24, 0x0F	; 15
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
						SPMM[0] = atof(X_pos);
    1112:	85 e2       	ldi	r24, 0x25	; 37
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
    111a:	a5 e1       	ldi	r26, 0x15	; 21
    111c:	b2 e0       	ldi	r27, 0x02	; 2
    111e:	6d 93       	st	X+, r22
    1120:	7d 93       	st	X+, r23
    1122:	8d 93       	st	X+, r24
    1124:	9c 93       	st	X, r25
    1126:	13 97       	sbiw	r26, 0x03	; 3
						SPMM[1] = atof(Y_pos);
    1128:	8b e0       	ldi	r24, 0x0B	; 11
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
    1130:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <SPMM+0x4>
    1134:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <SPMM+0x5>
    1138:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <SPMM+0x6>
    113c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <SPMM+0x7>
						SPMM[2] = atof(Z_pos);
    1140:	83 e8       	ldi	r24, 0x83	; 131
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
    1148:	60 93 1d 02 	sts	0x021D, r22	; 0x80021d <SPMM+0x8>
    114c:	70 93 1e 02 	sts	0x021E, r23	; 0x80021e <SPMM+0x9>
    1150:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <SPMM+0xa>
    1154:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <SPMM+0xb>
						SPMM[3] = atof(E_pos);
    1158:	81 ec       	ldi	r24, 0xC1	; 193
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 ad 18 	call	0x315a	; 0x315a <atof>
    1160:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <SPMM+0xc>
    1164:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <SPMM+0xd>
    1168:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <SPMM+0xe>
    116c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <SPMM+0xf>
						Transmit_Data("ok\0");
    1170:	87 e9       	ldi	r24, 0x97	; 151
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    1178:	d5 c0       	rjmp	.+426    	; 0x1324 <main+0xabc>
    117a:	e5 e2       	ldi	r30, 0x25	; 37
    117c:	f2 e0       	ldi	r31, 0x02	; 2
    117e:	2b e0       	ldi	r18, 0x0B	; 11
    1180:	32 e0       	ldi	r19, 0x02	; 2
    1182:	83 e8       	ldi	r24, 0x83	; 131
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	a1 ec       	ldi	r26, 0xC1	; 193
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	bd 01       	movw	r22, r26
					case 503:
						for (int i = 0 ; i < 10 ; i ++)
						{
							X_pos[i] = 0;
    118c:	11 92       	st	Z+, r1
							Y_pos[i] = 0;
    118e:	d9 01       	movw	r26, r18
    1190:	1d 92       	st	X+, r1
    1192:	9d 01       	movw	r18, r26
							Z_pos[i] = 0;
    1194:	dc 01       	movw	r26, r24
    1196:	1d 92       	st	X+, r1
    1198:	cd 01       	movw	r24, r26
							E_pos[i] = 0;
    119a:	db 01       	movw	r26, r22
    119c:	1d 92       	st	X+, r1
    119e:	bd 01       	movw	r22, r26
						SPMM[2] = atof(Z_pos);
						SPMM[3] = atof(E_pos);
						Transmit_Data("ok\0");
					break;
					case 503:
						for (int i = 0 ; i < 10 ; i ++)
    11a0:	b2 e0       	ldi	r27, 0x02	; 2
    11a2:	ef 32       	cpi	r30, 0x2F	; 47
    11a4:	fb 07       	cpc	r31, r27
    11a6:	91 f7       	brne	.-28     	; 0x118c <main+0x924>
							X_pos[i] = 0;
							Y_pos[i] = 0;
							Z_pos[i] = 0;
							E_pos[i] = 0;
						}
						sprintf(X_pos,dtostrf(SPMM[0], 2,3,"%f"));
    11a8:	e5 e1       	ldi	r30, 0x15	; 21
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	0e e4       	ldi	r16, 0x4E	; 78
    11b6:	11 e0       	ldi	r17, 0x01	; 1
    11b8:	23 e0       	ldi	r18, 0x03	; 3
    11ba:	42 e0       	ldi	r20, 0x02	; 2
    11bc:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	25 e2       	ldi	r18, 0x25	; 37
    11c6:	32 e0       	ldi	r19, 0x02	; 2
    11c8:	3f 93       	push	r19
    11ca:	2f 93       	push	r18
    11cc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Y_pos,dtostrf(SPMM[1], 2,3,"%f"));
    11d0:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <SPMM+0x4>
    11d4:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <SPMM+0x5>
    11d8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SPMM+0x6>
    11dc:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <SPMM+0x7>
    11e0:	23 e0       	ldi	r18, 0x03	; 3
    11e2:	42 e0       	ldi	r20, 0x02	; 2
    11e4:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	6b e0       	ldi	r22, 0x0B	; 11
    11ee:	72 e0       	ldi	r23, 0x02	; 2
    11f0:	7f 93       	push	r23
    11f2:	6f 93       	push	r22
    11f4:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(Z_pos,dtostrf(SPMM[2], 2,3,"%f"));
    11f8:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <SPMM+0x8>
    11fc:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <SPMM+0x9>
    1200:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SPMM+0xa>
    1204:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SPMM+0xb>
    1208:	23 e0       	ldi	r18, 0x03	; 3
    120a:	42 e0       	ldi	r20, 0x02	; 2
    120c:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	a3 e8       	ldi	r26, 0x83	; 131
    1216:	b2 e0       	ldi	r27, 0x02	; 2
    1218:	bf 93       	push	r27
    121a:	af 93       	push	r26
    121c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						sprintf(E_pos,dtostrf(SPMM[3], 2,3,"%f"));
    1220:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <SPMM+0xc>
    1224:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <SPMM+0xd>
    1228:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <SPMM+0xe>
    122c:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <SPMM+0xf>
    1230:	23 e0       	ldi	r18, 0x03	; 3
    1232:	42 e0       	ldi	r20, 0x02	; 2
    1234:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	21 ec       	ldi	r18, 0xC1	; 193
    123e:	31 e0       	ldi	r19, 0x01	; 1
    1240:	3f 93       	push	r19
    1242:	2f 93       	push	r18
    1244:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
						char acc[44]={'X',
    1248:	88 e5       	ldi	r24, 0x58	; 88
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	a5 e2       	ldi	r26, 0x25	; 37
    124e:	b2 e0       	ldi	r27, 0x02	; 2
    1250:	8c 91       	ld	r24, X
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <X_pos+0x1>
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <X_pos+0x2>
    125e:	8c 83       	std	Y+4, r24	; 0x04
    1260:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <X_pos+0x3>
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <X_pos+0x4>
    126a:	8e 83       	std	Y+6, r24	; 0x06
    126c:	23 e7       	ldi	r18, 0x73	; 115
    126e:	2f 83       	std	Y+7, r18	; 0x07
    1270:	9f e2       	ldi	r25, 0x2F	; 47
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	8d e6       	ldi	r24, 0x6D	; 109
    1276:	89 87       	std	Y+9, r24	; 0x09
    1278:	8a 87       	std	Y+10, r24	; 0x0a
    127a:	30 e2       	ldi	r19, 0x20	; 32
    127c:	3b 87       	std	Y+11, r19	; 0x0b
    127e:	49 e5       	ldi	r20, 0x59	; 89
    1280:	4c 87       	std	Y+12, r20	; 0x0c
    1282:	eb e0       	ldi	r30, 0x0B	; 11
    1284:	f2 e0       	ldi	r31, 0x02	; 2
    1286:	40 81       	ld	r20, Z
    1288:	4d 87       	std	Y+13, r20	; 0x0d
    128a:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Y_pos+0x1>
    128e:	4e 87       	std	Y+14, r20	; 0x0e
    1290:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <Y_pos+0x2>
    1294:	4f 87       	std	Y+15, r20	; 0x0f
    1296:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <Y_pos+0x3>
    129a:	48 8b       	std	Y+16, r20	; 0x10
    129c:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <Y_pos+0x4>
    12a0:	49 8b       	std	Y+17, r20	; 0x11
    12a2:	2a 8b       	std	Y+18, r18	; 0x12
    12a4:	9b 8b       	std	Y+19, r25	; 0x13
    12a6:	8c 8b       	std	Y+20, r24	; 0x14
    12a8:	8d 8b       	std	Y+21, r24	; 0x15
    12aa:	3e 8b       	std	Y+22, r19	; 0x16
    12ac:	4a e5       	ldi	r20, 0x5A	; 90
    12ae:	4f 8b       	std	Y+23, r20	; 0x17
    12b0:	a3 e8       	ldi	r26, 0x83	; 131
    12b2:	b2 e0       	ldi	r27, 0x02	; 2
    12b4:	4c 91       	ld	r20, X
    12b6:	48 8f       	std	Y+24, r20	; 0x18
    12b8:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <Z_pos+0x1>
    12bc:	49 8f       	std	Y+25, r20	; 0x19
    12be:	40 91 85 02 	lds	r20, 0x0285	; 0x800285 <Z_pos+0x2>
    12c2:	4a 8f       	std	Y+26, r20	; 0x1a
    12c4:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <Z_pos+0x3>
    12c8:	4b 8f       	std	Y+27, r20	; 0x1b
    12ca:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <Z_pos+0x4>
    12ce:	4c 8f       	std	Y+28, r20	; 0x1c
    12d0:	2d 8f       	std	Y+29, r18	; 0x1d
    12d2:	9e 8f       	std	Y+30, r25	; 0x1e
    12d4:	8f 8f       	std	Y+31, r24	; 0x1f
    12d6:	88 a3       	std	Y+32, r24	; 0x20
    12d8:	39 a3       	std	Y+33, r19	; 0x21
    12da:	35 e4       	ldi	r19, 0x45	; 69
    12dc:	3a a3       	std	Y+34, r19	; 0x22
    12de:	e1 ec       	ldi	r30, 0xC1	; 193
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	30 81       	ld	r19, Z
    12e4:	3b a3       	std	Y+35, r19	; 0x23
    12e6:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <E_pos+0x1>
    12ea:	3c a3       	std	Y+36, r19	; 0x24
    12ec:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <E_pos+0x2>
    12f0:	3d a3       	std	Y+37, r19	; 0x25
    12f2:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <E_pos+0x3>
    12f6:	3e a3       	std	Y+38, r19	; 0x26
    12f8:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <E_pos+0x4>
    12fc:	3f a3       	std	Y+39, r19	; 0x27
    12fe:	28 a7       	std	Y+40, r18	; 0x28
    1300:	99 a7       	std	Y+41, r25	; 0x29
    1302:	8a a7       	std	Y+42, r24	; 0x2a
    1304:	8b a7       	std	Y+43, r24	; 0x2b
    1306:	1c a6       	std	Y+44, r1	; 0x2c
							X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
							' ','Y',
							Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
							's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
							' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\0'};
						Transmit_Data(acc);
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <main+0xabc>
					default:
						RXch2 = RXch ;
    131c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <RXch>
    1320:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <RXch2>
					break;
				}
				status = 0;
    1324:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <status>
				RXch = 0;
    1328:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <RXch>
				sei();
    132c:	78 94       	sei
    132e:	fb ca       	rjmp	.-2570   	; 0x926 <main+0xbe>
			}
			else if (RXch == 'G')
    1330:	87 34       	cpi	r24, 0x47	; 71
    1332:	09 f0       	breq	.+2      	; 0x1336 <main+0xace>
    1334:	f8 ca       	rjmp	.-2576   	; 0x926 <main+0xbe>
			{
				cli();
    1336:	f8 94       	cli
				status = 1;
    1338:	31 e0       	ldi	r19, 0x01	; 1
    133a:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <status>
				switch (val)
    133e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    1342:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	91 05       	cpc	r25, r1
    134a:	3c f4       	brge	.+14     	; 0x135a <main+0xaf2>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	0c f0       	brlt	.+2      	; 0x1354 <main+0xaec>
    1352:	91 c2       	rjmp	.+1314   	; 0x1876 <main+0x100e>
    1354:	99 23       	and	r25, r25
    1356:	54 f4       	brge	.+20     	; 0x136c <main+0xb04>
    1358:	1d c5       	rjmp	.+2618   	; 0x1d94 <main+0x152c>
    135a:	8c 31       	cpi	r24, 0x1C	; 28
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <main+0xafa>
    1360:	10 c5       	rjmp	.+2592   	; 0x1d82 <main+0x151a>
    1362:	8c 35       	cpi	r24, 0x5C	; 92
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <main+0xb02>
    1368:	11 c5       	rjmp	.+2594   	; 0x1d8c <main+0x1524>
    136a:	14 c5       	rjmp	.+2600   	; 0x1d94 <main+0x152c>
				{
					case 0:case 1:
						motor_init();
    136c:	0e 94 5f 13 	call	0x26be	; 0x26be <motor_init>
						STEP[0] = find(String,'X');
    1370:	68 e5       	ldi	r22, 0x58	; 88
    1372:	83 e3       	ldi	r24, 0x33	; 51
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 40 03 	call	0x680	; 0x680 <find>
    137a:	68 2f       	mov	r22, r24
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
    1386:	d1 01       	movw	r26, r2
    1388:	6d 93       	st	X+, r22
    138a:	7d 93       	st	X+, r23
    138c:	8d 93       	st	X+, r24
    138e:	9c 93       	st	X, r25
    1390:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = find(String,'Y');
    1392:	69 e5       	ldi	r22, 0x59	; 89
    1394:	83 e3       	ldi	r24, 0x33	; 51
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 40 03 	call	0x680	; 0x680 <find>
    139c:	68 2f       	mov	r22, r24
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
    13a8:	f1 01       	movw	r30, r2
    13aa:	64 83       	std	Z+4, r22	; 0x04
    13ac:	75 83       	std	Z+5, r23	; 0x05
    13ae:	86 83       	std	Z+6, r24	; 0x06
    13b0:	97 83       	std	Z+7, r25	; 0x07
						STEP[2] = find(String,'Z');
    13b2:	6a e5       	ldi	r22, 0x5A	; 90
    13b4:	83 e3       	ldi	r24, 0x33	; 51
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	0e 94 40 03 	call	0x680	; 0x680 <find>
    13bc:	68 2f       	mov	r22, r24
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
    13c8:	d1 01       	movw	r26, r2
    13ca:	18 96       	adiw	r26, 0x08	; 8
    13cc:	6d 93       	st	X+, r22
    13ce:	7d 93       	st	X+, r23
    13d0:	8d 93       	st	X+, r24
    13d2:	9c 93       	st	X, r25
    13d4:	1b 97       	sbiw	r26, 0x0b	; 11
						value_1 = get_value(String,'X');           //extract first value
    13d6:	68 e5       	ldi	r22, 0x58	; 88
    13d8:	83 e3       	ldi	r24, 0x33	; 51
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13e0:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <value_1>
    13e4:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <value_1+0x1>
    13e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <value_1+0x2>
    13ec:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <value_1+0x3>
						value_2 = get_value(String,'Y'); //call function to extract second value
    13f0:	69 e5       	ldi	r22, 0x59	; 89
    13f2:	83 e3       	ldi	r24, 0x33	; 51
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13fa:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <value_2>
    13fe:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <value_2+0x1>
    1402:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <value_2+0x2>
    1406:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <value_2+0x3>
						value_3 = get_value(String,'Z'); //call function to extract third value
    140a:	6a e5       	ldi	r22, 0x5A	; 90
    140c:	83 e3       	ldi	r24, 0x33	; 51
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1414:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <value_3>
    1418:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <value_3+0x1>
    141c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <value_3+0x2>
    1420:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <value_3+0x3>
						
						if (find(String,'E') && find(String,'F'))
    1424:	65 e4       	ldi	r22, 0x45	; 69
    1426:	83 e3       	ldi	r24, 0x33	; 51
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	0e 94 40 03 	call	0x680	; 0x680 <find>
    142e:	88 23       	and	r24, r24
    1430:	a9 f0       	breq	.+42     	; 0x145c <main+0xbf4>
    1432:	66 e4       	ldi	r22, 0x46	; 70
    1434:	83 e3       	ldi	r24, 0x33	; 51
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 40 03 	call	0x680	; 0x680 <find>
    143c:	88 23       	and	r24, r24
    143e:	71 f0       	breq	.+28     	; 0x145c <main+0xbf4>
						{
							Fe = get_value(String,'F');
    1440:	66 e4       	ldi	r22, 0x46	; 70
    1442:	83 e3       	ldi	r24, 0x33	; 51
    1444:	92 e0       	ldi	r25, 0x02	; 2
    1446:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    144a:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <Fe>
    144e:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <Fe+0x1>
    1452:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <Fe+0x2>
    1456:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <Fe+0x3>
    145a:	1b c0       	rjmp	.+54     	; 0x1492 <main+0xc2a>
						}
						else if((!find(String,'E')) && find(String,'F'))
    145c:	65 e4       	ldi	r22, 0x45	; 69
    145e:	83 e3       	ldi	r24, 0x33	; 51
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	0e 94 40 03 	call	0x680	; 0x680 <find>
    1466:	81 11       	cpse	r24, r1
    1468:	14 c0       	rjmp	.+40     	; 0x1492 <main+0xc2a>
    146a:	66 e4       	ldi	r22, 0x46	; 70
    146c:	83 e3       	ldi	r24, 0x33	; 51
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	0e 94 40 03 	call	0x680	; 0x680 <find>
    1474:	88 23       	and	r24, r24
    1476:	69 f0       	breq	.+26     	; 0x1492 <main+0xc2a>
						{
							F = get_value(String,'F');
    1478:	66 e4       	ldi	r22, 0x46	; 70
    147a:	83 e3       	ldi	r24, 0x33	; 51
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1482:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <F>
    1486:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <F+0x1>
    148a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <F+0x2>
    148e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <F+0x3>
						}
						if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    1492:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <value_1>
    1496:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <value_1+0x1>
    149a:	e0 90 09 02 	lds	r14, 0x0209	; 0x800209 <value_1+0x2>
    149e:	f0 90 0a 02 	lds	r15, 0x020A	; 0x80020a <value_1+0x3>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	48 e4       	ldi	r20, 0x48	; 72
    14a8:	53 e4       	ldi	r21, 0x43	; 67
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	0c f4       	brge	.+2      	; 0x14b8 <main+0xc50>
    14b6:	da c1       	rjmp	.+948    	; 0x186c <main+0x1004>
    14b8:	80 90 cb 01 	lds	r8, 0x01CB	; 0x8001cb <value_2>
    14bc:	90 90 cc 01 	lds	r9, 0x01CC	; 0x8001cc <value_2+0x1>
    14c0:	a0 90 cd 01 	lds	r10, 0x01CD	; 0x8001cd <value_2+0x2>
    14c4:	b0 90 ce 01 	lds	r11, 0x01CE	; 0x8001ce <value_2+0x3>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	48 e4       	ldi	r20, 0x48	; 72
    14ce:	53 e4       	ldi	r21, 0x43	; 67
    14d0:	c5 01       	movw	r24, r10
    14d2:	b4 01       	movw	r22, r8
    14d4:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    14d8:	18 16       	cp	r1, r24
    14da:	0c f4       	brge	.+2      	; 0x14de <main+0xc76>
    14dc:	c7 c1       	rjmp	.+910    	; 0x186c <main+0x1004>
    14de:	40 90 2f 02 	lds	r4, 0x022F	; 0x80022f <value_3>
    14e2:	50 90 30 02 	lds	r5, 0x0230	; 0x800230 <value_3+0x1>
    14e6:	60 90 31 02 	lds	r6, 0x0231	; 0x800231 <value_3+0x2>
    14ea:	70 90 32 02 	lds	r7, 0x0232	; 0x800232 <value_3+0x3>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	53 e4       	ldi	r21, 0x43	; 67
    14f6:	c3 01       	movw	r24, r6
    14f8:	b2 01       	movw	r22, r4
    14fa:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    14fe:	18 16       	cp	r1, r24
    1500:	0c f4       	brge	.+2      	; 0x1504 <main+0xc9c>
    1502:	b4 c1       	rjmp	.+872    	; 0x186c <main+0x1004>
						{
							if (val == 0)
    1504:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    1508:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    150c:	89 2b       	or	r24, r25
    150e:	09 f0       	breq	.+2      	; 0x1512 <main+0xcaa>
    1510:	d3 c0       	rjmp	.+422    	; 0x16b8 <main+0xe50>
							{
								STEP[3] = 0;
    1512:	f1 01       	movw	r30, r2
    1514:	14 86       	std	Z+12, r1	; 0x0c
    1516:	15 86       	std	Z+13, r1	; 0x0d
    1518:	16 86       	std	Z+14, r1	; 0x0e
    151a:	17 86       	std	Z+15, r1	; 0x0f
								status = 1;
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <status>
								if (STEP[0] == 1)
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	d1 01       	movw	r26, r2
    152c:	6d 91       	ld	r22, X+
    152e:	7d 91       	ld	r23, X+
    1530:	8d 91       	ld	r24, X+
    1532:	9c 91       	ld	r25, X
    1534:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1538:	81 11       	cpse	r24, r1
    153a:	24 c0       	rjmp	.+72     	; 0x1584 <main+0xd1c>
								{
									STEP[0] = value_1*SPMM[0];     //call function to extract first step
    153c:	a7 01       	movw	r20, r14
    153e:	96 01       	movw	r18, r12
    1540:	e5 e1       	ldi	r30, 0x15	; 21
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1550:	d1 01       	movw	r26, r2
    1552:	6d 93       	st	X+, r22
    1554:	7d 93       	st	X+, r23
    1556:	8d 93       	st	X+, r24
    1558:	9c 93       	st	X, r25
    155a:	13 97       	sbiw	r26, 0x03	; 3
									old_val_1 += value_1;
    155c:	a7 01       	movw	r20, r14
    155e:	96 01       	movw	r18, r12
    1560:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <old_val_1>
    1564:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <old_val_1+0x1>
    1568:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <old_val_1+0x2>
    156c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <old_val_1+0x3>
    1570:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    1574:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <old_val_1>
    1578:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <old_val_1+0x1>
    157c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <old_val_1+0x2>
    1580:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <old_val_1+0x3>
								}
								if (STEP[1] == 1)
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e8       	ldi	r20, 0x80	; 128
    158a:	5f e3       	ldi	r21, 0x3F	; 63
    158c:	f1 01       	movw	r30, r2
    158e:	64 81       	ldd	r22, Z+4	; 0x04
    1590:	75 81       	ldd	r23, Z+5	; 0x05
    1592:	86 81       	ldd	r24, Z+6	; 0x06
    1594:	97 81       	ldd	r25, Z+7	; 0x07
    1596:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    159a:	81 11       	cpse	r24, r1
    159c:	27 c0       	rjmp	.+78     	; 0x15ec <main+0xd84>
								{
									STEP[1] = value_2*SPMM[1];    //call function to extract second step
    159e:	a5 01       	movw	r20, r10
    15a0:	94 01       	movw	r18, r8
    15a2:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <SPMM+0x4>
    15a6:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <SPMM+0x5>
    15aa:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SPMM+0x6>
    15ae:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <SPMM+0x7>
    15b2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    15b6:	d1 01       	movw	r26, r2
    15b8:	14 96       	adiw	r26, 0x04	; 4
    15ba:	6d 93       	st	X+, r22
    15bc:	7d 93       	st	X+, r23
    15be:	8d 93       	st	X+, r24
    15c0:	9c 93       	st	X, r25
    15c2:	17 97       	sbiw	r26, 0x07	; 7
									old_val_2 += value_2;
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <old_val_2>
    15cc:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <old_val_2+0x1>
    15d0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <old_val_2+0x2>
    15d4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <old_val_2+0x3>
    15d8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    15dc:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <old_val_2>
    15e0:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <old_val_2+0x1>
    15e4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <old_val_2+0x2>
    15e8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <old_val_2+0x3>
								}
								if (STEP[2] == 1)
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	f1 01       	movw	r30, r2
    15f6:	60 85       	ldd	r22, Z+8	; 0x08
    15f8:	71 85       	ldd	r23, Z+9	; 0x09
    15fa:	82 85       	ldd	r24, Z+10	; 0x0a
    15fc:	93 85       	ldd	r25, Z+11	; 0x0b
    15fe:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1602:	81 11       	cpse	r24, r1
    1604:	27 c0       	rjmp	.+78     	; 0x1654 <main+0xdec>
								{
									STEP[2] = value_3*SPMM[2];    //call function to extract third step
    1606:	a3 01       	movw	r20, r6
    1608:	92 01       	movw	r18, r4
    160a:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <SPMM+0x8>
    160e:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <SPMM+0x9>
    1612:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SPMM+0xa>
    1616:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SPMM+0xb>
    161a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    161e:	d1 01       	movw	r26, r2
    1620:	18 96       	adiw	r26, 0x08	; 8
    1622:	6d 93       	st	X+, r22
    1624:	7d 93       	st	X+, r23
    1626:	8d 93       	st	X+, r24
    1628:	9c 93       	st	X, r25
    162a:	1b 97       	sbiw	r26, 0x0b	; 11
									old_val_3 += value_3;
    162c:	a3 01       	movw	r20, r6
    162e:	92 01       	movw	r18, r4
    1630:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <__data_end>
    1634:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <__data_end+0x1>
    1638:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end+0x2>
    163c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x3>
    1640:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    1644:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <__data_end>
    1648:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <__data_end+0x1>
    164c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end+0x2>
    1650:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x3>
								}
								value_1 = 0;
    1654:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <value_1>
    1658:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <value_1+0x1>
    165c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <value_1+0x2>
    1660:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <value_1+0x3>
								value_2 = 0;
    1664:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <value_2>
    1668:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <value_2+0x1>
    166c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <value_2+0x2>
    1670:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <value_2+0x3>
								value_3 = 0;
    1674:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <value_3>
    1678:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <value_3+0x1>
    167c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <value_3+0x2>
    1680:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <value_3+0x3>
								motor_movement(STEP,SPMM,F,Fe);
    1684:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <Fe>
    1688:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <Fe+0x1>
    168c:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <Fe+0x2>
    1690:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <Fe+0x3>
    1694:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <F>
    1698:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <F+0x1>
    169c:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <F+0x2>
    16a0:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <F+0x3>
    16a4:	65 e1       	ldi	r22, 0x15	; 21
    16a6:	72 e0       	ldi	r23, 0x02	; 2
    16a8:	c1 01       	movw	r24, r2
    16aa:	0e 94 6e 11 	call	0x22dc	; 0x22dc <motor_movement>
								Transmit_Data("ok\0");
    16ae:	87 e9       	ldi	r24, 0x97	; 151
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
    16b6:	6e c3       	rjmp	.+1756   	; 0x1d94 <main+0x152c>
							} 
							else
							{
								STEP[3] = get_value(String,'E')*SPMM[3];
    16b8:	65 e4       	ldi	r22, 0x45	; 69
    16ba:	83 e3       	ldi	r24, 0x33	; 51
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    16c2:	9b 01       	movw	r18, r22
    16c4:	ac 01       	movw	r20, r24
    16c6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <SPMM+0xc>
    16ca:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <SPMM+0xd>
    16ce:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <SPMM+0xe>
    16d2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <SPMM+0xf>
    16d6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    16da:	f1 01       	movw	r30, r2
    16dc:	64 87       	std	Z+12, r22	; 0x0c
    16de:	75 87       	std	Z+13, r23	; 0x0d
    16e0:	86 87       	std	Z+14, r24	; 0x0e
    16e2:	97 87       	std	Z+15, r25	; 0x0f
								if ((extrud || Fextrud))
    16e4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <extrud>
    16e8:	81 11       	cpse	r24, r1
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <main+0xe8e>
    16ec:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Fextrud>
    16f0:	88 23       	and	r24, r24
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <main+0xe8e>
    16f4:	b6 c0       	rjmp	.+364    	; 0x1862 <main+0xffa>
								{
									status = 1;
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <status>
									if (STEP[0] == 1)
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	d1 01       	movw	r26, r2
    1706:	6d 91       	ld	r22, X+
    1708:	7d 91       	ld	r23, X+
    170a:	8d 91       	ld	r24, X+
    170c:	9c 91       	ld	r25, X
    170e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1712:	81 11       	cpse	r24, r1
    1714:	1c c0       	rjmp	.+56     	; 0x174e <main+0xee6>
									{
										STEP[0] = sub_function (&old_val_1, value_1)*SPMM[0];     //call function to extract first step
    1716:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <value_1>
    171a:	50 91 08 02 	lds	r21, 0x0208	; 0x800208 <value_1+0x1>
    171e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <value_1+0x2>
    1722:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <value_1+0x3>
    1726:	8a e5       	ldi	r24, 0x5A	; 90
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	e5 e1       	ldi	r30, 0x15	; 21
    1734:	f2 e0       	ldi	r31, 0x02	; 2
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1742:	d1 01       	movw	r26, r2
    1744:	6d 93       	st	X+, r22
    1746:	7d 93       	st	X+, r23
    1748:	8d 93       	st	X+, r24
    174a:	9c 93       	st	X, r25
    174c:	13 97       	sbiw	r26, 0x03	; 3
									}
									if (STEP[1] == 1)
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	f1 01       	movw	r30, r2
    1758:	64 81       	ldd	r22, Z+4	; 0x04
    175a:	75 81       	ldd	r23, Z+5	; 0x05
    175c:	86 81       	ldd	r24, Z+6	; 0x06
    175e:	97 81       	ldd	r25, Z+7	; 0x07
    1760:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1764:	81 11       	cpse	r24, r1
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <main+0xf3e>
									{
										STEP[1] = sub_function (&old_val_2, value_2)*SPMM[1];    //call function to extract second step
    1768:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <value_2>
    176c:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <value_2+0x1>
    1770:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <value_2+0x2>
    1774:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <value_2+0x3>
    1778:	86 e5       	ldi	r24, 0x56	; 86
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <SPMM+0x4>
    1788:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <SPMM+0x5>
    178c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SPMM+0x6>
    1790:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <SPMM+0x7>
    1794:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1798:	d1 01       	movw	r26, r2
    179a:	14 96       	adiw	r26, 0x04	; 4
    179c:	6d 93       	st	X+, r22
    179e:	7d 93       	st	X+, r23
    17a0:	8d 93       	st	X+, r24
    17a2:	9c 93       	st	X, r25
    17a4:	17 97       	sbiw	r26, 0x07	; 7
									}
									if (STEP[2] == 1)
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	f1 01       	movw	r30, r2
    17b0:	60 85       	ldd	r22, Z+8	; 0x08
    17b2:	71 85       	ldd	r23, Z+9	; 0x09
    17b4:	82 85       	ldd	r24, Z+10	; 0x0a
    17b6:	93 85       	ldd	r25, Z+11	; 0x0b
    17b8:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    17bc:	81 11       	cpse	r24, r1
    17be:	1f c0       	rjmp	.+62     	; 0x17fe <main+0xf96>
									{
										STEP[2] = sub_function (&old_val_3, value_3)*SPMM[2];    //call function to extract third step
    17c0:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <value_3>
    17c4:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <value_3+0x1>
    17c8:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <value_3+0x2>
    17cc:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <value_3+0x3>
    17d0:	82 e5       	ldi	r24, 0x52	; 82
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    17d8:	9b 01       	movw	r18, r22
    17da:	ac 01       	movw	r20, r24
    17dc:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <SPMM+0x8>
    17e0:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <SPMM+0x9>
    17e4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SPMM+0xa>
    17e8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SPMM+0xb>
    17ec:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    17f0:	d1 01       	movw	r26, r2
    17f2:	18 96       	adiw	r26, 0x08	; 8
    17f4:	6d 93       	st	X+, r22
    17f6:	7d 93       	st	X+, r23
    17f8:	8d 93       	st	X+, r24
    17fa:	9c 93       	st	X, r25
    17fc:	1b 97       	sbiw	r26, 0x0b	; 11
									}
									value_1 = 0;
    17fe:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <value_1>
    1802:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <value_1+0x1>
    1806:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <value_1+0x2>
    180a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <value_1+0x3>
									value_2 = 0;
    180e:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <value_2>
    1812:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <value_2+0x1>
    1816:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <value_2+0x2>
    181a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <value_2+0x3>
									value_3 = 0;
    181e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <value_3>
    1822:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <value_3+0x1>
    1826:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <value_3+0x2>
    182a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <value_3+0x3>
									motor_movement(STEP,SPMM,F,Fe);
    182e:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <Fe>
    1832:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <Fe+0x1>
    1836:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <Fe+0x2>
    183a:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <Fe+0x3>
    183e:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <F>
    1842:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <F+0x1>
    1846:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <F+0x2>
    184a:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <F+0x3>
    184e:	65 e1       	ldi	r22, 0x15	; 21
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	c1 01       	movw	r24, r2
    1854:	0e 94 6e 11 	call	0x22dc	; 0x22dc <motor_movement>
									Transmit_Data("ok\0");
    1858:	87 e9       	ldi	r24, 0x97	; 151
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
    1860:	99 c2       	rjmp	.+1330   	; 0x1d94 <main+0x152c>
								}
								else
								{
									Transmit_Data("error extruder temp.\0");
    1862:	8b e9       	ldi	r24, 0x9B	; 155
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
									break;
    186a:	94 c2       	rjmp	.+1320   	; 0x1d94 <main+0x152c>
								}
							}
						}
						else
							Transmit_Data("out of area\0");
    186c:	81 eb       	ldi	r24, 0xB1	; 177
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
    1874:	8f c2       	rjmp	.+1310   	; 0x1d94 <main+0x152c>
					break;
					case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    1876:	68 e5       	ldi	r22, 0x58	; 88
    1878:	83 e3       	ldi	r24, 0x33	; 51
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1880:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <value_1>
    1884:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <value_1+0x1>
    1888:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <value_1+0x2>
    188c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <value_1+0x3>
					value_2 = get_value(String,'Y'); //call function to extract second value
    1890:	69 e5       	ldi	r22, 0x59	; 89
    1892:	83 e3       	ldi	r24, 0x33	; 51
    1894:	92 e0       	ldi	r25, 0x02	; 2
    1896:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    189a:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <value_2>
    189e:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <value_2+0x1>
    18a2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <value_2+0x2>
    18a6:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <value_2+0x3>
					I = get_value(String,'I');
    18aa:	69 e4       	ldi	r22, 0x49	; 73
    18ac:	83 e3       	ldi	r24, 0x33	; 51
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    18b4:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <I>
    18b8:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <I+0x1>
    18bc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <I+0x2>
    18c0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <I+0x3>
					J = get_value(String,'J');
    18c4:	6a e4       	ldi	r22, 0x4A	; 74
    18c6:	83 e3       	ldi	r24, 0x33	; 51
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    18ce:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <J>
    18d2:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <J+0x1>
    18d6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <J+0x2>
    18da:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <J+0x3>
					if (find(String,'F'))
    18de:	66 e4       	ldi	r22, 0x46	; 70
    18e0:	83 e3       	ldi	r24, 0x33	; 51
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	0e 94 40 03 	call	0x680	; 0x680 <find>
    18e8:	88 23       	and	r24, r24
    18ea:	69 f0       	breq	.+26     	; 0x1906 <main+0x109e>
					{
						F = get_value(String,'F');
    18ec:	66 e4       	ldi	r22, 0x46	; 70
    18ee:	83 e3       	ldi	r24, 0x33	; 51
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    18f6:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <F>
    18fa:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <F+0x1>
    18fe:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <F+0x2>
    1902:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <F+0x3>
					}
					R = get_value(String,'R');
    1906:	62 e5       	ldi	r22, 0x52	; 82
    1908:	83 e3       	ldi	r24, 0x33	; 51
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1910:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <R>
    1914:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <R+0x1>
    1918:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <R+0x2>
    191c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <R+0x3>
					if (R == 0)
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    192a:	81 11       	cpse	r24, r1
    192c:	4f c2       	rjmp	.+1182   	; 0x1dcc <main+0x1564>
					{
						R = sqrt(pow(I,2)+pow(J,2));
    192e:	80 90 72 01 	lds	r8, 0x0172	; 0x800172 <I>
    1932:	90 90 73 01 	lds	r9, 0x0173	; 0x800173 <I+0x1>
    1936:	a0 90 74 01 	lds	r10, 0x0174	; 0x800174 <I+0x2>
    193a:	b0 90 75 01 	lds	r11, 0x0175	; 0x800175 <I+0x3>
    193e:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <J>
    1942:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <J+0x1>
    1946:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <J+0x2>
    194a:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <J+0x3>
    194e:	a5 01       	movw	r20, r10
    1950:	94 01       	movw	r18, r8
    1952:	c5 01       	movw	r24, r10
    1954:	b4 01       	movw	r22, r8
    1956:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    195a:	4b 01       	movw	r8, r22
    195c:	5c 01       	movw	r10, r24
    195e:	a7 01       	movw	r20, r14
    1960:	96 01       	movw	r18, r12
    1962:	c7 01       	movw	r24, r14
    1964:	b6 01       	movw	r22, r12
    1966:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	c5 01       	movw	r24, r10
    1970:	b4 01       	movw	r22, r8
    1972:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    1976:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <sqrt>
    197a:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <R>
    197e:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <R+0x1>
    1982:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <R+0x2>
    1986:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <R+0x3>
    198a:	20 c2       	rjmp	.+1088   	; 0x1dcc <main+0x1564>
					}
				for (int th = 0 ; th <= 360 ; th++)
				{
					double xc = R*cos(th)*cos(th);
    198c:	b6 01       	movw	r22, r12
    198e:	0d 2c       	mov	r0, r13
    1990:	00 0c       	add	r0, r0
    1992:	88 0b       	sbc	r24, r24
    1994:	99 0b       	sbc	r25, r25
    1996:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    199a:	4b 01       	movw	r8, r22
    199c:	5c 01       	movw	r10, r24
    199e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <cos>
    19a2:	6d a7       	std	Y+45, r22	; 0x2d
    19a4:	7e a7       	std	Y+46, r23	; 0x2e
    19a6:	8f a7       	std	Y+47, r24	; 0x2f
    19a8:	98 ab       	std	Y+48, r25	; 0x30
    19aa:	40 90 6a 01 	lds	r4, 0x016A	; 0x80016a <R>
    19ae:	50 90 6b 01 	lds	r5, 0x016B	; 0x80016b <R+0x1>
    19b2:	60 90 6c 01 	lds	r6, 0x016C	; 0x80016c <R+0x2>
    19b6:	70 90 6d 01 	lds	r7, 0x016D	; 0x80016d <R+0x3>
    19ba:	a3 01       	movw	r20, r6
    19bc:	92 01       	movw	r18, r4
    19be:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    19c2:	2d a5       	ldd	r18, Y+45	; 0x2d
    19c4:	3e a5       	ldd	r19, Y+46	; 0x2e
    19c6:	4f a5       	ldd	r20, Y+47	; 0x2f
    19c8:	58 a9       	ldd	r21, Y+48	; 0x30
    19ca:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    19ce:	6d a7       	std	Y+45, r22	; 0x2d
    19d0:	7e a7       	std	Y+46, r23	; 0x2e
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
    19d4:	98 ab       	std	Y+48, r25	; 0x30
					double yc = R*sin(th)*sin(th);
    19d6:	c5 01       	movw	r24, r10
    19d8:	b4 01       	movw	r22, r8
    19da:	0e 94 ef 17 	call	0x2fde	; 0x2fde <sin>
    19de:	4b 01       	movw	r8, r22
    19e0:	5c 01       	movw	r10, r24
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	c3 01       	movw	r24, r6
    19e8:	b2 01       	movw	r22, r4
    19ea:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    19ee:	a5 01       	movw	r20, r10
    19f0:	94 01       	movw	r18, r8
    19f2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    19f6:	4b 01       	movw	r8, r22
    19f8:	5c 01       	movw	r10, r24
					if ((xc >= value_1) && (yc >= value_2))
    19fa:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <value_1>
    19fe:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <value_1+0x1>
    1a02:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <value_1+0x2>
    1a06:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <value_1+0x3>
    1a0a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a0c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    1a16:	88 23       	and	r24, r24
    1a18:	7c f0       	brlt	.+30     	; 0x1a38 <main+0x11d0>
    1a1a:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <value_2>
    1a1e:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <value_2+0x1>
    1a22:	40 91 cd 01 	lds	r20, 0x01CD	; 0x8001cd <value_2+0x2>
    1a26:	50 91 ce 01 	lds	r21, 0x01CE	; 0x8001ce <value_2+0x3>
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	b4 01       	movw	r22, r8
    1a2e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    1a32:	88 23       	and	r24, r24
    1a34:	0c f0       	brlt	.+2      	; 0x1a38 <main+0x11d0>
    1a36:	a0 c1       	rjmp	.+832    	; 0x1d78 <main+0x1510>
					break;
					if ((extrud || Fextrud))
    1a38:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <extrud>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	05 c0       	rjmp	.+10     	; 0x1a4a <main+0x11e2>
    1a40:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Fextrud>
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <main+0x11e2>
    1a48:	8e c1       	rjmp	.+796    	; 0x1d66 <main+0x14fe>
					{
						if (val == 2)
    1a4a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    1a4e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    1a52:	02 97       	sbiw	r24, 0x02	; 2
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <main+0x11f0>
    1a56:	ad c0       	rjmp	.+346    	; 0x1bb2 <main+0x134a>
						{
							if ((I == 0) && (J == 0))
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <I>
    1a62:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <I+0x1>
    1a66:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <I+0x2>
    1a6a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <I+0x3>
    1a6e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1a72:	81 11       	cpse	r24, r1
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <main+0x128c>
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	a9 01       	movw	r20, r18
    1a7c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <J>
    1a80:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <J+0x1>
    1a84:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <J+0x2>
    1a88:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <J+0x3>
    1a8c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1a90:	81 11       	cpse	r24, r1
    1a92:	30 c0       	rjmp	.+96     	; 0x1af4 <main+0x128c>
							{
								STEP[0] = sub_function (&old_val_1, xc)*SPMM[0];     //call function to extract first step
    1a94:	4d a5       	ldd	r20, Y+45	; 0x2d
    1a96:	5e a5       	ldd	r21, Y+46	; 0x2e
    1a98:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a9a:	78 a9       	ldd	r23, Y+48	; 0x30
    1a9c:	8a e5       	ldi	r24, 0x5A	; 90
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1aa4:	9b 01       	movw	r18, r22
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	e5 e1       	ldi	r30, 0x15	; 21
    1aaa:	f2 e0       	ldi	r31, 0x02	; 2
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1ab8:	d1 01       	movw	r26, r2
    1aba:	6d 93       	st	X+, r22
    1abc:	7d 93       	st	X+, r23
    1abe:	8d 93       	st	X+, r24
    1ac0:	9c 93       	st	X, r25
    1ac2:	13 97       	sbiw	r26, 0x03	; 3
								STEP[1] = sub_function (&old_val_2, yc)*SPMM[1];    //call function to extract second step
    1ac4:	b5 01       	movw	r22, r10
    1ac6:	a4 01       	movw	r20, r8
    1ac8:	86 e5       	ldi	r24, 0x56	; 86
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1ad0:	9b 01       	movw	r18, r22
    1ad2:	ac 01       	movw	r20, r24
    1ad4:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <SPMM+0x4>
    1ad8:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <SPMM+0x5>
    1adc:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SPMM+0x6>
    1ae0:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <SPMM+0x7>
    1ae4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1ae8:	f1 01       	movw	r30, r2
    1aea:	64 83       	std	Z+4, r22	; 0x04
    1aec:	75 83       	std	Z+5, r23	; 0x05
    1aee:	86 83       	std	Z+6, r24	; 0x06
    1af0:	97 83       	std	Z+7, r25	; 0x07
    1af2:	0f c1       	rjmp	.+542    	; 0x1d12 <main+0x14aa>
							}
							else
							{
								STEP[0] = sub_function (&old_val_1, xc)*SPMM[0]*(-I/I);     //call function to extract first step
    1af4:	4d a5       	ldd	r20, Y+45	; 0x2d
    1af6:	5e a5       	ldd	r21, Y+46	; 0x2e
    1af8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1afa:	78 a9       	ldd	r23, Y+48	; 0x30
    1afc:	8a e5       	ldi	r24, 0x5A	; 90
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1b04:	40 90 72 01 	lds	r4, 0x0172	; 0x800172 <I>
    1b08:	50 90 73 01 	lds	r5, 0x0173	; 0x800173 <I+0x1>
    1b0c:	60 90 74 01 	lds	r6, 0x0174	; 0x800174 <I+0x2>
    1b10:	70 90 75 01 	lds	r7, 0x0175	; 0x800175 <I+0x3>
    1b14:	a5 e1       	ldi	r26, 0x15	; 21
    1b16:	b2 e0       	ldi	r27, 0x02	; 2
    1b18:	2d 91       	ld	r18, X+
    1b1a:	3d 91       	ld	r19, X+
    1b1c:	4d 91       	ld	r20, X+
    1b1e:	5c 91       	ld	r21, X
    1b20:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1b24:	6d a7       	std	Y+45, r22	; 0x2d
    1b26:	7e a7       	std	Y+46, r23	; 0x2e
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	c3 01       	movw	r24, r6
    1b2e:	b2 01       	movw	r22, r4
    1b30:	90 58       	subi	r25, 0x80	; 128
    1b32:	a3 01       	movw	r20, r6
    1b34:	92 01       	movw	r18, r4
    1b36:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b40:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b44:	98 a9       	ldd	r25, Y+48	; 0x30
    1b46:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1b4a:	f1 01       	movw	r30, r2
    1b4c:	60 83       	st	Z, r22
    1b4e:	71 83       	std	Z+1, r23	; 0x01
    1b50:	82 83       	std	Z+2, r24	; 0x02
    1b52:	93 83       	std	Z+3, r25	; 0x03
								STEP[1] = sub_function (&old_val_2, yc)*SPMM[1]*(-J/J);    //call function to extract second step
    1b54:	b5 01       	movw	r22, r10
    1b56:	a4 01       	movw	r20, r8
    1b58:	86 e5       	ldi	r24, 0x56	; 86
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1b60:	80 90 6e 01 	lds	r8, 0x016E	; 0x80016e <J>
    1b64:	90 90 6f 01 	lds	r9, 0x016F	; 0x80016f <J+0x1>
    1b68:	a0 90 70 01 	lds	r10, 0x0170	; 0x800170 <J+0x2>
    1b6c:	b0 90 71 01 	lds	r11, 0x0171	; 0x800171 <J+0x3>
    1b70:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <SPMM+0x4>
    1b74:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <SPMM+0x5>
    1b78:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <SPMM+0x6>
    1b7c:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <SPMM+0x7>
    1b80:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1b84:	2b 01       	movw	r4, r22
    1b86:	3c 01       	movw	r6, r24
    1b88:	c5 01       	movw	r24, r10
    1b8a:	b4 01       	movw	r22, r8
    1b8c:	90 58       	subi	r25, 0x80	; 128
    1b8e:	a5 01       	movw	r20, r10
    1b90:	94 01       	movw	r18, r8
    1b92:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    1b96:	9b 01       	movw	r18, r22
    1b98:	ac 01       	movw	r20, r24
    1b9a:	c3 01       	movw	r24, r6
    1b9c:	b2 01       	movw	r22, r4
    1b9e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1ba2:	d1 01       	movw	r26, r2
    1ba4:	14 96       	adiw	r26, 0x04	; 4
    1ba6:	6d 93       	st	X+, r22
    1ba8:	7d 93       	st	X+, r23
    1baa:	8d 93       	st	X+, r24
    1bac:	9c 93       	st	X, r25
    1bae:	17 97       	sbiw	r26, 0x07	; 7
    1bb0:	b0 c0       	rjmp	.+352    	; 0x1d12 <main+0x14aa>
							}
						}
						else
						{
							if ((I == 0) && (J == 0))
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <I>
    1bbc:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <I+0x1>
    1bc0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <I+0x2>
    1bc4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <I+0x3>
    1bc8:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	45 c0       	rjmp	.+138    	; 0x1c5a <main+0x13f2>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	a9 01       	movw	r20, r18
    1bd6:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <J>
    1bda:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <J+0x1>
    1bde:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <J+0x2>
    1be2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <J+0x3>
    1be6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1bea:	81 11       	cpse	r24, r1
    1bec:	36 c0       	rjmp	.+108    	; 0x1c5a <main+0x13f2>
							{
								STEP[0] = sub_function (&old_val_1, xc)*-SPMM[0];     //call function to extract first step
    1bee:	4d a5       	ldd	r20, Y+45	; 0x2d
    1bf0:	5e a5       	ldd	r21, Y+46	; 0x2e
    1bf2:	6f a5       	ldd	r22, Y+47	; 0x2f
    1bf4:	78 a9       	ldd	r23, Y+48	; 0x30
    1bf6:	8a e5       	ldi	r24, 0x5A	; 90
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1bfe:	9b 01       	movw	r18, r22
    1c00:	ac 01       	movw	r20, r24
    1c02:	e5 e1       	ldi	r30, 0x15	; 21
    1c04:	f2 e0       	ldi	r31, 0x02	; 2
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	a2 81       	ldd	r26, Z+2	; 0x02
    1c0c:	b3 81       	ldd	r27, Z+3	; 0x03
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	90 58       	subi	r25, 0x80	; 128
    1c14:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1c18:	d1 01       	movw	r26, r2
    1c1a:	6d 93       	st	X+, r22
    1c1c:	7d 93       	st	X+, r23
    1c1e:	8d 93       	st	X+, r24
    1c20:	9c 93       	st	X, r25
    1c22:	13 97       	sbiw	r26, 0x03	; 3
								STEP[1] = sub_function (&old_val_2, yc)*-SPMM[1];    //call function to extract second step
    1c24:	b5 01       	movw	r22, r10
    1c26:	a4 01       	movw	r20, r8
    1c28:	86 e5       	ldi	r24, 0x56	; 86
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <SPMM+0x4>
    1c38:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <SPMM+0x5>
    1c3c:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <SPMM+0x6>
    1c40:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <SPMM+0x7>
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	90 58       	subi	r25, 0x80	; 128
    1c4a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1c4e:	f1 01       	movw	r30, r2
    1c50:	64 83       	std	Z+4, r22	; 0x04
    1c52:	75 83       	std	Z+5, r23	; 0x05
    1c54:	86 83       	std	Z+6, r24	; 0x06
    1c56:	97 83       	std	Z+7, r25	; 0x07
    1c58:	5c c0       	rjmp	.+184    	; 0x1d12 <main+0x14aa>
							}
							else
							{
								STEP[0] = sub_function (&old_val_1, xc)*SPMM[0]*(I/I);     //call function to extract first step
    1c5a:	4d a5       	ldd	r20, Y+45	; 0x2d
    1c5c:	5e a5       	ldd	r21, Y+46	; 0x2e
    1c5e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c60:	78 a9       	ldd	r23, Y+48	; 0x30
    1c62:	8a e5       	ldi	r24, 0x5A	; 90
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1c6a:	40 90 72 01 	lds	r4, 0x0172	; 0x800172 <I>
    1c6e:	50 90 73 01 	lds	r5, 0x0173	; 0x800173 <I+0x1>
    1c72:	60 90 74 01 	lds	r6, 0x0174	; 0x800174 <I+0x2>
    1c76:	70 90 75 01 	lds	r7, 0x0175	; 0x800175 <I+0x3>
    1c7a:	a5 e1       	ldi	r26, 0x15	; 21
    1c7c:	b2 e0       	ldi	r27, 0x02	; 2
    1c7e:	2d 91       	ld	r18, X+
    1c80:	3d 91       	ld	r19, X+
    1c82:	4d 91       	ld	r20, X+
    1c84:	5c 91       	ld	r21, X
    1c86:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1c8a:	6d a7       	std	Y+45, r22	; 0x2d
    1c8c:	7e a7       	std	Y+46, r23	; 0x2e
    1c8e:	8f a7       	std	Y+47, r24	; 0x2f
    1c90:	98 ab       	std	Y+48, r25	; 0x30
    1c92:	a3 01       	movw	r20, r6
    1c94:	92 01       	movw	r18, r4
    1c96:	c3 01       	movw	r24, r6
    1c98:	b2 01       	movw	r22, r4
    1c9a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ca4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    1caa:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1cae:	f1 01       	movw	r30, r2
    1cb0:	60 83       	st	Z, r22
    1cb2:	71 83       	std	Z+1, r23	; 0x01
    1cb4:	82 83       	std	Z+2, r24	; 0x02
    1cb6:	93 83       	std	Z+3, r25	; 0x03
								STEP[1] = sub_function (&old_val_2, yc)*SPMM[1]*(J/J);    //call function to extract second step
    1cb8:	b5 01       	movw	r22, r10
    1cba:	a4 01       	movw	r20, r8
    1cbc:	86 e5       	ldi	r24, 0x56	; 86
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1cc4:	80 90 6e 01 	lds	r8, 0x016E	; 0x80016e <J>
    1cc8:	90 90 6f 01 	lds	r9, 0x016F	; 0x80016f <J+0x1>
    1ccc:	a0 90 70 01 	lds	r10, 0x0170	; 0x800170 <J+0x2>
    1cd0:	b0 90 71 01 	lds	r11, 0x0171	; 0x800171 <J+0x3>
    1cd4:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <SPMM+0x4>
    1cd8:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <SPMM+0x5>
    1cdc:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <SPMM+0x6>
    1ce0:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <SPMM+0x7>
    1ce4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1ce8:	2b 01       	movw	r4, r22
    1cea:	3c 01       	movw	r6, r24
    1cec:	a5 01       	movw	r20, r10
    1cee:	94 01       	movw	r18, r8
    1cf0:	c5 01       	movw	r24, r10
    1cf2:	b4 01       	movw	r22, r8
    1cf4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    1cf8:	9b 01       	movw	r18, r22
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	c3 01       	movw	r24, r6
    1cfe:	b2 01       	movw	r22, r4
    1d00:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1d04:	d1 01       	movw	r26, r2
    1d06:	14 96       	adiw	r26, 0x04	; 4
    1d08:	6d 93       	st	X+, r22
    1d0a:	7d 93       	st	X+, r23
    1d0c:	8d 93       	st	X+, r24
    1d0e:	9c 93       	st	X, r25
    1d10:	17 97       	sbiw	r26, 0x07	; 7
							}
						}
						STEP[2] = 0;
    1d12:	f1 01       	movw	r30, r2
    1d14:	10 86       	std	Z+8, r1	; 0x08
    1d16:	11 86       	std	Z+9, r1	; 0x09
    1d18:	12 86       	std	Z+10, r1	; 0x0a
    1d1a:	13 86       	std	Z+11, r1	; 0x0b
						STEP[3] = SPMM[3];
    1d1c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <SPMM+0xc>
    1d20:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <SPMM+0xd>
    1d24:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <SPMM+0xe>
    1d28:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <SPMM+0xf>
    1d2c:	84 87       	std	Z+12, r24	; 0x0c
    1d2e:	95 87       	std	Z+13, r25	; 0x0d
    1d30:	a6 87       	std	Z+14, r26	; 0x0e
    1d32:	b7 87       	std	Z+15, r27	; 0x0f
						status = 1;
    1d34:	f1 e0       	ldi	r31, 0x01	; 1
    1d36:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <status>
						motor_movement(STEP,SPMM,F,Fe);
    1d3a:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <Fe>
    1d3e:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <Fe+0x1>
    1d42:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <Fe+0x2>
    1d46:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <Fe+0x3>
    1d4a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <F>
    1d4e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <F+0x1>
    1d52:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <F+0x2>
    1d56:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <F+0x3>
    1d5a:	6b a9       	ldd	r22, Y+51	; 0x33
    1d5c:	7c a9       	ldd	r23, Y+52	; 0x34
    1d5e:	89 a9       	ldd	r24, Y+49	; 0x31
    1d60:	9a a9       	ldd	r25, Y+50	; 0x32
    1d62:	0e 94 6e 11 	call	0x22dc	; 0x22dc <motor_movement>
					R = get_value(String,'R');
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					}
				for (int th = 0 ; th <= 360 ; th++)
    1d66:	2f ef       	ldi	r18, 0xFF	; 255
    1d68:	c2 1a       	sub	r12, r18
    1d6a:	d2 0a       	sbc	r13, r18
    1d6c:	39 e6       	ldi	r19, 0x69	; 105
    1d6e:	c3 16       	cp	r12, r19
    1d70:	31 e0       	ldi	r19, 0x01	; 1
    1d72:	d3 06       	cpc	r13, r19
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <main+0x1510>
    1d76:	0a ce       	rjmp	.-1004   	; 0x198c <main+0x1124>
						STEP[3] = SPMM[3];
						status = 1;
						motor_movement(STEP,SPMM,F,Fe);
					}
				}
				Transmit_Data("ok\0");
    1d78:	87 e9       	ldi	r24, 0x97	; 151
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <main+0x152c>
					// 						STEP[0] = find(String,'X');
					// 						STEP[1] = find(String,'Y');
					// 						STEP[2] = find(String,'Z');
					// 						//make auto home
					// 					}
					Transmit_Data("ok\0");
    1d82:	87 e9       	ldi	r24, 0x97	; 151
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <main+0x152c>
// 					value_1 = get_value(String,'X');           //extract first value
// 					value_2 = get_value(String,'Y'); //call function to extract second value
// 					value_3 = get_value(String,'Z'); //call function to extract third value
// 					STEP[3] = get_value(String,'E');
					//set the middle of the bed to 0,0
					Transmit_Data("ok\0");
    1d8c:	87 e9       	ldi	r24, 0x97	; 151
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
					break;
				}
				status = 0;
    1d94:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <status>
				RXch = 0;
    1d98:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <RXch>
				STEP[0] = 0;
    1d9c:	d1 01       	movw	r26, r2
    1d9e:	1d 92       	st	X+, r1
    1da0:	1d 92       	st	X+, r1
    1da2:	1d 92       	st	X+, r1
    1da4:	1c 92       	st	X, r1
    1da6:	13 97       	sbiw	r26, 0x03	; 3
				STEP[1] = 0;
    1da8:	f1 01       	movw	r30, r2
    1daa:	14 82       	std	Z+4, r1	; 0x04
    1dac:	15 82       	std	Z+5, r1	; 0x05
    1dae:	16 82       	std	Z+6, r1	; 0x06
    1db0:	17 82       	std	Z+7, r1	; 0x07
				STEP[2] = 0;
    1db2:	18 96       	adiw	r26, 0x08	; 8
    1db4:	1d 92       	st	X+, r1
    1db6:	1d 92       	st	X+, r1
    1db8:	1d 92       	st	X+, r1
    1dba:	1c 92       	st	X, r1
    1dbc:	1b 97       	sbiw	r26, 0x0b	; 11
				STEP[3] = 0;
    1dbe:	14 86       	std	Z+12, r1	; 0x0c
    1dc0:	15 86       	std	Z+13, r1	; 0x0d
    1dc2:	16 86       	std	Z+14, r1	; 0x0e
    1dc4:	17 86       	std	Z+15, r1	; 0x0f
				sei();
    1dc6:	78 94       	sei
    1dc8:	0c 94 93 04 	jmp	0x926	; 0x926 <main+0xbe>
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
    1dcc:	c1 2c       	mov	r12, r1
    1dce:	d1 2c       	mov	r13, r1
    1dd0:	dd cd       	rjmp	.-1094   	; 0x198c <main+0x1124>

00001dd2 <__vector_19>:
	Recive_Data(String);
	Transmit_Data("welcome we are PRISCA\0");
	sei();
}
ISR(TIMER0_COMP_vect)
{
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    1de0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tcon>
    1de4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tcon+0x1>
    1de8:	86 39       	cpi	r24, 0x96	; 150
    1dea:	91 05       	cpc	r25, r1
    1dec:	30 f4       	brcc	.+12     	; 0x1dfa <__vector_19+0x28>
	{
		tcon++;
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tcon+0x1>
    1df4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tcon>
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <__vector_19+0x3a>
		} else {
		gFlags.pidTimer = 1;
    1dfa:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <gFlags>
    1dfe:	81 60       	ori	r24, 0x01	; 1
    1e00:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <gFlags>
		tcon            = 0;
    1e04:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tcon+0x1>
    1e08:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tcon>
	}
}
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	64 97       	sbiw	r28, 0x14	; 20
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	cd bf       	out	0x3d, r28	; 61
	if ((UCSRA & (1 << RXC))) //if the printer busy send ack.
    1e56:	5f 9b       	sbis	0x0b, 7	; 11
    1e58:	59 c0       	rjmp	.+178    	; 0x1f0c <__vector_9+0xf2>
    1e5a:	e3 e3       	ldi	r30, 0x33	; 51
    1e5c:	f2 e0       	ldi	r31, 0x02	; 2
    1e5e:	83 e8       	ldi	r24, 0x83	; 131
    1e60:	92 e0       	ldi	r25, 0x02	; 2
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    1e62:	11 92       	st	Z+, r1

ISR(TIMER0_OVF_vect)
{
	if ((UCSRA & (1 << RXC))) //if the printer busy send ack.
	{
		for (int i = 0 ; i < 80 ;i++)
    1e64:	e8 17       	cp	r30, r24
    1e66:	f9 07       	cpc	r31, r25
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <__vector_9+0x48>
		{
			String [i] = 0;
		}
		Recive_Data(String);
    1e6a:	83 e3       	ldi	r24, 0x33	; 51
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Recive_Data>
		if (String[0] == 'N')
    1e72:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <String>
    1e76:	6e 34       	cpi	r22, 0x4E	; 78
    1e78:	c1 f5       	brne	.+112    	; 0x1eea <__vector_9+0xd0>
		{
				NumberOfPLine ++ ;
    1e7a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <NumberOfPLine>
    1e7e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <NumberOfPLine+0x1>
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <NumberOfPLine+0x1>
    1e88:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <NumberOfPLine>
				NumberOfLine = get_int(String,'N');
    1e8c:	83 e3       	ldi	r24, 0x33	; 51
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1e94:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <NumberOfLine+0x1>
    1e98:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <NumberOfLine>
				CheckSum = get_int(String,'*');
    1e9c:	6a e2       	ldi	r22, 0x2A	; 42
    1e9e:	83 e3       	ldi	r24, 0x33	; 51
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1ea6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <CheckSum+0x1>
    1eaa:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <CheckSum>
				get_SEvalue(String,' ','*');
    1eae:	4a e2       	ldi	r20, 0x2A	; 42
    1eb0:	60 e2       	ldi	r22, 0x20	; 32
    1eb2:	83 e3       	ldi	r24, 0x33	; 51
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <get_SEvalue>
				RXch = String[0];
    1eba:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <String>
    1ebe:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <RXch>
				val = get_int(String,String[0]);
    1ec2:	83 e3       	ldi	r24, 0x33	; 51
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
    1ec6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1eca:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <val+0x1>
    1ece:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <val>
				if (val == 105)
    1ed2:	89 36       	cpi	r24, 0x69	; 105
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	d1 f4       	brne	.+52     	; 0x1f0c <__vector_9+0xf2>
				{STARTP  = 1;}
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <STARTP>
				}
				val = get_int(String,String[0]);
		}
	}

	if (RXch2 == 'M' )
    1ede:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <RXch2>
    1ee2:	8d 34       	cpi	r24, 0x4D	; 77
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <__vector_9+0xce>
    1ee6:	5d c1       	rjmp	.+698    	; 0x21a2 <__vector_9+0x388>
    1ee8:	98 c1       	rjmp	.+816    	; 0x221a <__vector_9+0x400>
				if (val == 105)
				{STARTP  = 1;}
		}
		else
		{
				if (status)
    1eea:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <status>
    1eee:	88 23       	and	r24, r24
    1ef0:	19 f0       	breq	.+6      	; 0x1ef8 <__vector_9+0xde>
				{
					RXch2 = String[0];
    1ef2:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <RXch2>
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <__vector_9+0xe2>
				}
				else
				{			
					RXch = String[0];
    1ef8:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <RXch>
				}
				val = get_int(String,String[0]);
    1efc:	83 e3       	ldi	r24, 0x33	; 51
    1efe:	92 e0       	ldi	r25, 0x02	; 2
    1f00:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1f04:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <val+0x1>
    1f08:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <val>
		}
	}

	if (RXch2 == 'M' )
    1f0c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <RXch2>
    1f10:	8d 34       	cpi	r24, 0x4D	; 77
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <__vector_9+0xfc>
    1f14:	46 c1       	rjmp	.+652    	; 0x21a2 <__vector_9+0x388>
	{
		if (val == 112)
    1f16:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    1f1a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    1f1e:	80 37       	cpi	r24, 0x70	; 112
    1f20:	91 05       	cpc	r25, r1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <__vector_9+0x10c>
    1f24:	76 c1       	rjmp	.+748    	; 0x2212 <__vector_9+0x3f8>
		{
			value_1 = 0;  //extract first value
    1f26:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <value_1>
    1f2a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <value_1+0x1>
    1f2e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <value_1+0x2>
    1f32:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <value_1+0x3>
			value_2 = 0; //call function to extract second value
    1f36:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <value_2>
    1f3a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <value_2+0x1>
    1f3e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <value_2+0x2>
    1f42:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <value_2+0x3>
			value_3 = 0; //call function to extract third value
    1f46:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <value_3>
    1f4a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <value_3+0x1>
    1f4e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <value_3+0x2>
    1f52:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <value_3+0x3>
			STEP[0] = sub_function (&old_val_1, value_1)*SPMM[0];     //call function to extract first step
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	ba 01       	movw	r22, r20
    1f5c:	8a e5       	ldi	r24, 0x5A	; 90
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	0f 2e       	mov	r0, r31
    1f6a:	f7 ea       	ldi	r31, 0xA7	; 167
    1f6c:	cf 2e       	mov	r12, r31
    1f6e:	f1 e0       	ldi	r31, 0x01	; 1
    1f70:	df 2e       	mov	r13, r31
    1f72:	f0 2d       	mov	r31, r0
    1f74:	05 e1       	ldi	r16, 0x15	; 21
    1f76:	12 e0       	ldi	r17, 0x02	; 2
    1f78:	f8 01       	movw	r30, r16
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1f86:	f6 01       	movw	r30, r12
    1f88:	60 83       	st	Z, r22
    1f8a:	71 83       	std	Z+1, r23	; 0x01
    1f8c:	82 83       	std	Z+2, r24	; 0x02
    1f8e:	93 83       	std	Z+3, r25	; 0x03
			STEP[1] = sub_function (&old_val_2, value_2)*SPMM[1];    //call function to extract second step
    1f90:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <value_2>
    1f94:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <value_2+0x1>
    1f98:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <value_2+0x2>
    1f9c:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <value_2+0x3>
    1fa0:	86 e5       	ldi	r24, 0x56	; 86
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	f8 01       	movw	r30, r16
    1fae:	64 81       	ldd	r22, Z+4	; 0x04
    1fb0:	75 81       	ldd	r23, Z+5	; 0x05
    1fb2:	86 81       	ldd	r24, Z+6	; 0x06
    1fb4:	97 81       	ldd	r25, Z+7	; 0x07
    1fb6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1fba:	f6 01       	movw	r30, r12
    1fbc:	64 83       	std	Z+4, r22	; 0x04
    1fbe:	75 83       	std	Z+5, r23	; 0x05
    1fc0:	86 83       	std	Z+6, r24	; 0x06
    1fc2:	97 83       	std	Z+7, r25	; 0x07
			STEP[2] = sub_function (&old_val_3, value_3)*SPMM[2];    //call function to extract third step
    1fc4:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <value_3>
    1fc8:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <value_3+0x1>
    1fcc:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <value_3+0x2>
    1fd0:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <value_3+0x3>
    1fd4:	82 e5       	ldi	r24, 0x52	; 82
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	60 85       	ldd	r22, Z+8	; 0x08
    1fe4:	71 85       	ldd	r23, Z+9	; 0x09
    1fe6:	82 85       	ldd	r24, Z+10	; 0x0a
    1fe8:	93 85       	ldd	r25, Z+11	; 0x0b
    1fea:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    1fee:	f6 01       	movw	r30, r12
    1ff0:	60 87       	std	Z+8, r22	; 0x08
    1ff2:	71 87       	std	Z+9, r23	; 0x09
    1ff4:	82 87       	std	Z+10, r24	; 0x0a
    1ff6:	93 87       	std	Z+11, r25	; 0x0b
			STEP[3] = 0;
    1ff8:	14 86       	std	Z+12, r1	; 0x0c
    1ffa:	15 86       	std	Z+13, r1	; 0x0d
    1ffc:	16 86       	std	Z+14, r1	; 0x0e
    1ffe:	17 86       	std	Z+15, r1	; 0x0f
			SE0 = 0;
    2000:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <SE0>
    2004:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <SE0+0x1>
    2008:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <SE0+0x2>
    200c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <SE0+0x3>
			SB = 0;
    2010:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <SB>
    2014:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <SB+0x1>
    2018:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <SB+0x2>
    201c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <SB+0x3>
			status = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <status>
			motor_movement(STEP,SPMM,F,Fe);
    2026:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <Fe>
    202a:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <Fe+0x1>
    202e:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <Fe+0x2>
    2032:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <Fe+0x3>
    2036:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <F>
    203a:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <F+0x1>
    203e:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <F+0x2>
    2042:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <F+0x3>
    2046:	65 e1       	ldi	r22, 0x15	; 21
    2048:	72 e0       	ldi	r23, 0x02	; 2
    204a:	c6 01       	movw	r24, r12
    204c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <motor_movement>
			STEP[0] = 0;
    2050:	f6 01       	movw	r30, r12
    2052:	10 82       	st	Z, r1
    2054:	11 82       	std	Z+1, r1	; 0x01
    2056:	12 82       	std	Z+2, r1	; 0x02
    2058:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    205a:	14 82       	std	Z+4, r1	; 0x04
    205c:	15 82       	std	Z+5, r1	; 0x05
    205e:	16 82       	std	Z+6, r1	; 0x06
    2060:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    2062:	10 86       	std	Z+8, r1	; 0x08
    2064:	11 86       	std	Z+9, r1	; 0x09
    2066:	12 86       	std	Z+10, r1	; 0x0a
    2068:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    206a:	14 86       	std	Z+12, r1	; 0x0c
    206c:	15 86       	std	Z+13, r1	; 0x0d
    206e:	16 86       	std	Z+14, r1	; 0x0e
    2070:	17 86       	std	Z+15, r1	; 0x0f
			status = 0;
    2072:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <status>
			Transmit_Data("ok\0");
    2076:	87 e9       	ldi	r24, 0x97	; 151
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
		}
		if (val == 105)
    207e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    2082:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    2086:	89 36       	cpi	r24, 0x69	; 105
    2088:	91 05       	cpc	r25, r1
    208a:	09 f0       	breq	.+2      	; 0x208e <__vector_9+0x274>
    208c:	88 c0       	rjmp	.+272    	; 0x219e <__vector_9+0x384>
    208e:	ed e8       	ldi	r30, 0x8D	; 141
    2090:	f2 e0       	ldi	r31, 0x02	; 2
    2092:	a7 eb       	ldi	r26, 0xB7	; 183
    2094:	b1 e0       	ldi	r27, 0x01	; 1
    2096:	87 e9       	ldi	r24, 0x97	; 151
    2098:	92 e0       	ldi	r25, 0x02	; 2
		{
			for (int x = 0 ; x < 10 ; x ++)
			{
				TE[x] = 0;
    209a:	11 92       	st	Z+, r1
				TB[x] = 0;
    209c:	1d 92       	st	X+, r1
			status = 0;
			Transmit_Data("ok\0");
		}
		if (val == 105)
		{
			for (int x = 0 ; x < 10 ; x ++)
    209e:	e8 17       	cp	r30, r24
    20a0:	f9 07       	cpc	r31, r25
    20a2:	d9 f7       	brne	.-10     	; 0x209a <__vector_9+0x280>
			{
				TE[x] = 0;
				TB[x] = 0;
			}
			sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
    20a4:	80 e4       	ldi	r24, 0x40	; 64
    20a6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    20aa:	0e e4       	ldi	r16, 0x4E	; 78
    20ac:	11 e0       	ldi	r17, 0x01	; 1
    20ae:	23 e0       	ldi	r18, 0x03	; 3
    20b0:	42 e0       	ldi	r20, 0x02	; 2
    20b2:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    20b6:	9f 93       	push	r25
    20b8:	8f 93       	push	r24
    20ba:	8d e8       	ldi	r24, 0x8D	; 141
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
			sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
    20c6:	82 e4       	ldi	r24, 0x42	; 66
    20c8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    20cc:	23 e0       	ldi	r18, 0x03	; 3
    20ce:	42 e0       	ldi	r20, 0x02	; 2
    20d0:	0e 94 8d 18 	call	0x311a	; 0x311a <dtostrf>
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	87 eb       	ldi	r24, 0xB7	; 183
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	9f 93       	push	r25
    20de:	8f 93       	push	r24
    20e0:	0e 94 d7 18 	call	0x31ae	; 0x31ae <sprintf>
			if ((BED_Activ == 1))
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <BED_Activ>
    20f2:	88 23       	and	r24, r24
    20f4:	71 f1       	breq	.+92     	; 0x2152 <__vector_9+0x338>
			{
				char TEMP[20]={'T',':',
    20f6:	84 e5       	ldi	r24, 0x54	; 84
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	8a e3       	ldi	r24, 0x3A	; 58
    20fc:	8a 83       	std	Y+2, r24	; 0x02
							TE[0],TE[1],TE[2],TE[3],TE[4],
    20fe:	ed e8       	ldi	r30, 0x8D	; 141
    2100:	f2 e0       	ldi	r31, 0x02	; 2
			}
			sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    2102:	90 81       	ld	r25, Z
    2104:	9b 83       	std	Y+3, r25	; 0x03
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	92 81       	ldd	r25, Z+2	; 0x02
    210c:	9d 83       	std	Y+5, r25	; 0x05
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	94 81       	ldd	r25, Z+4	; 0x04
    2114:	9f 83       	std	Y+7, r25	; 0x07
    2116:	90 e2       	ldi	r25, 0x20	; 32
    2118:	98 87       	std	Y+8, r25	; 0x08
    211a:	25 e4       	ldi	r18, 0x45	; 69
    211c:	29 87       	std	Y+9, r18	; 0x09
    211e:	8a 87       	std	Y+10, r24	; 0x0a
    2120:	20 e3       	ldi	r18, 0x30	; 48
    2122:	2b 87       	std	Y+11, r18	; 0x0b
    2124:	9c 87       	std	Y+12, r25	; 0x0c
    2126:	92 e4       	ldi	r25, 0x42	; 66
    2128:	9d 87       	std	Y+13, r25	; 0x0d
    212a:	8e 87       	std	Y+14, r24	; 0x0e
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0',' ',
							'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\n'};
    212c:	e7 eb       	ldi	r30, 0xB7	; 183
    212e:	f1 e0       	ldi	r31, 0x01	; 1
			}
			sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    2130:	80 81       	ld	r24, Z
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	81 81       	ldd	r24, Z+1	; 0x01
    2136:	88 8b       	std	Y+16, r24	; 0x10
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	89 8b       	std	Y+17, r24	; 0x11
    213c:	83 81       	ldd	r24, Z+3	; 0x03
    213e:	8a 8b       	std	Y+18, r24	; 0x12
    2140:	84 81       	ldd	r24, Z+4	; 0x04
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	8a e0       	ldi	r24, 0x0A	; 10
    2146:	8c 8b       	std	Y+20, r24	; 0x14
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0',' ',
							'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\n'};
				Transmit_Data(TEMP);
    2148:	ce 01       	movw	r24, r28
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
    2150:	22 c0       	rjmp	.+68     	; 0x2196 <__vector_9+0x37c>
			}
			else
			{
				char TEMP[15]={'T',':',
    2152:	ce 01       	movw	r24, r28
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	2f e0       	ldi	r18, 0x0F	; 15
    2158:	fc 01       	movw	r30, r24
    215a:	11 92       	st	Z+, r1
    215c:	2a 95       	dec	r18
    215e:	e9 f7       	brne	.-6      	; 0x215a <__vector_9+0x340>
    2160:	24 e5       	ldi	r18, 0x54	; 84
    2162:	29 83       	std	Y+1, r18	; 0x01
    2164:	2a e3       	ldi	r18, 0x3A	; 58
    2166:	2a 83       	std	Y+2, r18	; 0x02
							TE[0],TE[1],TE[2],TE[3],TE[4],
    2168:	ed e8       	ldi	r30, 0x8D	; 141
    216a:	f2 e0       	ldi	r31, 0x02	; 2
							'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\n'};
				Transmit_Data(TEMP);
			}
			else
			{
				char TEMP[15]={'T',':',
    216c:	30 81       	ld	r19, Z
    216e:	3b 83       	std	Y+3, r19	; 0x03
    2170:	31 81       	ldd	r19, Z+1	; 0x01
    2172:	3c 83       	std	Y+4, r19	; 0x04
    2174:	32 81       	ldd	r19, Z+2	; 0x02
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	33 81       	ldd	r19, Z+3	; 0x03
    217a:	3e 83       	std	Y+6, r19	; 0x06
    217c:	34 81       	ldd	r19, Z+4	; 0x04
    217e:	3f 83       	std	Y+7, r19	; 0x07
    2180:	30 e2       	ldi	r19, 0x20	; 32
    2182:	38 87       	std	Y+8, r19	; 0x08
    2184:	35 e4       	ldi	r19, 0x45	; 69
    2186:	39 87       	std	Y+9, r19	; 0x09
    2188:	2a 87       	std	Y+10, r18	; 0x0a
    218a:	20 e3       	ldi	r18, 0x30	; 48
    218c:	2b 87       	std	Y+11, r18	; 0x0b
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	2c 87       	std	Y+12, r18	; 0x0c
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0','\n'};
				Transmit_Data(TEMP);
    2192:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
			}
			Transmit_Data("ok\0");
    2196:	87 e9       	ldi	r24, 0x97	; 151
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Transmit_Data>
		}
	RXch2 = 0;
    219e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <RXch2>
	}
		if (gFlags.pidTimer == 1)
    21a2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <gFlags>
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	3d c0       	rjmp	.+122    	; 0x2224 <__vector_9+0x40a>
		{
			OCR1A =	255 - pid_Controller(SE0	,getTemp(T0), &SpidData); //out the pid value to control the temperature of extruder
    21aa:	80 e4       	ldi	r24, 0x40	; 64
    21ac:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    21b0:	9b 01       	movw	r18, r22
    21b2:	ac 01       	movw	r20, r24
    21b4:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <SE0>
    21b8:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <SE0+0x1>
    21bc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <SE0+0x2>
    21c0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <SE0+0x3>
    21c4:	0f ec       	ldi	r16, 0xCF	; 207
    21c6:	11 e0       	ldi	r17, 0x01	; 1
    21c8:	0e 94 e6 13 	call	0x27cc	; 0x27cc <pid_Controller>
    21cc:	ee 24       	eor	r14, r14
    21ce:	ea 94       	dec	r14
    21d0:	f1 2c       	mov	r15, r1
    21d2:	97 01       	movw	r18, r14
    21d4:	28 1b       	sub	r18, r24
    21d6:	39 0b       	sbc	r19, r25
    21d8:	3b bd       	out	0x2b, r19	; 43
    21da:	2a bd       	out	0x2a, r18	; 42
			OCR1B = 255 - pid_Controller(SB		,getTemp(T2), &BpidData); //out the pid value to control the temperature of heat bed
    21dc:	82 e4       	ldi	r24, 0x42	; 66
    21de:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <SB>
    21ea:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <SB+0x1>
    21ee:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <SB+0x2>
    21f2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <SB+0x3>
    21f6:	0b ee       	ldi	r16, 0xEB	; 235
    21f8:	11 e0       	ldi	r17, 0x01	; 1
    21fa:	0e 94 e6 13 	call	0x27cc	; 0x27cc <pid_Controller>
    21fe:	e8 1a       	sub	r14, r24
    2200:	f9 0a       	sbc	r15, r25
    2202:	f9 bc       	out	0x29, r15	; 41
    2204:	e8 bc       	out	0x28, r14	; 40
			gFlags.pidTimer = 0;
    2206:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <gFlags>
    220a:	8e 7f       	andi	r24, 0xFE	; 254
    220c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <gFlags>
		}

}
    2210:	09 c0       	rjmp	.+18     	; 0x2224 <__vector_9+0x40a>
			STEP[2] = 0;
			STEP[3] = 0;
			status = 0;
			Transmit_Data("ok\0");
		}
		if (val == 105)
    2212:	89 36       	cpi	r24, 0x69	; 105
    2214:	91 05       	cpc	r25, r1
    2216:	19 f6       	brne	.-122    	; 0x219e <__vector_9+0x384>
    2218:	3a cf       	rjmp	.-396    	; 0x208e <__vector_9+0x274>
		}
	}

	if (RXch2 == 'M' )
	{
		if (val == 112)
    221a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val>
    221e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x1>
    2222:	f7 cf       	rjmp	.-18     	; 0x2212 <__vector_9+0x3f8>
			OCR1A =	255 - pid_Controller(SE0	,getTemp(T0), &SpidData); //out the pid value to control the temperature of extruder
			OCR1B = 255 - pid_Controller(SB		,getTemp(T2), &BpidData); //out the pid value to control the temperature of heat bed
			gFlags.pidTimer = 0;
		}

}
    2224:	64 96       	adiw	r28, 0x14	; 20
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	ff 91       	pop	r31
    2236:	ef 91       	pop	r30
    2238:	bf 91       	pop	r27
    223a:	af 91       	pop	r26
    223c:	9f 91       	pop	r25
    223e:	8f 91       	pop	r24
    2240:	7f 91       	pop	r23
    2242:	6f 91       	pop	r22
    2244:	5f 91       	pop	r21
    2246:	4f 91       	pop	r20
    2248:	3f 91       	pop	r19
    224a:	2f 91       	pop	r18
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	0f 90       	pop	r0
    225e:	1f 90       	pop	r1
    2260:	18 95       	reti

00002262 <__vector_1>:

ISR (INT0_vect)
{
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	2f 93       	push	r18
    226e:	3f 93       	push	r19
    2270:	4f 93       	push	r20
    2272:	5f 93       	push	r21
    2274:	6f 93       	push	r22
    2276:	7f 93       	push	r23
    2278:	8f 93       	push	r24
    227a:	9f 93       	push	r25
    227c:	af 93       	push	r26
    227e:	bf 93       	push	r27
    2280:	ef 93       	push	r30
    2282:	ff 93       	push	r31
	pin_write (M_PORT, Z_DIR_PIN ,1 );
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	66 e0       	ldi	r22, 0x06	; 6
    2288:	83 e3       	ldi	r24, 0x33	; 51
    228a:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
	pin_write (M_PORT, Z ,0 );
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	83 e3       	ldi	r24, 0x33	; 51
    2294:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2298:	8f ea       	ldi	r24, 0xAF	; 175
    229a:	94 e0       	ldi	r25, 0x04	; 4
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <__vector_1+0x3a>
    22a0:	00 c0       	rjmp	.+0      	; 0x22a2 <__vector_1+0x40>
    22a2:	00 00       	nop
	_delay_us (300);
	pin_write (M_PORT, Z ,1 );
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	83 e3       	ldi	r24, 0x33	; 51
    22aa:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    22ae:	8f ea       	ldi	r24, 0xAF	; 175
    22b0:	94 e0       	ldi	r25, 0x04	; 4
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__vector_1+0x50>
    22b6:	00 c0       	rjmp	.+0      	; 0x22b8 <__vector_1+0x56>
    22b8:	00 00       	nop
	_delay_us (300);
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	bf 91       	pop	r27
    22c0:	af 91       	pop	r26
    22c2:	9f 91       	pop	r25
    22c4:	8f 91       	pop	r24
    22c6:	7f 91       	pop	r23
    22c8:	6f 91       	pop	r22
    22ca:	5f 91       	pop	r21
    22cc:	4f 91       	pop	r20
    22ce:	3f 91       	pop	r19
    22d0:	2f 91       	pop	r18
    22d2:	0f 90       	pop	r0
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	0f 90       	pop	r0
    22d8:	1f 90       	pop	r1
    22da:	18 95       	reti

000022dc <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],double spmm[4],double speed,double exspeed)
{
    22dc:	2f 92       	push	r2
    22de:	3f 92       	push	r3
    22e0:	4f 92       	push	r4
    22e2:	5f 92       	push	r5
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	ce 5a       	subi	r28, 0xAE	; 174
    2306:	d1 09       	sbc	r29, r1
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	6c 01       	movw	r12, r24
    2314:	c3 55       	subi	r28, 0x53	; 83
    2316:	df 4f       	sbci	r29, 0xFF	; 255
    2318:	79 83       	std	Y+1, r23	; 0x01
    231a:	68 83       	st	Y, r22
    231c:	cd 5a       	subi	r28, 0xAD	; 173
    231e:	d0 40       	sbci	r29, 0x00	; 0
    2320:	49 01       	movw	r8, r18
    2322:	5a 01       	movw	r10, r20
    2324:	c7 55       	subi	r28, 0x57	; 87
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	e8 82       	st	Y, r14
    232a:	f9 82       	std	Y+1, r15	; 0x01
    232c:	0a 83       	std	Y+2, r16	; 0x02
    232e:	1b 83       	std	Y+3, r17	; 0x03
    2330:	c9 5a       	subi	r28, 0xA9	; 169
    2332:	d0 40       	sbci	r29, 0x00	; 0
	long stepDuration[4];
	if (speed != 0.0)
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	a9 01       	movw	r20, r18
    233a:	c5 01       	movw	r24, r10
    233c:	b4 01       	movw	r22, r8
    233e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    2342:	88 23       	and	r24, r24
    2344:	09 f4       	brne	.+2      	; 0x2348 <motor_movement+0x6c>
    2346:	4a c0       	rjmp	.+148    	; 0x23dc <motor_movement+0x100>
    2348:	c3 55       	subi	r28, 0x53	; 83
    234a:	df 4f       	sbci	r29, 0xFF	; 255
    234c:	e8 80       	ld	r14, Y
    234e:	f9 80       	ldd	r15, Y+1	; 0x01
    2350:	cd 5a       	subi	r28, 0xAD	; 173
    2352:	d0 40       	sbci	r29, 0x00	; 0
    2354:	8e 01       	movw	r16, r28
    2356:	0f 5f       	subi	r16, 0xFF	; 255
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	3e 01       	movw	r6, r28
    235c:	2d e0       	ldi	r18, 0x0D	; 13
    235e:	62 0e       	add	r6, r18
    2360:	71 1c       	adc	r7, r1
	{
		for (int i = 0; i < 3 ; i++)
		{
			stepDuration[i] = (1/(speed*spmm[i]))*60*pow(10,6);
			if (stepDuration[i] < 100)
				stepDuration[i] = 100;
    2362:	0f 2e       	mov	r0, r31
    2364:	f4 e6       	ldi	r31, 0x64	; 100
    2366:	2f 2e       	mov	r2, r31
    2368:	31 2c       	mov	r3, r1
    236a:	41 2c       	mov	r4, r1
    236c:	51 2c       	mov	r5, r1
    236e:	f0 2d       	mov	r31, r0
	long stepDuration[4];
	if (speed != 0.0)
	{
		for (int i = 0; i < 3 ; i++)
		{
			stepDuration[i] = (1/(speed*spmm[i]))*60*pow(10,6);
    2370:	f7 01       	movw	r30, r14
    2372:	21 91       	ld	r18, Z+
    2374:	31 91       	ld	r19, Z+
    2376:	41 91       	ld	r20, Z+
    2378:	51 91       	ld	r21, Z+
    237a:	7f 01       	movw	r14, r30
    237c:	c5 01       	movw	r24, r10
    237e:	b4 01       	movw	r22, r8
    2380:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    2384:	9b 01       	movw	r18, r22
    2386:	ac 01       	movw	r20, r24
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	80 e8       	ldi	r24, 0x80	; 128
    238e:	9f e3       	ldi	r25, 0x3F	; 63
    2390:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e7       	ldi	r20, 0x70	; 112
    239a:	52 e4       	ldi	r21, 0x42	; 66
    239c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	34 e2       	ldi	r19, 0x24	; 36
    23a4:	44 e7       	ldi	r20, 0x74	; 116
    23a6:	59 e4       	ldi	r21, 0x49	; 73
    23a8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    23ac:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fixsfsi>
			if (stepDuration[i] < 100)
    23b0:	64 36       	cpi	r22, 0x64	; 100
    23b2:	71 05       	cpc	r23, r1
    23b4:	81 05       	cpc	r24, r1
    23b6:	91 05       	cpc	r25, r1
    23b8:	34 f0       	brlt	.+12     	; 0x23c6 <motor_movement+0xea>
	long stepDuration[4];
	if (speed != 0.0)
	{
		for (int i = 0; i < 3 ; i++)
		{
			stepDuration[i] = (1/(speed*spmm[i]))*60*pow(10,6);
    23ba:	f8 01       	movw	r30, r16
    23bc:	60 83       	st	Z, r22
    23be:	71 83       	std	Z+1, r23	; 0x01
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	93 83       	std	Z+3, r25	; 0x03
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <motor_movement+0xf4>
			if (stepDuration[i] < 100)
				stepDuration[i] = 100;
    23c6:	f8 01       	movw	r30, r16
    23c8:	20 82       	st	Z, r2
    23ca:	31 82       	std	Z+1, r3	; 0x01
    23cc:	42 82       	std	Z+2, r4	; 0x02
    23ce:	53 82       	std	Z+3, r5	; 0x03
    23d0:	0c 5f       	subi	r16, 0xFC	; 252
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],double spmm[4],double speed,double exspeed)
{
	long stepDuration[4];
	if (speed != 0.0)
	{
		for (int i = 0; i < 3 ; i++)
    23d4:	60 16       	cp	r6, r16
    23d6:	71 06       	cpc	r7, r17
    23d8:	59 f6       	brne	.-106    	; 0x2370 <motor_movement+0x94>
    23da:	10 c0       	rjmp	.+32     	; 0x23fc <motor_movement+0x120>
	}
	else
	{
		for (int i = 0; i < 3 ; i++)
		{
			stepDuration[i] = 100;
    23dc:	84 e6       	ldi	r24, 0x64	; 100
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	ab 83       	std	Y+3, r26	; 0x03
    23ea:	bc 83       	std	Y+4, r27	; 0x04
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	af 83       	std	Y+7, r26	; 0x07
    23f2:	b8 87       	std	Y+8, r27	; 0x08
    23f4:	89 87       	std	Y+9, r24	; 0x09
    23f6:	9a 87       	std	Y+10, r25	; 0x0a
    23f8:	ab 87       	std	Y+11, r26	; 0x0b
    23fa:	bc 87       	std	Y+12, r27	; 0x0c
		}
	}	
	if (exspeed !=0.0)
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	c7 55       	subi	r28, 0x57	; 87
    2404:	df 4f       	sbci	r29, 0xFF	; 255
    2406:	68 81       	ld	r22, Y
    2408:	79 81       	ldd	r23, Y+1	; 0x01
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	c9 5a       	subi	r28, 0xA9	; 169
    2410:	d0 40       	sbci	r29, 0x00	; 0
    2412:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    2416:	88 23       	and	r24, r24
    2418:	e9 f1       	breq	.+122    	; 0x2494 <motor_movement+0x1b8>
	{
		stepDuration[3] = (1/(exspeed*spmm[3]))*60*pow(10,6);
    241a:	c3 55       	subi	r28, 0x53	; 83
    241c:	df 4f       	sbci	r29, 0xFF	; 255
    241e:	e8 81       	ld	r30, Y
    2420:	f9 81       	ldd	r31, Y+1	; 0x01
    2422:	cd 5a       	subi	r28, 0xAD	; 173
    2424:	d0 40       	sbci	r29, 0x00	; 0
    2426:	24 85       	ldd	r18, Z+12	; 0x0c
    2428:	35 85       	ldd	r19, Z+13	; 0x0d
    242a:	46 85       	ldd	r20, Z+14	; 0x0e
    242c:	57 85       	ldd	r21, Z+15	; 0x0f
    242e:	c7 55       	subi	r28, 0x57	; 87
    2430:	df 4f       	sbci	r29, 0xFF	; 255
    2432:	68 81       	ld	r22, Y
    2434:	79 81       	ldd	r23, Y+1	; 0x01
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	c9 5a       	subi	r28, 0xA9	; 169
    243c:	d0 40       	sbci	r29, 0x00	; 0
    243e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	80 e8       	ldi	r24, 0x80	; 128
    244c:	9f e3       	ldi	r25, 0x3F	; 63
    244e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e7       	ldi	r20, 0x70	; 112
    2458:	52 e4       	ldi	r21, 0x42	; 66
    245a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	34 e2       	ldi	r19, 0x24	; 36
    2462:	44 e7       	ldi	r20, 0x74	; 116
    2464:	59 e4       	ldi	r21, 0x49	; 73
    2466:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    246a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fixsfsi>
		if (stepDuration[3] < 100)
    246e:	64 36       	cpi	r22, 0x64	; 100
    2470:	71 05       	cpc	r23, r1
    2472:	81 05       	cpc	r24, r1
    2474:	91 05       	cpc	r25, r1
    2476:	2c f0       	brlt	.+10     	; 0x2482 <motor_movement+0x1a6>
			stepDuration[i] = 100;
		}
	}	
	if (exspeed !=0.0)
	{
		stepDuration[3] = (1/(exspeed*spmm[3]))*60*pow(10,6);
    2478:	6d 87       	std	Y+13, r22	; 0x0d
    247a:	7e 87       	std	Y+14, r23	; 0x0e
    247c:	8f 87       	std	Y+15, r24	; 0x0f
    247e:	98 8b       	std	Y+16, r25	; 0x10
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <motor_movement+0x1c8>
		if (stepDuration[3] < 100)
			stepDuration[3] = 100;
    2482:	84 e6       	ldi	r24, 0x64	; 100
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e0       	ldi	r26, 0x00	; 0
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	8d 87       	std	Y+13, r24	; 0x0d
    248c:	9e 87       	std	Y+14, r25	; 0x0e
    248e:	af 87       	std	Y+15, r26	; 0x0f
    2490:	b8 8b       	std	Y+16, r27	; 0x10
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <motor_movement+0x1c8>
	}
	else
		stepDuration[3] = 100;
    2494:	84 e6       	ldi	r24, 0x64	; 100
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 e0       	ldi	r26, 0x00	; 0
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	8d 87       	std	Y+13, r24	; 0x0d
    249e:	9e 87       	std	Y+14, r25	; 0x0e
    24a0:	af 87       	std	Y+15, r26	; 0x0f
    24a2:	b8 8b       	std	Y+16, r27	; 0x10
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	ee eb       	ldi	r30, 0xBE	; 190
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	de 01       	movw	r26, r28
    24ac:	51 96       	adiw	r26, 0x11	; 17
    24ae:	01 90       	ld	r0, Z+
    24b0:	0d 92       	st	X+, r0
    24b2:	8a 95       	dec	r24
    24b4:	e1 f7       	brne	.-8      	; 0x24ae <motor_movement+0x1d2>
    24b6:	76 01       	movw	r14, r12
    24b8:	8e 01       	movw	r16, r28
    24ba:	0f 5e       	subi	r16, 0xEF	; 239
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	5e 01       	movw	r10, r28
    24c0:	f9 e1       	ldi	r31, 0x19	; 25
    24c2:	af 0e       	add	r10, r31
    24c4:	b1 1c       	adc	r11, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	a9 01       	movw	r20, r18
    24cc:	f7 01       	movw	r30, r14
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    24da:	88 23       	and	r24, r24
    24dc:	8c f4       	brge	.+34     	; 0x2500 <motor_movement+0x224>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	f8 01       	movw	r30, r16
    24e2:	60 81       	ld	r22, Z
    24e4:	83 e3       	ldi	r24, 0x33	; 51
    24e6:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			step [i] = step [i] * -1;
    24ea:	f7 01       	movw	r30, r14
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	a2 81       	ldd	r26, Z+2	; 0x02
    24f2:	b3 81       	ldd	r27, Z+3	; 0x03
    24f4:	b0 58       	subi	r27, 0x80	; 128
    24f6:	80 83       	st	Z, r24
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	a2 83       	std	Z+2, r26	; 0x02
    24fc:	b3 83       	std	Z+3, r27	; 0x03
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <motor_movement+0x230>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	f8 01       	movw	r30, r16
    2504:	60 81       	ld	r22, Z
    2506:	83 e3       	ldi	r24, 0x33	; 51
    2508:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    250c:	f4 e0       	ldi	r31, 0x04	; 4
    250e:	ef 0e       	add	r14, r31
    2510:	f1 1c       	adc	r15, r1
    2512:	0e 5f       	subi	r16, 0xFE	; 254
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
			stepDuration[3] = 100;
	}
	else
		stepDuration[3] = 100;
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    2516:	0a 15       	cp	r16, r10
    2518:	1b 05       	cpc	r17, r11
    251a:	a9 f6       	brne	.-86     	; 0x24c6 <motor_movement+0x1ea>
		int Out;     // make one step to one motor in one unit of time
		int Next[16];
	};
	typedef const struct State STyp; //define STYP from type of struct State
	/*{Current state,{next state}} */
	STyp FSM[4]=
    251c:	88 e8       	ldi	r24, 0x88	; 136
    251e:	e6 ec       	ldi	r30, 0xC6	; 198
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	de 01       	movw	r26, r28
    2524:	91 96       	adiw	r26, 0x21	; 33
    2526:	01 90       	ld	r0, Z+
    2528:	0d 92       	st	X+, r0
    252a:	8a 95       	dec	r24
    252c:	e1 f7       	brne	.-8      	; 0x2526 <motor_movement+0x24a>
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,E,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
		j [0] = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9a 8f       	std	Y+26, r25	; 0x1a
    2534:	89 8f       	std	Y+25, r24	; 0x19
		j [1] = 1;
    2536:	9c 8f       	std	Y+28, r25	; 0x1c
    2538:	8b 8f       	std	Y+27, r24	; 0x1b
		j [2] = 1;
    253a:	9e 8f       	std	Y+30, r25	; 0x1e
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
		j [3] = 1;
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
		{Y,{E,X,Y,X,Z,X,Y,X,E,E,E,E,E,E,E,E}},
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,E,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
    2542:	e1 2c       	mov	r14, r1
    2544:	f1 2c       	mov	r15, r1
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2546:	02 e2       	ldi	r16, 0x22	; 34
			for (int i = stepDuration[S] ; i>=0 ; i-- )
			{
				 _delay_us(1);
			}
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
    2548:	11 e1       	ldi	r17, 0x11	; 17
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    254a:	0e 9d       	mul	r16, r14
    254c:	f0 01       	movw	r30, r0
    254e:	0f 9d       	mul	r16, r15
    2550:	f0 0d       	add	r31, r0
    2552:	11 24       	eor	r1, r1
    2554:	21 e0       	ldi	r18, 0x01	; 1
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	2c 0f       	add	r18, r28
    255a:	3d 1f       	adc	r19, r29
    255c:	e2 0f       	add	r30, r18
    255e:	f3 1f       	adc	r31, r19
    2560:	60 a1       	ldd	r22, Z+32	; 0x20
    2562:	83 e3       	ldi	r24, 0x33	; 51
    2564:	0e 94 c0 03 	call	0x780	; 0x780 <pin_XOR>
			 step[S] = step[S] - 1;
    2568:	57 01       	movw	r10, r14
    256a:	aa 0c       	add	r10, r10
    256c:	bb 1c       	adc	r11, r11
    256e:	aa 0c       	add	r10, r10
    2570:	bb 1c       	adc	r11, r11
    2572:	ac 0c       	add	r10, r12
    2574:	bd 1c       	adc	r11, r13
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	f5 01       	movw	r30, r10
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
    258c:	f5 01       	movw	r30, r10
    258e:	60 83       	st	Z, r22
    2590:	71 83       	std	Z+1, r23	; 0x01
    2592:	82 83       	std	Z+2, r24	; 0x02
    2594:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	a9 01       	movw	r20, r18
    259c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	5c f0       	brlt	.+22     	; 0x25ba <motor_movement+0x2de>
			  j[S] = 0;
    25a4:	f7 01       	movw	r30, r14
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	21 e0       	ldi	r18, 0x01	; 1
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	2c 0f       	add	r18, r28
    25b0:	3d 1f       	adc	r19, r29
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	11 8e       	std	Z+25, r1	; 0x19
    25b8:	10 8e       	std	Z+24, r1	; 0x18
			for (int i = stepDuration[S] ; i>=0 ; i-- )
    25ba:	f7 01       	movw	r30, r14
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	8c 0f       	add	r24, r28
    25ca:	9d 1f       	adc	r25, r29
    25cc:	e8 0f       	add	r30, r24
    25ce:	f9 1f       	adc	r31, r25
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	99 23       	and	r25, r25
    25d6:	34 f0       	brlt	.+12     	; 0x25e4 <motor_movement+0x308>
    25d8:	e5 e0       	ldi	r30, 0x05	; 5
    25da:	ea 95       	dec	r30
    25dc:	f1 f7       	brne	.-4      	; 0x25da <motor_movement+0x2fe>
    25de:	00 00       	nop
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	d0 f7       	brcc	.-12     	; 0x25d8 <motor_movement+0x2fc>
			{
				 _delay_us(1);
			}
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    25e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e6:	98 a1       	ldd	r25, Y+32	; 0x20
    25e8:	9c 01       	movw	r18, r24
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	82 0f       	add	r24, r18
    2604:	93 1f       	adc	r25, r19
    2606:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2608:	3c 8d       	ldd	r19, Y+28	; 0x1c
    260a:	22 0f       	add	r18, r18
    260c:	33 1f       	adc	r19, r19
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	29 8d       	ldd	r18, Y+25	; 0x19
    2614:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2616:	82 0f       	add	r24, r18
    2618:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    261a:	1e 9d       	mul	r17, r14
    261c:	f0 01       	movw	r30, r0
    261e:	1f 9d       	mul	r17, r15
    2620:	f0 0d       	add	r31, r0
    2622:	11 24       	eor	r1, r1
    2624:	e8 0f       	add	r30, r24
    2626:	f9 1f       	adc	r31, r25
    2628:	31 96       	adiw	r30, 0x01	; 1
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	21 e0       	ldi	r18, 0x01	; 1
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	2c 0f       	add	r18, r28
    2634:	3d 1f       	adc	r19, r29
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	e0 a0       	ldd	r14, Z+32	; 0x20
    263c:	f1 a0       	ldd	r15, Z+33	; 0x21
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    263e:	89 2b       	or	r24, r25
    2640:	09 f0       	breq	.+2      	; 0x2644 <motor_movement+0x368>
    2642:	83 cf       	rjmp	.-250    	; 0x254a <motor_movement+0x26e>
				 _delay_us(1);
			}
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    2644:	c2 55       	subi	r28, 0x52	; 82
    2646:	df 4f       	sbci	r29, 0xFF	; 255
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	9f 90       	pop	r9
    2668:	8f 90       	pop	r8
    266a:	7f 90       	pop	r7
    266c:	6f 90       	pop	r6
    266e:	5f 90       	pop	r5
    2670:	4f 90       	pop	r4
    2672:	3f 90       	pop	r3
    2674:	2f 90       	pop	r2
    2676:	08 95       	ret

00002678 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    2678:	88 35       	cpi	r24, 0x58	; 88
    267a:	49 f0       	breq	.+18     	; 0x268e <motor_EN_DES+0x16>
    267c:	18 f4       	brcc	.+6      	; 0x2684 <motor_EN_DES+0xc>
    267e:	85 34       	cpi	r24, 0x45	; 69
    2680:	c1 f0       	breq	.+48     	; 0x26b2 <motor_EN_DES+0x3a>
    2682:	08 95       	ret
    2684:	89 35       	cpi	r24, 0x59	; 89
    2686:	49 f0       	breq	.+18     	; 0x269a <motor_EN_DES+0x22>
    2688:	8a 35       	cpi	r24, 0x5A	; 90
    268a:	69 f0       	breq	.+26     	; 0x26a6 <motor_EN_DES+0x2e>
    268c:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    268e:	46 2f       	mov	r20, r22
    2690:	64 e0       	ldi	r22, 0x04	; 4
    2692:	86 e3       	ldi	r24, 0x36	; 54
    2694:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    2698:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    269a:	46 2f       	mov	r20, r22
    269c:	65 e0       	ldi	r22, 0x05	; 5
    269e:	86 e3       	ldi	r24, 0x36	; 54
    26a0:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    26a4:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    26a6:	46 2f       	mov	r20, r22
    26a8:	66 e0       	ldi	r22, 0x06	; 6
    26aa:	86 e3       	ldi	r24, 0x36	; 54
    26ac:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    26b0:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    26b2:	46 2f       	mov	r20, r22
    26b4:	67 e0       	ldi	r22, 0x07	; 7
    26b6:	86 e3       	ldi	r24, 0x36	; 54
    26b8:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    26bc:	08 95       	ret

000026be <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	83 e3       	ldi	r24, 0x33	; 51
    26c2:	0e 94 b1 03 	call	0x762	; 0x762 <port_direction>
	port_write(M_PORT,0);
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	83 e3       	ldi	r24, 0x33	; 51
    26ca:	0e 94 bc 03 	call	0x778	; 0x778 <port_write>
	pin_direction(EN_DES_PORT,EN_DES_XPIN,output);
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	86 e3       	ldi	r24, 0x36	; 54
    26d4:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_YPIN,output);
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	65 e0       	ldi	r22, 0x05	; 5
    26dc:	86 e3       	ldi	r24, 0x36	; 54
    26de:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_ZPIN,output);
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	66 e0       	ldi	r22, 0x06	; 6
    26e6:	86 e3       	ldi	r24, 0x36	; 54
    26e8:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_EPIN,output);
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	67 e0       	ldi	r22, 0x07	; 7
    26f0:	86 e3       	ldi	r24, 0x36	; 54
    26f2:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	motor_EN_DES('X',0);
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	88 e5       	ldi	r24, 0x58	; 88
    26fa:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
	motor_EN_DES('Y',0);
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	89 e5       	ldi	r24, 0x59	; 89
    2702:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
	motor_EN_DES('Z',0);
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	8a e5       	ldi	r24, 0x5A	; 90
    270a:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
	motor_EN_DES('E',0);
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	85 e4       	ldi	r24, 0x45	; 69
    2712:	0e 94 3c 13 	call	0x2678	; 0x2678 <motor_EN_DES>
    2716:	08 95       	ret

00002718 <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    2718:	8f 92       	push	r8
    271a:	9f 92       	push	r9
    271c:	af 92       	push	r10
    271e:	bf 92       	push	r11
    2720:	cf 92       	push	r12
    2722:	df 92       	push	r13
    2724:	ef 92       	push	r14
    2726:	ff 92       	push	r15
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	49 01       	movw	r8, r18
    2732:	5a 01       	movw	r10, r20
    2734:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    2736:	6c 83       	std	Y+4, r22	; 0x04
    2738:	7d 83       	std	Y+5, r23	; 0x05
    273a:	8e 83       	std	Y+6, r24	; 0x06
    273c:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    273e:	28 87       	std	Y+8, r18	; 0x08
    2740:	39 87       	std	Y+9, r19	; 0x09
    2742:	4a 87       	std	Y+10, r20	; 0x0a
    2744:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    2746:	ec 86       	std	Y+12, r14	; 0x0c
    2748:	fd 86       	std	Y+13, r15	; 0x0d
    274a:	0e 87       	std	Y+14, r16	; 0x0e
    274c:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    275a:	9b 01       	movw	r18, r22
    275c:	ac 01       	movw	r20, r24
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	7e ef       	ldi	r23, 0xFE	; 254
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	96 e4       	ldi	r25, 0x46	; 70
    2766:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    276a:	6c 8b       	std	Y+20, r22	; 0x14
    276c:	7d 8b       	std	Y+21, r23	; 0x15
    276e:	8e 8b       	std	Y+22, r24	; 0x16
    2770:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	c5 01       	movw	r24, r10
    277c:	b4 01       	movw	r22, r8
    277e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    2782:	9b 01       	movw	r18, r22
    2784:	ac 01       	movw	r20, r24
    2786:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    278a:	9b 01       	movw	r18, r22
    278c:	ac 01       	movw	r20, r24
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	9f e4       	ldi	r25, 0x4F	; 79
    2796:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    279a:	68 8f       	std	Y+24, r22	; 0x18
    279c:	79 8f       	std	Y+25, r23	; 0x19
    279e:	8a 8f       	std	Y+26, r24	; 0x1a
    27a0:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    27a2:	18 82       	st	Y, r1
    27a4:	19 82       	std	Y+1, r1	; 0x01
    27a6:	1a 82       	std	Y+2, r1	; 0x02
    27a8:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    27aa:	18 8a       	std	Y+16, r1	; 0x10
    27ac:	19 8a       	std	Y+17, r1	; 0x11
    27ae:	1a 8a       	std	Y+18, r1	; 0x12
    27b0:	1b 8a       	std	Y+19, r1	; 0x13
}
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	08 95       	ret

000027cc <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    27cc:	4f 92       	push	r4
    27ce:	5f 92       	push	r5
    27d0:	6f 92       	push	r6
    27d2:	7f 92       	push	r7
    27d4:	8f 92       	push	r8
    27d6:	9f 92       	push	r9
    27d8:	af 92       	push	r10
    27da:	bf 92       	push	r11
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	2a 97       	sbiw	r28, 0x0a	; 10
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	1a 87       	std	Y+10, r17	; 0x0a
    27fe:	09 87       	std	Y+9, r16	; 0x09
	double P_value = 0.00,I_value = 0.00;
	double error = setPoint - processValue;										
    2800:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
    2804:	69 83       	std	Y+1, r22	; 0x01
    2806:	7a 83       	std	Y+2, r23	; 0x02
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	9c 83       	std	Y+4, r25	; 0x04
	pid_st ->SumError = pid_st ->SumError + error ;							
    280c:	f8 01       	movw	r30, r16
    280e:	20 89       	ldd	r18, Z+16	; 0x10
    2810:	31 89       	ldd	r19, Z+17	; 0x11
    2812:	42 89       	ldd	r20, Z+18	; 0x12
    2814:	53 89       	ldd	r21, Z+19	; 0x13
    2816:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    281a:	4b 01       	movw	r8, r22
    281c:	5c 01       	movw	r10, r24
    281e:	f8 01       	movw	r30, r16
    2820:	60 8b       	std	Z+16, r22	; 0x10
    2822:	71 8b       	std	Z+17, r23	; 0x11
    2824:	82 8b       	std	Z+18, r24	; 0x12
    2826:	93 8b       	std	Z+19, r25	; 0x13
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    2828:	c4 84       	ldd	r12, Z+12	; 0x0c
    282a:	d5 84       	ldd	r13, Z+13	; 0x0d
    282c:	e6 84       	ldd	r14, Z+14	; 0x0e
    282e:	f7 84       	ldd	r15, Z+15	; 0x0f
    2830:	20 81       	ld	r18, Z
    2832:	31 81       	ldd	r19, Z+1	; 0x01
    2834:	42 81       	ldd	r20, Z+2	; 0x02
    2836:	53 81       	ldd	r21, Z+3	; 0x03
    2838:	69 81       	ldd	r22, Y+1	; 0x01
    283a:	7a 81       	ldd	r23, Y+2	; 0x02
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__subsf3>
    2844:	a7 01       	movw	r20, r14
    2846:	96 01       	movw	r18, r12
    2848:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    284c:	6d 83       	std	Y+5, r22	; 0x05
    284e:	7e 83       	std	Y+6, r23	; 0x06
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
    2854:	f8 01       	movw	r30, r16
    2856:	44 88       	ldd	r4, Z+20	; 0x14
    2858:	55 88       	ldd	r5, Z+21	; 0x15
    285a:	66 88       	ldd	r6, Z+22	; 0x16
    285c:	77 88       	ldd	r7, Z+23	; 0x17
    285e:	a3 01       	movw	r20, r6
    2860:	92 01       	movw	r18, r4
    2862:	69 81       	ldd	r22, Y+1	; 0x01
    2864:	7a 81       	ldd	r23, Y+2	; 0x02
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    286e:	18 16       	cp	r1, r24
    2870:	b4 f0       	brlt	.+44     	; 0x289e <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    2872:	a3 01       	movw	r20, r6
    2874:	92 01       	movw	r18, r4
    2876:	50 58       	subi	r21, 0x80	; 128
    2878:	69 81       	ldd	r22, Y+1	; 0x01
    287a:	7a 81       	ldd	r23, Y+2	; 0x02
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    2884:	88 23       	and	r24, r24
    2886:	ac f0       	brlt	.+42     	; 0x28b2 <pid_Controller+0xe6>
	{
		P_value = -INT16_MAX;
	}
	else
		P_value = error * (pid_st ->pid_D);
    2888:	a7 01       	movw	r20, r14
    288a:	96 01       	movw	r18, r12
    288c:	69 81       	ldd	r22, Y+1	; 0x01
    288e:	7a 81       	ldd	r23, Y+2	; 0x02
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    2898:	2b 01       	movw	r4, r22
    289a:	3c 01       	movw	r6, r24
    289c:	13 c0       	rjmp	.+38     	; 0x28c4 <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;							
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
	{
		P_value = INT16_MAX;
    289e:	0f 2e       	mov	r0, r31
    28a0:	41 2c       	mov	r4, r1
    28a2:	fe ef       	ldi	r31, 0xFE	; 254
    28a4:	5f 2e       	mov	r5, r31
    28a6:	66 24       	eor	r6, r6
    28a8:	6a 94       	dec	r6
    28aa:	f6 e4       	ldi	r31, 0x46	; 70
    28ac:	7f 2e       	mov	r7, r31
    28ae:	f0 2d       	mov	r31, r0
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    28b2:	0f 2e       	mov	r0, r31
    28b4:	41 2c       	mov	r4, r1
    28b6:	fe ef       	ldi	r31, 0xFE	; 254
    28b8:	5f 2e       	mov	r5, r31
    28ba:	66 24       	eor	r6, r6
    28bc:	6a 94       	dec	r6
    28be:	f6 ec       	ldi	r31, 0xC6	; 198
    28c0:	7f 2e       	mov	r7, r31
    28c2:	f0 2d       	mov	r31, r0
	}
	else
		P_value = error * (pid_st ->pid_D);
	// Calculate Iterm and limit integral runaway
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    28c4:	e9 85       	ldd	r30, Y+9	; 0x09
    28c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    28c8:	c0 8c       	ldd	r12, Z+24	; 0x18
    28ca:	d1 8c       	ldd	r13, Z+25	; 0x19
    28cc:	e2 8c       	ldd	r14, Z+26	; 0x1a
    28ce:	f3 8c       	ldd	r15, Z+27	; 0x1b
    28d0:	a7 01       	movw	r20, r14
    28d2:	96 01       	movw	r18, r12
    28d4:	c5 01       	movw	r24, r10
    28d6:	b4 01       	movw	r22, r8
    28d8:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__gesf2>
    28dc:	18 16       	cp	r1, r24
    28de:	5c f4       	brge	.+22     	; 0x28f6 <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    28e0:	e9 85       	ldd	r30, Y+9	; 0x09
    28e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    28e4:	c0 8a       	std	Z+16, r12	; 0x10
    28e6:	d1 8a       	std	Z+17, r13	; 0x11
    28e8:	e2 8a       	std	Z+18, r14	; 0x12
    28ea:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5e e4       	ldi	r21, 0x4E	; 78
    28f4:	23 c0       	rjmp	.+70     	; 0x293c <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    28f6:	f7 fa       	bst	r15, 7
    28f8:	f0 94       	com	r15
    28fa:	f7 f8       	bld	r15, 7
    28fc:	f0 94       	com	r15
    28fe:	a7 01       	movw	r20, r14
    2900:	96 01       	movw	r18, r12
    2902:	c5 01       	movw	r24, r10
    2904:	b4 01       	movw	r22, r8
    2906:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    290a:	88 23       	and	r24, r24
    290c:	5c f4       	brge	.+22     	; 0x2924 <pid_Controller+0x158>
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    290e:	e9 85       	ldd	r30, Y+9	; 0x09
    2910:	fa 85       	ldd	r31, Y+10	; 0x0a
    2912:	c0 8a       	std	Z+16, r12	; 0x10
    2914:	d1 8a       	std	Z+17, r13	; 0x11
    2916:	e2 8a       	std	Z+18, r14	; 0x12
    2918:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5e ec       	ldi	r21, 0xCE	; 206
    2922:	0c c0       	rjmp	.+24     	; 0x293c <pid_Controller+0x170>
	}
	else
		I_value = pid_st ->SumError * pid_st->pid_I;	
    2924:	e9 85       	ldd	r30, Y+9	; 0x09
    2926:	fa 85       	ldd	r31, Y+10	; 0x0a
    2928:	20 85       	ldd	r18, Z+8	; 0x08
    292a:	31 85       	ldd	r19, Z+9	; 0x09
    292c:	42 85       	ldd	r20, Z+10	; 0x0a
    292e:	53 85       	ldd	r21, Z+11	; 0x0b
    2930:	c5 01       	movw	r24, r10
    2932:	b4 01       	movw	r22, r8
    2934:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    293c:	c3 01       	movw	r24, r6
    293e:	b2 01       	movw	r22, r4
    2940:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    2944:	2d 81       	ldd	r18, Y+5	; 0x05
    2946:	3e 81       	ldd	r19, Y+6	; 0x06
    2948:	4f 81       	ldd	r20, Y+7	; 0x07
    294a:	58 85       	ldd	r21, Y+8	; 0x08
    294c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	48 ef       	ldi	r20, 0xF8	; 248
    2956:	52 e4       	ldi	r21, 0x42	; 66
    2958:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
    295c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fixsfsi>
    2960:	77 23       	and	r23, r23
    2962:	14 f4       	brge	.+4      	; 0x2968 <pid_Controller+0x19c>
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	8b 01       	movw	r16, r22
    296a:	6f 3f       	cpi	r22, 0xFF	; 255
    296c:	71 05       	cpc	r23, r1
    296e:	19 f0       	breq	.+6      	; 0x2976 <pid_Controller+0x1aa>
    2970:	14 f0       	brlt	.+4      	; 0x2976 <pid_Controller+0x1aa>
    2972:	0f ef       	ldi	r16, 0xFF	; 255
    2974:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    2976:	b8 01       	movw	r22, r16
    2978:	01 2e       	mov	r0, r17
    297a:	00 0c       	add	r0, r0
    297c:	88 0b       	sbc	r24, r24
    297e:	99 0b       	sbc	r25, r25
    2980:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    2984:	e9 85       	ldd	r30, Y+9	; 0x09
    2986:	fa 85       	ldd	r31, Y+10	; 0x0a
    2988:	60 83       	st	Z, r22
    298a:	71 83       	std	Z+1, r23	; 0x01
    298c:	82 83       	std	Z+2, r24	; 0x02
    298e:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    2990:	c8 01       	movw	r24, r16
    2992:	2a 96       	adiw	r28, 0x0a	; 10
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	bf 90       	pop	r11
    29b0:	af 90       	pop	r10
    29b2:	9f 90       	pop	r9
    29b4:	8f 90       	pop	r8
    29b6:	7f 90       	pop	r7
    29b8:	6f 90       	pop	r6
    29ba:	5f 90       	pop	r5
    29bc:	4f 90       	pop	r4
    29be:	08 95       	ret

000029c0 <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    29c0:	87 e6       	ldi	r24, 0x67	; 103
    29c2:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    29c4:	10 bc       	out	0x20, r1	; 32
	UCSRA |= (1<<U2X);
    29c6:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB |= ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    29c8:	8a b1       	in	r24, 0x0a	; 10
    29ca:	88 61       	ori	r24, 0x18	; 24
    29cc:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    29ce:	80 b5       	in	r24, 0x20	; 32
    29d0:	86 68       	ori	r24, 0x86	; 134
    29d2:	80 bd       	out	0x20, r24	; 32
    29d4:	08 95       	ret

000029d6 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    29d6:	5d 9b       	sbis	0x0b, 5	; 11
    29d8:	fe cf       	rjmp	.-4      	; 0x29d6 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    29da:	8c b9       	out	0x0c, r24	; 12
    29dc:	08 95       	ret

000029de <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    29de:	5f 9b       	sbis	0x0b, 7	; 11
    29e0:	fe cf       	rjmp	.-4      	; 0x29de <Recive_Char>
	return(UDR); 
    29e2:	8c b1       	in	r24, 0x0c	; 12
}
    29e4:	08 95       	ret

000029e6 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	ec 01       	movw	r28, r24
	while(*ptr_string)
    29ec:	88 81       	ld	r24, Y
    29ee:	88 23       	and	r24, r24
    29f0:	31 f0       	breq	.+12     	; 0x29fe <Transmit_Data+0x18>
    29f2:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    29f4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    29f8:	89 91       	ld	r24, Y+
    29fa:	81 11       	cpse	r24, r1
    29fc:	fb cf       	rjmp	.-10     	; 0x29f4 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    2a0c:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    2a0e:	0e 94 ef 14 	call	0x29de	; 0x29de <Recive_Char>
	 		if((ch == '\n') || (ch == '\r')) //read till enter key is pressed
    2a12:	8a 30       	cpi	r24, 0x0A	; 10
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <Recive_Data+0x16>
    2a16:	8d 30       	cpi	r24, 0x0D	; 13
    2a18:	31 f4       	brne	.+12     	; 0x2a26 <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	ec 0f       	add	r30, r28
    2a1e:	f1 1d       	adc	r31, r1
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    2a26:	f8 01       	movw	r30, r16
    2a28:	ec 0f       	add	r30, r28
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	80 83       	st	Z, r24
    2a2e:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    2a30:	ee cf       	rjmp	.-36     	; 0x2a0e <Recive_Data+0xa>
}
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	08 95       	ret

00002a3a <__subsf3>:
    2a3a:	50 58       	subi	r21, 0x80	; 128

00002a3c <__addsf3>:
    2a3c:	bb 27       	eor	r27, r27
    2a3e:	aa 27       	eor	r26, r26
    2a40:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__addsf3x>
    2a44:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_round>
    2a48:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__fp_pscA>
    2a4c:	38 f0       	brcs	.+14     	; 0x2a5c <__addsf3+0x20>
    2a4e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__fp_pscB>
    2a52:	20 f0       	brcs	.+8      	; 0x2a5c <__addsf3+0x20>
    2a54:	39 f4       	brne	.+14     	; 0x2a64 <__addsf3+0x28>
    2a56:	9f 3f       	cpi	r25, 0xFF	; 255
    2a58:	19 f4       	brne	.+6      	; 0x2a60 <__addsf3+0x24>
    2a5a:	26 f4       	brtc	.+8      	; 0x2a64 <__addsf3+0x28>
    2a5c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>
    2a60:	0e f4       	brtc	.+2      	; 0x2a64 <__addsf3+0x28>
    2a62:	e0 95       	com	r30
    2a64:	e7 fb       	bst	r30, 7
    2a66:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>

00002a6a <__addsf3x>:
    2a6a:	e9 2f       	mov	r30, r25
    2a6c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__fp_split3>
    2a70:	58 f3       	brcs	.-42     	; 0x2a48 <__addsf3+0xc>
    2a72:	ba 17       	cp	r27, r26
    2a74:	62 07       	cpc	r22, r18
    2a76:	73 07       	cpc	r23, r19
    2a78:	84 07       	cpc	r24, r20
    2a7a:	95 07       	cpc	r25, r21
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__addsf3x+0x1c>
    2a7e:	79 f4       	brne	.+30     	; 0x2a9e <__addsf3x+0x34>
    2a80:	a6 f5       	brtc	.+104    	; 0x2aea <__addsf3x+0x80>
    2a82:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_zero>
    2a86:	0e f4       	brtc	.+2      	; 0x2a8a <__addsf3x+0x20>
    2a88:	e0 95       	com	r30
    2a8a:	0b 2e       	mov	r0, r27
    2a8c:	ba 2f       	mov	r27, r26
    2a8e:	a0 2d       	mov	r26, r0
    2a90:	0b 01       	movw	r0, r22
    2a92:	b9 01       	movw	r22, r18
    2a94:	90 01       	movw	r18, r0
    2a96:	0c 01       	movw	r0, r24
    2a98:	ca 01       	movw	r24, r20
    2a9a:	a0 01       	movw	r20, r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	ff 27       	eor	r31, r31
    2aa0:	59 1b       	sub	r21, r25
    2aa2:	99 f0       	breq	.+38     	; 0x2aca <__addsf3x+0x60>
    2aa4:	59 3f       	cpi	r21, 0xF9	; 249
    2aa6:	50 f4       	brcc	.+20     	; 0x2abc <__addsf3x+0x52>
    2aa8:	50 3e       	cpi	r21, 0xE0	; 224
    2aaa:	68 f1       	brcs	.+90     	; 0x2b06 <__addsf3x+0x9c>
    2aac:	1a 16       	cp	r1, r26
    2aae:	f0 40       	sbci	r31, 0x00	; 0
    2ab0:	a2 2f       	mov	r26, r18
    2ab2:	23 2f       	mov	r18, r19
    2ab4:	34 2f       	mov	r19, r20
    2ab6:	44 27       	eor	r20, r20
    2ab8:	58 5f       	subi	r21, 0xF8	; 248
    2aba:	f3 cf       	rjmp	.-26     	; 0x2aa2 <__addsf3x+0x38>
    2abc:	46 95       	lsr	r20
    2abe:	37 95       	ror	r19
    2ac0:	27 95       	ror	r18
    2ac2:	a7 95       	ror	r26
    2ac4:	f0 40       	sbci	r31, 0x00	; 0
    2ac6:	53 95       	inc	r21
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__addsf3x+0x52>
    2aca:	7e f4       	brtc	.+30     	; 0x2aea <__addsf3x+0x80>
    2acc:	1f 16       	cp	r1, r31
    2ace:	ba 0b       	sbc	r27, r26
    2ad0:	62 0b       	sbc	r22, r18
    2ad2:	73 0b       	sbc	r23, r19
    2ad4:	84 0b       	sbc	r24, r20
    2ad6:	ba f0       	brmi	.+46     	; 0x2b06 <__addsf3x+0x9c>
    2ad8:	91 50       	subi	r25, 0x01	; 1
    2ada:	a1 f0       	breq	.+40     	; 0x2b04 <__addsf3x+0x9a>
    2adc:	ff 0f       	add	r31, r31
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	c2 f7       	brpl	.-16     	; 0x2ad8 <__addsf3x+0x6e>
    2ae8:	0e c0       	rjmp	.+28     	; 0x2b06 <__addsf3x+0x9c>
    2aea:	ba 0f       	add	r27, r26
    2aec:	62 1f       	adc	r22, r18
    2aee:	73 1f       	adc	r23, r19
    2af0:	84 1f       	adc	r24, r20
    2af2:	48 f4       	brcc	.+18     	; 0x2b06 <__addsf3x+0x9c>
    2af4:	87 95       	ror	r24
    2af6:	77 95       	ror	r23
    2af8:	67 95       	ror	r22
    2afa:	b7 95       	ror	r27
    2afc:	f7 95       	ror	r31
    2afe:	9e 3f       	cpi	r25, 0xFE	; 254
    2b00:	08 f0       	brcs	.+2      	; 0x2b04 <__addsf3x+0x9a>
    2b02:	b0 cf       	rjmp	.-160    	; 0x2a64 <__addsf3+0x28>
    2b04:	93 95       	inc	r25
    2b06:	88 0f       	add	r24, r24
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <__addsf3x+0xa2>
    2b0a:	99 27       	eor	r25, r25
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	97 95       	ror	r25
    2b10:	87 95       	ror	r24
    2b12:	08 95       	ret

00002b14 <__cmpsf2>:
    2b14:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__fp_cmp>
    2b18:	08 f4       	brcc	.+2      	; 0x2b1c <__cmpsf2+0x8>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	08 95       	ret

00002b1e <cos>:
    2b1e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_rempio2>
    2b22:	e3 95       	inc	r30
    2b24:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__fp_sinus>

00002b28 <__divsf3>:
    2b28:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__divsf3x>
    2b2c:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_round>
    2b30:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__fp_pscB>
    2b34:	58 f0       	brcs	.+22     	; 0x2b4c <__divsf3+0x24>
    2b36:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__fp_pscA>
    2b3a:	40 f0       	brcs	.+16     	; 0x2b4c <__divsf3+0x24>
    2b3c:	29 f4       	brne	.+10     	; 0x2b48 <__divsf3+0x20>
    2b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b40:	29 f0       	breq	.+10     	; 0x2b4c <__divsf3+0x24>
    2b42:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>
    2b46:	51 11       	cpse	r21, r1
    2b48:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_szero>
    2b4c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>

00002b50 <__divsf3x>:
    2b50:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__fp_split3>
    2b54:	68 f3       	brcs	.-38     	; 0x2b30 <__divsf3+0x8>

00002b56 <__divsf3_pse>:
    2b56:	99 23       	and	r25, r25
    2b58:	b1 f3       	breq	.-20     	; 0x2b46 <__divsf3+0x1e>
    2b5a:	55 23       	and	r21, r21
    2b5c:	91 f3       	breq	.-28     	; 0x2b42 <__divsf3+0x1a>
    2b5e:	95 1b       	sub	r25, r21
    2b60:	55 0b       	sbc	r21, r21
    2b62:	bb 27       	eor	r27, r27
    2b64:	aa 27       	eor	r26, r26
    2b66:	62 17       	cp	r22, r18
    2b68:	73 07       	cpc	r23, r19
    2b6a:	84 07       	cpc	r24, r20
    2b6c:	38 f0       	brcs	.+14     	; 0x2b7c <__divsf3_pse+0x26>
    2b6e:	9f 5f       	subi	r25, 0xFF	; 255
    2b70:	5f 4f       	sbci	r21, 0xFF	; 255
    2b72:	22 0f       	add	r18, r18
    2b74:	33 1f       	adc	r19, r19
    2b76:	44 1f       	adc	r20, r20
    2b78:	aa 1f       	adc	r26, r26
    2b7a:	a9 f3       	breq	.-22     	; 0x2b66 <__divsf3_pse+0x10>
    2b7c:	35 d0       	rcall	.+106    	; 0x2be8 <__divsf3_pse+0x92>
    2b7e:	0e 2e       	mov	r0, r30
    2b80:	3a f0       	brmi	.+14     	; 0x2b90 <__divsf3_pse+0x3a>
    2b82:	e0 e8       	ldi	r30, 0x80	; 128
    2b84:	32 d0       	rcall	.+100    	; 0x2bea <__divsf3_pse+0x94>
    2b86:	91 50       	subi	r25, 0x01	; 1
    2b88:	50 40       	sbci	r21, 0x00	; 0
    2b8a:	e6 95       	lsr	r30
    2b8c:	00 1c       	adc	r0, r0
    2b8e:	ca f7       	brpl	.-14     	; 0x2b82 <__divsf3_pse+0x2c>
    2b90:	2b d0       	rcall	.+86     	; 0x2be8 <__divsf3_pse+0x92>
    2b92:	fe 2f       	mov	r31, r30
    2b94:	29 d0       	rcall	.+82     	; 0x2be8 <__divsf3_pse+0x92>
    2b96:	66 0f       	add	r22, r22
    2b98:	77 1f       	adc	r23, r23
    2b9a:	88 1f       	adc	r24, r24
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	26 17       	cp	r18, r22
    2ba0:	37 07       	cpc	r19, r23
    2ba2:	48 07       	cpc	r20, r24
    2ba4:	ab 07       	cpc	r26, r27
    2ba6:	b0 e8       	ldi	r27, 0x80	; 128
    2ba8:	09 f0       	breq	.+2      	; 0x2bac <__divsf3_pse+0x56>
    2baa:	bb 0b       	sbc	r27, r27
    2bac:	80 2d       	mov	r24, r0
    2bae:	bf 01       	movw	r22, r30
    2bb0:	ff 27       	eor	r31, r31
    2bb2:	93 58       	subi	r25, 0x83	; 131
    2bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb6:	3a f0       	brmi	.+14     	; 0x2bc6 <__divsf3_pse+0x70>
    2bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bba:	51 05       	cpc	r21, r1
    2bbc:	78 f0       	brcs	.+30     	; 0x2bdc <__divsf3_pse+0x86>
    2bbe:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>
    2bc2:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_szero>
    2bc6:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc8:	e4 f3       	brlt	.-8      	; 0x2bc2 <__divsf3_pse+0x6c>
    2bca:	98 3e       	cpi	r25, 0xE8	; 232
    2bcc:	d4 f3       	brlt	.-12     	; 0x2bc2 <__divsf3_pse+0x6c>
    2bce:	86 95       	lsr	r24
    2bd0:	77 95       	ror	r23
    2bd2:	67 95       	ror	r22
    2bd4:	b7 95       	ror	r27
    2bd6:	f7 95       	ror	r31
    2bd8:	9f 5f       	subi	r25, 0xFF	; 255
    2bda:	c9 f7       	brne	.-14     	; 0x2bce <__divsf3_pse+0x78>
    2bdc:	88 0f       	add	r24, r24
    2bde:	91 1d       	adc	r25, r1
    2be0:	96 95       	lsr	r25
    2be2:	87 95       	ror	r24
    2be4:	97 f9       	bld	r25, 7
    2be6:	08 95       	ret
    2be8:	e1 e0       	ldi	r30, 0x01	; 1
    2bea:	66 0f       	add	r22, r22
    2bec:	77 1f       	adc	r23, r23
    2bee:	88 1f       	adc	r24, r24
    2bf0:	bb 1f       	adc	r27, r27
    2bf2:	62 17       	cp	r22, r18
    2bf4:	73 07       	cpc	r23, r19
    2bf6:	84 07       	cpc	r24, r20
    2bf8:	ba 07       	cpc	r27, r26
    2bfa:	20 f0       	brcs	.+8      	; 0x2c04 <__divsf3_pse+0xae>
    2bfc:	62 1b       	sub	r22, r18
    2bfe:	73 0b       	sbc	r23, r19
    2c00:	84 0b       	sbc	r24, r20
    2c02:	ba 0b       	sbc	r27, r26
    2c04:	ee 1f       	adc	r30, r30
    2c06:	88 f7       	brcc	.-30     	; 0x2bea <__divsf3_pse+0x94>
    2c08:	e0 95       	com	r30
    2c0a:	08 95       	ret

00002c0c <__fixsfsi>:
    2c0c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
    2c10:	68 94       	set
    2c12:	b1 11       	cpse	r27, r1
    2c14:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_szero>
    2c18:	08 95       	ret

00002c1a <__fixunssfsi>:
    2c1a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_splitA>
    2c1e:	88 f0       	brcs	.+34     	; 0x2c42 <__fixunssfsi+0x28>
    2c20:	9f 57       	subi	r25, 0x7F	; 127
    2c22:	98 f0       	brcs	.+38     	; 0x2c4a <__fixunssfsi+0x30>
    2c24:	b9 2f       	mov	r27, r25
    2c26:	99 27       	eor	r25, r25
    2c28:	b7 51       	subi	r27, 0x17	; 23
    2c2a:	b0 f0       	brcs	.+44     	; 0x2c58 <__fixunssfsi+0x3e>
    2c2c:	e1 f0       	breq	.+56     	; 0x2c66 <__fixunssfsi+0x4c>
    2c2e:	66 0f       	add	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	88 1f       	adc	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	1a f0       	brmi	.+6      	; 0x2c3e <__fixunssfsi+0x24>
    2c38:	ba 95       	dec	r27
    2c3a:	c9 f7       	brne	.-14     	; 0x2c2e <__fixunssfsi+0x14>
    2c3c:	14 c0       	rjmp	.+40     	; 0x2c66 <__fixunssfsi+0x4c>
    2c3e:	b1 30       	cpi	r27, 0x01	; 1
    2c40:	91 f0       	breq	.+36     	; 0x2c66 <__fixunssfsi+0x4c>
    2c42:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__fp_zero>
    2c46:	b1 e0       	ldi	r27, 0x01	; 1
    2c48:	08 95       	ret
    2c4a:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_zero>
    2c4e:	67 2f       	mov	r22, r23
    2c50:	78 2f       	mov	r23, r24
    2c52:	88 27       	eor	r24, r24
    2c54:	b8 5f       	subi	r27, 0xF8	; 248
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <__fixunssfsi+0x4c>
    2c58:	b9 3f       	cpi	r27, 0xF9	; 249
    2c5a:	cc f3       	brlt	.-14     	; 0x2c4e <__fixunssfsi+0x34>
    2c5c:	86 95       	lsr	r24
    2c5e:	77 95       	ror	r23
    2c60:	67 95       	ror	r22
    2c62:	b3 95       	inc	r27
    2c64:	d9 f7       	brne	.-10     	; 0x2c5c <__fixunssfsi+0x42>
    2c66:	3e f4       	brtc	.+14     	; 0x2c76 <__fixunssfsi+0x5c>
    2c68:	90 95       	com	r25
    2c6a:	80 95       	com	r24
    2c6c:	70 95       	com	r23
    2c6e:	61 95       	neg	r22
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	8f 4f       	sbci	r24, 0xFF	; 255
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <__floatunsisf>:
    2c78:	e8 94       	clt
    2c7a:	09 c0       	rjmp	.+18     	; 0x2c8e <__floatsisf+0x12>

00002c7c <__floatsisf>:
    2c7c:	97 fb       	bst	r25, 7
    2c7e:	3e f4       	brtc	.+14     	; 0x2c8e <__floatsisf+0x12>
    2c80:	90 95       	com	r25
    2c82:	80 95       	com	r24
    2c84:	70 95       	com	r23
    2c86:	61 95       	neg	r22
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	99 23       	and	r25, r25
    2c90:	a9 f0       	breq	.+42     	; 0x2cbc <__floatsisf+0x40>
    2c92:	f9 2f       	mov	r31, r25
    2c94:	96 e9       	ldi	r25, 0x96	; 150
    2c96:	bb 27       	eor	r27, r27
    2c98:	93 95       	inc	r25
    2c9a:	f6 95       	lsr	r31
    2c9c:	87 95       	ror	r24
    2c9e:	77 95       	ror	r23
    2ca0:	67 95       	ror	r22
    2ca2:	b7 95       	ror	r27
    2ca4:	f1 11       	cpse	r31, r1
    2ca6:	f8 cf       	rjmp	.-16     	; 0x2c98 <__floatsisf+0x1c>
    2ca8:	fa f4       	brpl	.+62     	; 0x2ce8 <__floatsisf+0x6c>
    2caa:	bb 0f       	add	r27, r27
    2cac:	11 f4       	brne	.+4      	; 0x2cb2 <__floatsisf+0x36>
    2cae:	60 ff       	sbrs	r22, 0
    2cb0:	1b c0       	rjmp	.+54     	; 0x2ce8 <__floatsisf+0x6c>
    2cb2:	6f 5f       	subi	r22, 0xFF	; 255
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cba:	16 c0       	rjmp	.+44     	; 0x2ce8 <__floatsisf+0x6c>
    2cbc:	88 23       	and	r24, r24
    2cbe:	11 f0       	breq	.+4      	; 0x2cc4 <__floatsisf+0x48>
    2cc0:	96 e9       	ldi	r25, 0x96	; 150
    2cc2:	11 c0       	rjmp	.+34     	; 0x2ce6 <__floatsisf+0x6a>
    2cc4:	77 23       	and	r23, r23
    2cc6:	21 f0       	breq	.+8      	; 0x2cd0 <__floatsisf+0x54>
    2cc8:	9e e8       	ldi	r25, 0x8E	; 142
    2cca:	87 2f       	mov	r24, r23
    2ccc:	76 2f       	mov	r23, r22
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <__floatsisf+0x5e>
    2cd0:	66 23       	and	r22, r22
    2cd2:	71 f0       	breq	.+28     	; 0x2cf0 <__floatsisf+0x74>
    2cd4:	96 e8       	ldi	r25, 0x86	; 134
    2cd6:	86 2f       	mov	r24, r22
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	2a f0       	brmi	.+10     	; 0x2ce8 <__floatsisf+0x6c>
    2cde:	9a 95       	dec	r25
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	da f7       	brpl	.-10     	; 0x2cde <__floatsisf+0x62>
    2ce8:	88 0f       	add	r24, r24
    2cea:	96 95       	lsr	r25
    2cec:	87 95       	ror	r24
    2cee:	97 f9       	bld	r25, 7
    2cf0:	08 95       	ret

00002cf2 <__fp_cmp>:
    2cf2:	99 0f       	add	r25, r25
    2cf4:	00 08       	sbc	r0, r0
    2cf6:	55 0f       	add	r21, r21
    2cf8:	aa 0b       	sbc	r26, r26
    2cfa:	e0 e8       	ldi	r30, 0x80	; 128
    2cfc:	fe ef       	ldi	r31, 0xFE	; 254
    2cfe:	16 16       	cp	r1, r22
    2d00:	17 06       	cpc	r1, r23
    2d02:	e8 07       	cpc	r30, r24
    2d04:	f9 07       	cpc	r31, r25
    2d06:	c0 f0       	brcs	.+48     	; 0x2d38 <__fp_cmp+0x46>
    2d08:	12 16       	cp	r1, r18
    2d0a:	13 06       	cpc	r1, r19
    2d0c:	e4 07       	cpc	r30, r20
    2d0e:	f5 07       	cpc	r31, r21
    2d10:	98 f0       	brcs	.+38     	; 0x2d38 <__fp_cmp+0x46>
    2d12:	62 1b       	sub	r22, r18
    2d14:	73 0b       	sbc	r23, r19
    2d16:	84 0b       	sbc	r24, r20
    2d18:	95 0b       	sbc	r25, r21
    2d1a:	39 f4       	brne	.+14     	; 0x2d2a <__fp_cmp+0x38>
    2d1c:	0a 26       	eor	r0, r26
    2d1e:	61 f0       	breq	.+24     	; 0x2d38 <__fp_cmp+0x46>
    2d20:	23 2b       	or	r18, r19
    2d22:	24 2b       	or	r18, r20
    2d24:	25 2b       	or	r18, r21
    2d26:	21 f4       	brne	.+8      	; 0x2d30 <__fp_cmp+0x3e>
    2d28:	08 95       	ret
    2d2a:	0a 26       	eor	r0, r26
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <__fp_cmp+0x3e>
    2d2e:	a1 40       	sbci	r26, 0x01	; 1
    2d30:	a6 95       	lsr	r26
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	81 1d       	adc	r24, r1
    2d36:	81 1d       	adc	r24, r1
    2d38:	08 95       	ret

00002d3a <__fp_inf>:
    2d3a:	97 f9       	bld	r25, 7
    2d3c:	9f 67       	ori	r25, 0x7F	; 127
    2d3e:	80 e8       	ldi	r24, 0x80	; 128
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	08 95       	ret

00002d46 <__fp_nan>:
    2d46:	9f ef       	ldi	r25, 0xFF	; 255
    2d48:	80 ec       	ldi	r24, 0xC0	; 192
    2d4a:	08 95       	ret

00002d4c <__fp_pscA>:
    2d4c:	00 24       	eor	r0, r0
    2d4e:	0a 94       	dec	r0
    2d50:	16 16       	cp	r1, r22
    2d52:	17 06       	cpc	r1, r23
    2d54:	18 06       	cpc	r1, r24
    2d56:	09 06       	cpc	r0, r25
    2d58:	08 95       	ret

00002d5a <__fp_pscB>:
    2d5a:	00 24       	eor	r0, r0
    2d5c:	0a 94       	dec	r0
    2d5e:	12 16       	cp	r1, r18
    2d60:	13 06       	cpc	r1, r19
    2d62:	14 06       	cpc	r1, r20
    2d64:	05 06       	cpc	r0, r21
    2d66:	08 95       	ret
    2d68:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>

00002d6c <__fp_rempio2>:
    2d6c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_splitA>
    2d70:	d8 f3       	brcs	.-10     	; 0x2d68 <__fp_pscB+0xe>
    2d72:	e8 94       	clt
    2d74:	e0 e0       	ldi	r30, 0x00	; 0
    2d76:	bb 27       	eor	r27, r27
    2d78:	9f 57       	subi	r25, 0x7F	; 127
    2d7a:	f0 f0       	brcs	.+60     	; 0x2db8 <__fp_rempio2+0x4c>
    2d7c:	2a ed       	ldi	r18, 0xDA	; 218
    2d7e:	3f e0       	ldi	r19, 0x0F	; 15
    2d80:	49 ec       	ldi	r20, 0xC9	; 201
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <__fp_rempio2+0x24>
    2d84:	ee 0f       	add	r30, r30
    2d86:	bb 0f       	add	r27, r27
    2d88:	66 1f       	adc	r22, r22
    2d8a:	77 1f       	adc	r23, r23
    2d8c:	88 1f       	adc	r24, r24
    2d8e:	28 f0       	brcs	.+10     	; 0x2d9a <__fp_rempio2+0x2e>
    2d90:	b2 3a       	cpi	r27, 0xA2	; 162
    2d92:	62 07       	cpc	r22, r18
    2d94:	73 07       	cpc	r23, r19
    2d96:	84 07       	cpc	r24, r20
    2d98:	28 f0       	brcs	.+10     	; 0x2da4 <__fp_rempio2+0x38>
    2d9a:	b2 5a       	subi	r27, 0xA2	; 162
    2d9c:	62 0b       	sbc	r22, r18
    2d9e:	73 0b       	sbc	r23, r19
    2da0:	84 0b       	sbc	r24, r20
    2da2:	e3 95       	inc	r30
    2da4:	9a 95       	dec	r25
    2da6:	72 f7       	brpl	.-36     	; 0x2d84 <__fp_rempio2+0x18>
    2da8:	80 38       	cpi	r24, 0x80	; 128
    2daa:	30 f4       	brcc	.+12     	; 0x2db8 <__fp_rempio2+0x4c>
    2dac:	9a 95       	dec	r25
    2dae:	bb 0f       	add	r27, r27
    2db0:	66 1f       	adc	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	88 1f       	adc	r24, r24
    2db6:	d2 f7       	brpl	.-12     	; 0x2dac <__fp_rempio2+0x40>
    2db8:	90 48       	sbci	r25, 0x80	; 128
    2dba:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__fp_mpack_finite>

00002dbe <__fp_round>:
    2dbe:	09 2e       	mov	r0, r25
    2dc0:	03 94       	inc	r0
    2dc2:	00 0c       	add	r0, r0
    2dc4:	11 f4       	brne	.+4      	; 0x2dca <__fp_round+0xc>
    2dc6:	88 23       	and	r24, r24
    2dc8:	52 f0       	brmi	.+20     	; 0x2dde <__fp_round+0x20>
    2dca:	bb 0f       	add	r27, r27
    2dcc:	40 f4       	brcc	.+16     	; 0x2dde <__fp_round+0x20>
    2dce:	bf 2b       	or	r27, r31
    2dd0:	11 f4       	brne	.+4      	; 0x2dd6 <__fp_round+0x18>
    2dd2:	60 ff       	sbrs	r22, 0
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <__fp_round+0x20>
    2dd6:	6f 5f       	subi	r22, 0xFF	; 255
    2dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dda:	8f 4f       	sbci	r24, 0xFF	; 255
    2ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dde:	08 95       	ret

00002de0 <__fp_sinus>:
    2de0:	ef 93       	push	r30
    2de2:	e0 ff       	sbrs	r30, 0
    2de4:	07 c0       	rjmp	.+14     	; 0x2df4 <__fp_sinus+0x14>
    2de6:	a2 ea       	ldi	r26, 0xA2	; 162
    2de8:	2a ed       	ldi	r18, 0xDA	; 218
    2dea:	3f e0       	ldi	r19, 0x0F	; 15
    2dec:	49 ec       	ldi	r20, 0xC9	; 201
    2dee:	5f eb       	ldi	r21, 0xBF	; 191
    2df0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__addsf3x>
    2df4:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__fp_round>
    2df8:	0f 90       	pop	r0
    2dfa:	03 94       	inc	r0
    2dfc:	01 fc       	sbrc	r0, 1
    2dfe:	90 58       	subi	r25, 0x80	; 128
    2e00:	e4 e5       	ldi	r30, 0x54	; 84
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_powsodd>

00002e08 <__fp_split3>:
    2e08:	57 fd       	sbrc	r21, 7
    2e0a:	90 58       	subi	r25, 0x80	; 128
    2e0c:	44 0f       	add	r20, r20
    2e0e:	55 1f       	adc	r21, r21
    2e10:	59 f0       	breq	.+22     	; 0x2e28 <__fp_splitA+0x10>
    2e12:	5f 3f       	cpi	r21, 0xFF	; 255
    2e14:	71 f0       	breq	.+28     	; 0x2e32 <__fp_splitA+0x1a>
    2e16:	47 95       	ror	r20

00002e18 <__fp_splitA>:
    2e18:	88 0f       	add	r24, r24
    2e1a:	97 fb       	bst	r25, 7
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	61 f0       	breq	.+24     	; 0x2e38 <__fp_splitA+0x20>
    2e20:	9f 3f       	cpi	r25, 0xFF	; 255
    2e22:	79 f0       	breq	.+30     	; 0x2e42 <__fp_splitA+0x2a>
    2e24:	87 95       	ror	r24
    2e26:	08 95       	ret
    2e28:	12 16       	cp	r1, r18
    2e2a:	13 06       	cpc	r1, r19
    2e2c:	14 06       	cpc	r1, r20
    2e2e:	55 1f       	adc	r21, r21
    2e30:	f2 cf       	rjmp	.-28     	; 0x2e16 <__fp_split3+0xe>
    2e32:	46 95       	lsr	r20
    2e34:	f1 df       	rcall	.-30     	; 0x2e18 <__fp_splitA>
    2e36:	08 c0       	rjmp	.+16     	; 0x2e48 <__fp_splitA+0x30>
    2e38:	16 16       	cp	r1, r22
    2e3a:	17 06       	cpc	r1, r23
    2e3c:	18 06       	cpc	r1, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	f1 cf       	rjmp	.-30     	; 0x2e24 <__fp_splitA+0xc>
    2e42:	86 95       	lsr	r24
    2e44:	71 05       	cpc	r23, r1
    2e46:	61 05       	cpc	r22, r1
    2e48:	08 94       	sec
    2e4a:	08 95       	ret

00002e4c <__fp_zero>:
    2e4c:	e8 94       	clt

00002e4e <__fp_szero>:
    2e4e:	bb 27       	eor	r27, r27
    2e50:	66 27       	eor	r22, r22
    2e52:	77 27       	eor	r23, r23
    2e54:	cb 01       	movw	r24, r22
    2e56:	97 f9       	bld	r25, 7
    2e58:	08 95       	ret

00002e5a <__gesf2>:
    2e5a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__fp_cmp>
    2e5e:	08 f4       	brcc	.+2      	; 0x2e62 <__gesf2+0x8>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	08 95       	ret
    2e64:	16 f0       	brts	.+4      	; 0x2e6a <__gesf2+0x10>
    2e66:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__fp_mpack>
    2e6a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>
    2e6e:	68 94       	set
    2e70:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>

00002e74 <log>:
    2e74:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_splitA>
    2e78:	a8 f3       	brcs	.-22     	; 0x2e64 <__gesf2+0xa>
    2e7a:	99 23       	and	r25, r25
    2e7c:	c1 f3       	breq	.-16     	; 0x2e6e <__gesf2+0x14>
    2e7e:	ae f3       	brts	.-22     	; 0x2e6a <__gesf2+0x10>
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	1f 93       	push	r17
    2e86:	0f 93       	push	r16
    2e88:	ff 92       	push	r15
    2e8a:	c9 2f       	mov	r28, r25
    2e8c:	dd 27       	eor	r29, r29
    2e8e:	88 23       	and	r24, r24
    2e90:	2a f0       	brmi	.+10     	; 0x2e9c <log+0x28>
    2e92:	21 97       	sbiw	r28, 0x01	; 1
    2e94:	66 0f       	add	r22, r22
    2e96:	77 1f       	adc	r23, r23
    2e98:	88 1f       	adc	r24, r24
    2e9a:	da f7       	brpl	.-10     	; 0x2e92 <log+0x1e>
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f eb       	ldi	r21, 0xBF	; 191
    2ea4:	9f e3       	ldi	r25, 0x3F	; 63
    2ea6:	88 39       	cpi	r24, 0x98	; 152
    2ea8:	20 f0       	brcs	.+8      	; 0x2eb2 <log+0x3e>
    2eaa:	80 3e       	cpi	r24, 0xE0	; 224
    2eac:	38 f0       	brcs	.+14     	; 0x2ebc <log+0x48>
    2eae:	21 96       	adiw	r28, 0x01	; 1
    2eb0:	8f 77       	andi	r24, 0x7F	; 127
    2eb2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    2eb6:	e2 e7       	ldi	r30, 0x72	; 114
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	04 c0       	rjmp	.+8      	; 0x2ec4 <log+0x50>
    2ebc:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__addsf3>
    2ec0:	ef e9       	ldi	r30, 0x9F	; 159
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__fp_powser>
    2ec8:	8b 01       	movw	r16, r22
    2eca:	be 01       	movw	r22, r28
    2ecc:	ec 01       	movw	r28, r24
    2ece:	fb 2e       	mov	r15, r27
    2ed0:	6f 57       	subi	r22, 0x7F	; 127
    2ed2:	71 09       	sbc	r23, r1
    2ed4:	75 95       	asr	r23
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 0b       	sbc	r24, r24
    2eda:	99 0b       	sbc	r25, r25
    2edc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    2ee0:	28 e1       	ldi	r18, 0x18	; 24
    2ee2:	32 e7       	ldi	r19, 0x72	; 114
    2ee4:	41 e3       	ldi	r20, 0x31	; 49
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3x>
    2eec:	af 2d       	mov	r26, r15
    2eee:	98 01       	movw	r18, r16
    2ef0:	ae 01       	movw	r20, r28
    2ef2:	ff 90       	pop	r15
    2ef4:	0f 91       	pop	r16
    2ef6:	1f 91       	pop	r17
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__addsf3x>
    2f00:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_round>

00002f04 <__mulsf3>:
    2f04:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3x>
    2f08:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_round>
    2f0c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__fp_pscA>
    2f10:	38 f0       	brcs	.+14     	; 0x2f20 <__mulsf3+0x1c>
    2f12:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__fp_pscB>
    2f16:	20 f0       	brcs	.+8      	; 0x2f20 <__mulsf3+0x1c>
    2f18:	95 23       	and	r25, r21
    2f1a:	11 f0       	breq	.+4      	; 0x2f20 <__mulsf3+0x1c>
    2f1c:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>
    2f20:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>
    2f24:	11 24       	eor	r1, r1
    2f26:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_szero>

00002f2a <__mulsf3x>:
    2f2a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__fp_split3>
    2f2e:	70 f3       	brcs	.-36     	; 0x2f0c <__mulsf3+0x8>

00002f30 <__mulsf3_pse>:
    2f30:	95 9f       	mul	r25, r21
    2f32:	c1 f3       	breq	.-16     	; 0x2f24 <__mulsf3+0x20>
    2f34:	95 0f       	add	r25, r21
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	55 1f       	adc	r21, r21
    2f3a:	62 9f       	mul	r22, r18
    2f3c:	f0 01       	movw	r30, r0
    2f3e:	72 9f       	mul	r23, r18
    2f40:	bb 27       	eor	r27, r27
    2f42:	f0 0d       	add	r31, r0
    2f44:	b1 1d       	adc	r27, r1
    2f46:	63 9f       	mul	r22, r19
    2f48:	aa 27       	eor	r26, r26
    2f4a:	f0 0d       	add	r31, r0
    2f4c:	b1 1d       	adc	r27, r1
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	64 9f       	mul	r22, r20
    2f52:	66 27       	eor	r22, r22
    2f54:	b0 0d       	add	r27, r0
    2f56:	a1 1d       	adc	r26, r1
    2f58:	66 1f       	adc	r22, r22
    2f5a:	82 9f       	mul	r24, r18
    2f5c:	22 27       	eor	r18, r18
    2f5e:	b0 0d       	add	r27, r0
    2f60:	a1 1d       	adc	r26, r1
    2f62:	62 1f       	adc	r22, r18
    2f64:	73 9f       	mul	r23, r19
    2f66:	b0 0d       	add	r27, r0
    2f68:	a1 1d       	adc	r26, r1
    2f6a:	62 1f       	adc	r22, r18
    2f6c:	83 9f       	mul	r24, r19
    2f6e:	a0 0d       	add	r26, r0
    2f70:	61 1d       	adc	r22, r1
    2f72:	22 1f       	adc	r18, r18
    2f74:	74 9f       	mul	r23, r20
    2f76:	33 27       	eor	r19, r19
    2f78:	a0 0d       	add	r26, r0
    2f7a:	61 1d       	adc	r22, r1
    2f7c:	23 1f       	adc	r18, r19
    2f7e:	84 9f       	mul	r24, r20
    2f80:	60 0d       	add	r22, r0
    2f82:	21 1d       	adc	r18, r1
    2f84:	82 2f       	mov	r24, r18
    2f86:	76 2f       	mov	r23, r22
    2f88:	6a 2f       	mov	r22, r26
    2f8a:	11 24       	eor	r1, r1
    2f8c:	9f 57       	subi	r25, 0x7F	; 127
    2f8e:	50 40       	sbci	r21, 0x00	; 0
    2f90:	9a f0       	brmi	.+38     	; 0x2fb8 <__mulsf3_pse+0x88>
    2f92:	f1 f0       	breq	.+60     	; 0x2fd0 <__mulsf3_pse+0xa0>
    2f94:	88 23       	and	r24, r24
    2f96:	4a f0       	brmi	.+18     	; 0x2faa <__mulsf3_pse+0x7a>
    2f98:	ee 0f       	add	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	bb 1f       	adc	r27, r27
    2f9e:	66 1f       	adc	r22, r22
    2fa0:	77 1f       	adc	r23, r23
    2fa2:	88 1f       	adc	r24, r24
    2fa4:	91 50       	subi	r25, 0x01	; 1
    2fa6:	50 40       	sbci	r21, 0x00	; 0
    2fa8:	a9 f7       	brne	.-22     	; 0x2f94 <__mulsf3_pse+0x64>
    2faa:	9e 3f       	cpi	r25, 0xFE	; 254
    2fac:	51 05       	cpc	r21, r1
    2fae:	80 f0       	brcs	.+32     	; 0x2fd0 <__mulsf3_pse+0xa0>
    2fb0:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_inf>
    2fb4:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_szero>
    2fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    2fba:	e4 f3       	brlt	.-8      	; 0x2fb4 <__mulsf3_pse+0x84>
    2fbc:	98 3e       	cpi	r25, 0xE8	; 232
    2fbe:	d4 f3       	brlt	.-12     	; 0x2fb4 <__mulsf3_pse+0x84>
    2fc0:	86 95       	lsr	r24
    2fc2:	77 95       	ror	r23
    2fc4:	67 95       	ror	r22
    2fc6:	b7 95       	ror	r27
    2fc8:	f7 95       	ror	r31
    2fca:	e7 95       	ror	r30
    2fcc:	9f 5f       	subi	r25, 0xFF	; 255
    2fce:	c1 f7       	brne	.-16     	; 0x2fc0 <__mulsf3_pse+0x90>
    2fd0:	fe 2b       	or	r31, r30
    2fd2:	88 0f       	add	r24, r24
    2fd4:	91 1d       	adc	r25, r1
    2fd6:	96 95       	lsr	r25
    2fd8:	87 95       	ror	r24
    2fda:	97 f9       	bld	r25, 7
    2fdc:	08 95       	ret

00002fde <sin>:
    2fde:	9f 93       	push	r25
    2fe0:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_rempio2>
    2fe4:	0f 90       	pop	r0
    2fe6:	07 fc       	sbrc	r0, 7
    2fe8:	ee 5f       	subi	r30, 0xFE	; 254
    2fea:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__fp_sinus>
    2fee:	19 f4       	brne	.+6      	; 0x2ff6 <sin+0x18>
    2ff0:	16 f4       	brtc	.+4      	; 0x2ff6 <sin+0x18>
    2ff2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_nan>
    2ff6:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__fp_mpack>

00002ffa <sqrt>:
    2ffa:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_splitA>
    2ffe:	b8 f3       	brcs	.-18     	; 0x2fee <sin+0x10>
    3000:	99 23       	and	r25, r25
    3002:	c9 f3       	breq	.-14     	; 0x2ff6 <sin+0x18>
    3004:	b6 f3       	brts	.-20     	; 0x2ff2 <sin+0x14>
    3006:	9f 57       	subi	r25, 0x7F	; 127
    3008:	55 0b       	sbc	r21, r21
    300a:	87 ff       	sbrs	r24, 7
    300c:	0e 94 4b 18 	call	0x3096	; 0x3096 <__fp_norm2>
    3010:	00 24       	eor	r0, r0
    3012:	a0 e6       	ldi	r26, 0x60	; 96
    3014:	40 ea       	ldi	r20, 0xA0	; 160
    3016:	90 01       	movw	r18, r0
    3018:	80 58       	subi	r24, 0x80	; 128
    301a:	56 95       	lsr	r21
    301c:	97 95       	ror	r25
    301e:	28 f4       	brcc	.+10     	; 0x302a <sqrt+0x30>
    3020:	80 5c       	subi	r24, 0xC0	; 192
    3022:	66 0f       	add	r22, r22
    3024:	77 1f       	adc	r23, r23
    3026:	88 1f       	adc	r24, r24
    3028:	20 f0       	brcs	.+8      	; 0x3032 <sqrt+0x38>
    302a:	26 17       	cp	r18, r22
    302c:	37 07       	cpc	r19, r23
    302e:	48 07       	cpc	r20, r24
    3030:	30 f4       	brcc	.+12     	; 0x303e <sqrt+0x44>
    3032:	62 1b       	sub	r22, r18
    3034:	73 0b       	sbc	r23, r19
    3036:	84 0b       	sbc	r24, r20
    3038:	20 29       	or	r18, r0
    303a:	31 29       	or	r19, r1
    303c:	4a 2b       	or	r20, r26
    303e:	a6 95       	lsr	r26
    3040:	17 94       	ror	r1
    3042:	07 94       	ror	r0
    3044:	20 25       	eor	r18, r0
    3046:	31 25       	eor	r19, r1
    3048:	4a 27       	eor	r20, r26
    304a:	58 f7       	brcc	.-42     	; 0x3022 <sqrt+0x28>
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	20 f0       	brcs	.+8      	; 0x305c <sqrt+0x62>
    3054:	26 17       	cp	r18, r22
    3056:	37 07       	cpc	r19, r23
    3058:	48 07       	cpc	r20, r24
    305a:	30 f4       	brcc	.+12     	; 0x3068 <sqrt+0x6e>
    305c:	62 0b       	sbc	r22, r18
    305e:	73 0b       	sbc	r23, r19
    3060:	84 0b       	sbc	r24, r20
    3062:	20 0d       	add	r18, r0
    3064:	31 1d       	adc	r19, r1
    3066:	41 1d       	adc	r20, r1
    3068:	a0 95       	com	r26
    306a:	81 f7       	brne	.-32     	; 0x304c <sqrt+0x52>
    306c:	b9 01       	movw	r22, r18
    306e:	84 2f       	mov	r24, r20
    3070:	91 58       	subi	r25, 0x81	; 129
    3072:	88 0f       	add	r24, r24
    3074:	96 95       	lsr	r25
    3076:	87 95       	ror	r24
    3078:	08 95       	ret

0000307a <__fp_mpack>:
    307a:	9f 3f       	cpi	r25, 0xFF	; 255
    307c:	31 f0       	breq	.+12     	; 0x308a <__fp_mpack_finite+0xc>

0000307e <__fp_mpack_finite>:
    307e:	91 50       	subi	r25, 0x01	; 1
    3080:	20 f4       	brcc	.+8      	; 0x308a <__fp_mpack_finite+0xc>
    3082:	87 95       	ror	r24
    3084:	77 95       	ror	r23
    3086:	67 95       	ror	r22
    3088:	b7 95       	ror	r27
    308a:	88 0f       	add	r24, r24
    308c:	91 1d       	adc	r25, r1
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	97 f9       	bld	r25, 7
    3094:	08 95       	ret

00003096 <__fp_norm2>:
    3096:	91 50       	subi	r25, 0x01	; 1
    3098:	50 40       	sbci	r21, 0x00	; 0
    309a:	66 0f       	add	r22, r22
    309c:	77 1f       	adc	r23, r23
    309e:	88 1f       	adc	r24, r24
    30a0:	d2 f7       	brpl	.-12     	; 0x3096 <__fp_norm2>
    30a2:	08 95       	ret

000030a4 <__fp_powser>:
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	1f 93       	push	r17
    30aa:	0f 93       	push	r16
    30ac:	ff 92       	push	r15
    30ae:	ef 92       	push	r14
    30b0:	df 92       	push	r13
    30b2:	7b 01       	movw	r14, r22
    30b4:	8c 01       	movw	r16, r24
    30b6:	68 94       	set
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <__fp_powser+0x22>
    30ba:	da 2e       	mov	r13, r26
    30bc:	ef 01       	movw	r28, r30
    30be:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3x>
    30c2:	fe 01       	movw	r30, r28
    30c4:	e8 94       	clt
    30c6:	a5 91       	lpm	r26, Z+
    30c8:	25 91       	lpm	r18, Z+
    30ca:	35 91       	lpm	r19, Z+
    30cc:	45 91       	lpm	r20, Z+
    30ce:	55 91       	lpm	r21, Z+
    30d0:	a6 f3       	brts	.-24     	; 0x30ba <__fp_powser+0x16>
    30d2:	ef 01       	movw	r28, r30
    30d4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__addsf3x>
    30d8:	fe 01       	movw	r30, r28
    30da:	97 01       	movw	r18, r14
    30dc:	a8 01       	movw	r20, r16
    30de:	da 94       	dec	r13
    30e0:	69 f7       	brne	.-38     	; 0x30bc <__fp_powser+0x18>
    30e2:	df 90       	pop	r13
    30e4:	ef 90       	pop	r14
    30e6:	ff 90       	pop	r15
    30e8:	0f 91       	pop	r16
    30ea:	1f 91       	pop	r17
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <__fp_powsodd>:
    30f2:	9f 93       	push	r25
    30f4:	8f 93       	push	r24
    30f6:	7f 93       	push	r23
    30f8:	6f 93       	push	r22
    30fa:	ff 93       	push	r31
    30fc:	ef 93       	push	r30
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    3102:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    3106:	ef 91       	pop	r30
    3108:	ff 91       	pop	r31
    310a:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__fp_powser>
    310e:	2f 91       	pop	r18
    3110:	3f 91       	pop	r19
    3112:	4f 91       	pop	r20
    3114:	5f 91       	pop	r21
    3116:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__mulsf3>

0000311a <dtostrf>:
    311a:	ef 92       	push	r14
    311c:	0f 93       	push	r16
    311e:	1f 93       	push	r17
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	e8 01       	movw	r28, r16
    3126:	47 fd       	sbrc	r20, 7
    3128:	02 c0       	rjmp	.+4      	; 0x312e <dtostrf+0x14>
    312a:	34 e0       	ldi	r19, 0x04	; 4
    312c:	01 c0       	rjmp	.+2      	; 0x3130 <dtostrf+0x16>
    312e:	34 e1       	ldi	r19, 0x14	; 20
    3130:	04 2e       	mov	r0, r20
    3132:	00 0c       	add	r0, r0
    3134:	55 0b       	sbc	r21, r21
    3136:	57 ff       	sbrs	r21, 7
    3138:	03 c0       	rjmp	.+6      	; 0x3140 <dtostrf+0x26>
    313a:	51 95       	neg	r21
    313c:	41 95       	neg	r20
    313e:	51 09       	sbc	r21, r1
    3140:	e3 2e       	mov	r14, r19
    3142:	02 2f       	mov	r16, r18
    3144:	24 2f       	mov	r18, r20
    3146:	ae 01       	movw	r20, r28
    3148:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <dtoa_prf>
    314c:	ce 01       	movw	r24, r28
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ef 90       	pop	r14
    3158:	08 95       	ret

0000315a <atof>:
    315a:	66 27       	eor	r22, r22
    315c:	77 27       	eor	r23, r23
    315e:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <strtod>

00003162 <atoi>:
    3162:	fc 01       	movw	r30, r24
    3164:	88 27       	eor	r24, r24
    3166:	99 27       	eor	r25, r25
    3168:	e8 94       	clt
    316a:	21 91       	ld	r18, Z+
    316c:	20 32       	cpi	r18, 0x20	; 32
    316e:	e9 f3       	breq	.-6      	; 0x316a <atoi+0x8>
    3170:	29 30       	cpi	r18, 0x09	; 9
    3172:	10 f0       	brcs	.+4      	; 0x3178 <atoi+0x16>
    3174:	2e 30       	cpi	r18, 0x0E	; 14
    3176:	c8 f3       	brcs	.-14     	; 0x316a <atoi+0x8>
    3178:	2b 32       	cpi	r18, 0x2B	; 43
    317a:	41 f0       	breq	.+16     	; 0x318c <atoi+0x2a>
    317c:	2d 32       	cpi	r18, 0x2D	; 45
    317e:	39 f4       	brne	.+14     	; 0x318e <atoi+0x2c>
    3180:	68 94       	set
    3182:	04 c0       	rjmp	.+8      	; 0x318c <atoi+0x2a>
    3184:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulhi_const_10>
    3188:	82 0f       	add	r24, r18
    318a:	91 1d       	adc	r25, r1
    318c:	21 91       	ld	r18, Z+
    318e:	20 53       	subi	r18, 0x30	; 48
    3190:	2a 30       	cpi	r18, 0x0A	; 10
    3192:	c0 f3       	brcs	.-16     	; 0x3184 <atoi+0x22>
    3194:	1e f4       	brtc	.+6      	; 0x319c <atoi+0x3a>
    3196:	90 95       	com	r25
    3198:	81 95       	neg	r24
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	08 95       	ret

0000319e <__mulhi_const_10>:
    319e:	7a e0       	ldi	r23, 0x0A	; 10
    31a0:	97 9f       	mul	r25, r23
    31a2:	90 2d       	mov	r25, r0
    31a4:	87 9f       	mul	r24, r23
    31a6:	80 2d       	mov	r24, r0
    31a8:	91 0d       	add	r25, r1
    31aa:	11 24       	eor	r1, r1
    31ac:	08 95       	ret

000031ae <sprintf>:
    31ae:	ae e0       	ldi	r26, 0x0E	; 14
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	ed ed       	ldi	r30, 0xDD	; 221
    31b4:	f8 e1       	ldi	r31, 0x18	; 24
    31b6:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__prologue_saves__+0x1c>
    31ba:	0d 89       	ldd	r16, Y+21	; 0x15
    31bc:	1e 89       	ldd	r17, Y+22	; 0x16
    31be:	86 e0       	ldi	r24, 0x06	; 6
    31c0:	8c 83       	std	Y+4, r24	; 0x04
    31c2:	1a 83       	std	Y+2, r17	; 0x02
    31c4:	09 83       	std	Y+1, r16	; 0x01
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f e7       	ldi	r25, 0x7F	; 127
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	ae 01       	movw	r20, r28
    31d0:	47 5e       	subi	r20, 0xE7	; 231
    31d2:	5f 4f       	sbci	r21, 0xFF	; 255
    31d4:	6f 89       	ldd	r22, Y+23	; 0x17
    31d6:	78 8d       	ldd	r23, Y+24	; 0x18
    31d8:	ce 01       	movw	r24, r28
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <vfprintf>
    31e0:	ef 81       	ldd	r30, Y+7	; 0x07
    31e2:	f8 85       	ldd	r31, Y+8	; 0x08
    31e4:	e0 0f       	add	r30, r16
    31e6:	f1 1f       	adc	r31, r17
    31e8:	10 82       	st	Z, r1
    31ea:	2e 96       	adiw	r28, 0x0e	; 14
    31ec:	e4 e0       	ldi	r30, 0x04	; 4
    31ee:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__epilogue_restores__+0x1c>

000031f2 <vfprintf>:
    31f2:	ab e0       	ldi	r26, 0x0B	; 11
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	ef ef       	ldi	r30, 0xFF	; 255
    31f8:	f8 e1       	ldi	r31, 0x18	; 24
    31fa:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__prologue_saves__>
    31fe:	6c 01       	movw	r12, r24
    3200:	7b 01       	movw	r14, r22
    3202:	8a 01       	movw	r16, r20
    3204:	fc 01       	movw	r30, r24
    3206:	17 82       	std	Z+7, r1	; 0x07
    3208:	16 82       	std	Z+6, r1	; 0x06
    320a:	83 81       	ldd	r24, Z+3	; 0x03
    320c:	81 ff       	sbrs	r24, 1
    320e:	cc c1       	rjmp	.+920    	; 0x35a8 <vfprintf+0x3b6>
    3210:	ce 01       	movw	r24, r28
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	3c 01       	movw	r6, r24
    3216:	f6 01       	movw	r30, r12
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	f7 01       	movw	r30, r14
    321c:	93 fd       	sbrc	r25, 3
    321e:	85 91       	lpm	r24, Z+
    3220:	93 ff       	sbrs	r25, 3
    3222:	81 91       	ld	r24, Z+
    3224:	7f 01       	movw	r14, r30
    3226:	88 23       	and	r24, r24
    3228:	09 f4       	brne	.+2      	; 0x322c <vfprintf+0x3a>
    322a:	ba c1       	rjmp	.+884    	; 0x35a0 <vfprintf+0x3ae>
    322c:	85 32       	cpi	r24, 0x25	; 37
    322e:	39 f4       	brne	.+14     	; 0x323e <vfprintf+0x4c>
    3230:	93 fd       	sbrc	r25, 3
    3232:	85 91       	lpm	r24, Z+
    3234:	93 ff       	sbrs	r25, 3
    3236:	81 91       	ld	r24, Z+
    3238:	7f 01       	movw	r14, r30
    323a:	85 32       	cpi	r24, 0x25	; 37
    323c:	29 f4       	brne	.+10     	; 0x3248 <vfprintf+0x56>
    323e:	b6 01       	movw	r22, r12
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3246:	e7 cf       	rjmp	.-50     	; 0x3216 <vfprintf+0x24>
    3248:	91 2c       	mov	r9, r1
    324a:	21 2c       	mov	r2, r1
    324c:	31 2c       	mov	r3, r1
    324e:	ff e1       	ldi	r31, 0x1F	; 31
    3250:	f3 15       	cp	r31, r3
    3252:	d8 f0       	brcs	.+54     	; 0x328a <vfprintf+0x98>
    3254:	8b 32       	cpi	r24, 0x2B	; 43
    3256:	79 f0       	breq	.+30     	; 0x3276 <vfprintf+0x84>
    3258:	38 f4       	brcc	.+14     	; 0x3268 <vfprintf+0x76>
    325a:	80 32       	cpi	r24, 0x20	; 32
    325c:	79 f0       	breq	.+30     	; 0x327c <vfprintf+0x8a>
    325e:	83 32       	cpi	r24, 0x23	; 35
    3260:	a1 f4       	brne	.+40     	; 0x328a <vfprintf+0x98>
    3262:	23 2d       	mov	r18, r3
    3264:	20 61       	ori	r18, 0x10	; 16
    3266:	1d c0       	rjmp	.+58     	; 0x32a2 <vfprintf+0xb0>
    3268:	8d 32       	cpi	r24, 0x2D	; 45
    326a:	61 f0       	breq	.+24     	; 0x3284 <vfprintf+0x92>
    326c:	80 33       	cpi	r24, 0x30	; 48
    326e:	69 f4       	brne	.+26     	; 0x328a <vfprintf+0x98>
    3270:	23 2d       	mov	r18, r3
    3272:	21 60       	ori	r18, 0x01	; 1
    3274:	16 c0       	rjmp	.+44     	; 0x32a2 <vfprintf+0xb0>
    3276:	83 2d       	mov	r24, r3
    3278:	82 60       	ori	r24, 0x02	; 2
    327a:	38 2e       	mov	r3, r24
    327c:	e3 2d       	mov	r30, r3
    327e:	e4 60       	ori	r30, 0x04	; 4
    3280:	3e 2e       	mov	r3, r30
    3282:	2a c0       	rjmp	.+84     	; 0x32d8 <vfprintf+0xe6>
    3284:	f3 2d       	mov	r31, r3
    3286:	f8 60       	ori	r31, 0x08	; 8
    3288:	1d c0       	rjmp	.+58     	; 0x32c4 <vfprintf+0xd2>
    328a:	37 fc       	sbrc	r3, 7
    328c:	2d c0       	rjmp	.+90     	; 0x32e8 <vfprintf+0xf6>
    328e:	20 ed       	ldi	r18, 0xD0	; 208
    3290:	28 0f       	add	r18, r24
    3292:	2a 30       	cpi	r18, 0x0A	; 10
    3294:	40 f0       	brcs	.+16     	; 0x32a6 <vfprintf+0xb4>
    3296:	8e 32       	cpi	r24, 0x2E	; 46
    3298:	b9 f4       	brne	.+46     	; 0x32c8 <vfprintf+0xd6>
    329a:	36 fc       	sbrc	r3, 6
    329c:	81 c1       	rjmp	.+770    	; 0x35a0 <vfprintf+0x3ae>
    329e:	23 2d       	mov	r18, r3
    32a0:	20 64       	ori	r18, 0x40	; 64
    32a2:	32 2e       	mov	r3, r18
    32a4:	19 c0       	rjmp	.+50     	; 0x32d8 <vfprintf+0xe6>
    32a6:	36 fe       	sbrs	r3, 6
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <vfprintf+0xc4>
    32aa:	8a e0       	ldi	r24, 0x0A	; 10
    32ac:	98 9e       	mul	r9, r24
    32ae:	20 0d       	add	r18, r0
    32b0:	11 24       	eor	r1, r1
    32b2:	92 2e       	mov	r9, r18
    32b4:	11 c0       	rjmp	.+34     	; 0x32d8 <vfprintf+0xe6>
    32b6:	ea e0       	ldi	r30, 0x0A	; 10
    32b8:	2e 9e       	mul	r2, r30
    32ba:	20 0d       	add	r18, r0
    32bc:	11 24       	eor	r1, r1
    32be:	22 2e       	mov	r2, r18
    32c0:	f3 2d       	mov	r31, r3
    32c2:	f0 62       	ori	r31, 0x20	; 32
    32c4:	3f 2e       	mov	r3, r31
    32c6:	08 c0       	rjmp	.+16     	; 0x32d8 <vfprintf+0xe6>
    32c8:	8c 36       	cpi	r24, 0x6C	; 108
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <vfprintf+0xe2>
    32cc:	83 2d       	mov	r24, r3
    32ce:	80 68       	ori	r24, 0x80	; 128
    32d0:	38 2e       	mov	r3, r24
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <vfprintf+0xe6>
    32d4:	88 36       	cpi	r24, 0x68	; 104
    32d6:	41 f4       	brne	.+16     	; 0x32e8 <vfprintf+0xf6>
    32d8:	f7 01       	movw	r30, r14
    32da:	93 fd       	sbrc	r25, 3
    32dc:	85 91       	lpm	r24, Z+
    32de:	93 ff       	sbrs	r25, 3
    32e0:	81 91       	ld	r24, Z+
    32e2:	7f 01       	movw	r14, r30
    32e4:	81 11       	cpse	r24, r1
    32e6:	b3 cf       	rjmp	.-154    	; 0x324e <vfprintf+0x5c>
    32e8:	98 2f       	mov	r25, r24
    32ea:	9f 7d       	andi	r25, 0xDF	; 223
    32ec:	95 54       	subi	r25, 0x45	; 69
    32ee:	93 30       	cpi	r25, 0x03	; 3
    32f0:	28 f4       	brcc	.+10     	; 0x32fc <vfprintf+0x10a>
    32f2:	0c 5f       	subi	r16, 0xFC	; 252
    32f4:	1f 4f       	sbci	r17, 0xFF	; 255
    32f6:	9f e3       	ldi	r25, 0x3F	; 63
    32f8:	99 83       	std	Y+1, r25	; 0x01
    32fa:	0d c0       	rjmp	.+26     	; 0x3316 <vfprintf+0x124>
    32fc:	83 36       	cpi	r24, 0x63	; 99
    32fe:	31 f0       	breq	.+12     	; 0x330c <vfprintf+0x11a>
    3300:	83 37       	cpi	r24, 0x73	; 115
    3302:	71 f0       	breq	.+28     	; 0x3320 <vfprintf+0x12e>
    3304:	83 35       	cpi	r24, 0x53	; 83
    3306:	09 f0       	breq	.+2      	; 0x330a <vfprintf+0x118>
    3308:	59 c0       	rjmp	.+178    	; 0x33bc <vfprintf+0x1ca>
    330a:	21 c0       	rjmp	.+66     	; 0x334e <vfprintf+0x15c>
    330c:	f8 01       	movw	r30, r16
    330e:	80 81       	ld	r24, Z
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	0e 5f       	subi	r16, 0xFE	; 254
    3314:	1f 4f       	sbci	r17, 0xFF	; 255
    3316:	88 24       	eor	r8, r8
    3318:	83 94       	inc	r8
    331a:	91 2c       	mov	r9, r1
    331c:	53 01       	movw	r10, r6
    331e:	13 c0       	rjmp	.+38     	; 0x3346 <vfprintf+0x154>
    3320:	28 01       	movw	r4, r16
    3322:	f2 e0       	ldi	r31, 0x02	; 2
    3324:	4f 0e       	add	r4, r31
    3326:	51 1c       	adc	r5, r1
    3328:	f8 01       	movw	r30, r16
    332a:	a0 80       	ld	r10, Z
    332c:	b1 80       	ldd	r11, Z+1	; 0x01
    332e:	36 fe       	sbrs	r3, 6
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <vfprintf+0x146>
    3332:	69 2d       	mov	r22, r9
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	02 c0       	rjmp	.+4      	; 0x333c <vfprintf+0x14a>
    3338:	6f ef       	ldi	r22, 0xFF	; 255
    333a:	7f ef       	ldi	r23, 0xFF	; 255
    333c:	c5 01       	movw	r24, r10
    333e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <strnlen>
    3342:	4c 01       	movw	r8, r24
    3344:	82 01       	movw	r16, r4
    3346:	f3 2d       	mov	r31, r3
    3348:	ff 77       	andi	r31, 0x7F	; 127
    334a:	3f 2e       	mov	r3, r31
    334c:	16 c0       	rjmp	.+44     	; 0x337a <vfprintf+0x188>
    334e:	28 01       	movw	r4, r16
    3350:	22 e0       	ldi	r18, 0x02	; 2
    3352:	42 0e       	add	r4, r18
    3354:	51 1c       	adc	r5, r1
    3356:	f8 01       	movw	r30, r16
    3358:	a0 80       	ld	r10, Z
    335a:	b1 80       	ldd	r11, Z+1	; 0x01
    335c:	36 fe       	sbrs	r3, 6
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <vfprintf+0x174>
    3360:	69 2d       	mov	r22, r9
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	02 c0       	rjmp	.+4      	; 0x336a <vfprintf+0x178>
    3366:	6f ef       	ldi	r22, 0xFF	; 255
    3368:	7f ef       	ldi	r23, 0xFF	; 255
    336a:	c5 01       	movw	r24, r10
    336c:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <strnlen_P>
    3370:	4c 01       	movw	r8, r24
    3372:	f3 2d       	mov	r31, r3
    3374:	f0 68       	ori	r31, 0x80	; 128
    3376:	3f 2e       	mov	r3, r31
    3378:	82 01       	movw	r16, r4
    337a:	33 fc       	sbrc	r3, 3
    337c:	1b c0       	rjmp	.+54     	; 0x33b4 <vfprintf+0x1c2>
    337e:	82 2d       	mov	r24, r2
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	88 16       	cp	r8, r24
    3384:	99 06       	cpc	r9, r25
    3386:	b0 f4       	brcc	.+44     	; 0x33b4 <vfprintf+0x1c2>
    3388:	b6 01       	movw	r22, r12
    338a:	80 e2       	ldi	r24, 0x20	; 32
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3392:	2a 94       	dec	r2
    3394:	f4 cf       	rjmp	.-24     	; 0x337e <vfprintf+0x18c>
    3396:	f5 01       	movw	r30, r10
    3398:	37 fc       	sbrc	r3, 7
    339a:	85 91       	lpm	r24, Z+
    339c:	37 fe       	sbrs	r3, 7
    339e:	81 91       	ld	r24, Z+
    33a0:	5f 01       	movw	r10, r30
    33a2:	b6 01       	movw	r22, r12
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    33aa:	21 10       	cpse	r2, r1
    33ac:	2a 94       	dec	r2
    33ae:	21 e0       	ldi	r18, 0x01	; 1
    33b0:	82 1a       	sub	r8, r18
    33b2:	91 08       	sbc	r9, r1
    33b4:	81 14       	cp	r8, r1
    33b6:	91 04       	cpc	r9, r1
    33b8:	71 f7       	brne	.-36     	; 0x3396 <vfprintf+0x1a4>
    33ba:	e8 c0       	rjmp	.+464    	; 0x358c <vfprintf+0x39a>
    33bc:	84 36       	cpi	r24, 0x64	; 100
    33be:	11 f0       	breq	.+4      	; 0x33c4 <vfprintf+0x1d2>
    33c0:	89 36       	cpi	r24, 0x69	; 105
    33c2:	41 f5       	brne	.+80     	; 0x3414 <vfprintf+0x222>
    33c4:	f8 01       	movw	r30, r16
    33c6:	37 fe       	sbrs	r3, 7
    33c8:	07 c0       	rjmp	.+14     	; 0x33d8 <vfprintf+0x1e6>
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	0c 5f       	subi	r16, 0xFC	; 252
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	08 c0       	rjmp	.+16     	; 0x33e8 <vfprintf+0x1f6>
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	07 2e       	mov	r0, r23
    33de:	00 0c       	add	r0, r0
    33e0:	88 0b       	sbc	r24, r24
    33e2:	99 0b       	sbc	r25, r25
    33e4:	0e 5f       	subi	r16, 0xFE	; 254
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	f3 2d       	mov	r31, r3
    33ea:	ff 76       	andi	r31, 0x6F	; 111
    33ec:	3f 2e       	mov	r3, r31
    33ee:	97 ff       	sbrs	r25, 7
    33f0:	09 c0       	rjmp	.+18     	; 0x3404 <vfprintf+0x212>
    33f2:	90 95       	com	r25
    33f4:	80 95       	com	r24
    33f6:	70 95       	com	r23
    33f8:	61 95       	neg	r22
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	f0 68       	ori	r31, 0x80	; 128
    3402:	3f 2e       	mov	r3, r31
    3404:	2a e0       	ldi	r18, 0x0A	; 10
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	a3 01       	movw	r20, r6
    340a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__ultoa_invert>
    340e:	88 2e       	mov	r8, r24
    3410:	86 18       	sub	r8, r6
    3412:	45 c0       	rjmp	.+138    	; 0x349e <vfprintf+0x2ac>
    3414:	85 37       	cpi	r24, 0x75	; 117
    3416:	31 f4       	brne	.+12     	; 0x3424 <vfprintf+0x232>
    3418:	23 2d       	mov	r18, r3
    341a:	2f 7e       	andi	r18, 0xEF	; 239
    341c:	b2 2e       	mov	r11, r18
    341e:	2a e0       	ldi	r18, 0x0A	; 10
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	25 c0       	rjmp	.+74     	; 0x346e <vfprintf+0x27c>
    3424:	93 2d       	mov	r25, r3
    3426:	99 7f       	andi	r25, 0xF9	; 249
    3428:	b9 2e       	mov	r11, r25
    342a:	8f 36       	cpi	r24, 0x6F	; 111
    342c:	c1 f0       	breq	.+48     	; 0x345e <vfprintf+0x26c>
    342e:	18 f4       	brcc	.+6      	; 0x3436 <vfprintf+0x244>
    3430:	88 35       	cpi	r24, 0x58	; 88
    3432:	79 f0       	breq	.+30     	; 0x3452 <vfprintf+0x260>
    3434:	b5 c0       	rjmp	.+362    	; 0x35a0 <vfprintf+0x3ae>
    3436:	80 37       	cpi	r24, 0x70	; 112
    3438:	19 f0       	breq	.+6      	; 0x3440 <vfprintf+0x24e>
    343a:	88 37       	cpi	r24, 0x78	; 120
    343c:	21 f0       	breq	.+8      	; 0x3446 <vfprintf+0x254>
    343e:	b0 c0       	rjmp	.+352    	; 0x35a0 <vfprintf+0x3ae>
    3440:	e9 2f       	mov	r30, r25
    3442:	e0 61       	ori	r30, 0x10	; 16
    3444:	be 2e       	mov	r11, r30
    3446:	b4 fe       	sbrs	r11, 4
    3448:	0d c0       	rjmp	.+26     	; 0x3464 <vfprintf+0x272>
    344a:	fb 2d       	mov	r31, r11
    344c:	f4 60       	ori	r31, 0x04	; 4
    344e:	bf 2e       	mov	r11, r31
    3450:	09 c0       	rjmp	.+18     	; 0x3464 <vfprintf+0x272>
    3452:	34 fe       	sbrs	r3, 4
    3454:	0a c0       	rjmp	.+20     	; 0x346a <vfprintf+0x278>
    3456:	29 2f       	mov	r18, r25
    3458:	26 60       	ori	r18, 0x06	; 6
    345a:	b2 2e       	mov	r11, r18
    345c:	06 c0       	rjmp	.+12     	; 0x346a <vfprintf+0x278>
    345e:	28 e0       	ldi	r18, 0x08	; 8
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	05 c0       	rjmp	.+10     	; 0x346e <vfprintf+0x27c>
    3464:	20 e1       	ldi	r18, 0x10	; 16
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0x27c>
    346a:	20 e1       	ldi	r18, 0x10	; 16
    346c:	32 e0       	ldi	r19, 0x02	; 2
    346e:	f8 01       	movw	r30, r16
    3470:	b7 fe       	sbrs	r11, 7
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <vfprintf+0x290>
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	0c 5f       	subi	r16, 0xFC	; 252
    347e:	1f 4f       	sbci	r17, 0xFF	; 255
    3480:	06 c0       	rjmp	.+12     	; 0x348e <vfprintf+0x29c>
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 5f       	subi	r16, 0xFE	; 254
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	a3 01       	movw	r20, r6
    3490:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__ultoa_invert>
    3494:	88 2e       	mov	r8, r24
    3496:	86 18       	sub	r8, r6
    3498:	fb 2d       	mov	r31, r11
    349a:	ff 77       	andi	r31, 0x7F	; 127
    349c:	3f 2e       	mov	r3, r31
    349e:	36 fe       	sbrs	r3, 6
    34a0:	0d c0       	rjmp	.+26     	; 0x34bc <vfprintf+0x2ca>
    34a2:	23 2d       	mov	r18, r3
    34a4:	2e 7f       	andi	r18, 0xFE	; 254
    34a6:	a2 2e       	mov	r10, r18
    34a8:	89 14       	cp	r8, r9
    34aa:	58 f4       	brcc	.+22     	; 0x34c2 <vfprintf+0x2d0>
    34ac:	34 fe       	sbrs	r3, 4
    34ae:	0b c0       	rjmp	.+22     	; 0x34c6 <vfprintf+0x2d4>
    34b0:	32 fc       	sbrc	r3, 2
    34b2:	09 c0       	rjmp	.+18     	; 0x34c6 <vfprintf+0x2d4>
    34b4:	83 2d       	mov	r24, r3
    34b6:	8e 7e       	andi	r24, 0xEE	; 238
    34b8:	a8 2e       	mov	r10, r24
    34ba:	05 c0       	rjmp	.+10     	; 0x34c6 <vfprintf+0x2d4>
    34bc:	b8 2c       	mov	r11, r8
    34be:	a3 2c       	mov	r10, r3
    34c0:	03 c0       	rjmp	.+6      	; 0x34c8 <vfprintf+0x2d6>
    34c2:	b8 2c       	mov	r11, r8
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <vfprintf+0x2d6>
    34c6:	b9 2c       	mov	r11, r9
    34c8:	a4 fe       	sbrs	r10, 4
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <vfprintf+0x2f8>
    34cc:	fe 01       	movw	r30, r28
    34ce:	e8 0d       	add	r30, r8
    34d0:	f1 1d       	adc	r31, r1
    34d2:	80 81       	ld	r24, Z
    34d4:	80 33       	cpi	r24, 0x30	; 48
    34d6:	21 f4       	brne	.+8      	; 0x34e0 <vfprintf+0x2ee>
    34d8:	9a 2d       	mov	r25, r10
    34da:	99 7e       	andi	r25, 0xE9	; 233
    34dc:	a9 2e       	mov	r10, r25
    34de:	09 c0       	rjmp	.+18     	; 0x34f2 <vfprintf+0x300>
    34e0:	a2 fe       	sbrs	r10, 2
    34e2:	06 c0       	rjmp	.+12     	; 0x34f0 <vfprintf+0x2fe>
    34e4:	b3 94       	inc	r11
    34e6:	b3 94       	inc	r11
    34e8:	04 c0       	rjmp	.+8      	; 0x34f2 <vfprintf+0x300>
    34ea:	8a 2d       	mov	r24, r10
    34ec:	86 78       	andi	r24, 0x86	; 134
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <vfprintf+0x300>
    34f0:	b3 94       	inc	r11
    34f2:	a3 fc       	sbrc	r10, 3
    34f4:	11 c0       	rjmp	.+34     	; 0x3518 <vfprintf+0x326>
    34f6:	a0 fe       	sbrs	r10, 0
    34f8:	06 c0       	rjmp	.+12     	; 0x3506 <vfprintf+0x314>
    34fa:	b2 14       	cp	r11, r2
    34fc:	88 f4       	brcc	.+34     	; 0x3520 <vfprintf+0x32e>
    34fe:	28 0c       	add	r2, r8
    3500:	92 2c       	mov	r9, r2
    3502:	9b 18       	sub	r9, r11
    3504:	0e c0       	rjmp	.+28     	; 0x3522 <vfprintf+0x330>
    3506:	b2 14       	cp	r11, r2
    3508:	60 f4       	brcc	.+24     	; 0x3522 <vfprintf+0x330>
    350a:	b6 01       	movw	r22, r12
    350c:	80 e2       	ldi	r24, 0x20	; 32
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3514:	b3 94       	inc	r11
    3516:	f7 cf       	rjmp	.-18     	; 0x3506 <vfprintf+0x314>
    3518:	b2 14       	cp	r11, r2
    351a:	18 f4       	brcc	.+6      	; 0x3522 <vfprintf+0x330>
    351c:	2b 18       	sub	r2, r11
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <vfprintf+0x332>
    3520:	98 2c       	mov	r9, r8
    3522:	21 2c       	mov	r2, r1
    3524:	a4 fe       	sbrs	r10, 4
    3526:	10 c0       	rjmp	.+32     	; 0x3548 <vfprintf+0x356>
    3528:	b6 01       	movw	r22, r12
    352a:	80 e3       	ldi	r24, 0x30	; 48
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3532:	a2 fe       	sbrs	r10, 2
    3534:	17 c0       	rjmp	.+46     	; 0x3564 <vfprintf+0x372>
    3536:	a1 fc       	sbrc	r10, 1
    3538:	03 c0       	rjmp	.+6      	; 0x3540 <vfprintf+0x34e>
    353a:	88 e7       	ldi	r24, 0x78	; 120
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <vfprintf+0x352>
    3540:	88 e5       	ldi	r24, 0x58	; 88
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	b6 01       	movw	r22, r12
    3546:	0c c0       	rjmp	.+24     	; 0x3560 <vfprintf+0x36e>
    3548:	8a 2d       	mov	r24, r10
    354a:	86 78       	andi	r24, 0x86	; 134
    354c:	59 f0       	breq	.+22     	; 0x3564 <vfprintf+0x372>
    354e:	a1 fe       	sbrs	r10, 1
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0x364>
    3552:	8b e2       	ldi	r24, 0x2B	; 43
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <vfprintf+0x366>
    3556:	80 e2       	ldi	r24, 0x20	; 32
    3558:	a7 fc       	sbrc	r10, 7
    355a:	8d e2       	ldi	r24, 0x2D	; 45
    355c:	b6 01       	movw	r22, r12
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3564:	89 14       	cp	r8, r9
    3566:	38 f4       	brcc	.+14     	; 0x3576 <vfprintf+0x384>
    3568:	b6 01       	movw	r22, r12
    356a:	80 e3       	ldi	r24, 0x30	; 48
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3572:	9a 94       	dec	r9
    3574:	f7 cf       	rjmp	.-18     	; 0x3564 <vfprintf+0x372>
    3576:	8a 94       	dec	r8
    3578:	f3 01       	movw	r30, r6
    357a:	e8 0d       	add	r30, r8
    357c:	f1 1d       	adc	r31, r1
    357e:	80 81       	ld	r24, Z
    3580:	b6 01       	movw	r22, r12
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    3588:	81 10       	cpse	r8, r1
    358a:	f5 cf       	rjmp	.-22     	; 0x3576 <vfprintf+0x384>
    358c:	22 20       	and	r2, r2
    358e:	09 f4       	brne	.+2      	; 0x3592 <vfprintf+0x3a0>
    3590:	42 ce       	rjmp	.-892    	; 0x3216 <vfprintf+0x24>
    3592:	b6 01       	movw	r22, r12
    3594:	80 e2       	ldi	r24, 0x20	; 32
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <fputc>
    359c:	2a 94       	dec	r2
    359e:	f6 cf       	rjmp	.-20     	; 0x358c <vfprintf+0x39a>
    35a0:	f6 01       	movw	r30, r12
    35a2:	86 81       	ldd	r24, Z+6	; 0x06
    35a4:	97 81       	ldd	r25, Z+7	; 0x07
    35a6:	02 c0       	rjmp	.+4      	; 0x35ac <vfprintf+0x3ba>
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	9f ef       	ldi	r25, 0xFF	; 255
    35ac:	2b 96       	adiw	r28, 0x0b	; 11
    35ae:	e2 e1       	ldi	r30, 0x12	; 18
    35b0:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__epilogue_restores__>

000035b4 <dtoa_prf>:
    35b4:	a9 e0       	ldi	r26, 0x09	; 9
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	e0 ee       	ldi	r30, 0xE0	; 224
    35ba:	fa e1       	ldi	r31, 0x1A	; 26
    35bc:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__+0xc>
    35c0:	6a 01       	movw	r12, r20
    35c2:	12 2f       	mov	r17, r18
    35c4:	b0 2e       	mov	r11, r16
    35c6:	2b e3       	ldi	r18, 0x3B	; 59
    35c8:	20 17       	cp	r18, r16
    35ca:	20 f0       	brcs	.+8      	; 0x35d4 <dtoa_prf+0x20>
    35cc:	ff 24       	eor	r15, r15
    35ce:	f3 94       	inc	r15
    35d0:	f0 0e       	add	r15, r16
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <dtoa_prf+0x24>
    35d4:	2c e3       	ldi	r18, 0x3C	; 60
    35d6:	f2 2e       	mov	r15, r18
    35d8:	0f 2d       	mov	r16, r15
    35da:	27 e0       	ldi	r18, 0x07	; 7
    35dc:	ae 01       	movw	r20, r28
    35de:	4f 5f       	subi	r20, 0xFF	; 255
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    35e2:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__ftoa_engine>
    35e6:	bc 01       	movw	r22, r24
    35e8:	49 81       	ldd	r20, Y+1	; 0x01
    35ea:	84 2f       	mov	r24, r20
    35ec:	89 70       	andi	r24, 0x09	; 9
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	31 f0       	breq	.+12     	; 0x35fe <dtoa_prf+0x4a>
    35f2:	e1 fc       	sbrc	r14, 1
    35f4:	06 c0       	rjmp	.+12     	; 0x3602 <dtoa_prf+0x4e>
    35f6:	e0 fe       	sbrs	r14, 0
    35f8:	06 c0       	rjmp	.+12     	; 0x3606 <dtoa_prf+0x52>
    35fa:	90 e2       	ldi	r25, 0x20	; 32
    35fc:	05 c0       	rjmp	.+10     	; 0x3608 <dtoa_prf+0x54>
    35fe:	9d e2       	ldi	r25, 0x2D	; 45
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <dtoa_prf+0x54>
    3602:	9b e2       	ldi	r25, 0x2B	; 43
    3604:	01 c0       	rjmp	.+2      	; 0x3608 <dtoa_prf+0x54>
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	5e 2d       	mov	r21, r14
    360a:	50 71       	andi	r21, 0x10	; 16
    360c:	43 ff       	sbrs	r20, 3
    360e:	3c c0       	rjmp	.+120    	; 0x3688 <dtoa_prf+0xd4>
    3610:	91 11       	cpse	r25, r1
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <dtoa_prf+0x64>
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	01 c0       	rjmp	.+2      	; 0x361a <dtoa_prf+0x66>
    3618:	84 e0       	ldi	r24, 0x04	; 4
    361a:	81 17       	cp	r24, r17
    361c:	18 f4       	brcc	.+6      	; 0x3624 <dtoa_prf+0x70>
    361e:	21 2f       	mov	r18, r17
    3620:	28 1b       	sub	r18, r24
    3622:	01 c0       	rjmp	.+2      	; 0x3626 <dtoa_prf+0x72>
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	51 11       	cpse	r21, r1
    3628:	0b c0       	rjmp	.+22     	; 0x3640 <dtoa_prf+0x8c>
    362a:	f6 01       	movw	r30, r12
    362c:	82 2f       	mov	r24, r18
    362e:	30 e2       	ldi	r19, 0x20	; 32
    3630:	88 23       	and	r24, r24
    3632:	19 f0       	breq	.+6      	; 0x363a <dtoa_prf+0x86>
    3634:	31 93       	st	Z+, r19
    3636:	81 50       	subi	r24, 0x01	; 1
    3638:	fb cf       	rjmp	.-10     	; 0x3630 <dtoa_prf+0x7c>
    363a:	c2 0e       	add	r12, r18
    363c:	d1 1c       	adc	r13, r1
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	99 23       	and	r25, r25
    3642:	29 f0       	breq	.+10     	; 0x364e <dtoa_prf+0x9a>
    3644:	d6 01       	movw	r26, r12
    3646:	9c 93       	st	X, r25
    3648:	f6 01       	movw	r30, r12
    364a:	31 96       	adiw	r30, 0x01	; 1
    364c:	6f 01       	movw	r12, r30
    364e:	c6 01       	movw	r24, r12
    3650:	03 96       	adiw	r24, 0x03	; 3
    3652:	e2 fe       	sbrs	r14, 2
    3654:	0a c0       	rjmp	.+20     	; 0x366a <dtoa_prf+0xb6>
    3656:	3e e4       	ldi	r19, 0x4E	; 78
    3658:	d6 01       	movw	r26, r12
    365a:	3c 93       	st	X, r19
    365c:	41 e4       	ldi	r20, 0x41	; 65
    365e:	11 96       	adiw	r26, 0x01	; 1
    3660:	4c 93       	st	X, r20
    3662:	11 97       	sbiw	r26, 0x01	; 1
    3664:	12 96       	adiw	r26, 0x02	; 2
    3666:	3c 93       	st	X, r19
    3668:	06 c0       	rjmp	.+12     	; 0x3676 <dtoa_prf+0xc2>
    366a:	3e e6       	ldi	r19, 0x6E	; 110
    366c:	f6 01       	movw	r30, r12
    366e:	30 83       	st	Z, r19
    3670:	41 e6       	ldi	r20, 0x61	; 97
    3672:	41 83       	std	Z+1, r20	; 0x01
    3674:	32 83       	std	Z+2, r19	; 0x02
    3676:	fc 01       	movw	r30, r24
    3678:	32 2f       	mov	r19, r18
    367a:	40 e2       	ldi	r20, 0x20	; 32
    367c:	33 23       	and	r19, r19
    367e:	09 f4       	brne	.+2      	; 0x3682 <dtoa_prf+0xce>
    3680:	42 c0       	rjmp	.+132    	; 0x3706 <dtoa_prf+0x152>
    3682:	41 93       	st	Z+, r20
    3684:	31 50       	subi	r19, 0x01	; 1
    3686:	fa cf       	rjmp	.-12     	; 0x367c <dtoa_prf+0xc8>
    3688:	42 ff       	sbrs	r20, 2
    368a:	44 c0       	rjmp	.+136    	; 0x3714 <dtoa_prf+0x160>
    368c:	91 11       	cpse	r25, r1
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <dtoa_prf+0xe0>
    3690:	83 e0       	ldi	r24, 0x03	; 3
    3692:	01 c0       	rjmp	.+2      	; 0x3696 <dtoa_prf+0xe2>
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	81 17       	cp	r24, r17
    3698:	18 f4       	brcc	.+6      	; 0x36a0 <dtoa_prf+0xec>
    369a:	21 2f       	mov	r18, r17
    369c:	28 1b       	sub	r18, r24
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <dtoa_prf+0xee>
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	51 11       	cpse	r21, r1
    36a4:	0b c0       	rjmp	.+22     	; 0x36bc <dtoa_prf+0x108>
    36a6:	f6 01       	movw	r30, r12
    36a8:	82 2f       	mov	r24, r18
    36aa:	30 e2       	ldi	r19, 0x20	; 32
    36ac:	88 23       	and	r24, r24
    36ae:	19 f0       	breq	.+6      	; 0x36b6 <dtoa_prf+0x102>
    36b0:	31 93       	st	Z+, r19
    36b2:	81 50       	subi	r24, 0x01	; 1
    36b4:	fb cf       	rjmp	.-10     	; 0x36ac <dtoa_prf+0xf8>
    36b6:	c2 0e       	add	r12, r18
    36b8:	d1 1c       	adc	r13, r1
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	99 23       	and	r25, r25
    36be:	29 f0       	breq	.+10     	; 0x36ca <dtoa_prf+0x116>
    36c0:	d6 01       	movw	r26, r12
    36c2:	9c 93       	st	X, r25
    36c4:	f6 01       	movw	r30, r12
    36c6:	31 96       	adiw	r30, 0x01	; 1
    36c8:	6f 01       	movw	r12, r30
    36ca:	c6 01       	movw	r24, r12
    36cc:	03 96       	adiw	r24, 0x03	; 3
    36ce:	e2 fe       	sbrs	r14, 2
    36d0:	0b c0       	rjmp	.+22     	; 0x36e8 <dtoa_prf+0x134>
    36d2:	39 e4       	ldi	r19, 0x49	; 73
    36d4:	d6 01       	movw	r26, r12
    36d6:	3c 93       	st	X, r19
    36d8:	3e e4       	ldi	r19, 0x4E	; 78
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	3c 93       	st	X, r19
    36de:	11 97       	sbiw	r26, 0x01	; 1
    36e0:	36 e4       	ldi	r19, 0x46	; 70
    36e2:	12 96       	adiw	r26, 0x02	; 2
    36e4:	3c 93       	st	X, r19
    36e6:	07 c0       	rjmp	.+14     	; 0x36f6 <dtoa_prf+0x142>
    36e8:	39 e6       	ldi	r19, 0x69	; 105
    36ea:	f6 01       	movw	r30, r12
    36ec:	30 83       	st	Z, r19
    36ee:	3e e6       	ldi	r19, 0x6E	; 110
    36f0:	31 83       	std	Z+1, r19	; 0x01
    36f2:	36 e6       	ldi	r19, 0x66	; 102
    36f4:	32 83       	std	Z+2, r19	; 0x02
    36f6:	fc 01       	movw	r30, r24
    36f8:	32 2f       	mov	r19, r18
    36fa:	40 e2       	ldi	r20, 0x20	; 32
    36fc:	33 23       	and	r19, r19
    36fe:	19 f0       	breq	.+6      	; 0x3706 <dtoa_prf+0x152>
    3700:	41 93       	st	Z+, r20
    3702:	31 50       	subi	r19, 0x01	; 1
    3704:	fb cf       	rjmp	.-10     	; 0x36fc <dtoa_prf+0x148>
    3706:	fc 01       	movw	r30, r24
    3708:	e2 0f       	add	r30, r18
    370a:	f1 1d       	adc	r31, r1
    370c:	10 82       	st	Z, r1
    370e:	8e ef       	ldi	r24, 0xFE	; 254
    3710:	9f ef       	ldi	r25, 0xFF	; 255
    3712:	a6 c0       	rjmp	.+332    	; 0x3860 <dtoa_prf+0x2ac>
    3714:	21 e0       	ldi	r18, 0x01	; 1
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	91 11       	cpse	r25, r1
    371a:	02 c0       	rjmp	.+4      	; 0x3720 <dtoa_prf+0x16c>
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	16 16       	cp	r1, r22
    3722:	17 06       	cpc	r1, r23
    3724:	1c f4       	brge	.+6      	; 0x372c <dtoa_prf+0x178>
    3726:	fb 01       	movw	r30, r22
    3728:	31 96       	adiw	r30, 0x01	; 1
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <dtoa_prf+0x17c>
    372c:	e1 e0       	ldi	r30, 0x01	; 1
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	2e 0f       	add	r18, r30
    3732:	3f 1f       	adc	r19, r31
    3734:	bb 20       	and	r11, r11
    3736:	21 f0       	breq	.+8      	; 0x3740 <dtoa_prf+0x18c>
    3738:	eb 2d       	mov	r30, r11
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	31 96       	adiw	r30, 0x01	; 1
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <dtoa_prf+0x190>
    3740:	e0 e0       	ldi	r30, 0x00	; 0
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	2e 0f       	add	r18, r30
    3746:	3f 1f       	adc	r19, r31
    3748:	e1 2f       	mov	r30, r17
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	2e 17       	cp	r18, r30
    374e:	3f 07       	cpc	r19, r31
    3750:	1c f4       	brge	.+6      	; 0x3758 <dtoa_prf+0x1a4>
    3752:	12 1b       	sub	r17, r18
    3754:	21 2f       	mov	r18, r17
    3756:	01 c0       	rjmp	.+2      	; 0x375a <dtoa_prf+0x1a6>
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	8e 2d       	mov	r24, r14
    375c:	88 71       	andi	r24, 0x18	; 24
    375e:	59 f4       	brne	.+22     	; 0x3776 <dtoa_prf+0x1c2>
    3760:	f6 01       	movw	r30, r12
    3762:	82 2f       	mov	r24, r18
    3764:	30 e2       	ldi	r19, 0x20	; 32
    3766:	88 23       	and	r24, r24
    3768:	19 f0       	breq	.+6      	; 0x3770 <dtoa_prf+0x1bc>
    376a:	31 93       	st	Z+, r19
    376c:	81 50       	subi	r24, 0x01	; 1
    376e:	fb cf       	rjmp	.-10     	; 0x3766 <dtoa_prf+0x1b2>
    3770:	c2 0e       	add	r12, r18
    3772:	d1 1c       	adc	r13, r1
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	99 23       	and	r25, r25
    3778:	29 f0       	breq	.+10     	; 0x3784 <dtoa_prf+0x1d0>
    377a:	d6 01       	movw	r26, r12
    377c:	9c 93       	st	X, r25
    377e:	f6 01       	movw	r30, r12
    3780:	31 96       	adiw	r30, 0x01	; 1
    3782:	6f 01       	movw	r12, r30
    3784:	51 11       	cpse	r21, r1
    3786:	0b c0       	rjmp	.+22     	; 0x379e <dtoa_prf+0x1ea>
    3788:	f6 01       	movw	r30, r12
    378a:	82 2f       	mov	r24, r18
    378c:	90 e3       	ldi	r25, 0x30	; 48
    378e:	88 23       	and	r24, r24
    3790:	19 f0       	breq	.+6      	; 0x3798 <dtoa_prf+0x1e4>
    3792:	91 93       	st	Z+, r25
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	fb cf       	rjmp	.-10     	; 0x378e <dtoa_prf+0x1da>
    3798:	c2 0e       	add	r12, r18
    379a:	d1 1c       	adc	r13, r1
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	0f 2d       	mov	r16, r15
    37a0:	06 0f       	add	r16, r22
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	34 2f       	mov	r19, r20
    37a6:	30 71       	andi	r19, 0x10	; 16
    37a8:	44 ff       	sbrs	r20, 4
    37aa:	03 c0       	rjmp	.+6      	; 0x37b2 <dtoa_prf+0x1fe>
    37ac:	91 33       	cpi	r25, 0x31	; 49
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <dtoa_prf+0x1fe>
    37b0:	01 50       	subi	r16, 0x01	; 1
    37b2:	10 16       	cp	r1, r16
    37b4:	24 f4       	brge	.+8      	; 0x37be <dtoa_prf+0x20a>
    37b6:	09 30       	cpi	r16, 0x09	; 9
    37b8:	18 f0       	brcs	.+6      	; 0x37c0 <dtoa_prf+0x20c>
    37ba:	08 e0       	ldi	r16, 0x08	; 8
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <dtoa_prf+0x20c>
    37be:	01 e0       	ldi	r16, 0x01	; 1
    37c0:	ab 01       	movw	r20, r22
    37c2:	77 ff       	sbrs	r23, 7
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <dtoa_prf+0x216>
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	fb 01       	movw	r30, r22
    37cc:	e4 1b       	sub	r30, r20
    37ce:	f5 0b       	sbc	r31, r21
    37d0:	a1 e0       	ldi	r26, 0x01	; 1
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	ac 0f       	add	r26, r28
    37d6:	bd 1f       	adc	r27, r29
    37d8:	ea 0f       	add	r30, r26
    37da:	fb 1f       	adc	r31, r27
    37dc:	8e e2       	ldi	r24, 0x2E	; 46
    37de:	a8 2e       	mov	r10, r24
    37e0:	4b 01       	movw	r8, r22
    37e2:	80 1a       	sub	r8, r16
    37e4:	91 08       	sbc	r9, r1
    37e6:	0b 2d       	mov	r16, r11
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    37ea:	11 95       	neg	r17
    37ec:	01 95       	neg	r16
    37ee:	11 09       	sbc	r17, r1
    37f0:	4f 3f       	cpi	r20, 0xFF	; 255
    37f2:	bf ef       	ldi	r27, 0xFF	; 255
    37f4:	5b 07       	cpc	r21, r27
    37f6:	21 f4       	brne	.+8      	; 0x3800 <dtoa_prf+0x24c>
    37f8:	d6 01       	movw	r26, r12
    37fa:	ac 92       	st	X, r10
    37fc:	11 96       	adiw	r26, 0x01	; 1
    37fe:	6d 01       	movw	r12, r26
    3800:	64 17       	cp	r22, r20
    3802:	75 07       	cpc	r23, r21
    3804:	2c f0       	brlt	.+10     	; 0x3810 <dtoa_prf+0x25c>
    3806:	84 16       	cp	r8, r20
    3808:	95 06       	cpc	r9, r21
    380a:	14 f4       	brge	.+4      	; 0x3810 <dtoa_prf+0x25c>
    380c:	81 81       	ldd	r24, Z+1	; 0x01
    380e:	01 c0       	rjmp	.+2      	; 0x3812 <dtoa_prf+0x25e>
    3810:	80 e3       	ldi	r24, 0x30	; 48
    3812:	41 50       	subi	r20, 0x01	; 1
    3814:	51 09       	sbc	r21, r1
    3816:	31 96       	adiw	r30, 0x01	; 1
    3818:	d6 01       	movw	r26, r12
    381a:	11 96       	adiw	r26, 0x01	; 1
    381c:	7d 01       	movw	r14, r26
    381e:	40 17       	cp	r20, r16
    3820:	51 07       	cpc	r21, r17
    3822:	24 f0       	brlt	.+8      	; 0x382c <dtoa_prf+0x278>
    3824:	d6 01       	movw	r26, r12
    3826:	8c 93       	st	X, r24
    3828:	67 01       	movw	r12, r14
    382a:	e2 cf       	rjmp	.-60     	; 0x37f0 <dtoa_prf+0x23c>
    382c:	64 17       	cp	r22, r20
    382e:	75 07       	cpc	r23, r21
    3830:	39 f4       	brne	.+14     	; 0x3840 <dtoa_prf+0x28c>
    3832:	96 33       	cpi	r25, 0x36	; 54
    3834:	20 f4       	brcc	.+8      	; 0x383e <dtoa_prf+0x28a>
    3836:	95 33       	cpi	r25, 0x35	; 53
    3838:	19 f4       	brne	.+6      	; 0x3840 <dtoa_prf+0x28c>
    383a:	31 11       	cpse	r19, r1
    383c:	01 c0       	rjmp	.+2      	; 0x3840 <dtoa_prf+0x28c>
    383e:	81 e3       	ldi	r24, 0x31	; 49
    3840:	f6 01       	movw	r30, r12
    3842:	80 83       	st	Z, r24
    3844:	f7 01       	movw	r30, r14
    3846:	82 2f       	mov	r24, r18
    3848:	90 e2       	ldi	r25, 0x20	; 32
    384a:	88 23       	and	r24, r24
    384c:	19 f0       	breq	.+6      	; 0x3854 <dtoa_prf+0x2a0>
    384e:	91 93       	st	Z+, r25
    3850:	81 50       	subi	r24, 0x01	; 1
    3852:	fb cf       	rjmp	.-10     	; 0x384a <dtoa_prf+0x296>
    3854:	f7 01       	movw	r30, r14
    3856:	e2 0f       	add	r30, r18
    3858:	f1 1d       	adc	r31, r1
    385a:	10 82       	st	Z, r1
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	29 96       	adiw	r28, 0x09	; 9
    3862:	ec e0       	ldi	r30, 0x0C	; 12
    3864:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__+0xc>

00003868 <strtod>:
    3868:	a0 e0       	ldi	r26, 0x00	; 0
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	ea e3       	ldi	r30, 0x3A	; 58
    386e:	fc e1       	ldi	r31, 0x1C	; 28
    3870:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__+0xc>
    3874:	ec 01       	movw	r28, r24
    3876:	6b 01       	movw	r12, r22
    3878:	61 15       	cp	r22, r1
    387a:	71 05       	cpc	r23, r1
    387c:	19 f0       	breq	.+6      	; 0x3884 <strtod+0x1c>
    387e:	fb 01       	movw	r30, r22
    3880:	91 83       	std	Z+1, r25	; 0x01
    3882:	80 83       	st	Z, r24
    3884:	7e 01       	movw	r14, r28
    3886:	ff ef       	ldi	r31, 0xFF	; 255
    3888:	ef 1a       	sub	r14, r31
    388a:	ff 0a       	sbc	r15, r31
    388c:	08 81       	ld	r16, Y
    388e:	80 2f       	mov	r24, r16
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <isspace>
    3896:	89 2b       	or	r24, r25
    3898:	11 f0       	breq	.+4      	; 0x389e <strtod+0x36>
    389a:	e7 01       	movw	r28, r14
    389c:	f3 cf       	rjmp	.-26     	; 0x3884 <strtod+0x1c>
    389e:	0d 32       	cpi	r16, 0x2D	; 45
    38a0:	39 f4       	brne	.+14     	; 0x38b0 <strtod+0x48>
    38a2:	7e 01       	movw	r14, r28
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	e8 0e       	add	r14, r24
    38a8:	f1 1c       	adc	r15, r1
    38aa:	09 81       	ldd	r16, Y+1	; 0x01
    38ac:	11 e0       	ldi	r17, 0x01	; 1
    38ae:	08 c0       	rjmp	.+16     	; 0x38c0 <strtod+0x58>
    38b0:	0b 32       	cpi	r16, 0x2B	; 43
    38b2:	29 f4       	brne	.+10     	; 0x38be <strtod+0x56>
    38b4:	7e 01       	movw	r14, r28
    38b6:	92 e0       	ldi	r25, 0x02	; 2
    38b8:	e9 0e       	add	r14, r25
    38ba:	f1 1c       	adc	r15, r1
    38bc:	09 81       	ldd	r16, Y+1	; 0x01
    38be:	10 e0       	ldi	r17, 0x00	; 0
    38c0:	e7 01       	movw	r28, r14
    38c2:	21 97       	sbiw	r28, 0x01	; 1
    38c4:	43 e0       	ldi	r20, 0x03	; 3
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	64 ed       	ldi	r22, 0xD4	; 212
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	ce 01       	movw	r24, r28
    38ce:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <strncasecmp_P>
    38d2:	89 2b       	or	r24, r25
    38d4:	c1 f4       	brne	.+48     	; 0x3906 <strtod+0x9e>
    38d6:	23 96       	adiw	r28, 0x03	; 3
    38d8:	45 e0       	ldi	r20, 0x05	; 5
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	6f ec       	ldi	r22, 0xCF	; 207
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	ce 01       	movw	r24, r28
    38e2:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <strncasecmp_P>
    38e6:	89 2b       	or	r24, r25
    38e8:	09 f4       	brne	.+2      	; 0x38ec <strtod+0x84>
    38ea:	25 96       	adiw	r28, 0x05	; 5
    38ec:	c1 14       	cp	r12, r1
    38ee:	d1 04       	cpc	r13, r1
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <strtod+0x90>
    38f2:	f6 01       	movw	r30, r12
    38f4:	d1 83       	std	Z+1, r29	; 0x01
    38f6:	c0 83       	st	Z, r28
    38f8:	11 11       	cpse	r17, r1
    38fa:	f6 c0       	rjmp	.+492    	; 0x3ae8 <strtod+0x280>
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	80 e8       	ldi	r24, 0x80	; 128
    3902:	9f e7       	ldi	r25, 0x7F	; 127
    3904:	fa c0       	rjmp	.+500    	; 0x3afa <strtod+0x292>
    3906:	43 e0       	ldi	r20, 0x03	; 3
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	6c ec       	ldi	r22, 0xCC	; 204
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	ce 01       	movw	r24, r28
    3910:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <strncasecmp_P>
    3914:	89 2b       	or	r24, r25
    3916:	59 f4       	brne	.+22     	; 0x392e <strtod+0xc6>
    3918:	c1 14       	cp	r12, r1
    391a:	d1 04       	cpc	r13, r1
    391c:	09 f4       	brne	.+2      	; 0x3920 <strtod+0xb8>
    391e:	e9 c0       	rjmp	.+466    	; 0x3af2 <strtod+0x28a>
    3920:	f2 e0       	ldi	r31, 0x02	; 2
    3922:	ef 0e       	add	r14, r31
    3924:	f1 1c       	adc	r15, r1
    3926:	f6 01       	movw	r30, r12
    3928:	f1 82       	std	Z+1, r15	; 0x01
    392a:	e0 82       	st	Z, r14
    392c:	e2 c0       	rjmp	.+452    	; 0x3af2 <strtod+0x28a>
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	a9 01       	movw	r20, r18
    3934:	c0 e0       	ldi	r28, 0x00	; 0
    3936:	d0 e0       	ldi	r29, 0x00	; 0
    3938:	f7 01       	movw	r30, r14
    393a:	80 ed       	ldi	r24, 0xD0	; 208
    393c:	a8 2e       	mov	r10, r24
    393e:	a0 0e       	add	r10, r16
    3940:	89 e0       	ldi	r24, 0x09	; 9
    3942:	8a 15       	cp	r24, r10
    3944:	30 f1       	brcs	.+76     	; 0x3992 <strtod+0x12a>
    3946:	91 2f       	mov	r25, r17
    3948:	92 60       	ori	r25, 0x02	; 2
    394a:	b9 2e       	mov	r11, r25
    394c:	81 2f       	mov	r24, r17
    394e:	88 70       	andi	r24, 0x08	; 8
    3950:	12 ff       	sbrs	r17, 2
    3952:	04 c0       	rjmp	.+8      	; 0x395c <strtod+0xf4>
    3954:	81 11       	cpse	r24, r1
    3956:	24 c0       	rjmp	.+72     	; 0x39a0 <strtod+0x138>
    3958:	21 96       	adiw	r28, 0x01	; 1
    395a:	22 c0       	rjmp	.+68     	; 0x39a0 <strtod+0x138>
    395c:	81 11       	cpse	r24, r1
    395e:	21 97       	sbiw	r28, 0x01	; 1
    3960:	a5 e0       	ldi	r26, 0x05	; 5
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__muluhisi3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	9c 01       	movw	r18, r24
    3976:	ad 01       	movw	r20, r26
    3978:	2a 0d       	add	r18, r10
    397a:	31 1d       	adc	r19, r1
    397c:	41 1d       	adc	r20, r1
    397e:	51 1d       	adc	r21, r1
    3980:	28 39       	cpi	r18, 0x98	; 152
    3982:	89 e9       	ldi	r24, 0x99	; 153
    3984:	38 07       	cpc	r19, r24
    3986:	48 07       	cpc	r20, r24
    3988:	89 e1       	ldi	r24, 0x19	; 25
    398a:	58 07       	cpc	r21, r24
    398c:	48 f0       	brcs	.+18     	; 0x39a0 <strtod+0x138>
    398e:	16 60       	ori	r17, 0x06	; 6
    3990:	06 c0       	rjmp	.+12     	; 0x399e <strtod+0x136>
    3992:	9e ef       	ldi	r25, 0xFE	; 254
    3994:	a9 12       	cpse	r10, r25
    3996:	0a c0       	rjmp	.+20     	; 0x39ac <strtod+0x144>
    3998:	13 fd       	sbrc	r17, 3
    399a:	40 c0       	rjmp	.+128    	; 0x3a1c <strtod+0x1b4>
    399c:	18 60       	ori	r17, 0x08	; 8
    399e:	b1 2e       	mov	r11, r17
    39a0:	8f ef       	ldi	r24, 0xFF	; 255
    39a2:	e8 1a       	sub	r14, r24
    39a4:	f8 0a       	sbc	r15, r24
    39a6:	00 81       	ld	r16, Z
    39a8:	1b 2d       	mov	r17, r11
    39aa:	c6 cf       	rjmp	.-116    	; 0x3938 <strtod+0xd0>
    39ac:	80 2f       	mov	r24, r16
    39ae:	8f 7d       	andi	r24, 0xDF	; 223
    39b0:	85 34       	cpi	r24, 0x45	; 69
    39b2:	a1 f5       	brne	.+104    	; 0x3a1c <strtod+0x1b4>
    39b4:	80 81       	ld	r24, Z
    39b6:	8d 32       	cpi	r24, 0x2D	; 45
    39b8:	11 f4       	brne	.+4      	; 0x39be <strtod+0x156>
    39ba:	10 61       	ori	r17, 0x10	; 16
    39bc:	06 c0       	rjmp	.+12     	; 0x39ca <strtod+0x162>
    39be:	8b 32       	cpi	r24, 0x2B	; 43
    39c0:	21 f0       	breq	.+8      	; 0x39ca <strtod+0x162>
    39c2:	31 96       	adiw	r30, 0x01	; 1
    39c4:	61 e0       	ldi	r22, 0x01	; 1
    39c6:	70 e0       	ldi	r23, 0x00	; 0
    39c8:	04 c0       	rjmp	.+8      	; 0x39d2 <strtod+0x16a>
    39ca:	81 81       	ldd	r24, Z+1	; 0x01
    39cc:	32 96       	adiw	r30, 0x02	; 2
    39ce:	62 e0       	ldi	r22, 0x02	; 2
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	80 53       	subi	r24, 0x30	; 48
    39d4:	8a 30       	cpi	r24, 0x0A	; 10
    39d6:	18 f0       	brcs	.+6      	; 0x39de <strtod+0x176>
    39d8:	e6 1b       	sub	r30, r22
    39da:	f7 0b       	sbc	r31, r23
    39dc:	1f c0       	rjmp	.+62     	; 0x3a1c <strtod+0x1b4>
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	70 e0       	ldi	r23, 0x00	; 0
    39e2:	60 38       	cpi	r22, 0x80	; 128
    39e4:	9c e0       	ldi	r25, 0x0C	; 12
    39e6:	79 07       	cpc	r23, r25
    39e8:	5c f4       	brge	.+22     	; 0x3a00 <strtod+0x198>
    39ea:	db 01       	movw	r26, r22
    39ec:	aa 0f       	add	r26, r26
    39ee:	bb 1f       	adc	r27, r27
    39f0:	aa 0f       	add	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	6a 0f       	add	r22, r26
    39f6:	7b 1f       	adc	r23, r27
    39f8:	66 0f       	add	r22, r22
    39fa:	77 1f       	adc	r23, r23
    39fc:	68 0f       	add	r22, r24
    39fe:	71 1d       	adc	r23, r1
    3a00:	31 96       	adiw	r30, 0x01	; 1
    3a02:	df 01       	movw	r26, r30
    3a04:	11 97       	sbiw	r26, 0x01	; 1
    3a06:	8c 91       	ld	r24, X
    3a08:	80 53       	subi	r24, 0x30	; 48
    3a0a:	8a 30       	cpi	r24, 0x0A	; 10
    3a0c:	50 f3       	brcs	.-44     	; 0x39e2 <strtod+0x17a>
    3a0e:	14 ff       	sbrs	r17, 4
    3a10:	03 c0       	rjmp	.+6      	; 0x3a18 <strtod+0x1b0>
    3a12:	71 95       	neg	r23
    3a14:	61 95       	neg	r22
    3a16:	71 09       	sbc	r23, r1
    3a18:	c6 0f       	add	r28, r22
    3a1a:	d7 1f       	adc	r29, r23
    3a1c:	11 ff       	sbrs	r17, 1
    3a1e:	08 c0       	rjmp	.+16     	; 0x3a30 <strtod+0x1c8>
    3a20:	c1 14       	cp	r12, r1
    3a22:	d1 04       	cpc	r13, r1
    3a24:	29 f0       	breq	.+10     	; 0x3a30 <strtod+0x1c8>
    3a26:	cf 01       	movw	r24, r30
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f6 01       	movw	r30, r12
    3a2c:	91 83       	std	Z+1, r25	; 0x01
    3a2e:	80 83       	st	Z, r24
    3a30:	ca 01       	movw	r24, r20
    3a32:	b9 01       	movw	r22, r18
    3a34:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
    3a38:	21 2f       	mov	r18, r17
    3a3a:	23 70       	andi	r18, 0x03	; 3
    3a3c:	23 30       	cpi	r18, 0x03	; 3
    3a3e:	19 f0       	breq	.+6      	; 0x3a46 <strtod+0x1de>
    3a40:	4b 01       	movw	r8, r22
    3a42:	5c 01       	movw	r10, r24
    3a44:	06 c0       	rjmp	.+12     	; 0x3a52 <strtod+0x1ea>
    3a46:	4b 01       	movw	r8, r22
    3a48:	5c 01       	movw	r10, r24
    3a4a:	b7 fa       	bst	r11, 7
    3a4c:	b0 94       	com	r11
    3a4e:	b7 f8       	bld	r11, 7
    3a50:	b0 94       	com	r11
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	a9 01       	movw	r20, r18
    3a58:	c5 01       	movw	r24, r10
    3a5a:	b4 01       	movw	r22, r8
    3a5c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    3a60:	88 23       	and	r24, r24
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <strtod+0x1fe>
    3a64:	3e c0       	rjmp	.+124    	; 0x3ae2 <strtod+0x27a>
    3a66:	d7 ff       	sbrs	r29, 7
    3a68:	06 c0       	rjmp	.+12     	; 0x3a76 <strtod+0x20e>
    3a6a:	d1 95       	neg	r29
    3a6c:	c1 95       	neg	r28
    3a6e:	d1 09       	sbc	r29, r1
    3a70:	0b ee       	ldi	r16, 0xEB	; 235
    3a72:	10 e0       	ldi	r17, 0x00	; 0
    3a74:	02 c0       	rjmp	.+4      	; 0x3a7a <strtod+0x212>
    3a76:	03 e0       	ldi	r16, 0x03	; 3
    3a78:	11 e0       	ldi	r17, 0x01	; 1
    3a7a:	68 01       	movw	r12, r16
    3a7c:	f8 e1       	ldi	r31, 0x18	; 24
    3a7e:	cf 1a       	sub	r12, r31
    3a80:	d1 08       	sbc	r13, r1
    3a82:	90 e2       	ldi	r25, 0x20	; 32
    3a84:	e9 2e       	mov	r14, r25
    3a86:	f1 2c       	mov	r15, r1
    3a88:	ce 15       	cp	r28, r14
    3a8a:	df 05       	cpc	r29, r15
    3a8c:	74 f0       	brlt	.+28     	; 0x3aaa <strtod+0x242>
    3a8e:	f8 01       	movw	r30, r16
    3a90:	25 91       	lpm	r18, Z+
    3a92:	35 91       	lpm	r19, Z+
    3a94:	45 91       	lpm	r20, Z+
    3a96:	54 91       	lpm	r21, Z
    3a98:	c5 01       	movw	r24, r10
    3a9a:	b4 01       	movw	r22, r8
    3a9c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsf3>
    3aa0:	4b 01       	movw	r8, r22
    3aa2:	5c 01       	movw	r10, r24
    3aa4:	ce 19       	sub	r28, r14
    3aa6:	df 09       	sbc	r29, r15
    3aa8:	ef cf       	rjmp	.-34     	; 0x3a88 <strtod+0x220>
    3aaa:	04 50       	subi	r16, 0x04	; 4
    3aac:	11 09       	sbc	r17, r1
    3aae:	f5 94       	asr	r15
    3ab0:	e7 94       	ror	r14
    3ab2:	0c 15       	cp	r16, r12
    3ab4:	1d 05       	cpc	r17, r13
    3ab6:	41 f7       	brne	.-48     	; 0x3a88 <strtod+0x220>
    3ab8:	8a 2d       	mov	r24, r10
    3aba:	88 0f       	add	r24, r24
    3abc:	8b 2d       	mov	r24, r11
    3abe:	88 1f       	adc	r24, r24
    3ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac2:	49 f0       	breq	.+18     	; 0x3ad6 <strtod+0x26e>
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	a9 01       	movw	r20, r18
    3aca:	c5 01       	movw	r24, r10
    3acc:	b4 01       	movw	r22, r8
    3ace:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    3ad2:	81 11       	cpse	r24, r1
    3ad4:	06 c0       	rjmp	.+12     	; 0x3ae2 <strtod+0x27a>
    3ad6:	82 e2       	ldi	r24, 0x22	; 34
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <errno+0x1>
    3ade:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <errno>
    3ae2:	c5 01       	movw	r24, r10
    3ae4:	b4 01       	movw	r22, r8
    3ae6:	09 c0       	rjmp	.+18     	; 0x3afa <strtod+0x292>
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	80 e8       	ldi	r24, 0x80	; 128
    3aee:	9f ef       	ldi	r25, 0xFF	; 255
    3af0:	04 c0       	rjmp	.+8      	; 0x3afa <strtod+0x292>
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	80 ec       	ldi	r24, 0xC0	; 192
    3af8:	9f e7       	ldi	r25, 0x7F	; 127
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	ec e0       	ldi	r30, 0x0C	; 12
    3b00:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__+0xc>

00003b04 <__ftoa_engine>:
    3b04:	28 30       	cpi	r18, 0x08	; 8
    3b06:	08 f0       	brcs	.+2      	; 0x3b0a <__ftoa_engine+0x6>
    3b08:	27 e0       	ldi	r18, 0x07	; 7
    3b0a:	33 27       	eor	r19, r19
    3b0c:	da 01       	movw	r26, r20
    3b0e:	99 0f       	add	r25, r25
    3b10:	31 1d       	adc	r19, r1
    3b12:	87 fd       	sbrc	r24, 7
    3b14:	91 60       	ori	r25, 0x01	; 1
    3b16:	00 96       	adiw	r24, 0x00	; 0
    3b18:	61 05       	cpc	r22, r1
    3b1a:	71 05       	cpc	r23, r1
    3b1c:	39 f4       	brne	.+14     	; 0x3b2c <__ftoa_engine+0x28>
    3b1e:	32 60       	ori	r19, 0x02	; 2
    3b20:	2e 5f       	subi	r18, 0xFE	; 254
    3b22:	3d 93       	st	X+, r19
    3b24:	30 e3       	ldi	r19, 0x30	; 48
    3b26:	2a 95       	dec	r18
    3b28:	e1 f7       	brne	.-8      	; 0x3b22 <__ftoa_engine+0x1e>
    3b2a:	08 95       	ret
    3b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b2e:	30 f0       	brcs	.+12     	; 0x3b3c <__ftoa_engine+0x38>
    3b30:	80 38       	cpi	r24, 0x80	; 128
    3b32:	71 05       	cpc	r23, r1
    3b34:	61 05       	cpc	r22, r1
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <__ftoa_engine+0x36>
    3b38:	3c 5f       	subi	r19, 0xFC	; 252
    3b3a:	3c 5f       	subi	r19, 0xFC	; 252
    3b3c:	3d 93       	st	X+, r19
    3b3e:	91 30       	cpi	r25, 0x01	; 1
    3b40:	08 f0       	brcs	.+2      	; 0x3b44 <__ftoa_engine+0x40>
    3b42:	80 68       	ori	r24, 0x80	; 128
    3b44:	91 1d       	adc	r25, r1
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	1f 93       	push	r17
    3b4c:	0f 93       	push	r16
    3b4e:	ff 92       	push	r15
    3b50:	ef 92       	push	r14
    3b52:	19 2f       	mov	r17, r25
    3b54:	98 7f       	andi	r25, 0xF8	; 248
    3b56:	96 95       	lsr	r25
    3b58:	e9 2f       	mov	r30, r25
    3b5a:	96 95       	lsr	r25
    3b5c:	96 95       	lsr	r25
    3b5e:	e9 0f       	add	r30, r25
    3b60:	ff 27       	eor	r31, r31
    3b62:	ef 59       	subi	r30, 0x9F	; 159
    3b64:	fe 4f       	sbci	r31, 0xFE	; 254
    3b66:	99 27       	eor	r25, r25
    3b68:	33 27       	eor	r19, r19
    3b6a:	ee 24       	eor	r14, r14
    3b6c:	ff 24       	eor	r15, r15
    3b6e:	a7 01       	movw	r20, r14
    3b70:	e7 01       	movw	r28, r14
    3b72:	05 90       	lpm	r0, Z+
    3b74:	08 94       	sec
    3b76:	07 94       	ror	r0
    3b78:	28 f4       	brcc	.+10     	; 0x3b84 <__ftoa_engine+0x80>
    3b7a:	36 0f       	add	r19, r22
    3b7c:	e7 1e       	adc	r14, r23
    3b7e:	f8 1e       	adc	r15, r24
    3b80:	49 1f       	adc	r20, r25
    3b82:	51 1d       	adc	r21, r1
    3b84:	66 0f       	add	r22, r22
    3b86:	77 1f       	adc	r23, r23
    3b88:	88 1f       	adc	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	06 94       	lsr	r0
    3b8e:	a1 f7       	brne	.-24     	; 0x3b78 <__ftoa_engine+0x74>
    3b90:	05 90       	lpm	r0, Z+
    3b92:	07 94       	ror	r0
    3b94:	28 f4       	brcc	.+10     	; 0x3ba0 <__ftoa_engine+0x9c>
    3b96:	e7 0e       	add	r14, r23
    3b98:	f8 1e       	adc	r15, r24
    3b9a:	49 1f       	adc	r20, r25
    3b9c:	56 1f       	adc	r21, r22
    3b9e:	c1 1d       	adc	r28, r1
    3ba0:	77 0f       	add	r23, r23
    3ba2:	88 1f       	adc	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	66 1f       	adc	r22, r22
    3ba8:	06 94       	lsr	r0
    3baa:	a1 f7       	brne	.-24     	; 0x3b94 <__ftoa_engine+0x90>
    3bac:	05 90       	lpm	r0, Z+
    3bae:	07 94       	ror	r0
    3bb0:	28 f4       	brcc	.+10     	; 0x3bbc <__ftoa_engine+0xb8>
    3bb2:	f8 0e       	add	r15, r24
    3bb4:	49 1f       	adc	r20, r25
    3bb6:	56 1f       	adc	r21, r22
    3bb8:	c7 1f       	adc	r28, r23
    3bba:	d1 1d       	adc	r29, r1
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	66 1f       	adc	r22, r22
    3bc2:	77 1f       	adc	r23, r23
    3bc4:	06 94       	lsr	r0
    3bc6:	a1 f7       	brne	.-24     	; 0x3bb0 <__ftoa_engine+0xac>
    3bc8:	05 90       	lpm	r0, Z+
    3bca:	07 94       	ror	r0
    3bcc:	20 f4       	brcc	.+8      	; 0x3bd6 <__ftoa_engine+0xd2>
    3bce:	49 0f       	add	r20, r25
    3bd0:	56 1f       	adc	r21, r22
    3bd2:	c7 1f       	adc	r28, r23
    3bd4:	d8 1f       	adc	r29, r24
    3bd6:	99 0f       	add	r25, r25
    3bd8:	66 1f       	adc	r22, r22
    3bda:	77 1f       	adc	r23, r23
    3bdc:	88 1f       	adc	r24, r24
    3bde:	06 94       	lsr	r0
    3be0:	a9 f7       	brne	.-22     	; 0x3bcc <__ftoa_engine+0xc8>
    3be2:	84 91       	lpm	r24, Z
    3be4:	10 95       	com	r17
    3be6:	17 70       	andi	r17, 0x07	; 7
    3be8:	41 f0       	breq	.+16     	; 0x3bfa <__ftoa_engine+0xf6>
    3bea:	d6 95       	lsr	r29
    3bec:	c7 95       	ror	r28
    3bee:	57 95       	ror	r21
    3bf0:	47 95       	ror	r20
    3bf2:	f7 94       	ror	r15
    3bf4:	e7 94       	ror	r14
    3bf6:	1a 95       	dec	r17
    3bf8:	c1 f7       	brne	.-16     	; 0x3bea <__ftoa_engine+0xe6>
    3bfa:	e7 e0       	ldi	r30, 0x07	; 7
    3bfc:	f1 e0       	ldi	r31, 0x01	; 1
    3bfe:	68 94       	set
    3c00:	15 90       	lpm	r1, Z+
    3c02:	15 91       	lpm	r17, Z+
    3c04:	35 91       	lpm	r19, Z+
    3c06:	65 91       	lpm	r22, Z+
    3c08:	95 91       	lpm	r25, Z+
    3c0a:	05 90       	lpm	r0, Z+
    3c0c:	7f e2       	ldi	r23, 0x2F	; 47
    3c0e:	73 95       	inc	r23
    3c10:	e1 18       	sub	r14, r1
    3c12:	f1 0a       	sbc	r15, r17
    3c14:	43 0b       	sbc	r20, r19
    3c16:	56 0b       	sbc	r21, r22
    3c18:	c9 0b       	sbc	r28, r25
    3c1a:	d0 09       	sbc	r29, r0
    3c1c:	c0 f7       	brcc	.-16     	; 0x3c0e <__ftoa_engine+0x10a>
    3c1e:	e1 0c       	add	r14, r1
    3c20:	f1 1e       	adc	r15, r17
    3c22:	43 1f       	adc	r20, r19
    3c24:	56 1f       	adc	r21, r22
    3c26:	c9 1f       	adc	r28, r25
    3c28:	d0 1d       	adc	r29, r0
    3c2a:	7e f4       	brtc	.+30     	; 0x3c4a <__ftoa_engine+0x146>
    3c2c:	70 33       	cpi	r23, 0x30	; 48
    3c2e:	11 f4       	brne	.+4      	; 0x3c34 <__ftoa_engine+0x130>
    3c30:	8a 95       	dec	r24
    3c32:	e6 cf       	rjmp	.-52     	; 0x3c00 <__ftoa_engine+0xfc>
    3c34:	e8 94       	clt
    3c36:	01 50       	subi	r16, 0x01	; 1
    3c38:	30 f0       	brcs	.+12     	; 0x3c46 <__ftoa_engine+0x142>
    3c3a:	08 0f       	add	r16, r24
    3c3c:	0a f4       	brpl	.+2      	; 0x3c40 <__ftoa_engine+0x13c>
    3c3e:	00 27       	eor	r16, r16
    3c40:	02 17       	cp	r16, r18
    3c42:	08 f4       	brcc	.+2      	; 0x3c46 <__ftoa_engine+0x142>
    3c44:	20 2f       	mov	r18, r16
    3c46:	23 95       	inc	r18
    3c48:	02 2f       	mov	r16, r18
    3c4a:	7a 33       	cpi	r23, 0x3A	; 58
    3c4c:	28 f0       	brcs	.+10     	; 0x3c58 <__ftoa_engine+0x154>
    3c4e:	79 e3       	ldi	r23, 0x39	; 57
    3c50:	7d 93       	st	X+, r23
    3c52:	2a 95       	dec	r18
    3c54:	e9 f7       	brne	.-6      	; 0x3c50 <__ftoa_engine+0x14c>
    3c56:	10 c0       	rjmp	.+32     	; 0x3c78 <__ftoa_engine+0x174>
    3c58:	7d 93       	st	X+, r23
    3c5a:	2a 95       	dec	r18
    3c5c:	89 f6       	brne	.-94     	; 0x3c00 <__ftoa_engine+0xfc>
    3c5e:	06 94       	lsr	r0
    3c60:	97 95       	ror	r25
    3c62:	67 95       	ror	r22
    3c64:	37 95       	ror	r19
    3c66:	17 95       	ror	r17
    3c68:	17 94       	ror	r1
    3c6a:	e1 18       	sub	r14, r1
    3c6c:	f1 0a       	sbc	r15, r17
    3c6e:	43 0b       	sbc	r20, r19
    3c70:	56 0b       	sbc	r21, r22
    3c72:	c9 0b       	sbc	r28, r25
    3c74:	d0 09       	sbc	r29, r0
    3c76:	98 f0       	brcs	.+38     	; 0x3c9e <__ftoa_engine+0x19a>
    3c78:	23 95       	inc	r18
    3c7a:	7e 91       	ld	r23, -X
    3c7c:	73 95       	inc	r23
    3c7e:	7a 33       	cpi	r23, 0x3A	; 58
    3c80:	08 f0       	brcs	.+2      	; 0x3c84 <__ftoa_engine+0x180>
    3c82:	70 e3       	ldi	r23, 0x30	; 48
    3c84:	7c 93       	st	X, r23
    3c86:	20 13       	cpse	r18, r16
    3c88:	b8 f7       	brcc	.-18     	; 0x3c78 <__ftoa_engine+0x174>
    3c8a:	7e 91       	ld	r23, -X
    3c8c:	70 61       	ori	r23, 0x10	; 16
    3c8e:	7d 93       	st	X+, r23
    3c90:	30 f0       	brcs	.+12     	; 0x3c9e <__ftoa_engine+0x19a>
    3c92:	83 95       	inc	r24
    3c94:	71 e3       	ldi	r23, 0x31	; 49
    3c96:	7d 93       	st	X+, r23
    3c98:	70 e3       	ldi	r23, 0x30	; 48
    3c9a:	2a 95       	dec	r18
    3c9c:	e1 f7       	brne	.-8      	; 0x3c96 <__ftoa_engine+0x192>
    3c9e:	11 24       	eor	r1, r1
    3ca0:	ef 90       	pop	r14
    3ca2:	ff 90       	pop	r15
    3ca4:	0f 91       	pop	r16
    3ca6:	1f 91       	pop	r17
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	99 27       	eor	r25, r25
    3cae:	87 fd       	sbrc	r24, 7
    3cb0:	90 95       	com	r25
    3cb2:	08 95       	ret

00003cb4 <isspace>:
    3cb4:	91 11       	cpse	r25, r1
    3cb6:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__ctype_isfalse>
    3cba:	80 32       	cpi	r24, 0x20	; 32
    3cbc:	19 f0       	breq	.+6      	; 0x3cc4 <isspace+0x10>
    3cbe:	89 50       	subi	r24, 0x09	; 9
    3cc0:	85 50       	subi	r24, 0x05	; 5
    3cc2:	c8 f7       	brcc	.-14     	; 0x3cb6 <isspace+0x2>
    3cc4:	08 95       	ret

00003cc6 <strncasecmp_P>:
    3cc6:	fb 01       	movw	r30, r22
    3cc8:	dc 01       	movw	r26, r24
    3cca:	41 50       	subi	r20, 0x01	; 1
    3ccc:	50 40       	sbci	r21, 0x00	; 0
    3cce:	88 f0       	brcs	.+34     	; 0x3cf2 <strncasecmp_P+0x2c>
    3cd0:	8d 91       	ld	r24, X+
    3cd2:	81 34       	cpi	r24, 0x41	; 65
    3cd4:	1c f0       	brlt	.+6      	; 0x3cdc <strncasecmp_P+0x16>
    3cd6:	8b 35       	cpi	r24, 0x5B	; 91
    3cd8:	0c f4       	brge	.+2      	; 0x3cdc <strncasecmp_P+0x16>
    3cda:	80 5e       	subi	r24, 0xE0	; 224
    3cdc:	65 91       	lpm	r22, Z+
    3cde:	61 34       	cpi	r22, 0x41	; 65
    3ce0:	1c f0       	brlt	.+6      	; 0x3ce8 <strncasecmp_P+0x22>
    3ce2:	6b 35       	cpi	r22, 0x5B	; 91
    3ce4:	0c f4       	brge	.+2      	; 0x3ce8 <strncasecmp_P+0x22>
    3ce6:	60 5e       	subi	r22, 0xE0	; 224
    3ce8:	86 1b       	sub	r24, r22
    3cea:	61 11       	cpse	r22, r1
    3cec:	71 f3       	breq	.-36     	; 0x3cca <strncasecmp_P+0x4>
    3cee:	99 0b       	sbc	r25, r25
    3cf0:	08 95       	ret
    3cf2:	88 1b       	sub	r24, r24
    3cf4:	fc cf       	rjmp	.-8      	; 0x3cee <strncasecmp_P+0x28>

00003cf6 <strnlen_P>:
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	05 90       	lpm	r0, Z+
    3cfa:	61 50       	subi	r22, 0x01	; 1
    3cfc:	70 40       	sbci	r23, 0x00	; 0
    3cfe:	01 10       	cpse	r0, r1
    3d00:	d8 f7       	brcc	.-10     	; 0x3cf8 <strnlen_P+0x2>
    3d02:	80 95       	com	r24
    3d04:	90 95       	com	r25
    3d06:	8e 0f       	add	r24, r30
    3d08:	9f 1f       	adc	r25, r31
    3d0a:	08 95       	ret

00003d0c <strnlen>:
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	61 50       	subi	r22, 0x01	; 1
    3d10:	70 40       	sbci	r23, 0x00	; 0
    3d12:	01 90       	ld	r0, Z+
    3d14:	01 10       	cpse	r0, r1
    3d16:	d8 f7       	brcc	.-10     	; 0x3d0e <strnlen+0x2>
    3d18:	80 95       	com	r24
    3d1a:	90 95       	com	r25
    3d1c:	8e 0f       	add	r24, r30
    3d1e:	9f 1f       	adc	r25, r31
    3d20:	08 95       	ret

00003d22 <fputc>:
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	fb 01       	movw	r30, r22
    3d2c:	23 81       	ldd	r18, Z+3	; 0x03
    3d2e:	21 fd       	sbrc	r18, 1
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <fputc+0x16>
    3d32:	8f ef       	ldi	r24, 0xFF	; 255
    3d34:	9f ef       	ldi	r25, 0xFF	; 255
    3d36:	2c c0       	rjmp	.+88     	; 0x3d90 <fputc+0x6e>
    3d38:	22 ff       	sbrs	r18, 2
    3d3a:	16 c0       	rjmp	.+44     	; 0x3d68 <fputc+0x46>
    3d3c:	46 81       	ldd	r20, Z+6	; 0x06
    3d3e:	57 81       	ldd	r21, Z+7	; 0x07
    3d40:	24 81       	ldd	r18, Z+4	; 0x04
    3d42:	35 81       	ldd	r19, Z+5	; 0x05
    3d44:	42 17       	cp	r20, r18
    3d46:	53 07       	cpc	r21, r19
    3d48:	44 f4       	brge	.+16     	; 0x3d5a <fputc+0x38>
    3d4a:	a0 81       	ld	r26, Z
    3d4c:	b1 81       	ldd	r27, Z+1	; 0x01
    3d4e:	9d 01       	movw	r18, r26
    3d50:	2f 5f       	subi	r18, 0xFF	; 255
    3d52:	3f 4f       	sbci	r19, 0xFF	; 255
    3d54:	31 83       	std	Z+1, r19	; 0x01
    3d56:	20 83       	st	Z, r18
    3d58:	8c 93       	st	X, r24
    3d5a:	26 81       	ldd	r18, Z+6	; 0x06
    3d5c:	37 81       	ldd	r19, Z+7	; 0x07
    3d5e:	2f 5f       	subi	r18, 0xFF	; 255
    3d60:	3f 4f       	sbci	r19, 0xFF	; 255
    3d62:	37 83       	std	Z+7, r19	; 0x07
    3d64:	26 83       	std	Z+6, r18	; 0x06
    3d66:	14 c0       	rjmp	.+40     	; 0x3d90 <fputc+0x6e>
    3d68:	8b 01       	movw	r16, r22
    3d6a:	ec 01       	movw	r28, r24
    3d6c:	fb 01       	movw	r30, r22
    3d6e:	00 84       	ldd	r0, Z+8	; 0x08
    3d70:	f1 85       	ldd	r31, Z+9	; 0x09
    3d72:	e0 2d       	mov	r30, r0
    3d74:	09 95       	icall
    3d76:	89 2b       	or	r24, r25
    3d78:	e1 f6       	brne	.-72     	; 0x3d32 <fputc+0x10>
    3d7a:	d8 01       	movw	r26, r16
    3d7c:	16 96       	adiw	r26, 0x06	; 6
    3d7e:	8d 91       	ld	r24, X+
    3d80:	9c 91       	ld	r25, X
    3d82:	17 97       	sbiw	r26, 0x07	; 7
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	17 96       	adiw	r26, 0x07	; 7
    3d88:	9c 93       	st	X, r25
    3d8a:	8e 93       	st	-X, r24
    3d8c:	16 97       	sbiw	r26, 0x06	; 6
    3d8e:	ce 01       	movw	r24, r28
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	1f 91       	pop	r17
    3d96:	0f 91       	pop	r16
    3d98:	08 95       	ret

00003d9a <__ultoa_invert>:
    3d9a:	fa 01       	movw	r30, r20
    3d9c:	aa 27       	eor	r26, r26
    3d9e:	28 30       	cpi	r18, 0x08	; 8
    3da0:	51 f1       	breq	.+84     	; 0x3df6 <__ultoa_invert+0x5c>
    3da2:	20 31       	cpi	r18, 0x10	; 16
    3da4:	81 f1       	breq	.+96     	; 0x3e06 <__ultoa_invert+0x6c>
    3da6:	e8 94       	clt
    3da8:	6f 93       	push	r22
    3daa:	6e 7f       	andi	r22, 0xFE	; 254
    3dac:	6e 5f       	subi	r22, 0xFE	; 254
    3dae:	7f 4f       	sbci	r23, 0xFF	; 255
    3db0:	8f 4f       	sbci	r24, 0xFF	; 255
    3db2:	9f 4f       	sbci	r25, 0xFF	; 255
    3db4:	af 4f       	sbci	r26, 0xFF	; 255
    3db6:	b1 e0       	ldi	r27, 0x01	; 1
    3db8:	3e d0       	rcall	.+124    	; 0x3e36 <__ultoa_invert+0x9c>
    3dba:	b4 e0       	ldi	r27, 0x04	; 4
    3dbc:	3c d0       	rcall	.+120    	; 0x3e36 <__ultoa_invert+0x9c>
    3dbe:	67 0f       	add	r22, r23
    3dc0:	78 1f       	adc	r23, r24
    3dc2:	89 1f       	adc	r24, r25
    3dc4:	9a 1f       	adc	r25, r26
    3dc6:	a1 1d       	adc	r26, r1
    3dc8:	68 0f       	add	r22, r24
    3dca:	79 1f       	adc	r23, r25
    3dcc:	8a 1f       	adc	r24, r26
    3dce:	91 1d       	adc	r25, r1
    3dd0:	a1 1d       	adc	r26, r1
    3dd2:	6a 0f       	add	r22, r26
    3dd4:	71 1d       	adc	r23, r1
    3dd6:	81 1d       	adc	r24, r1
    3dd8:	91 1d       	adc	r25, r1
    3dda:	a1 1d       	adc	r26, r1
    3ddc:	20 d0       	rcall	.+64     	; 0x3e1e <__ultoa_invert+0x84>
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <__ultoa_invert+0x48>
    3de0:	68 94       	set
    3de2:	3f 91       	pop	r19
    3de4:	2a e0       	ldi	r18, 0x0A	; 10
    3de6:	26 9f       	mul	r18, r22
    3de8:	11 24       	eor	r1, r1
    3dea:	30 19       	sub	r19, r0
    3dec:	30 5d       	subi	r19, 0xD0	; 208
    3dee:	31 93       	st	Z+, r19
    3df0:	de f6       	brtc	.-74     	; 0x3da8 <__ultoa_invert+0xe>
    3df2:	cf 01       	movw	r24, r30
    3df4:	08 95       	ret
    3df6:	46 2f       	mov	r20, r22
    3df8:	47 70       	andi	r20, 0x07	; 7
    3dfa:	40 5d       	subi	r20, 0xD0	; 208
    3dfc:	41 93       	st	Z+, r20
    3dfe:	b3 e0       	ldi	r27, 0x03	; 3
    3e00:	0f d0       	rcall	.+30     	; 0x3e20 <__ultoa_invert+0x86>
    3e02:	c9 f7       	brne	.-14     	; 0x3df6 <__ultoa_invert+0x5c>
    3e04:	f6 cf       	rjmp	.-20     	; 0x3df2 <__ultoa_invert+0x58>
    3e06:	46 2f       	mov	r20, r22
    3e08:	4f 70       	andi	r20, 0x0F	; 15
    3e0a:	40 5d       	subi	r20, 0xD0	; 208
    3e0c:	4a 33       	cpi	r20, 0x3A	; 58
    3e0e:	18 f0       	brcs	.+6      	; 0x3e16 <__ultoa_invert+0x7c>
    3e10:	49 5d       	subi	r20, 0xD9	; 217
    3e12:	31 fd       	sbrc	r19, 1
    3e14:	40 52       	subi	r20, 0x20	; 32
    3e16:	41 93       	st	Z+, r20
    3e18:	02 d0       	rcall	.+4      	; 0x3e1e <__ultoa_invert+0x84>
    3e1a:	a9 f7       	brne	.-22     	; 0x3e06 <__ultoa_invert+0x6c>
    3e1c:	ea cf       	rjmp	.-44     	; 0x3df2 <__ultoa_invert+0x58>
    3e1e:	b4 e0       	ldi	r27, 0x04	; 4
    3e20:	a6 95       	lsr	r26
    3e22:	97 95       	ror	r25
    3e24:	87 95       	ror	r24
    3e26:	77 95       	ror	r23
    3e28:	67 95       	ror	r22
    3e2a:	ba 95       	dec	r27
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <__ultoa_invert+0x86>
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	61 05       	cpc	r22, r1
    3e32:	71 05       	cpc	r23, r1
    3e34:	08 95       	ret
    3e36:	9b 01       	movw	r18, r22
    3e38:	ac 01       	movw	r20, r24
    3e3a:	0a 2e       	mov	r0, r26
    3e3c:	06 94       	lsr	r0
    3e3e:	57 95       	ror	r21
    3e40:	47 95       	ror	r20
    3e42:	37 95       	ror	r19
    3e44:	27 95       	ror	r18
    3e46:	ba 95       	dec	r27
    3e48:	c9 f7       	brne	.-14     	; 0x3e3c <__ultoa_invert+0xa2>
    3e4a:	62 0f       	add	r22, r18
    3e4c:	73 1f       	adc	r23, r19
    3e4e:	84 1f       	adc	r24, r20
    3e50:	95 1f       	adc	r25, r21
    3e52:	a0 1d       	adc	r26, r0
    3e54:	08 95       	ret

00003e56 <__ctype_isfalse>:
    3e56:	99 27       	eor	r25, r25
    3e58:	88 27       	eor	r24, r24

00003e5a <__ctype_istrue>:
    3e5a:	08 95       	ret

00003e5c <__muluhisi3>:
    3e5c:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__umulhisi3>
    3e60:	a5 9f       	mul	r26, r21
    3e62:	90 0d       	add	r25, r0
    3e64:	b4 9f       	mul	r27, r20
    3e66:	90 0d       	add	r25, r0
    3e68:	a4 9f       	mul	r26, r20
    3e6a:	80 0d       	add	r24, r0
    3e6c:	91 1d       	adc	r25, r1
    3e6e:	11 24       	eor	r1, r1
    3e70:	08 95       	ret

00003e72 <__prologue_saves__>:
    3e72:	2f 92       	push	r2
    3e74:	3f 92       	push	r3
    3e76:	4f 92       	push	r4
    3e78:	5f 92       	push	r5
    3e7a:	6f 92       	push	r6
    3e7c:	7f 92       	push	r7
    3e7e:	8f 92       	push	r8
    3e80:	9f 92       	push	r9
    3e82:	af 92       	push	r10
    3e84:	bf 92       	push	r11
    3e86:	cf 92       	push	r12
    3e88:	df 92       	push	r13
    3e8a:	ef 92       	push	r14
    3e8c:	ff 92       	push	r15
    3e8e:	0f 93       	push	r16
    3e90:	1f 93       	push	r17
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	ca 1b       	sub	r28, r26
    3e9c:	db 0b       	sbc	r29, r27
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	09 94       	ijmp

00003eaa <__epilogue_restores__>:
    3eaa:	2a 88       	ldd	r2, Y+18	; 0x12
    3eac:	39 88       	ldd	r3, Y+17	; 0x11
    3eae:	48 88       	ldd	r4, Y+16	; 0x10
    3eb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eba:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ebc:	b9 84       	ldd	r11, Y+9	; 0x09
    3ebe:	c8 84       	ldd	r12, Y+8	; 0x08
    3ec0:	df 80       	ldd	r13, Y+7	; 0x07
    3ec2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ec4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ec6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eca:	aa 81       	ldd	r26, Y+2	; 0x02
    3ecc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ece:	ce 0f       	add	r28, r30
    3ed0:	d1 1d       	adc	r29, r1
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	ed 01       	movw	r28, r26
    3ede:	08 95       	ret

00003ee0 <__umulhisi3>:
    3ee0:	a2 9f       	mul	r26, r18
    3ee2:	b0 01       	movw	r22, r0
    3ee4:	b3 9f       	mul	r27, r19
    3ee6:	c0 01       	movw	r24, r0
    3ee8:	a3 9f       	mul	r26, r19
    3eea:	70 0d       	add	r23, r0
    3eec:	81 1d       	adc	r24, r1
    3eee:	11 24       	eor	r1, r1
    3ef0:	91 1d       	adc	r25, r1
    3ef2:	b2 9f       	mul	r27, r18
    3ef4:	70 0d       	add	r23, r0
    3ef6:	81 1d       	adc	r24, r1
    3ef8:	11 24       	eor	r1, r1
    3efa:	91 1d       	adc	r25, r1
    3efc:	08 95       	ret

00003efe <_exit>:
    3efe:	f8 94       	cli

00003f00 <__stop_program>:
    3f00:	ff cf       	rjmp	.-2      	; 0x3f00 <__stop_program>

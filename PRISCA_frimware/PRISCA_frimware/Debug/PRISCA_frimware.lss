
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00003c1a  00003cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000142  00800156  00800156  00003da4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000345b  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6f  00000000  00000000  0000746f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163b  00000000  00000000  000083de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00009a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  00009fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000190a  00000000  00000000  0000a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x22e>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x136>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ea e1       	ldi	r30, 0x1A	; 26
     216:	fc e3       	ldi	r31, 0x3C	; 60
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a6 35       	cpi	r26, 0x56	; 86
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	a6 e5       	ldi	r26, 0x56	; 86
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a8 39       	cpi	r26, 0x98	; 152
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 c8 03 	call	0x790	; 0x790 <main>
     238:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <Vo+0x1>
     2f4:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
     334:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <R2>
     338:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <R2+0x1>
     33c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <R2+0x2>
     340:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <logR2>
     350:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <logR2+0x1>
     354:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <logR2+0x2>
     358:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
     3cc:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <T>
     3d0:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <T+0x1>
     3d4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <T+0x2>
     3d8:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
     3e8:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <Tc>
     3ec:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <Tc+0x1>
     3f0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Tc+0x2>
     3f4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	2a 97       	sbiw	r28, 0x0a	; 10
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	dc 01       	movw	r26, r24
     428:	fe 01       	movw	r30, r28
     42a:	31 96       	adiw	r30, 0x01	; 1
     42c:	ce 01       	movw	r24, r28
     42e:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     430:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     432:	e8 17       	cp	r30, r24
     434:	f9 07       	cpc	r31, r25
     436:	e1 f7       	brne	.-8      	; 0x430 <get_value+0x26>
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
	{
		v [i] = 0;
	}
	while(i < sizeof(String)/sizeof(char))
	{
		if (String [i] == ch){
     444:	fd 01       	movw	r30, r26
     446:	e2 0f       	add	r30, r18
     448:	f3 1f       	adc	r31, r19
     44a:	90 81       	ld	r25, Z
     44c:	96 13       	cpse	r25, r22
     44e:	19 c0       	rjmp	.+50     	; 0x482 <__stack+0x23>
			v [j] = String[j+i+1];
     450:	fa 01       	movw	r30, r20
     452:	e0 0f       	add	r30, r16
     454:	f1 1f       	adc	r31, r17
     456:	7f 01       	movw	r14, r30
     458:	ea 0e       	add	r14, r26
     45a:	fb 1e       	adc	r15, r27
     45c:	f7 01       	movw	r30, r14
     45e:	21 81       	ldd	r18, Z+1	; 0x01
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	8c 0f       	add	r24, r28
     466:	9d 1f       	adc	r25, r29
     468:	80 0f       	add	r24, r16
     46a:	91 1f       	adc	r25, r17
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     470:	f7 01       	movw	r30, r14
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	80 32       	cpi	r24, 0x20	; 32
     476:	59 f0       	breq	.+22     	; 0x48e <__stack+0x2f>
     478:	8d 30       	cpi	r24, 0x0D	; 13
     47a:	49 f0       	breq	.+18     	; 0x48e <__stack+0x2f>
			break;
			j++;
     47c:	0f 5f       	subi	r16, 0xFF	; 255
     47e:	1f 4f       	sbci	r17, 0xFF	; 255
     480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
		}
		else
			i++;
     482:	4f 5f       	subi	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < sizeof(String)/sizeof(char))
     486:	9a 01       	movw	r18, r20
     488:	42 30       	cpi	r20, 0x02	; 2
     48a:	51 05       	cpc	r21, r1
     48c:	d8 f2       	brcs	.-74     	; 0x444 <get_value+0x3a>
			j++;
		}
		else
			i++;
	}
	return (atof(v));
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
}
     496:	2a 96       	adiw	r28, 0x0a	; 10
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <get_SEvalue>:
{
	int S = 0,j=0,lens = sizeof(Str)/sizeof(Str[0]);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     4b0:	dc 01       	movw	r26, r24
     4b2:	2c 91       	ld	r18, X
     4b4:	62 13       	cpse	r22, r18
     4b6:	30 c0       	rjmp	.+96     	; 0x518 <get_SEvalue+0x68>
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = sizeof(Str)/sizeof(Str[0]);
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr [j] = Str[j+S+1];
     4bc:	dc 01       	movw	r26, r24
     4be:	ae 0f       	add	r26, r30
     4c0:	bf 1f       	adc	r27, r31
     4c2:	11 96       	adiw	r26, 0x01	; 1
     4c4:	2c 91       	ld	r18, X
				Str[j] = RXStr[j];
     4c6:	dc 01       	movw	r26, r24
     4c8:	2c 93       	st	X, r18
				if ((Str [j+S+2] == Ech))
     4ca:	32 96       	adiw	r30, 0x02	; 2
     4cc:	e8 0f       	add	r30, r24
     4ce:	f9 1f       	adc	r31, r25
     4d0:	20 81       	ld	r18, Z
     4d2:	42 13       	cpse	r20, r18
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <get_SEvalue+0x4c>
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <get_SEvalue+0x34>
					{
						for (int i = j+1 ; i < lens ; i++)
     4d8:	2e 5f       	subi	r18, 0xFE	; 254
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	22 30       	cpi	r18, 0x02	; 2
     4de:	31 05       	cpc	r19, r1
     4e0:	1c f0       	brlt	.+6      	; 0x4e8 <get_SEvalue+0x38>
     4e2:	08 95       	ret
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	e2 0f       	add	r30, r18
     4ec:	f3 1f       	adc	r31, r19
						{
							Str[i] = 0;
     4ee:	11 92       	st	Z+, r1
			{
				RXStr [j] = Str[j+S+1];
				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
					{
						for (int i = j+1 ; i < lens ; i++)
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	31 05       	cpc	r19, r1
     4f8:	d4 f3       	brlt	.-12     	; 0x4ee <get_SEvalue+0x3e>
     4fa:	08 95       	ret
     4fc:	dc 01       	movw	r26, r24
     4fe:	11 96       	adiw	r26, 0x01	; 1
		if (Str [S] == Sch){
			while(1)
			{
				RXStr [j] = Str[j+S+1];
				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
							Str[i] = 0;
						}
						break;
					}
				else
					j++;
     504:	b9 01       	movw	r22, r18
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr [j] = Str[j+S+1];
     50a:	51 91       	ld	r21, Z+
				Str[j] = RXStr[j];
     50c:	5d 93       	st	X+, r21
				if ((Str [j+S+2] == Ech))
     50e:	50 81       	ld	r21, Z
     510:	54 17       	cp	r21, r20
     512:	11 f3       	breq	.-60     	; 0x4d8 <get_SEvalue+0x28>
							Str[i] = 0;
						}
						break;
					}
				else
					j++;
     514:	9b 01       	movw	r18, r22
     516:	f6 cf       	rjmp	.-20     	; 0x504 <get_SEvalue+0x54>
     518:	dc 01       	movw	r26, r24
     51a:	11 96       	adiw	r26, 0x01	; 1
{
	int S = 0,j=0,lens = sizeof(Str)/sizeof(Str[0]);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     51c:	e0 e0       	ldi	r30, 0x00	; 0
     51e:	f0 e0       	ldi	r31, 0x00	; 0
					j++;
			}
			break;
		}
		else
			S++;
     520:	31 96       	adiw	r30, 0x01	; 1
{
	int S = 0,j=0,lens = sizeof(Str)/sizeof(Str[0]);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     522:	2d 91       	ld	r18, X+
     524:	26 13       	cpse	r18, r22
     526:	fc cf       	rjmp	.-8      	; 0x520 <get_SEvalue+0x70>
     528:	c9 cf       	rjmp	.-110    	; 0x4bc <get_SEvalue+0xc>

0000052a <get_int>:
			S++;
	}

}
int get_int (char* String,char ch)
{
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	2a 97       	sbiw	r28, 0x0a	; 10
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	dc 01       	movw	r26, r24
     548:	fe 01       	movw	r30, r28
     54a:	31 96       	adiw	r30, 0x01	; 1
     54c:	ce 01       	movw	r24, r28
     54e:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     550:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     552:	e8 17       	cp	r30, r24
     554:	f9 07       	cpc	r31, r25
     556:	e1 f7       	brne	.-8      	; 0x550 <get_int+0x26>
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
	{
		v [i] = 0;
	}
	while(i < sizeof(String))
	{
		if (String [i] == ch){
     564:	fd 01       	movw	r30, r26
     566:	e2 0f       	add	r30, r18
     568:	f3 1f       	adc	r31, r19
     56a:	90 81       	ld	r25, Z
     56c:	96 13       	cpse	r25, r22
     56e:	19 c0       	rjmp	.+50     	; 0x5a2 <get_int+0x78>
			v [j] = String[j+i+1];
     570:	fa 01       	movw	r30, r20
     572:	e0 0f       	add	r30, r16
     574:	f1 1f       	adc	r31, r17
     576:	7f 01       	movw	r14, r30
     578:	ea 0e       	add	r14, r26
     57a:	fb 1e       	adc	r15, r27
     57c:	f7 01       	movw	r30, r14
     57e:	21 81       	ldd	r18, Z+1	; 0x01
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	8c 0f       	add	r24, r28
     586:	9d 1f       	adc	r25, r29
     588:	80 0f       	add	r24, r16
     58a:	91 1f       	adc	r25, r17
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     590:	f7 01       	movw	r30, r14
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	80 32       	cpi	r24, 0x20	; 32
     596:	59 f0       	breq	.+22     	; 0x5ae <get_int+0x84>
     598:	8d 30       	cpi	r24, 0x0D	; 13
     59a:	49 f0       	breq	.+18     	; 0x5ae <get_int+0x84>
			break;
			j++;
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <get_int+0x7c>
		}
		else
			i++;
     5a2:	4f 5f       	subi	r20, 0xFF	; 255
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < sizeof(String))
     5a6:	9a 01       	movw	r18, r20
     5a8:	42 30       	cpi	r20, 0x02	; 2
     5aa:	51 05       	cpc	r21, r1
     5ac:	d8 f2       	brcs	.-74     	; 0x564 <get_int+0x3a>
			j++;
		}
		else
			i++;
	}
	return (atoi(v));
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	0e 94 57 17 	call	0x2eae	; 0x2eae <atoi>
}
     5b6:	2a 96       	adiw	r28, 0x0a	; 10
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <find>:
bool find (char* String,char ch)
{
     5d0:	fc 01       	movw	r30, r24
	int i = 0;
	bool f  = 0;
	while(i < sizeof(String))
	{
		if (String [i] == ch){
     5d2:	80 81       	ld	r24, Z
     5d4:	68 17       	cp	r22, r24
     5d6:	41 f0       	breq	.+16     	; 0x5e8 <find+0x18>
			f = 1;
			break;
		}
		else if (String [i] == '\r')
     5d8:	8d 30       	cpi	r24, 0x0D	; 13
     5da:	41 f0       	breq	.+16     	; 0x5ec <find+0x1c>
{
	int i = 0;
	bool f  = 0;
	while(i < sizeof(String))
	{
		if (String [i] == ch){
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	96 17       	cp	r25, r22
     5e2:	29 f0       	breq	.+10     	; 0x5ee <find+0x1e>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
			f = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     5ee:	08 95       	ret

000005f0 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
     5fe:	6a 01       	movw	r12, r20
     600:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     602:	28 81       	ld	r18, Y
     604:	39 81       	ldd	r19, Y+1	; 0x01
     606:	4a 81       	ldd	r20, Y+2	; 0x02
     608:	5b 81       	ldd	r21, Y+3	; 0x03
     60a:	c7 01       	movw	r24, r14
     60c:	b6 01       	movw	r22, r12
     60e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    *current_pos = new_pos;
     612:	c8 82       	st	Y, r12
     614:	d9 82       	std	Y+1, r13	; 0x01
     616:	ea 82       	std	Y+2, r14	; 0x02
     618:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	08 95       	ret

00000628 <pin_direction>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     628:	41 11       	cpse	r20, r1
     62a:	0d c0       	rjmp	.+26     	; 0x646 <pin_direction+0x1e>
     62c:	e8 2f       	mov	r30, r24
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	21 81       	ldd	r18, Z+1	; 0x01
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <pin_direction+0x14>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <pin_direction+0x10>
     640:	82 2b       	or	r24, r18
     642:	81 83       	std	Z+1, r24	; 0x01
     644:	08 95       	ret
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	21 81       	ldd	r18, Z+1	; 0x01
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <pin_direction+0x2e>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	6a 95       	dec	r22
     658:	e2 f7       	brpl	.-8      	; 0x652 <pin_direction+0x2a>
     65a:	80 95       	com	r24
     65c:	82 23       	and	r24, r18
     65e:	81 83       	std	Z+1, r24	; 0x01
     660:	08 95       	ret

00000662 <pin_write>:
     662:	44 23       	and	r20, r20
     664:	69 f0       	breq	.+26     	; 0x680 <pin_write+0x1e>
     666:	e8 2f       	mov	r30, r24
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	22 81       	ldd	r18, Z+2	; 0x02
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <pin_write+0x14>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <pin_write+0x10>
     67a:	82 2b       	or	r24, r18
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	08 95       	ret
     680:	e8 2f       	mov	r30, r24
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	22 81       	ldd	r18, Z+2	; 0x02
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <pin_write+0x2e>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	6a 95       	dec	r22
     692:	e2 f7       	brpl	.-8      	; 0x68c <pin_write+0x2a>
     694:	80 95       	com	r24
     696:	82 23       	and	r24, r18
     698:	82 83       	std	Z+2, r24	; 0x02
     69a:	08 95       	ret

0000069c <port_direction>:
     69c:	61 11       	cpse	r22, r1
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <port_direction+0xe>
     6a0:	e8 2f       	mov	r30, r24
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	81 83       	std	Z+1, r24	; 0x01
     6a8:	08 95       	ret
     6aa:	e8 2f       	mov	r30, r24
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	11 82       	std	Z+1, r1	; 0x01
     6b0:	08 95       	ret

000006b2 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     6b2:	e8 2f       	mov	r30, r24
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	62 83       	std	Z+2, r22	; 0x02
     6b8:	08 95       	ret

000006ba <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     6ba:	e8 2f       	mov	r30, r24
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	21 e0       	ldi	r18, 0x01	; 1
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <pin_XOR+0x10>
     6c6:	22 0f       	add	r18, r18
     6c8:	33 1f       	adc	r19, r19
     6ca:	6a 95       	dec	r22
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <pin_XOR+0xc>
     6ce:	28 27       	eor	r18, r24
     6d0:	22 83       	std	Z+2, r18	; 0x02
     6d2:	08 95       	ret

000006d4 <Init>:
			get_SEvalue(String,' ','*');
			Transmit_Data(String);
		}
	}
}
void Init(void){
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     6e0:	81 b3       	in	r24, 0x11	; 17
     6e2:	80 6b       	ori	r24, 0xB0	; 176
     6e4:	81 bb       	out	0x11, r24	; 17
	pin_direction (D, 2, input );
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	62 e0       	ldi	r22, 0x02	; 2
     6ea:	80 e3       	ldi	r24, 0x30	; 48
     6ec:	0e 94 14 03 	call	0x628	; 0x628 <pin_direction>
	DDRC = 0XFF;
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     6f4:	8a b3       	in	r24, 0x1a	; 26
     6f6:	80 6f       	ori	r24, 0xF0	; 240
     6f8:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     6fa:	87 b3       	in	r24, 0x17	; 23
     6fc:	83 60       	ori	r24, 0x03	; 3
     6fe:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     700:	87 e8       	ldi	r24, 0x87	; 135
     702:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     704:	3e 9a       	sbi	0x07, 6	; 7
	GICR |= 0x40;
     706:	8b b7       	in	r24, 0x3b	; 59
     708:	80 64       	ori	r24, 0x40	; 64
     70a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0x11;
     70c:	85 b7       	in	r24, 0x35	; 53
     70e:	81 61       	ori	r24, 0x11	; 17
     710:	85 bf       	out	0x35, r24	; 53
	UART_INIT();
     712:	0e 94 2e 13 	call	0x265c	; 0x265c <UART_INIT>
	motor_init();
     716:	0e 94 ad 11 	call	0x235a	; 0x235a <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     71a:	0f 2e       	mov	r0, r31
     71c:	f6 ef       	ldi	r31, 0xF6	; 246
     71e:	cf 2e       	mov	r12, r31
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	df 2e       	mov	r13, r31
     724:	f0 2d       	mov	r31, r0
     726:	17 e6       	ldi	r17, 0x67	; 103
     728:	e1 2e       	mov	r14, r17
     72a:	16 e6       	ldi	r17, 0x66	; 102
     72c:	f1 2e       	mov	r15, r17
     72e:	06 ec       	ldi	r16, 0xC6	; 198
     730:	10 e4       	ldi	r17, 0x40	; 64
     732:	a8 01       	movw	r20, r16
     734:	97 01       	movw	r18, r14
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	88 e7       	ldi	r24, 0x78	; 120
     73c:	93 e4       	ldi	r25, 0x43	; 67
     73e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     742:	0f 2e       	mov	r0, r31
     744:	fa ed       	ldi	r31, 0xDA	; 218
     746:	cf 2e       	mov	r12, r31
     748:	f1 e0       	ldi	r31, 0x01	; 1
     74a:	df 2e       	mov	r13, r31
     74c:	f0 2d       	mov	r31, r0
     74e:	a8 01       	movw	r20, r16
     750:	97 01       	movw	r18, r14
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	88 e7       	ldi	r24, 0x78	; 120
     758:	93 e4       	ldi	r25, 0x43	; 67
     75a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Pid_init>
	/*set fast PWM mode with non-inverted output*/
	cli();
     75e:	f8 94       	cli
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     760:	8f b5       	in	r24, 0x2f	; 47
     762:	81 6a       	ori	r24, 0xA1	; 161
     764:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     766:	8e b5       	in	r24, 0x2e	; 46
     768:	81 64       	ori	r24, 0x41	; 65
     76a:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     76c:	85 b5       	in	r24, 0x25	; 37
     76e:	8e 66       	ori	r24, 0x6E	; 110
     770:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     772:	83 b7       	in	r24, 0x33	; 51
     774:	81 68       	ori	r24, 0x81	; 129
     776:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     778:	89 b7       	in	r24, 0x39	; 57
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     77e:	12 be       	out	0x32, r1	; 50
	sei();
     780:	78 94       	sei

}
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	08 95       	ret

00000790 <main>:
int NumberOfLine	= 0;		//variable to count number of line that printed
int NumberOfPLine	= 0;		//variable to count number of line that printed
int CheckSum		= 0;		//variable to count number of line that printed

int main(void)
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	e9 97       	sbiw	r28, 0x39	; 57
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
    Init();
     7a4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Init>
	double value_1;
	double value_2;
	double value_3;
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     7a8:	45 e0       	ldi	r20, 0x05	; 5
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	64 e2       	ldi	r22, 0x24	; 36
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     7b8:	45 e0       	ldi	r20, 0x05	; 5
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	66 e1       	ldi	r22, 0x16	; 22
     7be:	72 e0       	ldi	r23, 0x02	; 2
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     7c8:	45 e0       	ldi	r20, 0x05	; 5
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	62 e8       	ldi	r22, 0x82	; 130
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     7d8:	45 e0       	ldi	r20, 0x05	; 5
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 ed       	ldi	r22, 0xD0	; 208
     7de:	71 e0       	ldi	r23, 0x01	; 1
     7e0:	8f e0       	ldi	r24, 0x0F	; 15
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     7e8:	84 e2       	ldi	r24, 0x24	; 36
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
     7f0:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <Xspm>
     7f4:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <Xspm+0x1>
     7f8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Xspm+0x2>
     7fc:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Xspm+0x3>
	Yspm = atof(Y_pos);
     800:	86 e1       	ldi	r24, 0x16	; 22
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
     808:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <Yspm>
     80c:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <Yspm+0x1>
     810:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Yspm+0x2>
     814:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <Yspm+0x3>
	Zspm = atof(Z_pos);
     818:	82 e8       	ldi	r24, 0x82	; 130
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
     820:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <Zspm>
     824:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <Zspm+0x1>
     828:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Zspm+0x2>
     82c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <Zspm+0x3>
	Espm = atof(E_pos);
     830:	80 ed       	ldi	r24, 0xD0	; 208
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
     838:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <Espm>
     83c:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <Espm+0x1>
     840:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Espm+0x2>
     844:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <Espm+0x3>
     848:	0f 2e       	mov	r0, r31
     84a:	fe e7       	ldi	r31, 0x7E	; 126
     84c:	6f 2e       	mov	r6, r31
     84e:	f2 e0       	ldi	r31, 0x02	; 2
     850:	7f 2e       	mov	r7, r31
     852:	f0 2d       	mov	r31, r0
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
     854:	22 eb       	ldi	r18, 0xB2	; 178
     856:	31 e0       	ldi	r19, 0x01	; 1
     858:	29 ab       	std	Y+49, r18	; 0x31
     85a:	3a ab       	std	Y+50, r19	; 0x32
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	/****************************************************/
	while (1)
	{
		if (status == 0)
     85c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <status>
     860:	81 11       	cpse	r24, r1
     862:	0a c0       	rjmp	.+20     	; 0x878 <main+0xe8>
     864:	ee e2       	ldi	r30, 0x2E	; 46
     866:	f2 e0       	ldi	r31, 0x02	; 2
		{
			for (int i = 0 ; i < 80 ;i++)
			{
		 		String [i] = 0;
     868:	11 92       	st	Z+, r1
	/****************************************************/
	while (1)
	{
		if (status == 0)
		{
			for (int i = 0 ; i < 80 ;i++)
     86a:	6e 16       	cp	r6, r30
     86c:	7f 06       	cpc	r7, r31
     86e:	e1 f7       	brne	.-8      	; 0x868 <main+0xd8>
			{
		 		String [i] = 0;
			}
			Recive_Data(String); // receive uart data and store it in variable (string)
     870:	8e e2       	ldi	r24, 0x2E	; 46
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 4d 13 	call	0x269a	; 0x269a <Recive_Data>
			
		}
		// this code for run the Gcode depending on codes that in https://docs.google.com/document/d/1-IXL4SPSpeL7-teKqPJBG51-9jkx55wjBWgZDoANAug/edit?usp=sharing&fbclid=IwAR3pC85grjWT5KBqa4N7_nx4Ls8xZIw1vQixjXgDGBRfcvUnp72kgWrgpcQ
		if (String[0] == 'M')
     878:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <String>
     87c:	8d 34       	cpi	r24, 0x4D	; 77
     87e:	09 f0       	breq	.+2      	; 0x882 <main+0xf2>
     880:	8f c6       	rjmp	.+3358   	; 0x15a0 <main+0xe10>
		{
			//Transmit_Data(String);
			val = get_int (String,'M');
     882:	6d e4       	ldi	r22, 0x4D	; 77
     884:	8e e2       	ldi	r24, 0x2E	; 46
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
     88c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <val+0x1>
     890:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <val>
			switch (val)
     894:	8b 36       	cpi	r24, 0x6B	; 107
     896:	91 05       	cpc	r25, r1
     898:	09 f4       	brne	.+2      	; 0x89c <main+0x10c>
     89a:	75 c3       	rjmp	.+1770   	; 0xf86 <main+0x7f6>
     89c:	74 f5       	brge	.+92     	; 0x8fa <main+0x16a>
     89e:	83 35       	cpi	r24, 0x53	; 83
     8a0:	91 05       	cpc	r25, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <main+0x116>
     8a4:	36 c1       	rjmp	.+620    	; 0xb12 <main+0x382>
     8a6:	94 f4       	brge	.+36     	; 0x8cc <main+0x13c>
     8a8:	81 31       	cpi	r24, 0x11	; 17
     8aa:	91 05       	cpc	r25, r1
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <main+0x120>
     8ae:	a0 c0       	rjmp	.+320    	; 0x9f0 <main+0x260>
     8b0:	24 f4       	brge	.+8      	; 0x8ba <main+0x12a>
     8b2:	02 97       	sbiw	r24, 0x02	; 2
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <main+0x128>
     8b6:	58 c0       	rjmp	.+176    	; 0x968 <main+0x1d8>
     8b8:	70 c6       	rjmp	.+3296   	; 0x159a <main+0xe0a>
     8ba:	82 31       	cpi	r24, 0x12	; 18
     8bc:	91 05       	cpc	r25, r1
     8be:	09 f4       	brne	.+2      	; 0x8c2 <main+0x132>
     8c0:	9e c0       	rjmp	.+316    	; 0x9fe <main+0x26e>
     8c2:	82 35       	cpi	r24, 0x52	; 82
     8c4:	91 05       	cpc	r25, r1
     8c6:	09 f4       	brne	.+2      	; 0x8ca <main+0x13a>
     8c8:	17 c1       	rjmp	.+558    	; 0xaf8 <main+0x368>
     8ca:	67 c6       	rjmp	.+3278   	; 0x159a <main+0xe0a>
     8cc:	88 36       	cpi	r24, 0x68	; 104
     8ce:	91 05       	cpc	r25, r1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x144>
     8d2:	66 c2       	rjmp	.+1228   	; 0xda0 <main+0x610>
     8d4:	4c f4       	brge	.+18     	; 0x8e8 <main+0x158>
     8d6:	84 35       	cpi	r24, 0x54	; 84
     8d8:	91 05       	cpc	r25, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <main+0x14e>
     8dc:	90 c0       	rjmp	.+288    	; 0x9fe <main+0x26e>
     8de:	8c 35       	cpi	r24, 0x5C	; 92
     8e0:	91 05       	cpc	r25, r1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <main+0x156>
     8e4:	4a c1       	rjmp	.+660    	; 0xb7a <main+0x3ea>
     8e6:	59 c6       	rjmp	.+3250   	; 0x159a <main+0xe0a>
     8e8:	89 36       	cpi	r24, 0x69	; 105
     8ea:	91 05       	cpc	r25, r1
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <main+0x160>
     8ee:	6a c2       	rjmp	.+1236   	; 0xdc4 <main+0x634>
     8f0:	8a 36       	cpi	r24, 0x6A	; 106
     8f2:	91 05       	cpc	r25, r1
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <main+0x168>
     8f6:	3a c3       	rjmp	.+1652   	; 0xf6c <main+0x7dc>
     8f8:	50 c6       	rjmp	.+3232   	; 0x159a <main+0xe0a>
     8fa:	8e 3b       	cpi	r24, 0xBE	; 190
     8fc:	91 05       	cpc	r25, r1
     8fe:	09 f4       	brne	.+2      	; 0x902 <main+0x172>
     900:	c6 c4       	rjmp	.+2444   	; 0x128e <main+0xafe>
     902:	bc f4       	brge	.+46     	; 0x932 <main+0x1a2>
     904:	80 37       	cpi	r24, 0x70	; 112
     906:	91 05       	cpc	r25, r1
     908:	09 f4       	brne	.+2      	; 0x90c <main+0x17c>
     90a:	8d c3       	rjmp	.+1818   	; 0x1026 <main+0x896>
     90c:	4c f4       	brge	.+18     	; 0x920 <main+0x190>
     90e:	8d 36       	cpi	r24, 0x6D	; 109
     910:	91 05       	cpc	r25, r1
     912:	09 f4       	brne	.+2      	; 0x916 <main+0x186>
     914:	3e c3       	rjmp	.+1660   	; 0xf92 <main+0x802>
     916:	8e 36       	cpi	r24, 0x6E	; 110
     918:	91 05       	cpc	r25, r1
     91a:	09 f4       	brne	.+2      	; 0x91e <main+0x18e>
     91c:	7b c3       	rjmp	.+1782   	; 0x1014 <main+0x884>
     91e:	3d c6       	rjmp	.+3194   	; 0x159a <main+0xe0a>
     920:	82 37       	cpi	r24, 0x72	; 114
     922:	91 05       	cpc	r25, r1
     924:	09 f4       	brne	.+2      	; 0x928 <main+0x198>
     926:	08 c4       	rjmp	.+2064   	; 0x1138 <main+0x9a8>
     928:	8c 38       	cpi	r24, 0x8C	; 140
     92a:	91 05       	cpc	r25, r1
     92c:	09 f4       	brne	.+2      	; 0x930 <main+0x1a0>
     92e:	9a c4       	rjmp	.+2356   	; 0x1264 <main+0xad4>
     930:	34 c6       	rjmp	.+3176   	; 0x159a <main+0xe0a>
     932:	84 3f       	cpi	r24, 0xF4	; 244
     934:	51 e0       	ldi	r21, 0x01	; 1
     936:	95 07       	cpc	r25, r21
     938:	09 f4       	brne	.+2      	; 0x93c <main+0x1ac>
     93a:	1f c1       	rjmp	.+574    	; 0xb7a <main+0x3ea>
     93c:	4c f4       	brge	.+18     	; 0x950 <main+0x1c0>
     93e:	8e 3c       	cpi	r24, 0xCE	; 206
     940:	91 05       	cpc	r25, r1
     942:	09 f4       	brne	.+2      	; 0x946 <main+0x1b6>
     944:	c5 c4       	rjmp	.+2442   	; 0x12d0 <main+0xb40>
     946:	8e 32       	cpi	r24, 0x2E	; 46
     948:	91 40       	sbci	r25, 0x01	; 1
     94a:	09 f4       	brne	.+2      	; 0x94e <main+0x1be>
     94c:	e1 c4       	rjmp	.+2498   	; 0x1310 <main+0xb80>
     94e:	25 c6       	rjmp	.+3146   	; 0x159a <main+0xe0a>
     950:	86 3f       	cpi	r24, 0xF6	; 246
     952:	a1 e0       	ldi	r26, 0x01	; 1
     954:	9a 07       	cpc	r25, r26
     956:	09 f4       	brne	.+2      	; 0x95a <main+0x1ca>
     958:	10 c1       	rjmp	.+544    	; 0xb7a <main+0x3ea>
     95a:	0c f4       	brge	.+2      	; 0x95e <main+0x1ce>
     95c:	f6 c4       	rjmp	.+2540   	; 0x134a <main+0xbba>
     95e:	87 3f       	cpi	r24, 0xF7	; 247
     960:	91 40       	sbci	r25, 0x01	; 1
     962:	09 f4       	brne	.+2      	; 0x966 <main+0x1d6>
     964:	47 c5       	rjmp	.+2702   	; 0x13f4 <main+0xc64>
     966:	19 c6       	rjmp	.+3122   	; 0x159a <main+0xe0a>
			{
				case 0: case 1:
					STEP[0] = 0;
     968:	a2 eb       	ldi	r26, 0xB2	; 178
     96a:	b1 e0       	ldi	r27, 0x01	; 1
     96c:	1d 92       	st	X+, r1
     96e:	1d 92       	st	X+, r1
     970:	1d 92       	st	X+, r1
     972:	1c 92       	st	X, r1
     974:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     976:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <STEP+0x4>
     97a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <STEP+0x5>
     97e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <STEP+0x6>
     982:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <STEP+0x7>
					STEP[2] = 0;
     986:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <STEP+0x8>
     98a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <STEP+0x9>
     98e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <STEP+0xa>
     992:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <STEP+0xb>
					STEP[3] = 0;
     996:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <STEP+0xc>
     99a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <STEP+0xd>
     99e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <STEP+0xe>
     9a2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <STEP+0xf>
					F = 0;
     9a6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <F>
     9aa:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <F+0x1>
     9ae:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <F+0x2>
     9b2:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <F+0x3>
					Fe = 0;
     9b6:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Fe>
     9ba:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <Fe+0x1>
     9be:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <Fe+0x2>
     9c2:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Fe+0x3>
					SE0 = 0.0;
     9c6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <SE0>
     9ca:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <SE0+0x1>
     9ce:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <SE0+0x2>
     9d2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SE0+0x3>
					SB = 0.0;
     9d6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <SB>
     9da:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <SB+0x1>
     9de:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <SB+0x2>
     9e2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <SB+0x3>
					Transmit_Data("ok");
     9e6:	81 e1       	ldi	r24, 0x11	; 17
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     9ee:	d5 c5       	rjmp	.+2986   	; 0x159a <main+0xe0a>
				case 17:
					motor_init();
     9f0:	0e 94 ad 11 	call	0x235a	; 0x235a <motor_init>
					Transmit_Data("ok");
     9f4:	81 e1       	ldi	r24, 0x11	; 17
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     9fc:	ce c5       	rjmp	.+2972   	; 0x159a <main+0xe0a>
				case 18: case 84:
					wait = (get_int(String ,'S')*1000);
     9fe:	63 e5       	ldi	r22, 0x53	; 83
     a00:	8e e2       	ldi	r24, 0x2E	; 46
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
     a08:	fc 01       	movw	r30, r24
     a0a:	28 ee       	ldi	r18, 0xE8	; 232
     a0c:	33 e0       	ldi	r19, 0x03	; 3
     a0e:	e2 9f       	mul	r30, r18
     a10:	c0 01       	movw	r24, r0
     a12:	e3 9f       	mul	r30, r19
     a14:	90 0d       	add	r25, r0
     a16:	f2 9f       	mul	r31, r18
     a18:	90 0d       	add	r25, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	09 2e       	mov	r0, r25
     a1e:	00 0c       	add	r0, r0
     a20:	aa 0b       	sbc	r26, r26
     a22:	bb 0b       	sbc	r27, r27
     a24:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <wait>
     a28:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <wait+0x1>
     a2c:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <wait+0x2>
     a30:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <wait+0x3>
					XEN_DES = find(String ,'X');
     a34:	68 e5       	ldi	r22, 0x58	; 88
     a36:	8e e2       	ldi	r24, 0x2E	; 46
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
     a3e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <XEN_DES>
					YEN_DES = find(String ,'Y');
     a42:	69 e5       	ldi	r22, 0x59	; 89
     a44:	8e e2       	ldi	r24, 0x2E	; 46
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
     a4c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <YEN_DES>
					ZEN_DES = find(String ,'Z');
     a50:	6a e5       	ldi	r22, 0x5A	; 90
     a52:	8e e2       	ldi	r24, 0x2E	; 46
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
     a5a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <ZEN_DES>
					EEN_DES = find(String ,'E');
     a5e:	65 e4       	ldi	r22, 0x45	; 69
     a60:	8e e2       	ldi	r24, 0x2E	; 46
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
     a68:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     a6c:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <XEN_DES>
     a70:	88 e5       	ldi	r24, 0x58	; 88
     a72:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     a76:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <YEN_DES>
     a7a:	89 e5       	ldi	r24, 0x59	; 89
     a7c:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     a80:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <YEN_DES>
     a84:	8a e5       	ldi	r24, 0x5A	; 90
     a86:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     a8a:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <EEN_DES>
     a8e:	85 e4       	ldi	r24, 0x45	; 69
     a90:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
					if(wait != 0)
     a94:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <wait>
     a98:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <wait+0x1>
     a9c:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <wait+0x2>
     aa0:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <wait+0x3>
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	a1 05       	cpc	r26, r1
     aa8:	b1 05       	cpc	r27, r1
     aaa:	09 f1       	breq	.+66     	; 0xaee <main+0x35e>
					{
						while(wait > 0)
     aac:	f4 f0       	brlt	.+60     	; 0xaea <main+0x35a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aae:	8f e9       	ldi	r24, 0x9F	; 159
     ab0:	9f e0       	ldi	r25, 0x0F	; 15
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <main+0x322>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <main+0x328>
     ab8:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     aba:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <wait>
     abe:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <wait+0x1>
     ac2:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <wait+0x2>
     ac6:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <wait+0x3>
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	a1 09       	sbc	r26, r1
     ace:	b1 09       	sbc	r27, r1
     ad0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <wait>
     ad4:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <wait+0x1>
     ad8:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <wait+0x2>
     adc:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     ae0:	18 16       	cp	r1, r24
     ae2:	19 06       	cpc	r1, r25
     ae4:	1a 06       	cpc	r1, r26
     ae6:	1b 06       	cpc	r1, r27
     ae8:	14 f3       	brlt	.-60     	; 0xaae <main+0x31e>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     aea:	0e 94 ad 11 	call	0x235a	; 0x235a <motor_init>
					}
					Transmit_Data("ok");
     aee:	81 e1       	ldi	r24, 0x11	; 17
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     af6:	51 c5       	rjmp	.+2722   	; 0x159a <main+0xe0a>
				case 82:
					STEP[3] = 0;
     af8:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <STEP+0xc>
     afc:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <STEP+0xd>
     b00:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <STEP+0xe>
     b04:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <STEP+0xf>
					Transmit_Data("ok");
     b08:	81 e1       	ldi	r24, 0x11	; 17
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     b10:	44 c5       	rjmp	.+2696   	; 0x159a <main+0xe0a>
				case 83:
					old_val_1 = 0;
     b12:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <old_val_1.2372>
     b16:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <old_val_1.2372+0x1>
     b1a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <old_val_1.2372+0x2>
     b1e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <old_val_1.2372+0x3>
					old_val_2 = 0;
     b22:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <old_val_2.2373>
     b26:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <old_val_2.2373+0x1>
     b2a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <old_val_2.2373+0x2>
     b2e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <old_val_2.2373+0x3>
					old_val_3 = 0;
     b32:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
     b36:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__data_end+0x1>
     b3a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end+0x2>
     b3e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__data_end+0x3>
					STEP[0] = 0;
     b42:	a2 eb       	ldi	r26, 0xB2	; 178
     b44:	b1 e0       	ldi	r27, 0x01	; 1
     b46:	1d 92       	st	X+, r1
     b48:	1d 92       	st	X+, r1
     b4a:	1d 92       	st	X+, r1
     b4c:	1c 92       	st	X, r1
     b4e:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     b50:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <STEP+0x4>
     b54:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <STEP+0x5>
     b58:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <STEP+0x6>
     b5c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <STEP+0x7>
					STEP[2] = 0;
     b60:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <STEP+0x8>
     b64:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <STEP+0x9>
     b68:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <STEP+0xa>
     b6c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <STEP+0xb>
					Transmit_Data("ok");
     b70:	81 e1       	ldi	r24, 0x11	; 17
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     b78:	10 c5       	rjmp	.+2592   	; 0x159a <main+0xe0a>
     b7a:	e4 e2       	ldi	r30, 0x24	; 36
     b7c:	f2 e0       	ldi	r31, 0x02	; 2
     b7e:	46 e1       	ldi	r20, 0x16	; 22
     b80:	52 e0       	ldi	r21, 0x02	; 2
     b82:	22 e8       	ldi	r18, 0x82	; 130
     b84:	32 e0       	ldi	r19, 0x02	; 2
     b86:	a0 ed       	ldi	r26, 0xD0	; 208
     b88:	b1 e0       	ldi	r27, 0x01	; 1
     b8a:	7d 01       	movw	r14, r26
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     b8c:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     b8e:	da 01       	movw	r26, r20
     b90:	1d 92       	st	X+, r1
     b92:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
     b94:	d9 01       	movw	r26, r18
     b96:	1d 92       	st	X+, r1
     b98:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
     b9a:	d7 01       	movw	r26, r14
     b9c:	1d 92       	st	X+, r1
     b9e:	7d 01       	movw	r14, r26
					STEP[1] = 0;
					STEP[2] = 0;
					Transmit_Data("ok");
					break;
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
     ba0:	6e e2       	ldi	r22, 0x2E	; 46
     ba2:	72 e0       	ldi	r23, 0x02	; 2
     ba4:	6e 17       	cp	r22, r30
     ba6:	7f 07       	cpc	r23, r31
     ba8:	89 f7       	brne	.-30     	; 0xb8c <main+0x3fc>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
     baa:	8c 35       	cpi	r24, 0x5C	; 92
     bac:	91 05       	cpc	r25, r1
     bae:	a1 f5       	brne	.+104    	; 0xc18 <main+0x488>
					{
						Xspm = get_value(String,'X');
     bb0:	68 e5       	ldi	r22, 0x58	; 88
     bb2:	8e e2       	ldi	r24, 0x2E	; 46
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     bba:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <Xspm>
     bbe:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <Xspm+0x1>
     bc2:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Xspm+0x2>
     bc6:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Xspm+0x3>
						Yspm = get_value(String,'Y');
     bca:	69 e5       	ldi	r22, 0x59	; 89
     bcc:	8e e2       	ldi	r24, 0x2E	; 46
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     bd4:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <Yspm>
     bd8:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <Yspm+0x1>
     bdc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Yspm+0x2>
     be0:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <Yspm+0x3>
						Zspm = get_value(String,'Z');
     be4:	6a e5       	ldi	r22, 0x5A	; 90
     be6:	8e e2       	ldi	r24, 0x2E	; 46
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     bee:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <Zspm>
     bf2:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <Zspm+0x1>
     bf6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Zspm+0x2>
     bfa:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <Zspm+0x3>
						Espm = get_value(String,'E');
     bfe:	65 e4       	ldi	r22, 0x45	; 69
     c00:	8e e2       	ldi	r24, 0x2E	; 46
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     c08:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <Espm>
     c0c:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <Espm+0x1>
     c10:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Espm+0x2>
     c14:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <Espm+0x3>
					}
					if (val == 502)
     c18:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <val>
     c1c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <val+0x1>
     c20:	86 3f       	cpi	r24, 0xF6	; 246
     c22:	91 40       	sbci	r25, 0x01	; 1
     c24:	09 f0       	breq	.+2      	; 0xc28 <main+0x498>
     c26:	40 c0       	rjmp	.+128    	; 0xca8 <main+0x518>
					{
						Xspm = FXspm;
     c28:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FXspm>
     c2c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FXspm+0x1>
     c30:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FXspm+0x2>
     c34:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FXspm+0x3>
     c38:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Xspm>
     c3c:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <Xspm+0x1>
     c40:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <Xspm+0x2>
     c44:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <Xspm+0x3>
						Yspm = FYspm;
     c48:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FYspm>
     c4c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FYspm+0x1>
     c50:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FYspm+0x2>
     c54:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FYspm+0x3>
     c58:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Yspm>
     c5c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <Yspm+0x1>
     c60:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <Yspm+0x2>
     c64:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <Yspm+0x3>
						Zspm = FZspm;
     c68:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FZspm>
     c6c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FZspm+0x1>
     c70:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FZspm+0x2>
     c74:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FZspm+0x3>
     c78:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Zspm>
     c7c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Zspm+0x1>
     c80:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <Zspm+0x2>
     c84:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <Zspm+0x3>
						Espm = FEspm;
     c88:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <FEspm>
     c8c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <FEspm+0x1>
     c90:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <FEspm+0x2>
     c94:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <FEspm+0x3>
     c98:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Espm>
     c9c:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <Espm+0x1>
     ca0:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <Espm+0x2>
     ca4:	b0 93 cf 01 	sts	0x01CF, r27	; 0x8001cf <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
     ca8:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Xspm>
     cac:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Xspm+0x1>
     cb0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Xspm+0x2>
     cb4:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Xspm+0x3>
     cb8:	04 e1       	ldi	r16, 0x14	; 20
     cba:	11 e0       	ldi	r17, 0x01	; 1
     cbc:	23 e0       	ldi	r18, 0x03	; 3
     cbe:	42 e0       	ldi	r20, 0x02	; 2
     cc0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	84 e2       	ldi	r24, 0x24	; 36
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
     cd4:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <Yspm>
     cd8:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <Yspm+0x1>
     cdc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Yspm+0x2>
     ce0:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Yspm+0x3>
     ce4:	23 e0       	ldi	r18, 0x03	; 3
     ce6:	42 e0       	ldi	r20, 0x02	; 2
     ce8:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	e6 e1       	ldi	r30, 0x16	; 22
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
     cf4:	ff 93       	push	r31
     cf6:	ef 93       	push	r30
     cf8:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
     cfc:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <Zspm>
     d00:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <Zspm+0x1>
     d04:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Zspm+0x2>
     d08:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <Zspm+0x3>
     d0c:	23 e0       	ldi	r18, 0x03	; 3
     d0e:	42 e0       	ldi	r20, 0x02	; 2
     d10:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	42 e8       	ldi	r20, 0x82	; 130
     d1a:	52 e0       	ldi	r21, 0x02	; 2
     d1c:	5f 93       	push	r21
     d1e:	4f 93       	push	r20
     d20:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
     d24:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <Espm>
     d28:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <Espm+0x1>
     d2c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <Espm+0x2>
     d30:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <Espm+0x3>
     d34:	23 e0       	ldi	r18, 0x03	; 3
     d36:	42 e0       	ldi	r20, 0x02	; 2
     d38:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	80 ed       	ldi	r24, 0xD0	; 208
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     d4c:	45 e0       	ldi	r20, 0x05	; 5
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	64 e2       	ldi	r22, 0x24	; 36
     d52:	72 e0       	ldi	r23, 0x02	; 2
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     d5c:	45 e0       	ldi	r20, 0x05	; 5
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	66 e1       	ldi	r22, 0x16	; 22
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     d6c:	45 e0       	ldi	r20, 0x05	; 5
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	62 e8       	ldi	r22, 0x82	; 130
     d72:	72 e0       	ldi	r23, 0x02	; 2
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     d7c:	45 e0       	ldi	r20, 0x05	; 5
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	60 ed       	ldi	r22, 0xD0	; 208
     d82:	71 e0       	ldi	r23, 0x01	; 1
     d84:	8f e0       	ldi	r24, 0x0F	; 15
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok");
     d8c:	81 e1       	ldi	r24, 0x11	; 17
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	fd c3       	rjmp	.+2042   	; 0x159a <main+0xe0a>
				case 104:
					SE0 = get_value(String,'S');
     da0:	63 e5       	ldi	r22, 0x53	; 83
     da2:	8e e2       	ldi	r24, 0x2E	; 46
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     daa:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <SE0>
     dae:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <SE0+0x1>
     db2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SE0+0x2>
     db6:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <SE0+0x3>
					Transmit_Data("ok");
     dba:	81 e1       	ldi	r24, 0x11	; 17
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     dc2:	eb c3       	rjmp	.+2006   	; 0x159a <main+0xe0a>
				case 105:
					if (START)
     dc4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <START>
     dc8:	88 23       	and	r24, r24
     dca:	51 f0       	breq	.+20     	; 0xde0 <main+0x650>
					{
						Transmit_Data("welcome we are PRISCA");
     dcc:	87 e1       	ldi	r24, 0x17	; 23
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
						Transmit_Char('\r');
     dd4:	8d e0       	ldi	r24, 0x0D	; 13
     dd6:	0e 94 36 13 	call	0x266c	; 0x266c <Transmit_Char>
						START = 0;
     dda:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <START>
     dde:	dd c3       	rjmp	.+1978   	; 0x159a <main+0xe0a>
     de0:	ec e8       	ldi	r30, 0x8C	; 140
     de2:	f2 e0       	ldi	r31, 0x02	; 2
     de4:	a2 ec       	ldi	r26, 0xC2	; 194
     de6:	b1 e0       	ldi	r27, 0x01	; 1
					} 
					else
					{
						for (int x = 0 ; x < 10 ; x ++)
						{
							TE[x] = 0;
     de8:	11 92       	st	Z+, r1
							TB[x] = 0;
     dea:	1d 92       	st	X+, r1
						Transmit_Char('\r');
						START = 0;
					} 
					else
					{
						for (int x = 0 ; x < 10 ; x ++)
     dec:	26 e9       	ldi	r18, 0x96	; 150
     dee:	32 e0       	ldi	r19, 0x02	; 2
     df0:	2e 17       	cp	r18, r30
     df2:	3f 07       	cpc	r19, r31
     df4:	c9 f7       	brne	.-14     	; 0xde8 <main+0x658>
						{
							TE[x] = 0;
							TB[x] = 0;
						}
						sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
     df6:	82 e5       	ldi	r24, 0x52	; 82
     df8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     dfc:	04 e1       	ldi	r16, 0x14	; 20
     dfe:	11 e0       	ldi	r17, 0x01	; 1
     e00:	23 e0       	ldi	r18, 0x03	; 3
     e02:	42 e0       	ldi	r20, 0x02	; 2
     e04:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     e08:	9f 93       	push	r25
     e0a:	8f 93       	push	r24
     e0c:	4c e8       	ldi	r20, 0x8C	; 140
     e0e:	52 e0       	ldi	r21, 0x02	; 2
     e10:	5f 93       	push	r21
     e12:	4f 93       	push	r20
     e14:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
						sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
     e18:	80 e5       	ldi	r24, 0x50	; 80
     e1a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     e1e:	23 e0       	ldi	r18, 0x03	; 3
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	82 ec       	ldi	r24, 0xC2	; 194
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	9f 93       	push	r25
     e30:	8f 93       	push	r24
     e32:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
						if ((BED_Activ == 1))
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <BED_Activ>
     e44:	88 23       	and	r24, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <main+0x6ba>
     e48:	5a c0       	rjmp	.+180    	; 0xefe <main+0x76e>
						{
							char TEMP[20]={'T',':',
     e4a:	84 e5       	ldi	r24, 0x54	; 84
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	8a e3       	ldi	r24, 0x3A	; 58
     e50:	8a 83       	std	Y+2, r24	; 0x02
     e52:	ac e8       	ldi	r26, 0x8C	; 140
     e54:	b2 e0       	ldi	r27, 0x02	; 2
     e56:	9c 91       	ld	r25, X
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <TE+0x1>
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <TE+0x2>
     e64:	9d 83       	std	Y+5, r25	; 0x05
     e66:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TE+0x3>
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <TE+0x4>
     e70:	9f 83       	std	Y+7, r25	; 0x07
     e72:	90 e2       	ldi	r25, 0x20	; 32
     e74:	98 87       	std	Y+8, r25	; 0x08
     e76:	25 e4       	ldi	r18, 0x45	; 69
     e78:	29 87       	std	Y+9, r18	; 0x09
     e7a:	8a 87       	std	Y+10, r24	; 0x0a
     e7c:	20 e3       	ldi	r18, 0x30	; 48
     e7e:	2b 87       	std	Y+11, r18	; 0x0b
     e80:	9c 87       	std	Y+12, r25	; 0x0c
     e82:	92 e4       	ldi	r25, 0x42	; 66
     e84:	9d 87       	std	Y+13, r25	; 0x0d
     e86:	8e 87       	std	Y+14, r24	; 0x0e
     e88:	e2 ec       	ldi	r30, 0xC2	; 194
     e8a:	f1 e0       	ldi	r31, 0x01	; 1
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 87       	std	Y+15, r24	; 0x0f
     e90:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <TB+0x1>
     e94:	88 8b       	std	Y+16, r24	; 0x10
     e96:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TB+0x2>
     e9a:	89 8b       	std	Y+17, r24	; 0x11
     e9c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <TB+0x3>
     ea0:	8a 8b       	std	Y+18, r24	; 0x12
     ea2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TB+0x4>
     ea6:	8b 8b       	std	Y+19, r24	; 0x13
     ea8:	8d e0       	ldi	r24, 0x0D	; 13
     eaa:	8c 8b       	std	Y+20, r24	; 0x14
								TE[0],TE[1],TE[2],TE[3],TE[4],
								' ','E',':','0',' ',
							'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
							if ((SE0 < getTemp(T0)) && (SB < getTemp(T2))) //enable extrude filament
     eac:	80 e5       	ldi	r24, 0x50	; 80
     eae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     eb2:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <SE0>
     eb6:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <SE0+0x1>
     eba:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <SE0+0x2>
     ebe:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <SE0+0x3>
     ec2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	9c f4       	brge	.+38     	; 0xef0 <main+0x760>
     eca:	82 e5       	ldi	r24, 0x52	; 82
     ecc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     ed0:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <SB>
     ed4:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <SB+0x1>
     ed8:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <SB+0x2>
     edc:	50 91 83 01 	lds	r21, 0x0183	; 0x800183 <SB+0x3>
     ee0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	24 f4       	brge	.+8      	; 0xef0 <main+0x760>
							{
								extrud = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <extrud>
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <main+0x764>
							}
							else
							{
								extrud = 0;
     ef0:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <extrud>
							}
							Transmit_Data(TEMP);
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
     efc:	4e c3       	rjmp	.+1692   	; 0x159a <main+0xe0a>
						}
						else
						{
							char TEMP[12]={'T',':',
     efe:	84 e5       	ldi	r24, 0x54	; 84
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	8a e3       	ldi	r24, 0x3A	; 58
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	ac e8       	ldi	r26, 0x8C	; 140
     f08:	b2 e0       	ldi	r27, 0x02	; 2
     f0a:	9c 91       	ld	r25, X
     f0c:	9b 83       	std	Y+3, r25	; 0x03
     f0e:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <TE+0x1>
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <TE+0x2>
     f18:	9d 83       	std	Y+5, r25	; 0x05
     f1a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TE+0x3>
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <TE+0x4>
     f24:	9f 83       	std	Y+7, r25	; 0x07
     f26:	90 e2       	ldi	r25, 0x20	; 32
     f28:	98 87       	std	Y+8, r25	; 0x08
     f2a:	95 e4       	ldi	r25, 0x45	; 69
     f2c:	99 87       	std	Y+9, r25	; 0x09
     f2e:	8a 87       	std	Y+10, r24	; 0x0a
     f30:	80 e3       	ldi	r24, 0x30	; 48
     f32:	8b 87       	std	Y+11, r24	; 0x0b
     f34:	8d e0       	ldi	r24, 0x0D	; 13
     f36:	8c 87       	std	Y+12, r24	; 0x0c
								TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0','\r'};
							if ((SE0 < getTemp(T0)))
     f38:	80 e5       	ldi	r24, 0x50	; 80
     f3a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     f3e:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <SE0>
     f42:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <SE0+0x1>
     f46:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <SE0+0x2>
     f4a:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <SE0+0x3>
     f4e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	24 f4       	brge	.+8      	; 0xf5e <main+0x7ce>
							{
								extrud = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <extrud>
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <main+0x7d2>
							}
							else
							{
								extrud = 0;
     f5e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <extrud>
							}
							Transmit_Data(TEMP);
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
     f6a:	17 c3       	rjmp	.+1582   	; 0x159a <main+0xe0a>
						}
					}
					break;
				case 106:
					OCR2 = get_value(String,'S');
     f6c:	63 e5       	ldi	r22, 0x53	; 83
     f6e:	8e e2       	ldi	r24, 0x2E	; 46
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     f76:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__fixunssfsi>
     f7a:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok");
     f7c:	81 e1       	ldi	r24, 0x11	; 17
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     f84:	0a c3       	rjmp	.+1556   	; 0x159a <main+0xe0a>
				case 107:
					OCR2 = 0;
     f86:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok");
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
     f90:	04 c3       	rjmp	.+1544   	; 0x159a <main+0xe0a>
				case 109:
					Bt = get_value(String,'B');
     f92:	62 e4       	ldi	r22, 0x42	; 66
     f94:	8e e2       	ldi	r24, 0x2E	; 46
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     f9c:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <Bt>
     fa0:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <Bt+0x1>
     fa4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Bt+0x2>
     fa8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Bt+0x3>
					if (Bt == 0)
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     fb6:	81 11       	cpse	r24, r1
     fb8:	1d c0       	rjmp	.+58     	; 0xff4 <main+0x864>
					{
						SE0 = get_value(String,'S');
     fba:	63 e5       	ldi	r22, 0x53	; 83
     fbc:	8e e2       	ldi	r24, 0x2E	; 46
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     fc4:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <SE0>
     fc8:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <SE0+0x1>
     fcc:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SE0+0x2>
     fd0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <SE0+0x3>
						while(getTemp(T0) < SE0);
     fd4:	80 e5       	ldi	r24, 0x50	; 80
     fd6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     fda:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <SE0>
     fde:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <SE0+0x1>
     fe2:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <SE0+0x2>
     fe6:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <SE0+0x3>
     fea:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     fee:	88 23       	and	r24, r24
     ff0:	8c f3       	brlt	.-30     	; 0xfd4 <main+0x844>
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <main+0x87a>
					} 
					else
					{
						while(getTemp(T0) < B);
     ff4:	80 e5       	ldi	r24, 0x50	; 80
     ff6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	48 e5       	ldi	r20, 0x58	; 88
    1000:	52 e4       	ldi	r21, 0x42	; 66
    1002:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	ac f3       	brlt	.-22     	; 0xff4 <main+0x864>
					}
					
					Transmit_Data("ok");
    100a:	81 e1       	ldi	r24, 0x11	; 17
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1012:	c3 c2       	rjmp	.+1414   	; 0x159a <main+0xe0a>
				case 110:
					NumberOfPLine = 0;
    1014:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <NumberOfPLine+0x1>
    1018:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <NumberOfPLine>
					Transmit_Data("ok");
    101c:	81 e1       	ldi	r24, 0x11	; 17
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1024:	ba c2       	rjmp	.+1396   	; 0x159a <main+0xe0a>
				case 112:
					value_1 = 0;  //extract first value
					value_2 = 0; //call function to extract second value
					value_3 = 0; //call function to extract third value
					STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	ba 01       	movw	r22, r20
    102c:	8e e5       	ldi	r24, 0x5E	; 94
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Xspm>
    103c:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Xspm+0x1>
    1040:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Xspm+0x2>
    1044:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Xspm+0x3>
    1048:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    104c:	e2 eb       	ldi	r30, 0xB2	; 178
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	60 83       	st	Z, r22
    1052:	71 83       	std	Z+1, r23	; 0x01
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	93 83       	std	Z+3, r25	; 0x03
					STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	ba 01       	movw	r22, r20
    105e:	8a e5       	ldi	r24, 0x5A	; 90
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <Yspm>
    106e:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <Yspm+0x1>
    1072:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Yspm+0x2>
    1076:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Yspm+0x3>
    107a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    107e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1082:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1086:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    108a:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
					STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	ba 01       	movw	r22, r20
    1094:	86 e5       	ldi	r24, 0x56	; 86
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <Zspm>
    10a4:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <Zspm+0x1>
    10a8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Zspm+0x2>
    10ac:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <Zspm+0x3>
    10b0:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    10b4:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <STEP+0x8>
    10b8:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <STEP+0x9>
    10bc:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <STEP+0xa>
    10c0:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <STEP+0xb>
					STEP[3] = 0;
    10c4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <STEP+0xc>
    10c8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <STEP+0xd>
    10cc:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <STEP+0xe>
    10d0:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <STEP+0xf>
					F = 0;
    10d4:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <F>
    10d8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <F+0x1>
    10dc:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <F+0x2>
    10e0:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <F+0x3>
					Fe = 0;
    10e4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Fe>
    10e8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <Fe+0x1>
    10ec:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <Fe+0x2>
    10f0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Fe+0x3>
					SE0 = 0;
    10f4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <SE0>
    10f8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <SE0+0x1>
    10fc:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <SE0+0x2>
    1100:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SE0+0x3>
					SB = 0;
    1104:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <SB>
    1108:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <SB+0x1>
    110c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <SB+0x2>
    1110:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <SB+0x3>
					status = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <status>
					motor_movement(STEP,F,Fe);
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	98 01       	movw	r18, r16
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	ba 01       	movw	r22, r20
    1126:	82 eb       	ldi	r24, 0xB2	; 178
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 3b 10 	call	0x2076	; 0x2076 <motor_movement>
					Transmit_Data("ok");
    112e:	81 e1       	ldi	r24, 0x11	; 17
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1136:	31 c2       	rjmp	.+1122   	; 0x159a <main+0xe0a>
    1138:	e4 e2       	ldi	r30, 0x24	; 36
    113a:	f2 e0       	ldi	r31, 0x02	; 2
    113c:	86 e1       	ldi	r24, 0x16	; 22
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	a2 e8       	ldi	r26, 0x82	; 130
    1142:	b2 e0       	ldi	r27, 0x02	; 2
    1144:	ad 01       	movw	r20, r26
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    1146:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    1148:	dc 01       	movw	r26, r24
    114a:	1d 92       	st	X+, r1
    114c:	cd 01       	movw	r24, r26
						Z_pos[i] = 0;
    114e:	da 01       	movw	r26, r20
    1150:	1d 92       	st	X+, r1
    1152:	ad 01       	movw	r20, r26
					status = 1;
					motor_movement(STEP,F,Fe);
					Transmit_Data("ok");
					break;
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
    1154:	2e e2       	ldi	r18, 0x2E	; 46
    1156:	32 e0       	ldi	r19, 0x02	; 2
    1158:	2e 17       	cp	r18, r30
    115a:	3f 07       	cpc	r19, r31
    115c:	a1 f7       	brne	.-24     	; 0x1146 <main+0x9b6>
					{
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(old_val_1, 2,3,"%f"));
    115e:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <old_val_1.2372>
    1162:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <old_val_1.2372+0x1>
    1166:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <old_val_1.2372+0x2>
    116a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <old_val_1.2372+0x3>
    116e:	04 e1       	ldi	r16, 0x14	; 20
    1170:	11 e0       	ldi	r17, 0x01	; 1
    1172:	23 e0       	ldi	r18, 0x03	; 3
    1174:	42 e0       	ldi	r20, 0x02	; 2
    1176:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    117a:	9f 93       	push	r25
    117c:	8f 93       	push	r24
    117e:	44 e2       	ldi	r20, 0x24	; 36
    1180:	52 e0       	ldi	r21, 0x02	; 2
    1182:	5f 93       	push	r21
    1184:	4f 93       	push	r20
    1186:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Y_pos,dtostrf(old_val_2, 2,3,"%f"));
    118a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <old_val_2.2373>
    118e:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <old_val_2.2373+0x1>
    1192:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <old_val_2.2373+0x2>
    1196:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <old_val_2.2373+0x3>
    119a:	23 e0       	ldi	r18, 0x03	; 3
    119c:	42 e0       	ldi	r20, 0x02	; 2
    119e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	86 e1       	ldi	r24, 0x16	; 22
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Z_pos,dtostrf(old_val_3, 2,3,"%f"));
    11b2:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__data_end>
    11b6:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <__data_end+0x1>
    11ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end+0x2>
    11be:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x3>
    11c2:	23 e0       	ldi	r18, 0x03	; 3
    11c4:	42 e0       	ldi	r20, 0x02	; 2
    11c6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	e2 e8       	ldi	r30, 0x82	; 130
    11d0:	f2 e0       	ldi	r31, 0x02	; 2
    11d2:	ff 93       	push	r31
    11d4:	ef 93       	push	r30
    11d6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					char pos[21]={'X',
    11da:	88 e5       	ldi	r24, 0x58	; 88
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	a4 e2       	ldi	r26, 0x24	; 36
    11e0:	b2 e0       	ldi	r27, 0x02	; 2
    11e2:	8c 91       	ld	r24, X
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <X_pos+0x1>
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <X_pos+0x2>
    11f0:	8c 83       	std	Y+4, r24	; 0x04
    11f2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <X_pos+0x3>
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <X_pos+0x4>
    11fc:	8e 83       	std	Y+6, r24	; 0x06
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	99 e5       	ldi	r25, 0x59	; 89
    1204:	98 87       	std	Y+8, r25	; 0x08
    1206:	e6 e1       	ldi	r30, 0x16	; 22
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	90 81       	ld	r25, Z
    120c:	99 87       	std	Y+9, r25	; 0x09
    120e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Y_pos+0x1>
    1212:	9a 87       	std	Y+10, r25	; 0x0a
    1214:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Y_pos+0x2>
    1218:	9b 87       	std	Y+11, r25	; 0x0b
    121a:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <Y_pos+0x3>
    121e:	9c 87       	std	Y+12, r25	; 0x0c
    1220:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Y_pos+0x4>
    1224:	9d 87       	std	Y+13, r25	; 0x0d
    1226:	8e 87       	std	Y+14, r24	; 0x0e
    1228:	8a e5       	ldi	r24, 0x5A	; 90
    122a:	8f 87       	std	Y+15, r24	; 0x0f
    122c:	a2 e8       	ldi	r26, 0x82	; 130
    122e:	b2 e0       	ldi	r27, 0x02	; 2
    1230:	8c 91       	ld	r24, X
    1232:	88 8b       	std	Y+16, r24	; 0x10
    1234:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <Z_pos+0x1>
    1238:	89 8b       	std	Y+17, r24	; 0x11
    123a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <Z_pos+0x2>
    123e:	8a 8b       	std	Y+18, r24	; 0x12
    1240:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Z_pos+0x3>
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Z_pos+0x4>
    124a:	8c 8b       	std	Y+20, r24	; 0x14
    124c:	8d e0       	ldi	r24, 0x0D	; 13
    124e:	8d 8b       	std	Y+21, r24	; 0x15
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
					Transmit_Data(pos);
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	9b c1       	rjmp	.+822    	; 0x159a <main+0xe0a>
				case 140:
					SB = get_value(String,'S');
    1264:	63 e5       	ldi	r22, 0x53	; 83
    1266:	8e e2       	ldi	r24, 0x2E	; 46
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    126e:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <SB>
    1272:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <SB+0x1>
    1276:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <SB+0x2>
    127a:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <SB+0x3>
					BED_Activ = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <BED_Activ>
					Transmit_Data("ok");
    1284:	81 e1       	ldi	r24, 0x11	; 17
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    128c:	86 c1       	rjmp	.+780    	; 0x159a <main+0xe0a>
				case 190:
					SB = get_value(String,'S');
    128e:	63 e5       	ldi	r22, 0x53	; 83
    1290:	8e e2       	ldi	r24, 0x2E	; 46
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1298:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <SB>
    129c:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <SB+0x1>
    12a0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <SB+0x2>
    12a4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <SB+0x3>
					while(getTemp(T2) < SB);
    12a8:	82 e5       	ldi	r24, 0x52	; 82
    12aa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    12ae:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <SB>
    12b2:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <SB+0x1>
    12b6:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <SB+0x2>
    12ba:	50 91 83 01 	lds	r21, 0x0183	; 0x800183 <SB+0x3>
    12be:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	8c f3       	brlt	.-30     	; 0x12a8 <main+0xb18>
					Transmit_Data("ok");
    12c6:	81 e1       	ldi	r24, 0x11	; 17
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    12ce:	65 c1       	rjmp	.+714    	; 0x159a <main+0xe0a>
				case 206:
					old_val_1 = 0;
    12d0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <old_val_1.2372>
    12d4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <old_val_1.2372+0x1>
    12d8:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <old_val_1.2372+0x2>
    12dc:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <old_val_1.2372+0x3>
					old_val_2 = 0;
    12e0:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <old_val_2.2373>
    12e4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <old_val_2.2373+0x1>
    12e8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <old_val_2.2373+0x2>
    12ec:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <old_val_2.2373+0x3>
					old_val_3 = 0;
    12f0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
    12f4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__data_end+0x1>
    12f8:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end+0x2>
    12fc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__data_end+0x3>
					homeSet = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <homeSet>
					Transmit_Data("ok");
    1306:	81 e1       	ldi	r24, 0x11	; 17
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    130e:	45 c1       	rjmp	.+650    	; 0x159a <main+0xe0a>
				case 302:
					SE0 = get_value(String,'S');
    1310:	63 e5       	ldi	r22, 0x53	; 83
    1312:	8e e2       	ldi	r24, 0x2E	; 46
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    131a:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <SE0>
    131e:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <SE0+0x1>
    1322:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SE0+0x2>
    1326:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <SE0+0x3>
					if (SE0 <= 25 )
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	48 ec       	ldi	r20, 0xC8	; 200
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1336:	18 16       	cp	r1, r24
    1338:	1c f0       	brlt	.+6      	; 0x1340 <main+0xbb0>
					{
						Fextrud = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Fextrud>
					}
					Transmit_Data("ok");
    1340:	81 e1       	ldi	r24, 0x11	; 17
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1348:	28 c1       	rjmp	.+592    	; 0x159a <main+0xe0a>
				case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    134a:	45 e0       	ldi	r20, 0x05	; 5
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	64 e2       	ldi	r22, 0x24	; 36
    1350:	72 e0       	ldi	r23, 0x02	; 2
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    135a:	45 e0       	ldi	r20, 0x05	; 5
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	66 e1       	ldi	r22, 0x16	; 22
    1360:	72 e0       	ldi	r23, 0x02	; 2
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    136a:	45 e0       	ldi	r20, 0x05	; 5
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	62 e8       	ldi	r22, 0x82	; 130
    1370:	72 e0       	ldi	r23, 0x02	; 2
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    137a:	45 e0       	ldi	r20, 0x05	; 5
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	60 ed       	ldi	r22, 0xD0	; 208
    1380:	71 e0       	ldi	r23, 0x01	; 1
    1382:	8f e0       	ldi	r24, 0x0F	; 15
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    138a:	84 e2       	ldi	r24, 0x24	; 36
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
    1392:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <Xspm>
    1396:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <Xspm+0x1>
    139a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Xspm+0x2>
    139e:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Xspm+0x3>
					Yspm = atof(Y_pos);
    13a2:	86 e1       	ldi	r24, 0x16	; 22
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
    13aa:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <Yspm>
    13ae:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <Yspm+0x1>
    13b2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Yspm+0x2>
    13b6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <Yspm+0x3>
					Zspm = atof(Z_pos);
    13ba:	82 e8       	ldi	r24, 0x82	; 130
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
    13c2:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <Zspm>
    13c6:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <Zspm+0x1>
    13ca:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Zspm+0x2>
    13ce:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <Zspm+0x3>
					Espm = atof(E_pos);
    13d2:	80 ed       	ldi	r24, 0xD0	; 208
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <atof>
    13da:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <Espm>
    13de:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <Espm+0x1>
    13e2:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Espm+0x2>
    13e6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <Espm+0x3>
					Transmit_Data("ok");
    13ea:	81 e1       	ldi	r24, 0x11	; 17
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    13f2:	d3 c0       	rjmp	.+422    	; 0x159a <main+0xe0a>
    13f4:	e4 e2       	ldi	r30, 0x24	; 36
    13f6:	f2 e0       	ldi	r31, 0x02	; 2
    13f8:	26 e1       	ldi	r18, 0x16	; 22
    13fa:	32 e0       	ldi	r19, 0x02	; 2
    13fc:	82 e8       	ldi	r24, 0x82	; 130
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	a0 ed       	ldi	r26, 0xD0	; 208
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	bd 01       	movw	r22, r26
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    1406:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    1408:	d9 01       	movw	r26, r18
    140a:	1d 92       	st	X+, r1
    140c:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    140e:	dc 01       	movw	r26, r24
    1410:	1d 92       	st	X+, r1
    1412:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    1414:	db 01       	movw	r26, r22
    1416:	1d 92       	st	X+, r1
    1418:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok");
					break;
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
    141a:	b2 e0       	ldi	r27, 0x02	; 2
    141c:	ee 32       	cpi	r30, 0x2E	; 46
    141e:	fb 07       	cpc	r31, r27
    1420:	91 f7       	brne	.-28     	; 0x1406 <main+0xc76>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    1422:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Xspm>
    1426:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Xspm+0x1>
    142a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Xspm+0x2>
    142e:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Xspm+0x3>
    1432:	04 e1       	ldi	r16, 0x14	; 20
    1434:	11 e0       	ldi	r17, 0x01	; 1
    1436:	23 e0       	ldi	r18, 0x03	; 3
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
    1442:	e4 e2       	ldi	r30, 0x24	; 36
    1444:	f2 e0       	ldi	r31, 0x02	; 2
    1446:	ff 93       	push	r31
    1448:	ef 93       	push	r30
    144a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    144e:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <Yspm>
    1452:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <Yspm+0x1>
    1456:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Yspm+0x2>
    145a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Yspm+0x3>
    145e:	23 e0       	ldi	r18, 0x03	; 3
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    1466:	9f 93       	push	r25
    1468:	8f 93       	push	r24
    146a:	46 e1       	ldi	r20, 0x16	; 22
    146c:	52 e0       	ldi	r21, 0x02	; 2
    146e:	5f 93       	push	r21
    1470:	4f 93       	push	r20
    1472:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    1476:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <Zspm>
    147a:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <Zspm+0x1>
    147e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Zspm+0x2>
    1482:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <Zspm+0x3>
    1486:	23 e0       	ldi	r18, 0x03	; 3
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    148e:	9f 93       	push	r25
    1490:	8f 93       	push	r24
    1492:	82 e8       	ldi	r24, 0x82	; 130
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    149e:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <Espm>
    14a2:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <Espm+0x1>
    14a6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <Espm+0x2>
    14aa:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <Espm+0x3>
    14ae:	23 e0       	ldi	r18, 0x03	; 3
    14b0:	42 e0       	ldi	r20, 0x02	; 2
    14b2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <dtostrf>
    14b6:	9f 93       	push	r25
    14b8:	8f 93       	push	r24
    14ba:	e0 ed       	ldi	r30, 0xD0	; 208
    14bc:	f1 e0       	ldi	r31, 0x01	; 1
    14be:	ff 93       	push	r31
    14c0:	ef 93       	push	r30
    14c2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <sprintf>
					char acc[44]={'X',
    14c6:	88 e5       	ldi	r24, 0x58	; 88
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	a4 e2       	ldi	r26, 0x24	; 36
    14cc:	b2 e0       	ldi	r27, 0x02	; 2
    14ce:	8c 91       	ld	r24, X
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <X_pos+0x1>
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <X_pos+0x2>
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    14de:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <X_pos+0x3>
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <X_pos+0x4>
    14e8:	8e 83       	std	Y+6, r24	; 0x06
    14ea:	23 e7       	ldi	r18, 0x73	; 115
    14ec:	2f 83       	std	Y+7, r18	; 0x07
    14ee:	9f e2       	ldi	r25, 0x2F	; 47
    14f0:	98 87       	std	Y+8, r25	; 0x08
    14f2:	8d e6       	ldi	r24, 0x6D	; 109
    14f4:	89 87       	std	Y+9, r24	; 0x09
    14f6:	8a 87       	std	Y+10, r24	; 0x0a
    14f8:	30 e2       	ldi	r19, 0x20	; 32
    14fa:	3b 87       	std	Y+11, r19	; 0x0b
    14fc:	49 e5       	ldi	r20, 0x59	; 89
    14fe:	4c 87       	std	Y+12, r20	; 0x0c
    1500:	e6 e1       	ldi	r30, 0x16	; 22
    1502:	f2 e0       	ldi	r31, 0x02	; 2
    1504:	40 81       	ld	r20, Z
    1506:	4d 87       	std	Y+13, r20	; 0x0d
    1508:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <Y_pos+0x1>
    150c:	4e 87       	std	Y+14, r20	; 0x0e
    150e:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <Y_pos+0x2>
    1512:	4f 87       	std	Y+15, r20	; 0x0f
    1514:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <Y_pos+0x3>
    1518:	48 8b       	std	Y+16, r20	; 0x10
    151a:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <Y_pos+0x4>
    151e:	49 8b       	std	Y+17, r20	; 0x11
    1520:	2a 8b       	std	Y+18, r18	; 0x12
    1522:	9b 8b       	std	Y+19, r25	; 0x13
    1524:	8c 8b       	std	Y+20, r24	; 0x14
    1526:	8d 8b       	std	Y+21, r24	; 0x15
    1528:	3e 8b       	std	Y+22, r19	; 0x16
    152a:	4a e5       	ldi	r20, 0x5A	; 90
    152c:	4f 8b       	std	Y+23, r20	; 0x17
    152e:	a2 e8       	ldi	r26, 0x82	; 130
    1530:	b2 e0       	ldi	r27, 0x02	; 2
    1532:	4c 91       	ld	r20, X
    1534:	48 8f       	std	Y+24, r20	; 0x18
    1536:	40 91 83 02 	lds	r20, 0x0283	; 0x800283 <Z_pos+0x1>
    153a:	49 8f       	std	Y+25, r20	; 0x19
    153c:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <Z_pos+0x2>
    1540:	4a 8f       	std	Y+26, r20	; 0x1a
    1542:	40 91 85 02 	lds	r20, 0x0285	; 0x800285 <Z_pos+0x3>
    1546:	4b 8f       	std	Y+27, r20	; 0x1b
    1548:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <Z_pos+0x4>
    154c:	4c 8f       	std	Y+28, r20	; 0x1c
    154e:	2d 8f       	std	Y+29, r18	; 0x1d
    1550:	9e 8f       	std	Y+30, r25	; 0x1e
    1552:	8f 8f       	std	Y+31, r24	; 0x1f
    1554:	88 a3       	std	Y+32, r24	; 0x20
    1556:	39 a3       	std	Y+33, r19	; 0x21
    1558:	35 e4       	ldi	r19, 0x45	; 69
    155a:	3a a3       	std	Y+34, r19	; 0x22
    155c:	e0 ed       	ldi	r30, 0xD0	; 208
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	30 81       	ld	r19, Z
    1562:	3b a3       	std	Y+35, r19	; 0x23
    1564:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <E_pos+0x1>
    1568:	3c a3       	std	Y+36, r19	; 0x24
    156a:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <E_pos+0x2>
    156e:	3d a3       	std	Y+37, r19	; 0x25
    1570:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <E_pos+0x3>
    1574:	3e a3       	std	Y+38, r19	; 0x26
    1576:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <E_pos+0x4>
    157a:	3f a3       	std	Y+39, r19	; 0x27
    157c:	28 a7       	std	Y+40, r18	; 0x28
    157e:	99 a7       	std	Y+41, r25	; 0x29
    1580:	8a a7       	std	Y+42, r24	; 0x2a
    1582:	8b a7       	std	Y+43, r24	; 0x2b
    1584:	8d e0       	ldi	r24, 0x0D	; 13
    1586:	8c a7       	std	Y+44, r24	; 0x2c
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break; 				
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
			}
			status = 0;	
    159a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <status>
    159e:	5e c9       	rjmp	.-3396   	; 0x85c <main+0xcc>
		}
		else if (String[0] == 'G')
    15a0:	87 34       	cpi	r24, 0x47	; 71
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <main+0xe16>
    15a4:	ef c3       	rjmp	.+2014   	; 0x1d84 <main+0x15f4>
		{
			val = get_int (String,'G');
    15a6:	67 e4       	ldi	r22, 0x47	; 71
    15a8:	8e e2       	ldi	r24, 0x2E	; 46
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
    15b0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <val+0x1>
    15b4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <val>
			switch (val)
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	91 05       	cpc	r25, r1
    15bc:	3c f4       	brge	.+14     	; 0x15cc <main+0xe3c>
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	91 05       	cpc	r25, r1
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <main+0xe36>
    15c4:	0f c1       	rjmp	.+542    	; 0x17e4 <main+0x1054>
    15c6:	99 23       	and	r25, r25
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <main+0xe44>
    15ca:	d8 c3       	rjmp	.+1968   	; 0x1d7c <main+0x15ec>
    15cc:	4c 97       	sbiw	r24, 0x1c	; 28
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <main+0xe42>
    15d0:	92 c3       	rjmp	.+1828   	; 0x1cf6 <main+0x1566>
    15d2:	d4 c3       	rjmp	.+1960   	; 0x1d7c <main+0x15ec>
			{
				case 0:case 1:
					motor_init();
    15d4:	0e 94 ad 11 	call	0x235a	; 0x235a <motor_init>
					value_1 = get_value(String,'X');           //extract first value
    15d8:	68 e5       	ldi	r22, 0x58	; 88
    15da:	8e e2       	ldi	r24, 0x2E	; 46
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15e2:	6d a7       	std	Y+45, r22	; 0x2d
    15e4:	7e a7       	std	Y+46, r23	; 0x2e
    15e6:	8f a7       	std	Y+47, r24	; 0x2f
    15e8:	98 ab       	std	Y+48, r25	; 0x30
					value_2 = get_value(String,'Y'); //call function to extract second value
    15ea:	69 e5       	ldi	r22, 0x59	; 89
    15ec:	8e e2       	ldi	r24, 0x2E	; 46
    15ee:	92 e0       	ldi	r25, 0x02	; 2
    15f0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15f4:	6b 01       	movw	r12, r22
    15f6:	7c 01       	movw	r14, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
    15f8:	6a e5       	ldi	r22, 0x5A	; 90
    15fa:	8e e2       	ldi	r24, 0x2E	; 46
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1602:	4b 01       	movw	r8, r22
    1604:	5c 01       	movw	r10, r24
					STEP[3] = get_value(String,'E');
    1606:	65 e4       	ldi	r22, 0x45	; 69
    1608:	8e e2       	ldi	r24, 0x2E	; 46
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1610:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <STEP+0xc>
    1614:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <STEP+0xd>
    1618:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <STEP+0xe>
    161c:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <STEP+0xf>
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    162a:	88 23       	and	r24, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <main+0xea0>
    162e:	ef c3       	rjmp	.+2014   	; 0x1e0e <main+0x167e>
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	6d a5       	ldd	r22, Y+45	; 0x2d
    1638:	7e a5       	ldd	r23, Y+46	; 0x2e
    163a:	8f a5       	ldd	r24, Y+47	; 0x2f
    163c:	98 a9       	ldd	r25, Y+48	; 0x30
    163e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <main+0xeb8>
    1646:	e3 c3       	rjmp	.+1990   	; 0x1e0e <main+0x167e>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1656:	88 23       	and	r24, r24
    1658:	09 f4       	brne	.+2      	; 0x165c <main+0xecc>
    165a:	d9 c3       	rjmp	.+1970   	; 0x1e0e <main+0x167e>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	c5 01       	movw	r24, r10
    1664:	b4 01       	movw	r22, r8
    1666:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    166a:	81 11       	cpse	r24, r1
    166c:	b9 c3       	rjmp	.+1906   	; 0x1de0 <main+0x1650>
    166e:	cf c3       	rjmp	.+1950   	; 0x1e0e <main+0x167e>
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							Fe = FN;
    1670:	20 92 84 01 	sts	0x0184, r2	; 0x800184 <Fe>
    1674:	30 92 85 01 	sts	0x0185, r3	; 0x800185 <Fe+0x1>
    1678:	40 92 86 01 	sts	0x0186, r4	; 0x800186 <Fe+0x2>
    167c:	50 92 87 01 	sts	0x0187, r5	; 0x800187 <Fe+0x3>
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <main+0xf02>
					else
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							F = FN;
    1682:	20 92 8c 01 	sts	0x018C, r2	; 0x80018c <F>
    1686:	30 92 8d 01 	sts	0x018D, r3	; 0x80018d <F+0x1>
    168a:	40 92 8e 01 	sts	0x018E, r4	; 0x80018e <F+0x2>
    168e:	50 92 8f 01 	sts	0x018F, r5	; 0x80018f <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	48 e4       	ldi	r20, 0x48	; 72
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	6d a5       	ldd	r22, Y+45	; 0x2d
    169c:	7e a5       	ldd	r23, Y+46	; 0x2e
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	0c f4       	brge	.+2      	; 0x16ac <main+0xf1c>
    16aa:	97 c0       	rjmp	.+302    	; 0x17da <main+0x104a>
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	48 e4       	ldi	r20, 0x48	; 72
    16b2:	53 e4       	ldi	r21, 0x43	; 67
    16b4:	c7 01       	movw	r24, r14
    16b6:	b6 01       	movw	r22, r12
    16b8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
    16bc:	18 16       	cp	r1, r24
    16be:	0c f4       	brge	.+2      	; 0x16c2 <main+0xf32>
    16c0:	8c c0       	rjmp	.+280    	; 0x17da <main+0x104a>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a ef       	ldi	r20, 0xFA	; 250
    16c8:	53 e4       	ldi	r21, 0x43	; 67
    16ca:	c5 01       	movw	r24, r10
    16cc:	b4 01       	movw	r22, r8
    16ce:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	0c f4       	brge	.+2      	; 0x16d8 <main+0xf48>
    16d6:	81 c0       	rjmp	.+258    	; 0x17da <main+0x104a>

					{
						status = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <status>
						STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    16de:	4d a5       	ldd	r20, Y+45	; 0x2d
    16e0:	5e a5       	ldd	r21, Y+46	; 0x2e
    16e2:	6f a5       	ldd	r22, Y+47	; 0x2f
    16e4:	78 a9       	ldd	r23, Y+48	; 0x30
    16e6:	8e e5       	ldi	r24, 0x5E	; 94
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Xspm>
    16f6:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Xspm+0x1>
    16fa:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Xspm+0x2>
    16fe:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Xspm+0x3>
    1702:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1706:	a2 eb       	ldi	r26, 0xB2	; 178
    1708:	b1 e0       	ldi	r27, 0x01	; 1
    170a:	6d 93       	st	X+, r22
    170c:	7d 93       	st	X+, r23
    170e:	8d 93       	st	X+, r24
    1710:	9c 93       	st	X, r25
    1712:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    1714:	b7 01       	movw	r22, r14
    1716:	a6 01       	movw	r20, r12
    1718:	8a e5       	ldi	r24, 0x5A	; 90
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <Yspm>
    1728:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <Yspm+0x1>
    172c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Yspm+0x2>
    1730:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Yspm+0x3>
    1734:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1738:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    173c:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1740:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1744:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
						STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    1748:	b5 01       	movw	r22, r10
    174a:	a4 01       	movw	r20, r8
    174c:	86 e5       	ldi	r24, 0x56	; 86
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1754:	9b 01       	movw	r18, r22
    1756:	ac 01       	movw	r20, r24
    1758:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <Zspm>
    175c:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <Zspm+0x1>
    1760:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Zspm+0x2>
    1764:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <Zspm+0x3>
    1768:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    176c:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <STEP+0x8>
    1770:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <STEP+0x9>
    1774:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <STEP+0xa>
    1778:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <STEP+0xb>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						if ((extrud || Fextrud))
    177c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <extrud>
    1780:	81 11       	cpse	r24, r1
    1782:	04 c0       	rjmp	.+8      	; 0x178c <main+0xffc>
    1784:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Fextrud>
    1788:	88 23       	and	r24, r24
    178a:	f9 f0       	breq	.+62     	; 0x17ca <main+0x103a>
						{
							motor_movement(STEP,F,Fe);
    178c:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <Fe>
    1790:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <Fe+0x1>
    1794:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Fe+0x2>
    1798:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Fe+0x3>
    179c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    17a0:	6b 01       	movw	r12, r22
    17a2:	7c 01       	movw	r14, r24
    17a4:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <F>
    17a8:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <F+0x1>
    17ac:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <F+0x2>
    17b0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <F+0x3>
    17b4:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    17b8:	ab 01       	movw	r20, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	97 01       	movw	r18, r14
    17be:	86 01       	movw	r16, r12
    17c0:	82 eb       	ldi	r24, 0xB2	; 178
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 3b 10 	call	0x2076	; 0x2076 <motor_movement>
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <main+0x104a>
						} 
						else
						{
							Transmit_Data("error extruder temp.");
    17ca:	8d e2       	ldi	r24, 0x2D	; 45
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
							Transmit_Char('\r');
    17d2:	8d e0       	ldi	r24, 0x0D	; 13
    17d4:	0e 94 36 13 	call	0x266c	; 0x266c <Transmit_Char>
							break;
    17d8:	d1 c2       	rjmp	.+1442   	; 0x1d7c <main+0x15ec>
						}						
					}
					Transmit_Data("ok");
    17da:	81 e1       	ldi	r24, 0x11	; 17
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    17e2:	cc c2       	rjmp	.+1432   	; 0x1d7c <main+0x15ec>
				case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    17e4:	68 e5       	ldi	r22, 0x58	; 88
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    17ee:	6d a7       	std	Y+45, r22	; 0x2d
    17f0:	7e a7       	std	Y+46, r23	; 0x2e
    17f2:	8f a7       	std	Y+47, r24	; 0x2f
    17f4:	98 ab       	std	Y+48, r25	; 0x30
					value_2 = get_value(String,'Y'); //call function to extract second value
    17f6:	69 e5       	ldi	r22, 0x59	; 89
    17f8:	8e e2       	ldi	r24, 0x2E	; 46
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1800:	6c ab       	std	Y+52, r22	; 0x34
    1802:	7d ab       	std	Y+53, r23	; 0x35
    1804:	8e ab       	std	Y+54, r24	; 0x36
    1806:	9f ab       	std	Y+55, r25	; 0x37
					I = get_value(String,'I');
    1808:	69 e4       	ldi	r22, 0x49	; 73
    180a:	8e e2       	ldi	r24, 0x2E	; 46
    180c:	92 e0       	ldi	r25, 0x02	; 2
    180e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1812:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <I>
    1816:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <I+0x1>
    181a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <I+0x2>
    181e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <I+0x3>
					J = get_value(String,'J');
    1822:	6a e4       	ldi	r22, 0x4A	; 74
    1824:	8e e2       	ldi	r24, 0x2E	; 46
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    182c:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <J>
    1830:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <J+0x1>
    1834:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <J+0x2>
    1838:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <J+0x3>
					FN = get_value(String,'F');
    183c:	66 e4       	ldi	r22, 0x46	; 70
    183e:	8e e2       	ldi	r24, 0x2E	; 46
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1846:	6b 01       	movw	r12, r22
    1848:	7c 01       	movw	r14, r24
    184a:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <FN>
    184e:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <FN+0x1>
    1852:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <FN+0x2>
    1856:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <FN+0x3>
					if (FN != 0)
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1864:	88 23       	and	r24, r24
    1866:	41 f0       	breq	.+16     	; 0x1878 <main+0x10e8>
					{
						F = FN;
    1868:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <F>
    186c:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <F+0x1>
    1870:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <F+0x2>
    1874:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <F+0x3>
					}
					R = get_value(String,'R');
    1878:	62 e5       	ldi	r22, 0x52	; 82
    187a:	8e e2       	ldi	r24, 0x2E	; 46
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1882:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <R>
    1886:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <R+0x1>
    188a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <R+0x2>
    188e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <R+0x3>
					if (R == 0)
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	a9 01       	movw	r20, r18
    1898:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    189c:	81 11       	cpse	r24, r1
    189e:	ce c2       	rjmp	.+1436   	; 0x1e3c <main+0x16ac>
					{
						R = sqrt(pow(I,2)+pow(J,2));
    18a0:	c0 90 78 01 	lds	r12, 0x0178	; 0x800178 <I>
    18a4:	d0 90 79 01 	lds	r13, 0x0179	; 0x800179 <I+0x1>
    18a8:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <I+0x2>
    18ac:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <I+0x3>
    18b0:	80 90 74 01 	lds	r8, 0x0174	; 0x800174 <J>
    18b4:	90 90 75 01 	lds	r9, 0x0175	; 0x800175 <J+0x1>
    18b8:	a0 90 76 01 	lds	r10, 0x0176	; 0x800176 <J+0x2>
    18bc:	b0 90 77 01 	lds	r11, 0x0177	; 0x800177 <J+0x3>
    18c0:	a5 01       	movw	r20, r10
    18c2:	94 01       	movw	r18, r8
    18c4:	c5 01       	movw	r24, r10
    18c6:	b4 01       	movw	r22, r8
    18c8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    18cc:	4b 01       	movw	r8, r22
    18ce:	5c 01       	movw	r10, r24
    18d0:	a7 01       	movw	r20, r14
    18d2:	96 01       	movw	r18, r12
    18d4:	c7 01       	movw	r24, r14
    18d6:	b6 01       	movw	r22, r12
    18d8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	c5 01       	movw	r24, r10
    18e2:	b4 01       	movw	r22, r8
    18e4:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    18e8:	0e 94 48 16 	call	0x2c90	; 0x2c90 <sqrt>
    18ec:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <R>
    18f0:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <R+0x1>
    18f4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <R+0x2>
    18f8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <R+0x3>
    18fc:	9f c2       	rjmp	.+1342   	; 0x1e3c <main+0x16ac>
					} 
					for (int th = 0 ; th <= 360 ; th++)
					{
						double xc = R*cos(th)*cos(th);
    18fe:	b1 01       	movw	r22, r2
    1900:	03 2c       	mov	r0, r3
    1902:	00 0c       	add	r0, r0
    1904:	88 0b       	sbc	r24, r24
    1906:	99 0b       	sbc	r25, r25
    1908:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
    190c:	6b 01       	movw	r12, r22
    190e:	7c 01       	movw	r14, r24
    1910:	0e 94 da 13 	call	0x27b4	; 0x27b4 <cos>
    1914:	2b 01       	movw	r4, r22
    1916:	3c 01       	movw	r6, r24
    1918:	80 90 70 01 	lds	r8, 0x0170	; 0x800170 <R>
    191c:	90 90 71 01 	lds	r9, 0x0171	; 0x800171 <R+0x1>
    1920:	a0 90 72 01 	lds	r10, 0x0172	; 0x800172 <R+0x2>
    1924:	b0 90 73 01 	lds	r11, 0x0173	; 0x800173 <R+0x3>
    1928:	a5 01       	movw	r20, r10
    192a:	94 01       	movw	r18, r8
    192c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1930:	a3 01       	movw	r20, r6
    1932:	92 01       	movw	r18, r4
    1934:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1938:	2b 01       	movw	r4, r22
    193a:	3c 01       	movw	r6, r24
						double yc = R*sin(th)*sin(th);
    193c:	c7 01       	movw	r24, r14
    193e:	b6 01       	movw	r22, r12
    1940:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <sin>
    1944:	6b 01       	movw	r12, r22
    1946:	7c 01       	movw	r14, r24
    1948:	9b 01       	movw	r18, r22
    194a:	ac 01       	movw	r20, r24
    194c:	c5 01       	movw	r24, r10
    194e:	b4 01       	movw	r22, r8
    1950:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1954:	a7 01       	movw	r20, r14
    1956:	96 01       	movw	r18, r12
    1958:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
						if ((xc >= value_1) && (yc >= value_2))
    1960:	a3 01       	movw	r20, r6
    1962:	92 01       	movw	r18, r4
    1964:	6d a5       	ldd	r22, Y+45	; 0x2d
    1966:	7e a5       	ldd	r23, Y+46	; 0x2e
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1970:	18 16       	cp	r1, r24
    1972:	5c f0       	brlt	.+22     	; 0x198a <main+0x11fa>
    1974:	a7 01       	movw	r20, r14
    1976:	96 01       	movw	r18, r12
    1978:	6c a9       	ldd	r22, Y+52	; 0x34
    197a:	7d a9       	ldd	r23, Y+53	; 0x35
    197c:	8e a9       	ldd	r24, Y+54	; 0x36
    197e:	9f a9       	ldd	r25, Y+55	; 0x37
    1980:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f0       	brlt	.+2      	; 0x198a <main+0x11fa>
    1988:	f7 c1       	rjmp	.+1006   	; 0x1d78 <main+0x15e8>
							break;
						if ((extrud || Fextrud))
    198a:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <extrud>
    198e:	81 11       	cpse	r24, r1
    1990:	05 c0       	rjmp	.+10     	; 0x199c <main+0x120c>
    1992:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Fextrud>
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <main+0x120c>
    199a:	a1 c1       	rjmp	.+834    	; 0x1cde <main+0x154e>
						{
							if (val == 2)
    199c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <val>
    19a0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <val+0x1>
    19a4:	02 97       	sbiw	r24, 0x02	; 2
    19a6:	09 f0       	breq	.+2      	; 0x19aa <main+0x121a>
    19a8:	af c0       	rjmp	.+350    	; 0x1b08 <main+0x1378>
							{
								if ((I == 0) && (J == 0))
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	a9 01       	movw	r20, r18
    19b0:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <I>
    19b4:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <I+0x1>
    19b8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <I+0x2>
    19bc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <I+0x3>
    19c0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    19c4:	81 11       	cpse	r24, r1
    19c6:	42 c0       	rjmp	.+132    	; 0x1a4c <main+0x12bc>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <J>
    19d2:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <J+0x1>
    19d6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <J+0x2>
    19da:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <J+0x3>
    19de:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    19e2:	81 11       	cpse	r24, r1
    19e4:	33 c0       	rjmp	.+102    	; 0x1a4c <main+0x12bc>
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm;     //call function to extract first step
    19e6:	b3 01       	movw	r22, r6
    19e8:	a2 01       	movw	r20, r4
    19ea:	8e e5       	ldi	r24, 0x5E	; 94
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Xspm>
    19fa:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Xspm+0x1>
    19fe:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Xspm+0x2>
    1a02:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Xspm+0x3>
    1a06:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1a0a:	e2 eb       	ldi	r30, 0xB2	; 178
    1a0c:	f1 e0       	ldi	r31, 0x01	; 1
    1a0e:	60 83       	st	Z, r22
    1a10:	71 83       	std	Z+1, r23	; 0x01
    1a12:	82 83       	std	Z+2, r24	; 0x02
    1a14:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm;    //call function to extract second step
    1a16:	b7 01       	movw	r22, r14
    1a18:	a6 01       	movw	r20, r12
    1a1a:	8a e5       	ldi	r24, 0x5A	; 90
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <Yspm>
    1a2a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <Yspm+0x1>
    1a2e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Yspm+0x2>
    1a32:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Yspm+0x3>
    1a36:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1a3a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1a3e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1a42:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1a46:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
    1a4a:	10 c1       	rjmp	.+544    	; 0x1c6c <main+0x14dc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(-I/I);     //call function to extract first step
    1a4c:	b3 01       	movw	r22, r6
    1a4e:	a2 01       	movw	r20, r4
    1a50:	8e e5       	ldi	r24, 0x5E	; 94
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1a58:	80 90 78 01 	lds	r8, 0x0178	; 0x800178 <I>
    1a5c:	90 90 79 01 	lds	r9, 0x0179	; 0x800179 <I+0x1>
    1a60:	a0 90 7a 01 	lds	r10, 0x017A	; 0x80017a <I+0x2>
    1a64:	b0 90 7b 01 	lds	r11, 0x017B	; 0x80017b <I+0x3>
    1a68:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <Xspm>
    1a6c:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <Xspm+0x1>
    1a70:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <Xspm+0x2>
    1a74:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <Xspm+0x3>
    1a78:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1a7c:	2b 01       	movw	r4, r22
    1a7e:	3c 01       	movw	r6, r24
    1a80:	c5 01       	movw	r24, r10
    1a82:	b4 01       	movw	r22, r8
    1a84:	90 58       	subi	r25, 0x80	; 128
    1a86:	a5 01       	movw	r20, r10
    1a88:	94 01       	movw	r18, r8
    1a8a:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	c3 01       	movw	r24, r6
    1a94:	b2 01       	movw	r22, r4
    1a96:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1a9a:	a2 eb       	ldi	r26, 0xB2	; 178
    1a9c:	b1 e0       	ldi	r27, 0x01	; 1
    1a9e:	6d 93       	st	X+, r22
    1aa0:	7d 93       	st	X+, r23
    1aa2:	8d 93       	st	X+, r24
    1aa4:	9c 93       	st	X, r25
    1aa6:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(-J/J);    //call function to extract second step
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	a6 01       	movw	r20, r12
    1aac:	8a e5       	ldi	r24, 0x5A	; 90
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1ab4:	c0 90 74 01 	lds	r12, 0x0174	; 0x800174 <J>
    1ab8:	d0 90 75 01 	lds	r13, 0x0175	; 0x800175 <J+0x1>
    1abc:	e0 90 76 01 	lds	r14, 0x0176	; 0x800176 <J+0x2>
    1ac0:	f0 90 77 01 	lds	r15, 0x0177	; 0x800177 <J+0x3>
    1ac4:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <Yspm>
    1ac8:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <Yspm+0x1>
    1acc:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Yspm+0x2>
    1ad0:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <Yspm+0x3>
    1ad4:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1ad8:	4b 01       	movw	r8, r22
    1ada:	5c 01       	movw	r10, r24
    1adc:	c7 01       	movw	r24, r14
    1ade:	b6 01       	movw	r22, r12
    1ae0:	90 58       	subi	r25, 0x80	; 128
    1ae2:	a7 01       	movw	r20, r14
    1ae4:	96 01       	movw	r18, r12
    1ae6:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    1aea:	9b 01       	movw	r18, r22
    1aec:	ac 01       	movw	r20, r24
    1aee:	c5 01       	movw	r24, r10
    1af0:	b4 01       	movw	r22, r8
    1af2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1af6:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1afa:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1afe:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1b02:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
    1b06:	b2 c0       	rjmp	.+356    	; 0x1c6c <main+0x14dc>
								}
							} 
							else
							{
								if ((I == 0) && (J == 0))
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	a9 01       	movw	r20, r18
    1b0e:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <I>
    1b12:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <I+0x1>
    1b16:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <I+0x2>
    1b1a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <I+0x3>
    1b1e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1b22:	81 11       	cpse	r24, r1
    1b24:	48 c0       	rjmp	.+144    	; 0x1bb6 <main+0x1426>
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	a9 01       	movw	r20, r18
    1b2c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <J>
    1b30:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <J+0x1>
    1b34:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <J+0x2>
    1b38:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <J+0x3>
    1b3c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1b40:	81 11       	cpse	r24, r1
    1b42:	39 c0       	rjmp	.+114    	; 0x1bb6 <main+0x1426>
								{
									STEP[0] = sub_function (&old_val_1, xc)*-Xspm;     //call function to extract first step
    1b44:	b3 01       	movw	r22, r6
    1b46:	a2 01       	movw	r20, r4
    1b48:	8e e5       	ldi	r24, 0x5E	; 94
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1b50:	9b 01       	movw	r18, r22
    1b52:	ac 01       	movw	r20, r24
    1b54:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <Xspm>
    1b58:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <Xspm+0x1>
    1b5c:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <Xspm+0x2>
    1b60:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <Xspm+0x3>
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	90 58       	subi	r25, 0x80	; 128
    1b6a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1b6e:	e2 eb       	ldi	r30, 0xB2	; 178
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
    1b72:	60 83       	st	Z, r22
    1b74:	71 83       	std	Z+1, r23	; 0x01
    1b76:	82 83       	std	Z+2, r24	; 0x02
    1b78:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*-Yspm;    //call function to extract second step
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	a6 01       	movw	r20, r12
    1b7e:	8a e5       	ldi	r24, 0x5A	; 90
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1b86:	9b 01       	movw	r18, r22
    1b88:	ac 01       	movw	r20, r24
    1b8a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Yspm>
    1b8e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <Yspm+0x1>
    1b92:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <Yspm+0x2>
    1b96:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <Yspm+0x3>
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	90 58       	subi	r25, 0x80	; 128
    1ba0:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1ba4:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1ba8:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1bac:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1bb0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
    1bb4:	5b c0       	rjmp	.+182    	; 0x1c6c <main+0x14dc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
    1bb6:	b3 01       	movw	r22, r6
    1bb8:	a2 01       	movw	r20, r4
    1bba:	8e e5       	ldi	r24, 0x5E	; 94
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1bc2:	80 90 78 01 	lds	r8, 0x0178	; 0x800178 <I>
    1bc6:	90 90 79 01 	lds	r9, 0x0179	; 0x800179 <I+0x1>
    1bca:	a0 90 7a 01 	lds	r10, 0x017A	; 0x80017a <I+0x2>
    1bce:	b0 90 7b 01 	lds	r11, 0x017B	; 0x80017b <I+0x3>
    1bd2:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <Xspm>
    1bd6:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <Xspm+0x1>
    1bda:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <Xspm+0x2>
    1bde:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <Xspm+0x3>
    1be2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1be6:	2b 01       	movw	r4, r22
    1be8:	3c 01       	movw	r6, r24
    1bea:	a5 01       	movw	r20, r10
    1bec:	94 01       	movw	r18, r8
    1bee:	c5 01       	movw	r24, r10
    1bf0:	b4 01       	movw	r22, r8
    1bf2:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	c3 01       	movw	r24, r6
    1bfc:	b2 01       	movw	r22, r4
    1bfe:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1c02:	a2 eb       	ldi	r26, 0xB2	; 178
    1c04:	b1 e0       	ldi	r27, 0x01	; 1
    1c06:	6d 93       	st	X+, r22
    1c08:	7d 93       	st	X+, r23
    1c0a:	8d 93       	st	X+, r24
    1c0c:	9c 93       	st	X, r25
    1c0e:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
    1c10:	b7 01       	movw	r22, r14
    1c12:	a6 01       	movw	r20, r12
    1c14:	8a e5       	ldi	r24, 0x5A	; 90
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sub_function>
    1c1c:	c0 90 74 01 	lds	r12, 0x0174	; 0x800174 <J>
    1c20:	d0 90 75 01 	lds	r13, 0x0175	; 0x800175 <J+0x1>
    1c24:	e0 90 76 01 	lds	r14, 0x0176	; 0x800176 <J+0x2>
    1c28:	f0 90 77 01 	lds	r15, 0x0177	; 0x800177 <J+0x3>
    1c2c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <Yspm>
    1c30:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <Yspm+0x1>
    1c34:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Yspm+0x2>
    1c38:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <Yspm+0x3>
    1c3c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1c40:	4b 01       	movw	r8, r22
    1c42:	5c 01       	movw	r10, r24
    1c44:	a7 01       	movw	r20, r14
    1c46:	96 01       	movw	r18, r12
    1c48:	c7 01       	movw	r24, r14
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	c5 01       	movw	r24, r10
    1c56:	b4 01       	movw	r22, r8
    1c58:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    1c5c:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1c60:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1c64:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1c68:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
								}
							}
							STEP[2] = 0;
    1c6c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <STEP+0x8>
    1c70:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <STEP+0x9>
    1c74:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <STEP+0xa>
    1c78:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <STEP+0xb>
							STEP[3] = Espm;
    1c7c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Espm>
    1c80:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <Espm+0x1>
    1c84:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <Espm+0x2>
    1c88:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <Espm+0x3>
    1c8c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <STEP+0xc>
    1c90:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <STEP+0xd>
    1c94:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <STEP+0xe>
    1c98:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <STEP+0xf>
							status = 1;
    1c9c:	bb a9       	ldd	r27, Y+51	; 0x33
    1c9e:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <status>
							motor_movement(STEP,F,Fe);
    1ca2:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <Fe>
    1ca6:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <Fe+0x1>
    1caa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Fe+0x2>
    1cae:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Fe+0x3>
    1cb2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    1cb6:	6b 01       	movw	r12, r22
    1cb8:	7c 01       	movw	r14, r24
    1cba:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <F>
    1cbe:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <F+0x1>
    1cc2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <F+0x2>
    1cc6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <F+0x3>
    1cca:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    1cce:	ab 01       	movw	r20, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	97 01       	movw	r18, r14
    1cd4:	86 01       	movw	r16, r12
    1cd6:	89 a9       	ldd	r24, Y+49	; 0x31
    1cd8:	9a a9       	ldd	r25, Y+50	; 0x32
    1cda:	0e 94 3b 10 	call	0x2076	; 0x2076 <motor_movement>
					R = get_value(String,'R');
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					} 
					for (int th = 0 ; th <= 360 ; th++)
    1cde:	ef ef       	ldi	r30, 0xFF	; 255
    1ce0:	2e 1a       	sub	r2, r30
    1ce2:	3e 0a       	sbc	r3, r30
    1ce4:	f9 e6       	ldi	r31, 0x69	; 105
    1ce6:	2f 16       	cp	r2, r31
    1ce8:	f1 e0       	ldi	r31, 0x01	; 1
    1cea:	3f 06       	cpc	r3, r31
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <main+0x1560>
    1cee:	07 ce       	rjmp	.-1010   	; 0x18fe <main+0x116e>
    1cf0:	68 ac       	ldd	r6, Y+56	; 0x38
    1cf2:	79 ac       	ldd	r7, Y+57	; 0x39
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <main+0x15ec>
							motor_movement(STEP,F,Fe);
						} 
					}
					break;
				case 28:
					if (!homeSet)
    1cf6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <homeSet>
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	38 c0       	rjmp	.+112    	; 0x1d6e <main+0x15de>
					{
						STEP[0] = find(String,'X');
    1cfe:	68 e5       	ldi	r22, 0x58	; 88
    1d00:	8e e2       	ldi	r24, 0x2E	; 46
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
    1d08:	68 2f       	mov	r22, r24
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 87 14 	call	0x290e	; 0x290e <__floatunsisf>
    1d14:	a2 eb       	ldi	r26, 0xB2	; 178
    1d16:	b1 e0       	ldi	r27, 0x01	; 1
    1d18:	6d 93       	st	X+, r22
    1d1a:	7d 93       	st	X+, r23
    1d1c:	8d 93       	st	X+, r24
    1d1e:	9c 93       	st	X, r25
    1d20:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = find(String,'Y');
    1d22:	69 e5       	ldi	r22, 0x59	; 89
    1d24:	8e e2       	ldi	r24, 0x2E	; 46
    1d26:	92 e0       	ldi	r25, 0x02	; 2
    1d28:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
    1d2c:	68 2f       	mov	r22, r24
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 87 14 	call	0x290e	; 0x290e <__floatunsisf>
    1d38:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <STEP+0x4>
    1d3c:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <STEP+0x5>
    1d40:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <STEP+0x6>
    1d44:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <STEP+0x7>
						STEP[2] = find(String,'Z');
    1d48:	6a e5       	ldi	r22, 0x5A	; 90
    1d4a:	8e e2       	ldi	r24, 0x2E	; 46
    1d4c:	92 e0       	ldi	r25, 0x02	; 2
    1d4e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <find>
    1d52:	68 2f       	mov	r22, r24
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 87 14 	call	0x290e	; 0x290e <__floatunsisf>
    1d5e:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <STEP+0x8>
    1d62:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <STEP+0x9>
    1d66:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <STEP+0xa>
    1d6a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <STEP+0xb>
						//make auto home
					} 
					Transmit_Data("ok");
    1d6e:	81 e1       	ldi	r24, 0x11	; 17
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
					break;
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <main+0x15ec>
    1d78:	68 ac       	ldd	r6, Y+56	; 0x38
    1d7a:	79 ac       	ldd	r7, Y+57	; 0x39
			}
			status = 0;
    1d7c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <status>
    1d80:	0c 94 2e 04 	jmp	0x85c	; 0x85c <main+0xcc>
		}
		else if (String[0] == 'N')
    1d84:	8e 34       	cpi	r24, 0x4E	; 78
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <main+0x15fc>
    1d88:	0c 94 2e 04 	jmp	0x85c	; 0x85c <main+0xcc>
		{
			status = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <status>
			NumberOfPLine ++ ;
    1d92:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <NumberOfPLine>
    1d96:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <NumberOfPLine+0x1>
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <NumberOfPLine+0x1>
    1da0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <NumberOfPLine>
			NumberOfLine = get_int(String,'N');
    1da4:	6e e4       	ldi	r22, 0x4E	; 78
    1da6:	8e e2       	ldi	r24, 0x2E	; 46
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
    1dae:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <NumberOfLine+0x1>
    1db2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <NumberOfLine>
			CheckSum = get_int(String,'*');
    1db6:	6a e2       	ldi	r22, 0x2A	; 42
    1db8:	8e e2       	ldi	r24, 0x2E	; 46
    1dba:	92 e0       	ldi	r25, 0x02	; 2
    1dbc:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
    1dc0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <CheckSum+0x1>
    1dc4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <CheckSum>
			get_SEvalue(String,' ','*');
    1dc8:	4a e2       	ldi	r20, 0x2A	; 42
    1dca:	60 e2       	ldi	r22, 0x20	; 32
    1dcc:	8e e2       	ldi	r24, 0x2E	; 46
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <get_SEvalue>
			Transmit_Data(String);
    1dd4:	8e e2       	ldi	r24, 0x2E	; 46
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
    1ddc:	0c 94 2e 04 	jmp	0x85c	; 0x85c <main+0xcc>
							Fe = FN;
						}
					}
					else
					{
						FN = get_value(String,'F');
    1de0:	66 e4       	ldi	r22, 0x46	; 70
    1de2:	8e e2       	ldi	r24, 0x2E	; 46
    1de4:	92 e0       	ldi	r25, 0x02	; 2
    1de6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1dea:	1b 01       	movw	r2, r22
    1dec:	2c 01       	movw	r4, r24
    1dee:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <FN>
    1df2:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <FN+0x1>
    1df6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <FN+0x2>
    1dfa:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <FN+0x3>
						if (FN != 0)
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	a9 01       	movw	r20, r18
    1e04:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	3b cc       	rjmp	.-1930   	; 0x1682 <main+0xef2>
    1e0c:	42 cc       	rjmp	.-1916   	; 0x1692 <main+0xf02>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					STEP[3] = get_value(String,'E');
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
					{
						FN = get_value(String,'F');
    1e0e:	66 e4       	ldi	r22, 0x46	; 70
    1e10:	8e e2       	ldi	r24, 0x2E	; 46
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1e18:	1b 01       	movw	r2, r22
    1e1a:	2c 01       	movw	r4, r24
    1e1c:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <FN>
    1e20:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <FN+0x1>
    1e24:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <FN+0x2>
    1e28:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <FN+0x3>
						if (FN != 0)
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	a9 01       	movw	r20, r18
    1e32:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1e36:	81 11       	cpse	r24, r1
    1e38:	1b cc       	rjmp	.-1994   	; 0x1670 <main+0xee0>
    1e3a:	2b cc       	rjmp	.-1962   	; 0x1692 <main+0xf02>
int NumberOfLine	= 0;		//variable to count number of line that printed
int NumberOfPLine	= 0;		//variable to count number of line that printed
int CheckSum		= 0;		//variable to count number of line that printed

int main(void)
{
    1e3c:	21 2c       	mov	r2, r1
    1e3e:	31 2c       	mov	r3, r1
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
							STEP[3] = Espm;
							status = 1;
    1e40:	55 24       	eor	r5, r5
    1e42:	53 94       	inc	r5
    1e44:	5b aa       	std	Y+51, r5	; 0x33
    1e46:	79 ae       	std	Y+57, r7	; 0x39
    1e48:	68 ae       	std	Y+56, r6	; 0x38
    1e4a:	59 cd       	rjmp	.-1358   	; 0x18fe <main+0x116e>

00001e4c <__vector_9>:
	TCNT0  = 0;
	sei();

}
ISR(TIMER0_OVF_vect)
{
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    1e7a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <tcon>
    1e7e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <tcon+0x1>
    1e82:	8d 39       	cpi	r24, 0x9D	; 157
    1e84:	91 05       	cpc	r25, r1
    1e86:	30 f4       	brcc	.+12     	; 0x1e94 <__vector_9+0x48>
	{
		tcon++;
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <tcon+0x1>
    1e8e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <tcon>
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <__vector_9+0x5a>
		} else {
		gFlags.pidTimer = 1;
    1e94:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <gFlags>
    1e98:	81 60       	ori	r24, 0x01	; 1
    1e9a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <gFlags>
		tcon            = 0;
    1e9e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <tcon+0x1>
    1ea2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <tcon>
		
	}
	if (gFlags.pidTimer == 1 ) 
    1ea6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <gFlags>
    1eaa:	80 ff       	sbrs	r24, 0
    1eac:	2b c0       	rjmp	.+86     	; 0x1f04 <__vector_9+0xb8>
	{
 		OCR1A =	pid_Controller(SE0	,getTemp(T2), &SpidData); //out the pid value to control the temperature of extruder
    1eae:	82 e5       	ldi	r24, 0x52	; 82
    1eb0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <SE0>
    1ebc:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <SE0+0x1>
    1ec0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SE0+0x2>
    1ec4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <SE0+0x3>
    1ec8:	0a ed       	ldi	r16, 0xDA	; 218
    1eca:	11 e0       	ldi	r17, 0x01	; 1
    1ecc:	0e 94 34 12 	call	0x2468	; 0x2468 <pid_Controller>
    1ed0:	9b bd       	out	0x2b, r25	; 43
    1ed2:	8a bd       	out	0x2a, r24	; 42
  		OCR1B = pid_Controller(SB	,getTemp(T0), &BpidData); //out the pid value to control the temperature of heat bed
    1ed4:	80 e5       	ldi	r24, 0x50	; 80
    1ed6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <SB>
    1ee2:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <SB+0x1>
    1ee6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <SB+0x2>
    1eea:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <SB+0x3>
    1eee:	06 ef       	ldi	r16, 0xF6	; 246
    1ef0:	11 e0       	ldi	r17, 0x01	; 1
    1ef2:	0e 94 34 12 	call	0x2468	; 0x2468 <pid_Controller>
    1ef6:	99 bd       	out	0x29, r25	; 41
    1ef8:	88 bd       	out	0x28, r24	; 40
		gFlags.pidTimer = 0;
    1efa:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <gFlags>
    1efe:	8e 7f       	andi	r24, 0xFE	; 254
    1f00:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <gFlags>
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
    1f04:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <status>
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__vector_9+0xc2>
    1f0c:	60 c0       	rjmp	.+192    	; 0x1fce <__vector_9+0x182>
    1f0e:	5f 9b       	sbis	0x0b, 7	; 11
    1f10:	59 c0       	rjmp	.+178    	; 0x1fc4 <__vector_9+0x178>
    1f12:	ee e2       	ldi	r30, 0x2E	; 46
    1f14:	f2 e0       	ldi	r31, 0x02	; 2
    1f16:	8e e7       	ldi	r24, 0x7E	; 126
    1f18:	92 e0       	ldi	r25, 0x02	; 2
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    1f1a:	11 92       	st	Z+, r1
		gFlags.pidTimer = 0;
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
	{
		for (int i = 0 ; i < 80 ;i++)
    1f1c:	8e 17       	cp	r24, r30
    1f1e:	9f 07       	cpc	r25, r31
    1f20:	e1 f7       	brne	.-8      	; 0x1f1a <__vector_9+0xce>
		{
			String [i] = 0;
		}
		Recive_Data(String);
    1f22:	8e e2       	ldi	r24, 0x2E	; 46
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	0e 94 4d 13 	call	0x269a	; 0x269a <Recive_Data>
		Transmit_Data("the printer is busy");
    1f2a:	82 e4       	ldi	r24, 0x42	; 66
    1f2c:	91 e0       	ldi	r25, 0x01	; 1
    1f2e:	0e 94 3e 13 	call	0x267c	; 0x267c <Transmit_Data>
	}
	if (String[0] == 'M' && status == 1)
    1f32:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <String>
    1f36:	8d 34       	cpi	r24, 0x4D	; 77
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <__vector_9+0xf0>
    1f3a:	49 c0       	rjmp	.+146    	; 0x1fce <__vector_9+0x182>
    1f3c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <status>
    1f40:	88 23       	and	r24, r24
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__vector_9+0xfa>
    1f44:	44 c0       	rjmp	.+136    	; 0x1fce <__vector_9+0x182>
	{
		SUBval = get_int(String,'M');
    1f46:	6d e4       	ldi	r22, 0x4D	; 77
    1f48:	8e e2       	ldi	r24, 0x2E	; 46
    1f4a:	92 e0       	ldi	r25, 0x02	; 2
    1f4c:	0e 94 95 02 	call	0x52a	; 0x52a <get_int>
    1f50:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <SUBval+0x1>
    1f54:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <SUBval>
		if (SUBval == 112)
    1f58:	80 37       	cpi	r24, 0x70	; 112
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	c1 f5       	brne	.+112    	; 0x1fce <__vector_9+0x182>
		{
			STEP[0] = 0;
    1f5e:	e2 eb       	ldi	r30, 0xB2	; 178
    1f60:	f1 e0       	ldi	r31, 0x01	; 1
    1f62:	10 82       	st	Z, r1
    1f64:	11 82       	std	Z+1, r1	; 0x01
    1f66:	12 82       	std	Z+2, r1	; 0x02
    1f68:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1f6a:	14 82       	std	Z+4, r1	; 0x04
    1f6c:	15 82       	std	Z+5, r1	; 0x05
    1f6e:	16 82       	std	Z+6, r1	; 0x06
    1f70:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    1f72:	10 86       	std	Z+8, r1	; 0x08
    1f74:	11 86       	std	Z+9, r1	; 0x09
    1f76:	12 86       	std	Z+10, r1	; 0x0a
    1f78:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1f7a:	14 86       	std	Z+12, r1	; 0x0c
    1f7c:	15 86       	std	Z+13, r1	; 0x0d
    1f7e:	16 86       	std	Z+14, r1	; 0x0e
    1f80:	17 86       	std	Z+15, r1	; 0x0f
			motor_movement(STEP,F,Fe);
    1f82:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <Fe>
    1f86:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <Fe+0x1>
    1f8a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Fe+0x2>
    1f8e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Fe+0x3>
    1f92:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
    1f9a:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <F>
    1f9e:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <F+0x1>
    1fa2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <F+0x2>
    1fa6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <F+0x3>
    1faa:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    1fae:	ab 01       	movw	r20, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	97 01       	movw	r18, r14
    1fb4:	86 01       	movw	r16, r12
    1fb6:	82 eb       	ldi	r24, 0xB2	; 178
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	0e 94 3b 10 	call	0x2076	; 0x2076 <motor_movement>
			status = 0;
    1fbe:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <status>
		}
	}
}
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <__vector_9+0x182>
			String [i] = 0;
		}
		Recive_Data(String);
		Transmit_Data("the printer is busy");
	}
	if (String[0] == 'M' && status == 1)
    1fc4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <String>
    1fc8:	8d 34       	cpi	r24, 0x4D	; 77
    1fca:	09 f4       	brne	.+2      	; 0x1fce <__vector_9+0x182>
    1fcc:	bc cf       	rjmp	.-136    	; 0x1f46 <__vector_9+0xfa>
			STEP[3] = 0;
			motor_movement(STEP,F,Fe);
			status = 0;
		}
	}
}
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	0f 90       	pop	r0
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	0f 90       	pop	r0
    1ff8:	1f 90       	pop	r1
    1ffa:	18 95       	reti

00001ffc <__vector_1>:
ISR (INT0_vect)
{
    1ffc:	1f 92       	push	r1
    1ffe:	0f 92       	push	r0
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
	pin_write (M_PORT, Z_DIR_PIN ,1 );
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	83 e3       	ldi	r24, 0x33	; 51
    2024:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
	pin_write (M_PORT, Z ,0 );
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	62 e0       	ldi	r22, 0x02	; 2
    202c:	83 e3       	ldi	r24, 0x33	; 51
    202e:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2032:	8f ea       	ldi	r24, 0xAF	; 175
    2034:	94 e0       	ldi	r25, 0x04	; 4
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <__vector_1+0x3a>
    203a:	00 c0       	rjmp	.+0      	; 0x203c <__vector_1+0x40>
    203c:	00 00       	nop
	_delay_us (300);
	pin_write (M_PORT, Z ,1 );
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	62 e0       	ldi	r22, 0x02	; 2
    2042:	83 e3       	ldi	r24, 0x33	; 51
    2044:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
    2048:	8f ea       	ldi	r24, 0xAF	; 175
    204a:	94 e0       	ldi	r25, 0x04	; 4
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <__vector_1+0x50>
    2050:	00 c0       	rjmp	.+0      	; 0x2052 <__vector_1+0x56>
    2052:	00 00       	nop
	_delay_us (300);
    2054:	ff 91       	pop	r31
    2056:	ef 91       	pop	r30
    2058:	bf 91       	pop	r27
    205a:	af 91       	pop	r26
    205c:	9f 91       	pop	r25
    205e:	8f 91       	pop	r24
    2060:	7f 91       	pop	r23
    2062:	6f 91       	pop	r22
    2064:	5f 91       	pop	r21
    2066:	4f 91       	pop	r20
    2068:	3f 91       	pop	r19
    206a:	2f 91       	pop	r18
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	0f 90       	pop	r0
    2072:	1f 90       	pop	r1
    2074:	18 95       	reti

00002076 <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],long speed,long exspeed)
{
    2076:	2f 92       	push	r2
    2078:	3f 92       	push	r3
    207a:	4f 92       	push	r4
    207c:	5f 92       	push	r5
    207e:	6f 92       	push	r6
    2080:	7f 92       	push	r7
    2082:	8f 92       	push	r8
    2084:	9f 92       	push	r9
    2086:	af 92       	push	r10
    2088:	bf 92       	push	r11
    208a:	cf 92       	push	r12
    208c:	df 92       	push	r13
    208e:	ef 92       	push	r14
    2090:	ff 92       	push	r15
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	cc 59       	subi	r28, 0x9C	; 156
    20a0:	d1 09       	sbc	r29, r1
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	6c 01       	movw	r12, r24
    20ae:	4a 01       	movw	r8, r20
    20b0:	5b 01       	movw	r10, r22
    20b2:	c7 56       	subi	r28, 0x67	; 103
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	08 83       	st	Y, r16
    20b8:	19 83       	std	Y+1, r17	; 0x01
    20ba:	2a 83       	std	Y+2, r18	; 0x02
    20bc:	3b 83       	std	Y+3, r19	; 0x03
    20be:	c9 59       	subi	r28, 0x99	; 153
    20c0:	d0 40       	sbci	r29, 0x00	; 0
	long stepDuration = (1/speed)*60*pow(10,6);
    20c2:	41 2c       	mov	r4, r1
    20c4:	51 2c       	mov	r5, r1
    20c6:	32 01       	movw	r6, r4
    20c8:	43 94       	inc	r4
    20ca:	c3 01       	movw	r24, r6
    20cc:	b2 01       	movw	r22, r4
    20ce:	a5 01       	movw	r20, r10
    20d0:	94 01       	movw	r18, r8
    20d2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__divmodsi4>
    20d6:	ac e3       	ldi	r26, 0x3C	; 60
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__muluhisi3>
    20de:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	34 e2       	ldi	r19, 0x24	; 36
    20e6:	44 e7       	ldi	r20, 0x74	; 116
    20e8:	59 e4       	ldi	r21, 0x49	; 73
    20ea:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    20ee:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    20f2:	4b 01       	movw	r8, r22
    20f4:	5c 01       	movw	r10, r24
	long exstepDuration = (1/exspeed)*60*pow(10,6);
    20f6:	c3 01       	movw	r24, r6
    20f8:	b2 01       	movw	r22, r4
    20fa:	c7 56       	subi	r28, 0x67	; 103
    20fc:	df 4f       	sbci	r29, 0xFF	; 255
    20fe:	28 81       	ld	r18, Y
    2100:	39 81       	ldd	r19, Y+1	; 0x01
    2102:	4a 81       	ldd	r20, Y+2	; 0x02
    2104:	5b 81       	ldd	r21, Y+3	; 0x03
    2106:	c9 59       	subi	r28, 0x99	; 153
    2108:	d0 40       	sbci	r29, 0x00	; 0
    210a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__divmodsi4>
    210e:	ac e3       	ldi	r26, 0x3C	; 60
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__muluhisi3>
    2116:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	34 e2       	ldi	r19, 0x24	; 36
    211e:	44 e7       	ldi	r20, 0x74	; 116
    2120:	59 e4       	ldi	r21, 0x49	; 73
    2122:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    2126:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    212a:	2b 01       	movw	r4, r22
    212c:	3c 01       	movw	r6, r24
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    212e:	88 e0       	ldi	r24, 0x08	; 8
    2130:	e1 e8       	ldi	r30, 0x81	; 129
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	de 01       	movw	r26, r28
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	01 90       	ld	r0, Z+
    213a:	0d 92       	st	X+, r0
    213c:	8a 95       	dec	r24
    213e:	e1 f7       	brne	.-8      	; 0x2138 <motor_movement+0xc2>
    2140:	76 01       	movw	r14, r12
    2142:	8e 01       	movw	r16, r28
    2144:	0f 5f       	subi	r16, 0xFF	; 255
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	1e 01       	movw	r2, r28
    214a:	29 e0       	ldi	r18, 0x09	; 9
    214c:	22 0e       	add	r2, r18
    214e:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	f7 01       	movw	r30, r14
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    2164:	88 23       	and	r24, r24
    2166:	8c f4       	brge	.+34     	; 0x218a <motor_movement+0x114>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	f8 01       	movw	r30, r16
    216c:	60 81       	ld	r22, Z
    216e:	83 e3       	ldi	r24, 0x33	; 51
    2170:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
			step [i] = step [i] * -1;
    2174:	f7 01       	movw	r30, r14
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	a2 81       	ldd	r26, Z+2	; 0x02
    217c:	b3 81       	ldd	r27, Z+3	; 0x03
    217e:	b0 58       	subi	r27, 0x80	; 128
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
    2188:	06 c0       	rjmp	.+12     	; 0x2196 <motor_movement+0x120>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	f8 01       	movw	r30, r16
    218e:	60 81       	ld	r22, Z
    2190:	83 e3       	ldi	r24, 0x33	; 51
    2192:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
    2196:	f4 e0       	ldi	r31, 0x04	; 4
    2198:	ef 0e       	add	r14, r31
    219a:	f1 1c       	adc	r15, r1
    219c:	0e 5f       	subi	r16, 0xFE	; 254
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],long speed,long exspeed)
{
	long stepDuration = (1/speed)*60*pow(10,6);
	long exstepDuration = (1/exspeed)*60*pow(10,6);
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    21a0:	20 16       	cp	r2, r16
    21a2:	31 06       	cpc	r3, r17
    21a4:	a9 f6       	brne	.-86     	; 0x2150 <motor_movement+0xda>
		int Out;     // make one step to one motor in one unit of time
		int Next[16];
	};
	typedef const struct State STyp; //define STYP from type of struct State
	/*{Current state,{next state}} */
	STyp FSM[4]=
    21a6:	88 e8       	ldi	r24, 0x88	; 136
    21a8:	e9 e8       	ldi	r30, 0x89	; 137
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	de 01       	movw	r26, r28
    21ae:	51 96       	adiw	r26, 0x11	; 17
    21b0:	01 90       	ld	r0, Z+
    21b2:	0d 92       	st	X+, r0
    21b4:	8a 95       	dec	r24
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <motor_movement+0x13a>
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
		j [0] = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a 87       	std	Y+10, r25	; 0x0a
    21be:	89 87       	std	Y+9, r24	; 0x09
		j [1] = 1;
    21c0:	9c 87       	std	Y+12, r25	; 0x0c
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
		j [2] = 1;
    21c4:	9e 87       	std	Y+14, r25	; 0x0e
    21c6:	8d 87       	std	Y+13, r24	; 0x0d
		j [3] = 1;
    21c8:	98 8b       	std	Y+16, r25	; 0x10
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
		{Y,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
    21cc:	00 e0       	ldi	r16, 0x00	; 0
    21ce:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    21d0:	0f 2e       	mov	r0, r31
    21d2:	f2 e2       	ldi	r31, 0x22	; 34
    21d4:	2f 2e       	mov	r2, r31
    21d6:	f0 2d       	mov	r31, r0
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
    21d8:	0f 2e       	mov	r0, r31
    21da:	f1 e1       	ldi	r31, 0x11	; 17
    21dc:	3f 2e       	mov	r3, r31
    21de:	f0 2d       	mov	r31, r0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    21e0:	20 9e       	mul	r2, r16
    21e2:	f0 01       	movw	r30, r0
    21e4:	21 9e       	mul	r2, r17
    21e6:	f0 0d       	add	r31, r0
    21e8:	11 24       	eor	r1, r1
    21ea:	21 e0       	ldi	r18, 0x01	; 1
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	2c 0f       	add	r18, r28
    21f0:	3d 1f       	adc	r19, r29
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	60 89       	ldd	r22, Z+16	; 0x10
    21f8:	83 e3       	ldi	r24, 0x33	; 51
    21fa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <pin_XOR>
			 step[S] = step[S] - 1;
    21fe:	78 01       	movw	r14, r16
    2200:	ee 0c       	add	r14, r14
    2202:	ff 1c       	adc	r15, r15
    2204:	ee 0c       	add	r14, r14
    2206:	ff 1c       	adc	r15, r15
    2208:	ec 0c       	add	r14, r12
    220a:	fd 1c       	adc	r15, r13
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	f7 01       	movw	r30, r14
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    2222:	f7 01       	movw	r30, r14
    2224:	60 83       	st	Z, r22
    2226:	71 83       	std	Z+1, r23	; 0x01
    2228:	82 83       	std	Z+2, r24	; 0x02
    222a:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	a9 01       	movw	r20, r18
    2232:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    2236:	18 16       	cp	r1, r24
    2238:	5c f0       	brlt	.+22     	; 0x2250 <motor_movement+0x1da>
			  j[S] = 0;
    223a:	f8 01       	movw	r30, r16
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	2c 0f       	add	r18, r28
    2246:	3d 1f       	adc	r19, r29
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	11 86       	std	Z+9, r1	; 0x09
    224e:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    2250:	03 30       	cpi	r16, 0x03	; 3
    2252:	11 05       	cpc	r17, r1
    2254:	59 f4       	brne	.+22     	; 0x226c <motor_movement+0x1f6>
			  {
				  for (int i = exstepDuration ; i>0 ; i-- )
    2256:	c2 01       	movw	r24, r4
    2258:	18 16       	cp	r1, r24
    225a:	19 06       	cpc	r1, r25
    225c:	8c f4       	brge	.+34     	; 0x2280 <motor_movement+0x20a>
    225e:	35 e0       	ldi	r19, 0x05	; 5
    2260:	3a 95       	dec	r19
    2262:	f1 f7       	brne	.-4      	; 0x2260 <motor_movement+0x1ea>
    2264:	00 00       	nop
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	d1 f7       	brne	.-12     	; 0x225e <motor_movement+0x1e8>
    226a:	0a c0       	rjmp	.+20     	; 0x2280 <motor_movement+0x20a>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>0 ; i-- )
    226c:	c4 01       	movw	r24, r8
    226e:	18 16       	cp	r1, r24
    2270:	19 06       	cpc	r1, r25
    2272:	34 f4       	brge	.+12     	; 0x2280 <motor_movement+0x20a>
    2274:	e5 e0       	ldi	r30, 0x05	; 5
    2276:	ea 95       	dec	r30
    2278:	f1 f7       	brne	.-4      	; 0x2276 <motor_movement+0x200>
    227a:	00 00       	nop
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	d1 f7       	brne	.-12     	; 0x2274 <motor_movement+0x1fe>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    2280:	8f 85       	ldd	r24, Y+15	; 0x0f
    2282:	98 89       	ldd	r25, Y+16	; 0x10
    2284:	9c 01       	movw	r18, r24
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	22 0f       	add	r18, r18
    2290:	33 1f       	adc	r19, r19
    2292:	8d 85       	ldd	r24, Y+13	; 0x0d
    2294:	9e 85       	ldd	r25, Y+14	; 0x0e
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    22a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	29 85       	ldd	r18, Y+9	; 0x09
    22b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    22b6:	30 9e       	mul	r3, r16
    22b8:	f0 01       	movw	r30, r0
    22ba:	31 9e       	mul	r3, r17
    22bc:	f0 0d       	add	r31, r0
    22be:	11 24       	eor	r1, r1
    22c0:	e8 0f       	add	r30, r24
    22c2:	f9 1f       	adc	r31, r25
    22c4:	31 96       	adiw	r30, 0x01	; 1
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	2c 0f       	add	r18, r28
    22d0:	3d 1f       	adc	r19, r29
    22d2:	e2 0f       	add	r30, r18
    22d4:	f3 1f       	adc	r31, r19
    22d6:	00 89       	ldd	r16, Z+16	; 0x10
    22d8:	11 89       	ldd	r17, Z+17	; 0x11
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    22da:	89 2b       	or	r24, r25
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <motor_movement+0x26a>
    22de:	80 cf       	rjmp	.-256    	; 0x21e0 <motor_movement+0x16a>
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    22e0:	c4 56       	subi	r28, 0x64	; 100
    22e2:	df 4f       	sbci	r29, 0xFF	; 255
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
    2306:	7f 90       	pop	r7
    2308:	6f 90       	pop	r6
    230a:	5f 90       	pop	r5
    230c:	4f 90       	pop	r4
    230e:	3f 90       	pop	r3
    2310:	2f 90       	pop	r2
    2312:	08 95       	ret

00002314 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    2314:	88 35       	cpi	r24, 0x58	; 88
    2316:	49 f0       	breq	.+18     	; 0x232a <motor_EN_DES+0x16>
    2318:	18 f4       	brcc	.+6      	; 0x2320 <motor_EN_DES+0xc>
    231a:	85 34       	cpi	r24, 0x45	; 69
    231c:	c1 f0       	breq	.+48     	; 0x234e <motor_EN_DES+0x3a>
    231e:	08 95       	ret
    2320:	89 35       	cpi	r24, 0x59	; 89
    2322:	49 f0       	breq	.+18     	; 0x2336 <motor_EN_DES+0x22>
    2324:	8a 35       	cpi	r24, 0x5A	; 90
    2326:	69 f0       	breq	.+26     	; 0x2342 <motor_EN_DES+0x2e>
    2328:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    232a:	46 2f       	mov	r20, r22
    232c:	64 e0       	ldi	r22, 0x04	; 4
    232e:	86 e3       	ldi	r24, 0x36	; 54
    2330:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
			break;
    2334:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    2336:	46 2f       	mov	r20, r22
    2338:	65 e0       	ldi	r22, 0x05	; 5
    233a:	86 e3       	ldi	r24, 0x36	; 54
    233c:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
			break;
    2340:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    2342:	46 2f       	mov	r20, r22
    2344:	66 e0       	ldi	r22, 0x06	; 6
    2346:	86 e3       	ldi	r24, 0x36	; 54
    2348:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
			break;
    234c:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    234e:	46 2f       	mov	r20, r22
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	86 e3       	ldi	r24, 0x36	; 54
    2354:	0e 94 31 03 	call	0x662	; 0x662 <pin_write>
    2358:	08 95       	ret

0000235a <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	83 e3       	ldi	r24, 0x33	; 51
    235e:	0e 94 4e 03 	call	0x69c	; 0x69c <port_direction>
	port_write(M_PORT,0);
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	83 e3       	ldi	r24, 0x33	; 51
    2366:	0e 94 59 03 	call	0x6b2	; 0x6b2 <port_write>
	pin_direction(EN_DES_PORT,EN_DES_XPIN,output);
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	64 e0       	ldi	r22, 0x04	; 4
    236e:	86 e3       	ldi	r24, 0x36	; 54
    2370:	0e 94 14 03 	call	0x628	; 0x628 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_YPIN,output);
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	65 e0       	ldi	r22, 0x05	; 5
    2378:	86 e3       	ldi	r24, 0x36	; 54
    237a:	0e 94 14 03 	call	0x628	; 0x628 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_ZPIN,output);
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	66 e0       	ldi	r22, 0x06	; 6
    2382:	86 e3       	ldi	r24, 0x36	; 54
    2384:	0e 94 14 03 	call	0x628	; 0x628 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_EPIN,output);
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	67 e0       	ldi	r22, 0x07	; 7
    238c:	86 e3       	ldi	r24, 0x36	; 54
    238e:	0e 94 14 03 	call	0x628	; 0x628 <pin_direction>
	motor_EN_DES('X',0);
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	88 e5       	ldi	r24, 0x58	; 88
    2396:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
	motor_EN_DES('Y',0);
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	89 e5       	ldi	r24, 0x59	; 89
    239e:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
	motor_EN_DES('Z',0);
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	8a e5       	ldi	r24, 0x5A	; 90
    23a6:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
	motor_EN_DES('E',0);
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	85 e4       	ldi	r24, 0x45	; 69
    23ae:	0e 94 8a 11 	call	0x2314	; 0x2314 <motor_EN_DES>
    23b2:	08 95       	ret

000023b4 <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	49 01       	movw	r8, r18
    23ce:	5a 01       	movw	r10, r20
    23d0:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    23d2:	6c 83       	std	Y+4, r22	; 0x04
    23d4:	7d 83       	std	Y+5, r23	; 0x05
    23d6:	8e 83       	std	Y+6, r24	; 0x06
    23d8:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    23da:	28 87       	std	Y+8, r18	; 0x08
    23dc:	39 87       	std	Y+9, r19	; 0x09
    23de:	4a 87       	std	Y+10, r20	; 0x0a
    23e0:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    23e2:	ec 86       	std	Y+12, r14	; 0x0c
    23e4:	fd 86       	std	Y+13, r15	; 0x0d
    23e6:	0e 87       	std	Y+14, r16	; 0x0e
    23e8:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    23f6:	9b 01       	movw	r18, r22
    23f8:	ac 01       	movw	r20, r24
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	7e ef       	ldi	r23, 0xFE	; 254
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	96 e4       	ldi	r25, 0x46	; 70
    2402:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    2406:	6c 8b       	std	Y+20, r22	; 0x14
    2408:	7d 8b       	std	Y+21, r23	; 0x15
    240a:	8e 8b       	std	Y+22, r24	; 0x16
    240c:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	c5 01       	movw	r24, r10
    2418:	b4 01       	movw	r22, r8
    241a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    241e:	9b 01       	movw	r18, r22
    2420:	ac 01       	movw	r20, r24
    2422:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    2426:	9b 01       	movw	r18, r22
    2428:	ac 01       	movw	r20, r24
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	9f e4       	ldi	r25, 0x4F	; 79
    2432:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    2436:	68 8f       	std	Y+24, r22	; 0x18
    2438:	79 8f       	std	Y+25, r23	; 0x19
    243a:	8a 8f       	std	Y+26, r24	; 0x1a
    243c:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    243e:	18 82       	st	Y, r1
    2440:	19 82       	std	Y+1, r1	; 0x01
    2442:	1a 82       	std	Y+2, r1	; 0x02
    2444:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    2446:	18 8a       	std	Y+16, r1	; 0x10
    2448:	19 8a       	std	Y+17, r1	; 0x11
    244a:	1a 8a       	std	Y+18, r1	; 0x12
    244c:	1b 8a       	std	Y+19, r1	; 0x13
}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	08 95       	ret

00002468 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    2468:	4f 92       	push	r4
    246a:	5f 92       	push	r5
    246c:	6f 92       	push	r6
    246e:	7f 92       	push	r7
    2470:	8f 92       	push	r8
    2472:	9f 92       	push	r9
    2474:	af 92       	push	r10
    2476:	bf 92       	push	r11
    2478:	cf 92       	push	r12
    247a:	df 92       	push	r13
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	2a 97       	sbiw	r28, 0x0a	; 10
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	1a 87       	std	Y+10, r17	; 0x0a
    249a:	09 87       	std	Y+9, r16	; 0x09
	double error = setPoint - processValue;
    249c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    24a0:	69 83       	std	Y+1, r22	; 0x01
    24a2:	7a 83       	std	Y+2, r23	; 0x02
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	9c 83       	std	Y+4, r25	; 0x04
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    24a8:	f8 01       	movw	r30, r16
    24aa:	c4 84       	ldd	r12, Z+12	; 0x0c
    24ac:	d5 84       	ldd	r13, Z+13	; 0x0d
    24ae:	e6 84       	ldd	r14, Z+14	; 0x0e
    24b0:	f7 84       	ldd	r15, Z+15	; 0x0f
	pid_st ->SumError = pid_st ->SumError + error ;
    24b2:	20 89       	ldd	r18, Z+16	; 0x10
    24b4:	31 89       	ldd	r19, Z+17	; 0x11
    24b6:	42 89       	ldd	r20, Z+18	; 0x12
    24b8:	53 89       	ldd	r21, Z+19	; 0x13
    24ba:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    24be:	4b 01       	movw	r8, r22
    24c0:	5c 01       	movw	r10, r24
    24c2:	f8 01       	movw	r30, r16
    24c4:	60 8b       	std	Z+16, r22	; 0x10
    24c6:	71 8b       	std	Z+17, r23	; 0x11
    24c8:	82 8b       	std	Z+18, r24	; 0x12
    24ca:	93 8b       	std	Z+19, r25	; 0x13
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    24cc:	20 81       	ld	r18, Z
    24ce:	31 81       	ldd	r19, Z+1	; 0x01
    24d0:	42 81       	ldd	r20, Z+2	; 0x02
    24d2:	53 81       	ldd	r21, Z+3	; 0x03
    24d4:	69 81       	ldd	r22, Y+1	; 0x01
    24d6:	7a 81       	ldd	r23, Y+2	; 0x02
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    24e0:	a7 01       	movw	r20, r14
    24e2:	96 01       	movw	r18, r12
    24e4:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    24e8:	6d 83       	std	Y+5, r22	; 0x05
    24ea:	7e 83       	std	Y+6, r23	; 0x06
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
	if (error > (pid_st ->MaxError))
    24f0:	f8 01       	movw	r30, r16
    24f2:	44 88       	ldd	r4, Z+20	; 0x14
    24f4:	55 88       	ldd	r5, Z+21	; 0x15
    24f6:	66 88       	ldd	r6, Z+22	; 0x16
    24f8:	77 88       	ldd	r7, Z+23	; 0x17
    24fa:	a3 01       	movw	r20, r6
    24fc:	92 01       	movw	r18, r4
    24fe:	69 81       	ldd	r22, Y+1	; 0x01
    2500:	7a 81       	ldd	r23, Y+2	; 0x02
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
    250a:	18 16       	cp	r1, r24
    250c:	b4 f0       	brlt	.+44     	; 0x253a <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    250e:	a3 01       	movw	r20, r6
    2510:	92 01       	movw	r18, r4
    2512:	50 58       	subi	r21, 0x80	; 128
    2514:	69 81       	ldd	r22, Y+1	; 0x01
    2516:	7a 81       	ldd	r23, Y+2	; 0x02
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    2520:	88 23       	and	r24, r24
    2522:	ac f0       	brlt	.+42     	; 0x254e <pid_Controller+0xe6>
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    2524:	a7 01       	movw	r20, r14
    2526:	96 01       	movw	r18, r12
    2528:	69 81       	ldd	r22, Y+1	; 0x01
    252a:	7a 81       	ldd	r23, Y+2	; 0x02
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    2534:	2b 01       	movw	r4, r22
    2536:	3c 01       	movw	r6, r24
    2538:	13 c0       	rjmp	.+38     	; 0x2560 <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	if (error > (pid_st ->MaxError))
	{
		P_value = INT16_MAX;
    253a:	0f 2e       	mov	r0, r31
    253c:	41 2c       	mov	r4, r1
    253e:	fe ef       	ldi	r31, 0xFE	; 254
    2540:	5f 2e       	mov	r5, r31
    2542:	66 24       	eor	r6, r6
    2544:	6a 94       	dec	r6
    2546:	f6 e4       	ldi	r31, 0x46	; 70
    2548:	7f 2e       	mov	r7, r31
    254a:	f0 2d       	mov	r31, r0
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    254e:	0f 2e       	mov	r0, r31
    2550:	41 2c       	mov	r4, r1
    2552:	fe ef       	ldi	r31, 0xFE	; 254
    2554:	5f 2e       	mov	r5, r31
    2556:	66 24       	eor	r6, r6
    2558:	6a 94       	dec	r6
    255a:	f6 ec       	ldi	r31, 0xC6	; 198
    255c:	7f 2e       	mov	r7, r31
    255e:	f0 2d       	mov	r31, r0
	}
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    2560:	e9 85       	ldd	r30, Y+9	; 0x09
    2562:	fa 85       	ldd	r31, Y+10	; 0x0a
    2564:	c0 8c       	ldd	r12, Z+24	; 0x18
    2566:	d1 8c       	ldd	r13, Z+25	; 0x19
    2568:	e2 8c       	ldd	r14, Z+26	; 0x1a
    256a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    256c:	a7 01       	movw	r20, r14
    256e:	96 01       	movw	r18, r12
    2570:	c5 01       	movw	r24, r10
    2572:	b4 01       	movw	r22, r8
    2574:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__gesf2>
    2578:	18 16       	cp	r1, r24
    257a:	5c f4       	brge	.+22     	; 0x2592 <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    257c:	e9 85       	ldd	r30, Y+9	; 0x09
    257e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2580:	c0 8a       	std	Z+16, r12	; 0x10
    2582:	d1 8a       	std	Z+17, r13	; 0x11
    2584:	e2 8a       	std	Z+18, r14	; 0x12
    2586:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5e e4       	ldi	r21, 0x4E	; 78
    2590:	23 c0       	rjmp	.+70     	; 0x25d8 <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    2592:	f7 fa       	bst	r15, 7
    2594:	f0 94       	com	r15
    2596:	f7 f8       	bld	r15, 7
    2598:	f0 94       	com	r15
    259a:	a7 01       	movw	r20, r14
    259c:	96 01       	movw	r18, r12
    259e:	c5 01       	movw	r24, r10
    25a0:	b4 01       	movw	r22, r8
    25a2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	6c f0       	brlt	.+26     	; 0x25c4 <pid_Controller+0x15c>
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
    25aa:	e9 85       	ldd	r30, Y+9	; 0x09
    25ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    25ae:	20 85       	ldd	r18, Z+8	; 0x08
    25b0:	31 85       	ldd	r19, Z+9	; 0x09
    25b2:	42 85       	ldd	r20, Z+10	; 0x0a
    25b4:	53 85       	ldd	r21, Z+11	; 0x0b
    25b6:	c5 01       	movw	r24, r10
    25b8:	b4 01       	movw	r22, r8
    25ba:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    25be:	9b 01       	movw	r18, r22
    25c0:	ac 01       	movw	r20, r24
    25c2:	0a c0       	rjmp	.+20     	; 0x25d8 <pid_Controller+0x170>
		pid_st ->SumError = pid_st ->MaxSumError;
		I_value = INT32_MAX/2;
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    25c4:	e9 85       	ldd	r30, Y+9	; 0x09
    25c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    25c8:	c0 8a       	std	Z+16, r12	; 0x10
    25ca:	d1 8a       	std	Z+17, r13	; 0x11
    25cc:	e2 8a       	std	Z+18, r14	; 0x12
    25ce:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5e ec       	ldi	r21, 0xCE	; 206
	}
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    25d8:	c3 01       	movw	r24, r6
    25da:	b2 01       	movw	r22, r4
    25dc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    25e0:	2d 81       	ldd	r18, Y+5	; 0x05
    25e2:	3e 81       	ldd	r19, Y+6	; 0x06
    25e4:	4f 81       	ldd	r20, Y+7	; 0x07
    25e6:	58 85       	ldd	r21, Y+8	; 0x08
    25e8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	48 ef       	ldi	r20, 0xF8	; 248
    25f2:	52 e4       	ldi	r21, 0x42	; 66
    25f4:	0e 94 df 13 	call	0x27be	; 0x27be <__divsf3>
    25f8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fixsfsi>
    25fc:	77 23       	and	r23, r23
    25fe:	14 f4       	brge	.+4      	; 0x2604 <pid_Controller+0x19c>
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	8b 01       	movw	r16, r22
    2606:	6f 3f       	cpi	r22, 0xFF	; 255
    2608:	71 05       	cpc	r23, r1
    260a:	19 f0       	breq	.+6      	; 0x2612 <pid_Controller+0x1aa>
    260c:	14 f0       	brlt	.+4      	; 0x2612 <pid_Controller+0x1aa>
    260e:	0f ef       	ldi	r16, 0xFF	; 255
    2610:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    2612:	b8 01       	movw	r22, r16
    2614:	01 2e       	mov	r0, r17
    2616:	00 0c       	add	r0, r0
    2618:	88 0b       	sbc	r24, r24
    261a:	99 0b       	sbc	r25, r25
    261c:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
    2620:	e9 85       	ldd	r30, Y+9	; 0x09
    2622:	fa 85       	ldd	r31, Y+10	; 0x0a
    2624:	60 83       	st	Z, r22
    2626:	71 83       	std	Z+1, r23	; 0x01
    2628:	82 83       	std	Z+2, r24	; 0x02
    262a:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    262c:	c8 01       	movw	r24, r16
    262e:	2a 96       	adiw	r28, 0x0a	; 10
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15
    2644:	ef 90       	pop	r14
    2646:	df 90       	pop	r13
    2648:	cf 90       	pop	r12
    264a:	bf 90       	pop	r11
    264c:	af 90       	pop	r10
    264e:	9f 90       	pop	r9
    2650:	8f 90       	pop	r8
    2652:	7f 90       	pop	r7
    2654:	6f 90       	pop	r6
    2656:	5f 90       	pop	r5
    2658:	4f 90       	pop	r4
    265a:	08 95       	ret

0000265c <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    2660:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    2662:	88 e1       	ldi	r24, 0x18	; 24
    2664:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    2666:	86 e8       	ldi	r24, 0x86	; 134
    2668:	80 bd       	out	0x20, r24	; 32
    266a:	08 95       	ret

0000266c <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    266c:	5d 9b       	sbis	0x0b, 5	; 11
    266e:	fe cf       	rjmp	.-4      	; 0x266c <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    2670:	8c b9       	out	0x0c, r24	; 12
    2672:	08 95       	ret

00002674 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    2674:	5f 9b       	sbis	0x0b, 7	; 11
    2676:	fe cf       	rjmp	.-4      	; 0x2674 <Recive_Char>
	return(UDR); 
    2678:	8c b1       	in	r24, 0x0c	; 12
}
    267a:	08 95       	ret

0000267c <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	ec 01       	movw	r28, r24
	while(*ptr_string)
    2682:	88 81       	ld	r24, Y
    2684:	88 23       	and	r24, r24
    2686:	31 f0       	breq	.+12     	; 0x2694 <Transmit_Data+0x18>
    2688:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    268a:	0e 94 36 13 	call	0x266c	; 0x266c <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    268e:	89 91       	ld	r24, Y+
    2690:	81 11       	cpse	r24, r1
    2692:	fb cf       	rjmp	.-10     	; 0x268a <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    26a2:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    26a4:	0e 94 3a 13 	call	0x2674	; 0x2674 <Recive_Char>
	 		if((ch == '\n') || (ch == '\r')) //read till enter key is pressed
    26a8:	8a 30       	cpi	r24, 0x0A	; 10
    26aa:	11 f0       	breq	.+4      	; 0x26b0 <Recive_Data+0x16>
    26ac:	8d 30       	cpi	r24, 0x0D	; 13
    26ae:	31 f4       	brne	.+12     	; 0x26bc <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    26b0:	f8 01       	movw	r30, r16
    26b2:	ec 0f       	add	r30, r28
    26b4:	f1 1d       	adc	r31, r1
    26b6:	80 e2       	ldi	r24, 0x20	; 32
    26b8:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    26ba:	06 c0       	rjmp	.+12     	; 0x26c8 <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    26bc:	f8 01       	movw	r30, r16
    26be:	ec 0f       	add	r30, r28
    26c0:	f1 1d       	adc	r31, r1
    26c2:	80 83       	st	Z, r24
    26c4:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    26c6:	ee cf       	rjmp	.-36     	; 0x26a4 <Recive_Data+0xa>
}
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	08 95       	ret

000026d0 <__subsf3>:
    26d0:	50 58       	subi	r21, 0x80	; 128

000026d2 <__addsf3>:
    26d2:	bb 27       	eor	r27, r27
    26d4:	aa 27       	eor	r26, r26
    26d6:	0e 94 80 13 	call	0x2700	; 0x2700 <__addsf3x>
    26da:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__fp_round>
    26de:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <__fp_pscA>
    26e2:	38 f0       	brcs	.+14     	; 0x26f2 <__addsf3+0x20>
    26e4:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fp_pscB>
    26e8:	20 f0       	brcs	.+8      	; 0x26f2 <__addsf3+0x20>
    26ea:	39 f4       	brne	.+14     	; 0x26fa <__addsf3+0x28>
    26ec:	9f 3f       	cpi	r25, 0xFF	; 255
    26ee:	19 f4       	brne	.+6      	; 0x26f6 <__addsf3+0x24>
    26f0:	26 f4       	brtc	.+8      	; 0x26fa <__addsf3+0x28>
    26f2:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>
    26f6:	0e f4       	brtc	.+2      	; 0x26fa <__addsf3+0x28>
    26f8:	e0 95       	com	r30
    26fa:	e7 fb       	bst	r30, 7
    26fc:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>

00002700 <__addsf3x>:
    2700:	e9 2f       	mov	r30, r25
    2702:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fp_split3>
    2706:	58 f3       	brcs	.-42     	; 0x26de <__addsf3+0xc>
    2708:	ba 17       	cp	r27, r26
    270a:	62 07       	cpc	r22, r18
    270c:	73 07       	cpc	r23, r19
    270e:	84 07       	cpc	r24, r20
    2710:	95 07       	cpc	r25, r21
    2712:	20 f0       	brcs	.+8      	; 0x271c <__addsf3x+0x1c>
    2714:	79 f4       	brne	.+30     	; 0x2734 <__addsf3x+0x34>
    2716:	a6 f5       	brtc	.+104    	; 0x2780 <__addsf3x+0x80>
    2718:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__fp_zero>
    271c:	0e f4       	brtc	.+2      	; 0x2720 <__addsf3x+0x20>
    271e:	e0 95       	com	r30
    2720:	0b 2e       	mov	r0, r27
    2722:	ba 2f       	mov	r27, r26
    2724:	a0 2d       	mov	r26, r0
    2726:	0b 01       	movw	r0, r22
    2728:	b9 01       	movw	r22, r18
    272a:	90 01       	movw	r18, r0
    272c:	0c 01       	movw	r0, r24
    272e:	ca 01       	movw	r24, r20
    2730:	a0 01       	movw	r20, r0
    2732:	11 24       	eor	r1, r1
    2734:	ff 27       	eor	r31, r31
    2736:	59 1b       	sub	r21, r25
    2738:	99 f0       	breq	.+38     	; 0x2760 <__addsf3x+0x60>
    273a:	59 3f       	cpi	r21, 0xF9	; 249
    273c:	50 f4       	brcc	.+20     	; 0x2752 <__addsf3x+0x52>
    273e:	50 3e       	cpi	r21, 0xE0	; 224
    2740:	68 f1       	brcs	.+90     	; 0x279c <__addsf3x+0x9c>
    2742:	1a 16       	cp	r1, r26
    2744:	f0 40       	sbci	r31, 0x00	; 0
    2746:	a2 2f       	mov	r26, r18
    2748:	23 2f       	mov	r18, r19
    274a:	34 2f       	mov	r19, r20
    274c:	44 27       	eor	r20, r20
    274e:	58 5f       	subi	r21, 0xF8	; 248
    2750:	f3 cf       	rjmp	.-26     	; 0x2738 <__addsf3x+0x38>
    2752:	46 95       	lsr	r20
    2754:	37 95       	ror	r19
    2756:	27 95       	ror	r18
    2758:	a7 95       	ror	r26
    275a:	f0 40       	sbci	r31, 0x00	; 0
    275c:	53 95       	inc	r21
    275e:	c9 f7       	brne	.-14     	; 0x2752 <__addsf3x+0x52>
    2760:	7e f4       	brtc	.+30     	; 0x2780 <__addsf3x+0x80>
    2762:	1f 16       	cp	r1, r31
    2764:	ba 0b       	sbc	r27, r26
    2766:	62 0b       	sbc	r22, r18
    2768:	73 0b       	sbc	r23, r19
    276a:	84 0b       	sbc	r24, r20
    276c:	ba f0       	brmi	.+46     	; 0x279c <__addsf3x+0x9c>
    276e:	91 50       	subi	r25, 0x01	; 1
    2770:	a1 f0       	breq	.+40     	; 0x279a <__addsf3x+0x9a>
    2772:	ff 0f       	add	r31, r31
    2774:	bb 1f       	adc	r27, r27
    2776:	66 1f       	adc	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	88 1f       	adc	r24, r24
    277c:	c2 f7       	brpl	.-16     	; 0x276e <__addsf3x+0x6e>
    277e:	0e c0       	rjmp	.+28     	; 0x279c <__addsf3x+0x9c>
    2780:	ba 0f       	add	r27, r26
    2782:	62 1f       	adc	r22, r18
    2784:	73 1f       	adc	r23, r19
    2786:	84 1f       	adc	r24, r20
    2788:	48 f4       	brcc	.+18     	; 0x279c <__addsf3x+0x9c>
    278a:	87 95       	ror	r24
    278c:	77 95       	ror	r23
    278e:	67 95       	ror	r22
    2790:	b7 95       	ror	r27
    2792:	f7 95       	ror	r31
    2794:	9e 3f       	cpi	r25, 0xFE	; 254
    2796:	08 f0       	brcs	.+2      	; 0x279a <__addsf3x+0x9a>
    2798:	b0 cf       	rjmp	.-160    	; 0x26fa <__addsf3+0x28>
    279a:	93 95       	inc	r25
    279c:	88 0f       	add	r24, r24
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <__addsf3x+0xa2>
    27a0:	99 27       	eor	r25, r25
    27a2:	ee 0f       	add	r30, r30
    27a4:	97 95       	ror	r25
    27a6:	87 95       	ror	r24
    27a8:	08 95       	ret

000027aa <__cmpsf2>:
    27aa:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fp_cmp>
    27ae:	08 f4       	brcc	.+2      	; 0x27b2 <__cmpsf2+0x8>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	08 95       	ret

000027b4 <cos>:
    27b4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__fp_rempio2>
    27b8:	e3 95       	inc	r30
    27ba:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_sinus>

000027be <__divsf3>:
    27be:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__divsf3x>
    27c2:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__fp_round>
    27c6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fp_pscB>
    27ca:	58 f0       	brcs	.+22     	; 0x27e2 <__divsf3+0x24>
    27cc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <__fp_pscA>
    27d0:	40 f0       	brcs	.+16     	; 0x27e2 <__divsf3+0x24>
    27d2:	29 f4       	brne	.+10     	; 0x27de <__divsf3+0x20>
    27d4:	5f 3f       	cpi	r21, 0xFF	; 255
    27d6:	29 f0       	breq	.+10     	; 0x27e2 <__divsf3+0x24>
    27d8:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>
    27dc:	51 11       	cpse	r21, r1
    27de:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__fp_szero>
    27e2:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>

000027e6 <__divsf3x>:
    27e6:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fp_split3>
    27ea:	68 f3       	brcs	.-38     	; 0x27c6 <__divsf3+0x8>

000027ec <__divsf3_pse>:
    27ec:	99 23       	and	r25, r25
    27ee:	b1 f3       	breq	.-20     	; 0x27dc <__divsf3+0x1e>
    27f0:	55 23       	and	r21, r21
    27f2:	91 f3       	breq	.-28     	; 0x27d8 <__divsf3+0x1a>
    27f4:	95 1b       	sub	r25, r21
    27f6:	55 0b       	sbc	r21, r21
    27f8:	bb 27       	eor	r27, r27
    27fa:	aa 27       	eor	r26, r26
    27fc:	62 17       	cp	r22, r18
    27fe:	73 07       	cpc	r23, r19
    2800:	84 07       	cpc	r24, r20
    2802:	38 f0       	brcs	.+14     	; 0x2812 <__divsf3_pse+0x26>
    2804:	9f 5f       	subi	r25, 0xFF	; 255
    2806:	5f 4f       	sbci	r21, 0xFF	; 255
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	44 1f       	adc	r20, r20
    280e:	aa 1f       	adc	r26, r26
    2810:	a9 f3       	breq	.-22     	; 0x27fc <__divsf3_pse+0x10>
    2812:	35 d0       	rcall	.+106    	; 0x287e <__divsf3_pse+0x92>
    2814:	0e 2e       	mov	r0, r30
    2816:	3a f0       	brmi	.+14     	; 0x2826 <__divsf3_pse+0x3a>
    2818:	e0 e8       	ldi	r30, 0x80	; 128
    281a:	32 d0       	rcall	.+100    	; 0x2880 <__divsf3_pse+0x94>
    281c:	91 50       	subi	r25, 0x01	; 1
    281e:	50 40       	sbci	r21, 0x00	; 0
    2820:	e6 95       	lsr	r30
    2822:	00 1c       	adc	r0, r0
    2824:	ca f7       	brpl	.-14     	; 0x2818 <__divsf3_pse+0x2c>
    2826:	2b d0       	rcall	.+86     	; 0x287e <__divsf3_pse+0x92>
    2828:	fe 2f       	mov	r31, r30
    282a:	29 d0       	rcall	.+82     	; 0x287e <__divsf3_pse+0x92>
    282c:	66 0f       	add	r22, r22
    282e:	77 1f       	adc	r23, r23
    2830:	88 1f       	adc	r24, r24
    2832:	bb 1f       	adc	r27, r27
    2834:	26 17       	cp	r18, r22
    2836:	37 07       	cpc	r19, r23
    2838:	48 07       	cpc	r20, r24
    283a:	ab 07       	cpc	r26, r27
    283c:	b0 e8       	ldi	r27, 0x80	; 128
    283e:	09 f0       	breq	.+2      	; 0x2842 <__divsf3_pse+0x56>
    2840:	bb 0b       	sbc	r27, r27
    2842:	80 2d       	mov	r24, r0
    2844:	bf 01       	movw	r22, r30
    2846:	ff 27       	eor	r31, r31
    2848:	93 58       	subi	r25, 0x83	; 131
    284a:	5f 4f       	sbci	r21, 0xFF	; 255
    284c:	3a f0       	brmi	.+14     	; 0x285c <__divsf3_pse+0x70>
    284e:	9e 3f       	cpi	r25, 0xFE	; 254
    2850:	51 05       	cpc	r21, r1
    2852:	78 f0       	brcs	.+30     	; 0x2872 <__divsf3_pse+0x86>
    2854:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>
    2858:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__fp_szero>
    285c:	5f 3f       	cpi	r21, 0xFF	; 255
    285e:	e4 f3       	brlt	.-8      	; 0x2858 <__divsf3_pse+0x6c>
    2860:	98 3e       	cpi	r25, 0xE8	; 232
    2862:	d4 f3       	brlt	.-12     	; 0x2858 <__divsf3_pse+0x6c>
    2864:	86 95       	lsr	r24
    2866:	77 95       	ror	r23
    2868:	67 95       	ror	r22
    286a:	b7 95       	ror	r27
    286c:	f7 95       	ror	r31
    286e:	9f 5f       	subi	r25, 0xFF	; 255
    2870:	c9 f7       	brne	.-14     	; 0x2864 <__divsf3_pse+0x78>
    2872:	88 0f       	add	r24, r24
    2874:	91 1d       	adc	r25, r1
    2876:	96 95       	lsr	r25
    2878:	87 95       	ror	r24
    287a:	97 f9       	bld	r25, 7
    287c:	08 95       	ret
    287e:	e1 e0       	ldi	r30, 0x01	; 1
    2880:	66 0f       	add	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	bb 1f       	adc	r27, r27
    2888:	62 17       	cp	r22, r18
    288a:	73 07       	cpc	r23, r19
    288c:	84 07       	cpc	r24, r20
    288e:	ba 07       	cpc	r27, r26
    2890:	20 f0       	brcs	.+8      	; 0x289a <__divsf3_pse+0xae>
    2892:	62 1b       	sub	r22, r18
    2894:	73 0b       	sbc	r23, r19
    2896:	84 0b       	sbc	r24, r20
    2898:	ba 0b       	sbc	r27, r26
    289a:	ee 1f       	adc	r30, r30
    289c:	88 f7       	brcc	.-30     	; 0x2880 <__divsf3_pse+0x94>
    289e:	e0 95       	com	r30
    28a0:	08 95       	ret

000028a2 <__fixsfsi>:
    28a2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__fixunssfsi>
    28a6:	68 94       	set
    28a8:	b1 11       	cpse	r27, r1
    28aa:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__fp_szero>
    28ae:	08 95       	ret

000028b0 <__fixunssfsi>:
    28b0:	0e 94 57 15 	call	0x2aae	; 0x2aae <__fp_splitA>
    28b4:	88 f0       	brcs	.+34     	; 0x28d8 <__fixunssfsi+0x28>
    28b6:	9f 57       	subi	r25, 0x7F	; 127
    28b8:	98 f0       	brcs	.+38     	; 0x28e0 <__fixunssfsi+0x30>
    28ba:	b9 2f       	mov	r27, r25
    28bc:	99 27       	eor	r25, r25
    28be:	b7 51       	subi	r27, 0x17	; 23
    28c0:	b0 f0       	brcs	.+44     	; 0x28ee <__fixunssfsi+0x3e>
    28c2:	e1 f0       	breq	.+56     	; 0x28fc <__fixunssfsi+0x4c>
    28c4:	66 0f       	add	r22, r22
    28c6:	77 1f       	adc	r23, r23
    28c8:	88 1f       	adc	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	1a f0       	brmi	.+6      	; 0x28d4 <__fixunssfsi+0x24>
    28ce:	ba 95       	dec	r27
    28d0:	c9 f7       	brne	.-14     	; 0x28c4 <__fixunssfsi+0x14>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <__fixunssfsi+0x4c>
    28d4:	b1 30       	cpi	r27, 0x01	; 1
    28d6:	91 f0       	breq	.+36     	; 0x28fc <__fixunssfsi+0x4c>
    28d8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fp_zero>
    28dc:	b1 e0       	ldi	r27, 0x01	; 1
    28de:	08 95       	ret
    28e0:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__fp_zero>
    28e4:	67 2f       	mov	r22, r23
    28e6:	78 2f       	mov	r23, r24
    28e8:	88 27       	eor	r24, r24
    28ea:	b8 5f       	subi	r27, 0xF8	; 248
    28ec:	39 f0       	breq	.+14     	; 0x28fc <__fixunssfsi+0x4c>
    28ee:	b9 3f       	cpi	r27, 0xF9	; 249
    28f0:	cc f3       	brlt	.-14     	; 0x28e4 <__fixunssfsi+0x34>
    28f2:	86 95       	lsr	r24
    28f4:	77 95       	ror	r23
    28f6:	67 95       	ror	r22
    28f8:	b3 95       	inc	r27
    28fa:	d9 f7       	brne	.-10     	; 0x28f2 <__fixunssfsi+0x42>
    28fc:	3e f4       	brtc	.+14     	; 0x290c <__fixunssfsi+0x5c>
    28fe:	90 95       	com	r25
    2900:	80 95       	com	r24
    2902:	70 95       	com	r23
    2904:	61 95       	neg	r22
    2906:	7f 4f       	sbci	r23, 0xFF	; 255
    2908:	8f 4f       	sbci	r24, 0xFF	; 255
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	08 95       	ret

0000290e <__floatunsisf>:
    290e:	e8 94       	clt
    2910:	09 c0       	rjmp	.+18     	; 0x2924 <__floatsisf+0x12>

00002912 <__floatsisf>:
    2912:	97 fb       	bst	r25, 7
    2914:	3e f4       	brtc	.+14     	; 0x2924 <__floatsisf+0x12>
    2916:	90 95       	com	r25
    2918:	80 95       	com	r24
    291a:	70 95       	com	r23
    291c:	61 95       	neg	r22
    291e:	7f 4f       	sbci	r23, 0xFF	; 255
    2920:	8f 4f       	sbci	r24, 0xFF	; 255
    2922:	9f 4f       	sbci	r25, 0xFF	; 255
    2924:	99 23       	and	r25, r25
    2926:	a9 f0       	breq	.+42     	; 0x2952 <__floatsisf+0x40>
    2928:	f9 2f       	mov	r31, r25
    292a:	96 e9       	ldi	r25, 0x96	; 150
    292c:	bb 27       	eor	r27, r27
    292e:	93 95       	inc	r25
    2930:	f6 95       	lsr	r31
    2932:	87 95       	ror	r24
    2934:	77 95       	ror	r23
    2936:	67 95       	ror	r22
    2938:	b7 95       	ror	r27
    293a:	f1 11       	cpse	r31, r1
    293c:	f8 cf       	rjmp	.-16     	; 0x292e <__floatsisf+0x1c>
    293e:	fa f4       	brpl	.+62     	; 0x297e <__floatsisf+0x6c>
    2940:	bb 0f       	add	r27, r27
    2942:	11 f4       	brne	.+4      	; 0x2948 <__floatsisf+0x36>
    2944:	60 ff       	sbrs	r22, 0
    2946:	1b c0       	rjmp	.+54     	; 0x297e <__floatsisf+0x6c>
    2948:	6f 5f       	subi	r22, 0xFF	; 255
    294a:	7f 4f       	sbci	r23, 0xFF	; 255
    294c:	8f 4f       	sbci	r24, 0xFF	; 255
    294e:	9f 4f       	sbci	r25, 0xFF	; 255
    2950:	16 c0       	rjmp	.+44     	; 0x297e <__floatsisf+0x6c>
    2952:	88 23       	and	r24, r24
    2954:	11 f0       	breq	.+4      	; 0x295a <__floatsisf+0x48>
    2956:	96 e9       	ldi	r25, 0x96	; 150
    2958:	11 c0       	rjmp	.+34     	; 0x297c <__floatsisf+0x6a>
    295a:	77 23       	and	r23, r23
    295c:	21 f0       	breq	.+8      	; 0x2966 <__floatsisf+0x54>
    295e:	9e e8       	ldi	r25, 0x8E	; 142
    2960:	87 2f       	mov	r24, r23
    2962:	76 2f       	mov	r23, r22
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <__floatsisf+0x5e>
    2966:	66 23       	and	r22, r22
    2968:	71 f0       	breq	.+28     	; 0x2986 <__floatsisf+0x74>
    296a:	96 e8       	ldi	r25, 0x86	; 134
    296c:	86 2f       	mov	r24, r22
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	2a f0       	brmi	.+10     	; 0x297e <__floatsisf+0x6c>
    2974:	9a 95       	dec	r25
    2976:	66 0f       	add	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	da f7       	brpl	.-10     	; 0x2974 <__floatsisf+0x62>
    297e:	88 0f       	add	r24, r24
    2980:	96 95       	lsr	r25
    2982:	87 95       	ror	r24
    2984:	97 f9       	bld	r25, 7
    2986:	08 95       	ret

00002988 <__fp_cmp>:
    2988:	99 0f       	add	r25, r25
    298a:	00 08       	sbc	r0, r0
    298c:	55 0f       	add	r21, r21
    298e:	aa 0b       	sbc	r26, r26
    2990:	e0 e8       	ldi	r30, 0x80	; 128
    2992:	fe ef       	ldi	r31, 0xFE	; 254
    2994:	16 16       	cp	r1, r22
    2996:	17 06       	cpc	r1, r23
    2998:	e8 07       	cpc	r30, r24
    299a:	f9 07       	cpc	r31, r25
    299c:	c0 f0       	brcs	.+48     	; 0x29ce <__fp_cmp+0x46>
    299e:	12 16       	cp	r1, r18
    29a0:	13 06       	cpc	r1, r19
    29a2:	e4 07       	cpc	r30, r20
    29a4:	f5 07       	cpc	r31, r21
    29a6:	98 f0       	brcs	.+38     	; 0x29ce <__fp_cmp+0x46>
    29a8:	62 1b       	sub	r22, r18
    29aa:	73 0b       	sbc	r23, r19
    29ac:	84 0b       	sbc	r24, r20
    29ae:	95 0b       	sbc	r25, r21
    29b0:	39 f4       	brne	.+14     	; 0x29c0 <__fp_cmp+0x38>
    29b2:	0a 26       	eor	r0, r26
    29b4:	61 f0       	breq	.+24     	; 0x29ce <__fp_cmp+0x46>
    29b6:	23 2b       	or	r18, r19
    29b8:	24 2b       	or	r18, r20
    29ba:	25 2b       	or	r18, r21
    29bc:	21 f4       	brne	.+8      	; 0x29c6 <__fp_cmp+0x3e>
    29be:	08 95       	ret
    29c0:	0a 26       	eor	r0, r26
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <__fp_cmp+0x3e>
    29c4:	a1 40       	sbci	r26, 0x01	; 1
    29c6:	a6 95       	lsr	r26
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	81 1d       	adc	r24, r1
    29cc:	81 1d       	adc	r24, r1
    29ce:	08 95       	ret

000029d0 <__fp_inf>:
    29d0:	97 f9       	bld	r25, 7
    29d2:	9f 67       	ori	r25, 0x7F	; 127
    29d4:	80 e8       	ldi	r24, 0x80	; 128
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	08 95       	ret

000029dc <__fp_nan>:
    29dc:	9f ef       	ldi	r25, 0xFF	; 255
    29de:	80 ec       	ldi	r24, 0xC0	; 192
    29e0:	08 95       	ret

000029e2 <__fp_pscA>:
    29e2:	00 24       	eor	r0, r0
    29e4:	0a 94       	dec	r0
    29e6:	16 16       	cp	r1, r22
    29e8:	17 06       	cpc	r1, r23
    29ea:	18 06       	cpc	r1, r24
    29ec:	09 06       	cpc	r0, r25
    29ee:	08 95       	ret

000029f0 <__fp_pscB>:
    29f0:	00 24       	eor	r0, r0
    29f2:	0a 94       	dec	r0
    29f4:	12 16       	cp	r1, r18
    29f6:	13 06       	cpc	r1, r19
    29f8:	14 06       	cpc	r1, r20
    29fa:	05 06       	cpc	r0, r21
    29fc:	08 95       	ret
    29fe:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>

00002a02 <__fp_rempio2>:
    2a02:	0e 94 57 15 	call	0x2aae	; 0x2aae <__fp_splitA>
    2a06:	d8 f3       	brcs	.-10     	; 0x29fe <__fp_pscB+0xe>
    2a08:	e8 94       	clt
    2a0a:	e0 e0       	ldi	r30, 0x00	; 0
    2a0c:	bb 27       	eor	r27, r27
    2a0e:	9f 57       	subi	r25, 0x7F	; 127
    2a10:	f0 f0       	brcs	.+60     	; 0x2a4e <__fp_rempio2+0x4c>
    2a12:	2a ed       	ldi	r18, 0xDA	; 218
    2a14:	3f e0       	ldi	r19, 0x0F	; 15
    2a16:	49 ec       	ldi	r20, 0xC9	; 201
    2a18:	06 c0       	rjmp	.+12     	; 0x2a26 <__fp_rempio2+0x24>
    2a1a:	ee 0f       	add	r30, r30
    2a1c:	bb 0f       	add	r27, r27
    2a1e:	66 1f       	adc	r22, r22
    2a20:	77 1f       	adc	r23, r23
    2a22:	88 1f       	adc	r24, r24
    2a24:	28 f0       	brcs	.+10     	; 0x2a30 <__fp_rempio2+0x2e>
    2a26:	b2 3a       	cpi	r27, 0xA2	; 162
    2a28:	62 07       	cpc	r22, r18
    2a2a:	73 07       	cpc	r23, r19
    2a2c:	84 07       	cpc	r24, r20
    2a2e:	28 f0       	brcs	.+10     	; 0x2a3a <__fp_rempio2+0x38>
    2a30:	b2 5a       	subi	r27, 0xA2	; 162
    2a32:	62 0b       	sbc	r22, r18
    2a34:	73 0b       	sbc	r23, r19
    2a36:	84 0b       	sbc	r24, r20
    2a38:	e3 95       	inc	r30
    2a3a:	9a 95       	dec	r25
    2a3c:	72 f7       	brpl	.-36     	; 0x2a1a <__fp_rempio2+0x18>
    2a3e:	80 38       	cpi	r24, 0x80	; 128
    2a40:	30 f4       	brcc	.+12     	; 0x2a4e <__fp_rempio2+0x4c>
    2a42:	9a 95       	dec	r25
    2a44:	bb 0f       	add	r27, r27
    2a46:	66 1f       	adc	r22, r22
    2a48:	77 1f       	adc	r23, r23
    2a4a:	88 1f       	adc	r24, r24
    2a4c:	d2 f7       	brpl	.-12     	; 0x2a42 <__fp_rempio2+0x40>
    2a4e:	90 48       	sbci	r25, 0x80	; 128
    2a50:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_mpack_finite>

00002a54 <__fp_round>:
    2a54:	09 2e       	mov	r0, r25
    2a56:	03 94       	inc	r0
    2a58:	00 0c       	add	r0, r0
    2a5a:	11 f4       	brne	.+4      	; 0x2a60 <__fp_round+0xc>
    2a5c:	88 23       	and	r24, r24
    2a5e:	52 f0       	brmi	.+20     	; 0x2a74 <__fp_round+0x20>
    2a60:	bb 0f       	add	r27, r27
    2a62:	40 f4       	brcc	.+16     	; 0x2a74 <__fp_round+0x20>
    2a64:	bf 2b       	or	r27, r31
    2a66:	11 f4       	brne	.+4      	; 0x2a6c <__fp_round+0x18>
    2a68:	60 ff       	sbrs	r22, 0
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <__fp_round+0x20>
    2a6c:	6f 5f       	subi	r22, 0xFF	; 255
    2a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a70:	8f 4f       	sbci	r24, 0xFF	; 255
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	08 95       	ret

00002a76 <__fp_sinus>:
    2a76:	ef 93       	push	r30
    2a78:	e0 ff       	sbrs	r30, 0
    2a7a:	07 c0       	rjmp	.+14     	; 0x2a8a <__fp_sinus+0x14>
    2a7c:	a2 ea       	ldi	r26, 0xA2	; 162
    2a7e:	2a ed       	ldi	r18, 0xDA	; 218
    2a80:	3f e0       	ldi	r19, 0x0F	; 15
    2a82:	49 ec       	ldi	r20, 0xC9	; 201
    2a84:	5f eb       	ldi	r21, 0xBF	; 191
    2a86:	0e 94 80 13 	call	0x2700	; 0x2700 <__addsf3x>
    2a8a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__fp_round>
    2a8e:	0f 90       	pop	r0
    2a90:	03 94       	inc	r0
    2a92:	01 fc       	sbrc	r0, 1
    2a94:	90 58       	subi	r25, 0x80	; 128
    2a96:	e4 e5       	ldi	r30, 0x54	; 84
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_powsodd>

00002a9e <__fp_split3>:
    2a9e:	57 fd       	sbrc	r21, 7
    2aa0:	90 58       	subi	r25, 0x80	; 128
    2aa2:	44 0f       	add	r20, r20
    2aa4:	55 1f       	adc	r21, r21
    2aa6:	59 f0       	breq	.+22     	; 0x2abe <__fp_splitA+0x10>
    2aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    2aaa:	71 f0       	breq	.+28     	; 0x2ac8 <__fp_splitA+0x1a>
    2aac:	47 95       	ror	r20

00002aae <__fp_splitA>:
    2aae:	88 0f       	add	r24, r24
    2ab0:	97 fb       	bst	r25, 7
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	61 f0       	breq	.+24     	; 0x2ace <__fp_splitA+0x20>
    2ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ab8:	79 f0       	breq	.+30     	; 0x2ad8 <__fp_splitA+0x2a>
    2aba:	87 95       	ror	r24
    2abc:	08 95       	ret
    2abe:	12 16       	cp	r1, r18
    2ac0:	13 06       	cpc	r1, r19
    2ac2:	14 06       	cpc	r1, r20
    2ac4:	55 1f       	adc	r21, r21
    2ac6:	f2 cf       	rjmp	.-28     	; 0x2aac <__fp_split3+0xe>
    2ac8:	46 95       	lsr	r20
    2aca:	f1 df       	rcall	.-30     	; 0x2aae <__fp_splitA>
    2acc:	08 c0       	rjmp	.+16     	; 0x2ade <__fp_splitA+0x30>
    2ace:	16 16       	cp	r1, r22
    2ad0:	17 06       	cpc	r1, r23
    2ad2:	18 06       	cpc	r1, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	f1 cf       	rjmp	.-30     	; 0x2aba <__fp_splitA+0xc>
    2ad8:	86 95       	lsr	r24
    2ada:	71 05       	cpc	r23, r1
    2adc:	61 05       	cpc	r22, r1
    2ade:	08 94       	sec
    2ae0:	08 95       	ret

00002ae2 <__fp_zero>:
    2ae2:	e8 94       	clt

00002ae4 <__fp_szero>:
    2ae4:	bb 27       	eor	r27, r27
    2ae6:	66 27       	eor	r22, r22
    2ae8:	77 27       	eor	r23, r23
    2aea:	cb 01       	movw	r24, r22
    2aec:	97 f9       	bld	r25, 7
    2aee:	08 95       	ret

00002af0 <__gesf2>:
    2af0:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fp_cmp>
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <__gesf2+0x8>
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
    2af8:	08 95       	ret
    2afa:	16 f0       	brts	.+4      	; 0x2b00 <__gesf2+0x10>
    2afc:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__fp_mpack>
    2b00:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>
    2b04:	68 94       	set
    2b06:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>

00002b0a <log>:
    2b0a:	0e 94 57 15 	call	0x2aae	; 0x2aae <__fp_splitA>
    2b0e:	a8 f3       	brcs	.-22     	; 0x2afa <__gesf2+0xa>
    2b10:	99 23       	and	r25, r25
    2b12:	c1 f3       	breq	.-16     	; 0x2b04 <__gesf2+0x14>
    2b14:	ae f3       	brts	.-22     	; 0x2b00 <__gesf2+0x10>
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	1f 93       	push	r17
    2b1c:	0f 93       	push	r16
    2b1e:	ff 92       	push	r15
    2b20:	c9 2f       	mov	r28, r25
    2b22:	dd 27       	eor	r29, r29
    2b24:	88 23       	and	r24, r24
    2b26:	2a f0       	brmi	.+10     	; 0x2b32 <log+0x28>
    2b28:	21 97       	sbiw	r28, 0x01	; 1
    2b2a:	66 0f       	add	r22, r22
    2b2c:	77 1f       	adc	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	da f7       	brpl	.-10     	; 0x2b28 <log+0x1e>
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f eb       	ldi	r21, 0xBF	; 191
    2b3a:	9f e3       	ldi	r25, 0x3F	; 63
    2b3c:	88 39       	cpi	r24, 0x98	; 152
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <log+0x3e>
    2b40:	80 3e       	cpi	r24, 0xE0	; 224
    2b42:	38 f0       	brcs	.+14     	; 0x2b52 <log+0x48>
    2b44:	21 96       	adiw	r28, 0x01	; 1
    2b46:	8f 77       	andi	r24, 0x7F	; 127
    2b48:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    2b4c:	e2 e7       	ldi	r30, 0x72	; 114
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <log+0x50>
    2b52:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    2b56:	ef e9       	ldi	r30, 0x9F	; 159
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__fp_powser>
    2b5e:	8b 01       	movw	r16, r22
    2b60:	be 01       	movw	r22, r28
    2b62:	ec 01       	movw	r28, r24
    2b64:	fb 2e       	mov	r15, r27
    2b66:	6f 57       	subi	r22, 0x7F	; 127
    2b68:	71 09       	sbc	r23, r1
    2b6a:	75 95       	asr	r23
    2b6c:	77 1f       	adc	r23, r23
    2b6e:	88 0b       	sbc	r24, r24
    2b70:	99 0b       	sbc	r25, r25
    2b72:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatsisf>
    2b76:	28 e1       	ldi	r18, 0x18	; 24
    2b78:	32 e7       	ldi	r19, 0x72	; 114
    2b7a:	41 e3       	ldi	r20, 0x31	; 49
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__mulsf3x>
    2b82:	af 2d       	mov	r26, r15
    2b84:	98 01       	movw	r18, r16
    2b86:	ae 01       	movw	r20, r28
    2b88:	ff 90       	pop	r15
    2b8a:	0f 91       	pop	r16
    2b8c:	1f 91       	pop	r17
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	0e 94 80 13 	call	0x2700	; 0x2700 <__addsf3x>
    2b96:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__fp_round>

00002b9a <__mulsf3>:
    2b9a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__mulsf3x>
    2b9e:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__fp_round>
    2ba2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <__fp_pscA>
    2ba6:	38 f0       	brcs	.+14     	; 0x2bb6 <__mulsf3+0x1c>
    2ba8:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fp_pscB>
    2bac:	20 f0       	brcs	.+8      	; 0x2bb6 <__mulsf3+0x1c>
    2bae:	95 23       	and	r25, r21
    2bb0:	11 f0       	breq	.+4      	; 0x2bb6 <__mulsf3+0x1c>
    2bb2:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>
    2bb6:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>
    2bba:	11 24       	eor	r1, r1
    2bbc:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__fp_szero>

00002bc0 <__mulsf3x>:
    2bc0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fp_split3>
    2bc4:	70 f3       	brcs	.-36     	; 0x2ba2 <__mulsf3+0x8>

00002bc6 <__mulsf3_pse>:
    2bc6:	95 9f       	mul	r25, r21
    2bc8:	c1 f3       	breq	.-16     	; 0x2bba <__mulsf3+0x20>
    2bca:	95 0f       	add	r25, r21
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	55 1f       	adc	r21, r21
    2bd0:	62 9f       	mul	r22, r18
    2bd2:	f0 01       	movw	r30, r0
    2bd4:	72 9f       	mul	r23, r18
    2bd6:	bb 27       	eor	r27, r27
    2bd8:	f0 0d       	add	r31, r0
    2bda:	b1 1d       	adc	r27, r1
    2bdc:	63 9f       	mul	r22, r19
    2bde:	aa 27       	eor	r26, r26
    2be0:	f0 0d       	add	r31, r0
    2be2:	b1 1d       	adc	r27, r1
    2be4:	aa 1f       	adc	r26, r26
    2be6:	64 9f       	mul	r22, r20
    2be8:	66 27       	eor	r22, r22
    2bea:	b0 0d       	add	r27, r0
    2bec:	a1 1d       	adc	r26, r1
    2bee:	66 1f       	adc	r22, r22
    2bf0:	82 9f       	mul	r24, r18
    2bf2:	22 27       	eor	r18, r18
    2bf4:	b0 0d       	add	r27, r0
    2bf6:	a1 1d       	adc	r26, r1
    2bf8:	62 1f       	adc	r22, r18
    2bfa:	73 9f       	mul	r23, r19
    2bfc:	b0 0d       	add	r27, r0
    2bfe:	a1 1d       	adc	r26, r1
    2c00:	62 1f       	adc	r22, r18
    2c02:	83 9f       	mul	r24, r19
    2c04:	a0 0d       	add	r26, r0
    2c06:	61 1d       	adc	r22, r1
    2c08:	22 1f       	adc	r18, r18
    2c0a:	74 9f       	mul	r23, r20
    2c0c:	33 27       	eor	r19, r19
    2c0e:	a0 0d       	add	r26, r0
    2c10:	61 1d       	adc	r22, r1
    2c12:	23 1f       	adc	r18, r19
    2c14:	84 9f       	mul	r24, r20
    2c16:	60 0d       	add	r22, r0
    2c18:	21 1d       	adc	r18, r1
    2c1a:	82 2f       	mov	r24, r18
    2c1c:	76 2f       	mov	r23, r22
    2c1e:	6a 2f       	mov	r22, r26
    2c20:	11 24       	eor	r1, r1
    2c22:	9f 57       	subi	r25, 0x7F	; 127
    2c24:	50 40       	sbci	r21, 0x00	; 0
    2c26:	9a f0       	brmi	.+38     	; 0x2c4e <__mulsf3_pse+0x88>
    2c28:	f1 f0       	breq	.+60     	; 0x2c66 <__mulsf3_pse+0xa0>
    2c2a:	88 23       	and	r24, r24
    2c2c:	4a f0       	brmi	.+18     	; 0x2c40 <__mulsf3_pse+0x7a>
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	bb 1f       	adc	r27, r27
    2c34:	66 1f       	adc	r22, r22
    2c36:	77 1f       	adc	r23, r23
    2c38:	88 1f       	adc	r24, r24
    2c3a:	91 50       	subi	r25, 0x01	; 1
    2c3c:	50 40       	sbci	r21, 0x00	; 0
    2c3e:	a9 f7       	brne	.-22     	; 0x2c2a <__mulsf3_pse+0x64>
    2c40:	9e 3f       	cpi	r25, 0xFE	; 254
    2c42:	51 05       	cpc	r21, r1
    2c44:	80 f0       	brcs	.+32     	; 0x2c66 <__mulsf3_pse+0xa0>
    2c46:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_inf>
    2c4a:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__fp_szero>
    2c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c50:	e4 f3       	brlt	.-8      	; 0x2c4a <__mulsf3_pse+0x84>
    2c52:	98 3e       	cpi	r25, 0xE8	; 232
    2c54:	d4 f3       	brlt	.-12     	; 0x2c4a <__mulsf3_pse+0x84>
    2c56:	86 95       	lsr	r24
    2c58:	77 95       	ror	r23
    2c5a:	67 95       	ror	r22
    2c5c:	b7 95       	ror	r27
    2c5e:	f7 95       	ror	r31
    2c60:	e7 95       	ror	r30
    2c62:	9f 5f       	subi	r25, 0xFF	; 255
    2c64:	c1 f7       	brne	.-16     	; 0x2c56 <__mulsf3_pse+0x90>
    2c66:	fe 2b       	or	r31, r30
    2c68:	88 0f       	add	r24, r24
    2c6a:	91 1d       	adc	r25, r1
    2c6c:	96 95       	lsr	r25
    2c6e:	87 95       	ror	r24
    2c70:	97 f9       	bld	r25, 7
    2c72:	08 95       	ret

00002c74 <sin>:
    2c74:	9f 93       	push	r25
    2c76:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__fp_rempio2>
    2c7a:	0f 90       	pop	r0
    2c7c:	07 fc       	sbrc	r0, 7
    2c7e:	ee 5f       	subi	r30, 0xFE	; 254
    2c80:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_sinus>
    2c84:	19 f4       	brne	.+6      	; 0x2c8c <sin+0x18>
    2c86:	16 f4       	brtc	.+4      	; 0x2c8c <sin+0x18>
    2c88:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_nan>
    2c8c:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__fp_mpack>

00002c90 <sqrt>:
    2c90:	0e 94 57 15 	call	0x2aae	; 0x2aae <__fp_splitA>
    2c94:	b8 f3       	brcs	.-18     	; 0x2c84 <sin+0x10>
    2c96:	99 23       	and	r25, r25
    2c98:	c9 f3       	breq	.-14     	; 0x2c8c <sin+0x18>
    2c9a:	b6 f3       	brts	.-20     	; 0x2c88 <sin+0x14>
    2c9c:	9f 57       	subi	r25, 0x7F	; 127
    2c9e:	55 0b       	sbc	r21, r21
    2ca0:	87 ff       	sbrs	r24, 7
    2ca2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_norm2>
    2ca6:	00 24       	eor	r0, r0
    2ca8:	a0 e6       	ldi	r26, 0x60	; 96
    2caa:	40 ea       	ldi	r20, 0xA0	; 160
    2cac:	90 01       	movw	r18, r0
    2cae:	80 58       	subi	r24, 0x80	; 128
    2cb0:	56 95       	lsr	r21
    2cb2:	97 95       	ror	r25
    2cb4:	28 f4       	brcc	.+10     	; 0x2cc0 <sqrt+0x30>
    2cb6:	80 5c       	subi	r24, 0xC0	; 192
    2cb8:	66 0f       	add	r22, r22
    2cba:	77 1f       	adc	r23, r23
    2cbc:	88 1f       	adc	r24, r24
    2cbe:	20 f0       	brcs	.+8      	; 0x2cc8 <sqrt+0x38>
    2cc0:	26 17       	cp	r18, r22
    2cc2:	37 07       	cpc	r19, r23
    2cc4:	48 07       	cpc	r20, r24
    2cc6:	30 f4       	brcc	.+12     	; 0x2cd4 <sqrt+0x44>
    2cc8:	62 1b       	sub	r22, r18
    2cca:	73 0b       	sbc	r23, r19
    2ccc:	84 0b       	sbc	r24, r20
    2cce:	20 29       	or	r18, r0
    2cd0:	31 29       	or	r19, r1
    2cd2:	4a 2b       	or	r20, r26
    2cd4:	a6 95       	lsr	r26
    2cd6:	17 94       	ror	r1
    2cd8:	07 94       	ror	r0
    2cda:	20 25       	eor	r18, r0
    2cdc:	31 25       	eor	r19, r1
    2cde:	4a 27       	eor	r20, r26
    2ce0:	58 f7       	brcc	.-42     	; 0x2cb8 <sqrt+0x28>
    2ce2:	66 0f       	add	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	20 f0       	brcs	.+8      	; 0x2cf2 <sqrt+0x62>
    2cea:	26 17       	cp	r18, r22
    2cec:	37 07       	cpc	r19, r23
    2cee:	48 07       	cpc	r20, r24
    2cf0:	30 f4       	brcc	.+12     	; 0x2cfe <sqrt+0x6e>
    2cf2:	62 0b       	sbc	r22, r18
    2cf4:	73 0b       	sbc	r23, r19
    2cf6:	84 0b       	sbc	r24, r20
    2cf8:	20 0d       	add	r18, r0
    2cfa:	31 1d       	adc	r19, r1
    2cfc:	41 1d       	adc	r20, r1
    2cfe:	a0 95       	com	r26
    2d00:	81 f7       	brne	.-32     	; 0x2ce2 <sqrt+0x52>
    2d02:	b9 01       	movw	r22, r18
    2d04:	84 2f       	mov	r24, r20
    2d06:	91 58       	subi	r25, 0x81	; 129
    2d08:	88 0f       	add	r24, r24
    2d0a:	96 95       	lsr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	08 95       	ret

00002d10 <__fp_mpack>:
    2d10:	9f 3f       	cpi	r25, 0xFF	; 255
    2d12:	31 f0       	breq	.+12     	; 0x2d20 <__fp_mpack_finite+0xc>

00002d14 <__fp_mpack_finite>:
    2d14:	91 50       	subi	r25, 0x01	; 1
    2d16:	20 f4       	brcc	.+8      	; 0x2d20 <__fp_mpack_finite+0xc>
    2d18:	87 95       	ror	r24
    2d1a:	77 95       	ror	r23
    2d1c:	67 95       	ror	r22
    2d1e:	b7 95       	ror	r27
    2d20:	88 0f       	add	r24, r24
    2d22:	91 1d       	adc	r25, r1
    2d24:	96 95       	lsr	r25
    2d26:	87 95       	ror	r24
    2d28:	97 f9       	bld	r25, 7
    2d2a:	08 95       	ret

00002d2c <__fp_norm2>:
    2d2c:	91 50       	subi	r25, 0x01	; 1
    2d2e:	50 40       	sbci	r21, 0x00	; 0
    2d30:	66 0f       	add	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	88 1f       	adc	r24, r24
    2d36:	d2 f7       	brpl	.-12     	; 0x2d2c <__fp_norm2>
    2d38:	08 95       	ret

00002d3a <__fp_powser>:
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	1f 93       	push	r17
    2d40:	0f 93       	push	r16
    2d42:	ff 92       	push	r15
    2d44:	ef 92       	push	r14
    2d46:	df 92       	push	r13
    2d48:	7b 01       	movw	r14, r22
    2d4a:	8c 01       	movw	r16, r24
    2d4c:	68 94       	set
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <__fp_powser+0x22>
    2d50:	da 2e       	mov	r13, r26
    2d52:	ef 01       	movw	r28, r30
    2d54:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__mulsf3x>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e8 94       	clt
    2d5c:	a5 91       	lpm	r26, Z+
    2d5e:	25 91       	lpm	r18, Z+
    2d60:	35 91       	lpm	r19, Z+
    2d62:	45 91       	lpm	r20, Z+
    2d64:	55 91       	lpm	r21, Z+
    2d66:	a6 f3       	brts	.-24     	; 0x2d50 <__fp_powser+0x16>
    2d68:	ef 01       	movw	r28, r30
    2d6a:	0e 94 80 13 	call	0x2700	; 0x2700 <__addsf3x>
    2d6e:	fe 01       	movw	r30, r28
    2d70:	97 01       	movw	r18, r14
    2d72:	a8 01       	movw	r20, r16
    2d74:	da 94       	dec	r13
    2d76:	69 f7       	brne	.-38     	; 0x2d52 <__fp_powser+0x18>
    2d78:	df 90       	pop	r13
    2d7a:	ef 90       	pop	r14
    2d7c:	ff 90       	pop	r15
    2d7e:	0f 91       	pop	r16
    2d80:	1f 91       	pop	r17
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <__fp_powsodd>:
    2d88:	9f 93       	push	r25
    2d8a:	8f 93       	push	r24
    2d8c:	7f 93       	push	r23
    2d8e:	6f 93       	push	r22
    2d90:	ff 93       	push	r31
    2d92:	ef 93       	push	r30
    2d94:	9b 01       	movw	r18, r22
    2d96:	ac 01       	movw	r20, r24
    2d98:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    2d9c:	ef 91       	pop	r30
    2d9e:	ff 91       	pop	r31
    2da0:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__fp_powser>
    2da4:	2f 91       	pop	r18
    2da6:	3f 91       	pop	r19
    2da8:	4f 91       	pop	r20
    2daa:	5f 91       	pop	r21
    2dac:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__mulsf3>

00002db0 <__divmodsi4>:
    2db0:	05 2e       	mov	r0, r21
    2db2:	97 fb       	bst	r25, 7
    2db4:	1e f4       	brtc	.+6      	; 0x2dbc <__divmodsi4+0xc>
    2db6:	00 94       	com	r0
    2db8:	0e 94 ef 16 	call	0x2dde	; 0x2dde <__negsi2>
    2dbc:	57 fd       	sbrc	r21, 7
    2dbe:	07 d0       	rcall	.+14     	; 0x2dce <__divmodsi4_neg2>
    2dc0:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__udivmodsi4>
    2dc4:	07 fc       	sbrc	r0, 7
    2dc6:	03 d0       	rcall	.+6      	; 0x2dce <__divmodsi4_neg2>
    2dc8:	4e f4       	brtc	.+18     	; 0x2ddc <__divmodsi4_exit>
    2dca:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__negsi2>

00002dce <__divmodsi4_neg2>:
    2dce:	50 95       	com	r21
    2dd0:	40 95       	com	r20
    2dd2:	30 95       	com	r19
    2dd4:	21 95       	neg	r18
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255

00002ddc <__divmodsi4_exit>:
    2ddc:	08 95       	ret

00002dde <__negsi2>:
    2dde:	90 95       	com	r25
    2de0:	80 95       	com	r24
    2de2:	70 95       	com	r23
    2de4:	61 95       	neg	r22
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	08 95       	ret

00002dee <__muluhisi3>:
    2dee:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__umulhisi3>
    2df2:	a5 9f       	mul	r26, r21
    2df4:	90 0d       	add	r25, r0
    2df6:	b4 9f       	mul	r27, r20
    2df8:	90 0d       	add	r25, r0
    2dfa:	a4 9f       	mul	r26, r20
    2dfc:	80 0d       	add	r24, r0
    2dfe:	91 1d       	adc	r25, r1
    2e00:	11 24       	eor	r1, r1
    2e02:	08 95       	ret

00002e04 <__udivmodsi4>:
    2e04:	a1 e2       	ldi	r26, 0x21	; 33
    2e06:	1a 2e       	mov	r1, r26
    2e08:	aa 1b       	sub	r26, r26
    2e0a:	bb 1b       	sub	r27, r27
    2e0c:	fd 01       	movw	r30, r26
    2e0e:	0d c0       	rjmp	.+26     	; 0x2e2a <__udivmodsi4_ep>

00002e10 <__udivmodsi4_loop>:
    2e10:	aa 1f       	adc	r26, r26
    2e12:	bb 1f       	adc	r27, r27
    2e14:	ee 1f       	adc	r30, r30
    2e16:	ff 1f       	adc	r31, r31
    2e18:	a2 17       	cp	r26, r18
    2e1a:	b3 07       	cpc	r27, r19
    2e1c:	e4 07       	cpc	r30, r20
    2e1e:	f5 07       	cpc	r31, r21
    2e20:	20 f0       	brcs	.+8      	; 0x2e2a <__udivmodsi4_ep>
    2e22:	a2 1b       	sub	r26, r18
    2e24:	b3 0b       	sbc	r27, r19
    2e26:	e4 0b       	sbc	r30, r20
    2e28:	f5 0b       	sbc	r31, r21

00002e2a <__udivmodsi4_ep>:
    2e2a:	66 1f       	adc	r22, r22
    2e2c:	77 1f       	adc	r23, r23
    2e2e:	88 1f       	adc	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	1a 94       	dec	r1
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <__udivmodsi4_loop>
    2e36:	60 95       	com	r22
    2e38:	70 95       	com	r23
    2e3a:	80 95       	com	r24
    2e3c:	90 95       	com	r25
    2e3e:	9b 01       	movw	r18, r22
    2e40:	ac 01       	movw	r20, r24
    2e42:	bd 01       	movw	r22, r26
    2e44:	cf 01       	movw	r24, r30
    2e46:	08 95       	ret

00002e48 <__umulhisi3>:
    2e48:	a2 9f       	mul	r26, r18
    2e4a:	b0 01       	movw	r22, r0
    2e4c:	b3 9f       	mul	r27, r19
    2e4e:	c0 01       	movw	r24, r0
    2e50:	a3 9f       	mul	r26, r19
    2e52:	70 0d       	add	r23, r0
    2e54:	81 1d       	adc	r24, r1
    2e56:	11 24       	eor	r1, r1
    2e58:	91 1d       	adc	r25, r1
    2e5a:	b2 9f       	mul	r27, r18
    2e5c:	70 0d       	add	r23, r0
    2e5e:	81 1d       	adc	r24, r1
    2e60:	11 24       	eor	r1, r1
    2e62:	91 1d       	adc	r25, r1
    2e64:	08 95       	ret

00002e66 <dtostrf>:
    2e66:	ef 92       	push	r14
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	e8 01       	movw	r28, r16
    2e72:	47 fd       	sbrc	r20, 7
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <dtostrf+0x14>
    2e76:	34 e0       	ldi	r19, 0x04	; 4
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <dtostrf+0x16>
    2e7a:	34 e1       	ldi	r19, 0x14	; 20
    2e7c:	04 2e       	mov	r0, r20
    2e7e:	00 0c       	add	r0, r0
    2e80:	55 0b       	sbc	r21, r21
    2e82:	57 ff       	sbrs	r21, 7
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <dtostrf+0x26>
    2e86:	51 95       	neg	r21
    2e88:	41 95       	neg	r20
    2e8a:	51 09       	sbc	r21, r1
    2e8c:	e3 2e       	mov	r14, r19
    2e8e:	02 2f       	mov	r16, r18
    2e90:	24 2f       	mov	r18, r20
    2e92:	ae 01       	movw	r20, r28
    2e94:	0e 94 80 19 	call	0x3300	; 0x3300 <dtoa_prf>
    2e98:	ce 01       	movw	r24, r28
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ef 90       	pop	r14
    2ea4:	08 95       	ret

00002ea6 <atof>:
    2ea6:	66 27       	eor	r22, r22
    2ea8:	77 27       	eor	r23, r23
    2eaa:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <strtod>

00002eae <atoi>:
    2eae:	fc 01       	movw	r30, r24
    2eb0:	88 27       	eor	r24, r24
    2eb2:	99 27       	eor	r25, r25
    2eb4:	e8 94       	clt
    2eb6:	21 91       	ld	r18, Z+
    2eb8:	20 32       	cpi	r18, 0x20	; 32
    2eba:	e9 f3       	breq	.-6      	; 0x2eb6 <atoi+0x8>
    2ebc:	29 30       	cpi	r18, 0x09	; 9
    2ebe:	10 f0       	brcs	.+4      	; 0x2ec4 <atoi+0x16>
    2ec0:	2e 30       	cpi	r18, 0x0E	; 14
    2ec2:	c8 f3       	brcs	.-14     	; 0x2eb6 <atoi+0x8>
    2ec4:	2b 32       	cpi	r18, 0x2B	; 43
    2ec6:	41 f0       	breq	.+16     	; 0x2ed8 <atoi+0x2a>
    2ec8:	2d 32       	cpi	r18, 0x2D	; 45
    2eca:	39 f4       	brne	.+14     	; 0x2eda <atoi+0x2c>
    2ecc:	68 94       	set
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <atoi+0x2a>
    2ed0:	0e 94 75 17 	call	0x2eea	; 0x2eea <__mulhi_const_10>
    2ed4:	82 0f       	add	r24, r18
    2ed6:	91 1d       	adc	r25, r1
    2ed8:	21 91       	ld	r18, Z+
    2eda:	20 53       	subi	r18, 0x30	; 48
    2edc:	2a 30       	cpi	r18, 0x0A	; 10
    2ede:	c0 f3       	brcs	.-16     	; 0x2ed0 <atoi+0x22>
    2ee0:	1e f4       	brtc	.+6      	; 0x2ee8 <atoi+0x3a>
    2ee2:	90 95       	com	r25
    2ee4:	81 95       	neg	r24
    2ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee8:	08 95       	ret

00002eea <__mulhi_const_10>:
    2eea:	7a e0       	ldi	r23, 0x0A	; 10
    2eec:	97 9f       	mul	r25, r23
    2eee:	90 2d       	mov	r25, r0
    2ef0:	87 9f       	mul	r24, r23
    2ef2:	80 2d       	mov	r24, r0
    2ef4:	91 0d       	add	r25, r1
    2ef6:	11 24       	eor	r1, r1
    2ef8:	08 95       	ret

00002efa <sprintf>:
    2efa:	ae e0       	ldi	r26, 0x0E	; 14
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e3 e8       	ldi	r30, 0x83	; 131
    2f00:	f7 e1       	ldi	r31, 0x17	; 23
    2f02:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__prologue_saves__+0x1c>
    2f06:	0d 89       	ldd	r16, Y+21	; 0x15
    2f08:	1e 89       	ldd	r17, Y+22	; 0x16
    2f0a:	86 e0       	ldi	r24, 0x06	; 6
    2f0c:	8c 83       	std	Y+4, r24	; 0x04
    2f0e:	1a 83       	std	Y+2, r17	; 0x02
    2f10:	09 83       	std	Y+1, r16	; 0x01
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
    2f14:	9f e7       	ldi	r25, 0x7F	; 127
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	ae 01       	movw	r20, r28
    2f1c:	47 5e       	subi	r20, 0xE7	; 231
    2f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f20:	6f 89       	ldd	r22, Y+23	; 0x17
    2f22:	78 8d       	ldd	r23, Y+24	; 0x18
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vfprintf>
    2f2c:	ef 81       	ldd	r30, Y+7	; 0x07
    2f2e:	f8 85       	ldd	r31, Y+8	; 0x08
    2f30:	e0 0f       	add	r30, r16
    2f32:	f1 1f       	adc	r31, r17
    2f34:	10 82       	st	Z, r1
    2f36:	2e 96       	adiw	r28, 0x0e	; 14
    2f38:	e4 e0       	ldi	r30, 0x04	; 4
    2f3a:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__epilogue_restores__+0x1c>

00002f3e <vfprintf>:
    2f3e:	ab e0       	ldi	r26, 0x0B	; 11
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e5 ea       	ldi	r30, 0xA5	; 165
    2f44:	f7 e1       	ldi	r31, 0x17	; 23
    2f46:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__prologue_saves__>
    2f4a:	6c 01       	movw	r12, r24
    2f4c:	7b 01       	movw	r14, r22
    2f4e:	8a 01       	movw	r16, r20
    2f50:	fc 01       	movw	r30, r24
    2f52:	17 82       	std	Z+7, r1	; 0x07
    2f54:	16 82       	std	Z+6, r1	; 0x06
    2f56:	83 81       	ldd	r24, Z+3	; 0x03
    2f58:	81 ff       	sbrs	r24, 1
    2f5a:	cc c1       	rjmp	.+920    	; 0x32f4 <vfprintf+0x3b6>
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	3c 01       	movw	r6, r24
    2f62:	f6 01       	movw	r30, r12
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	f7 01       	movw	r30, r14
    2f68:	93 fd       	sbrc	r25, 3
    2f6a:	85 91       	lpm	r24, Z+
    2f6c:	93 ff       	sbrs	r25, 3
    2f6e:	81 91       	ld	r24, Z+
    2f70:	7f 01       	movw	r14, r30
    2f72:	88 23       	and	r24, r24
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <vfprintf+0x3a>
    2f76:	ba c1       	rjmp	.+884    	; 0x32ec <vfprintf+0x3ae>
    2f78:	85 32       	cpi	r24, 0x25	; 37
    2f7a:	39 f4       	brne	.+14     	; 0x2f8a <vfprintf+0x4c>
    2f7c:	93 fd       	sbrc	r25, 3
    2f7e:	85 91       	lpm	r24, Z+
    2f80:	93 ff       	sbrs	r25, 3
    2f82:	81 91       	ld	r24, Z+
    2f84:	7f 01       	movw	r14, r30
    2f86:	85 32       	cpi	r24, 0x25	; 37
    2f88:	29 f4       	brne	.+10     	; 0x2f94 <vfprintf+0x56>
    2f8a:	b6 01       	movw	r22, r12
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    2f92:	e7 cf       	rjmp	.-50     	; 0x2f62 <vfprintf+0x24>
    2f94:	91 2c       	mov	r9, r1
    2f96:	21 2c       	mov	r2, r1
    2f98:	31 2c       	mov	r3, r1
    2f9a:	ff e1       	ldi	r31, 0x1F	; 31
    2f9c:	f3 15       	cp	r31, r3
    2f9e:	d8 f0       	brcs	.+54     	; 0x2fd6 <vfprintf+0x98>
    2fa0:	8b 32       	cpi	r24, 0x2B	; 43
    2fa2:	79 f0       	breq	.+30     	; 0x2fc2 <vfprintf+0x84>
    2fa4:	38 f4       	brcc	.+14     	; 0x2fb4 <vfprintf+0x76>
    2fa6:	80 32       	cpi	r24, 0x20	; 32
    2fa8:	79 f0       	breq	.+30     	; 0x2fc8 <vfprintf+0x8a>
    2faa:	83 32       	cpi	r24, 0x23	; 35
    2fac:	a1 f4       	brne	.+40     	; 0x2fd6 <vfprintf+0x98>
    2fae:	23 2d       	mov	r18, r3
    2fb0:	20 61       	ori	r18, 0x10	; 16
    2fb2:	1d c0       	rjmp	.+58     	; 0x2fee <vfprintf+0xb0>
    2fb4:	8d 32       	cpi	r24, 0x2D	; 45
    2fb6:	61 f0       	breq	.+24     	; 0x2fd0 <vfprintf+0x92>
    2fb8:	80 33       	cpi	r24, 0x30	; 48
    2fba:	69 f4       	brne	.+26     	; 0x2fd6 <vfprintf+0x98>
    2fbc:	23 2d       	mov	r18, r3
    2fbe:	21 60       	ori	r18, 0x01	; 1
    2fc0:	16 c0       	rjmp	.+44     	; 0x2fee <vfprintf+0xb0>
    2fc2:	83 2d       	mov	r24, r3
    2fc4:	82 60       	ori	r24, 0x02	; 2
    2fc6:	38 2e       	mov	r3, r24
    2fc8:	e3 2d       	mov	r30, r3
    2fca:	e4 60       	ori	r30, 0x04	; 4
    2fcc:	3e 2e       	mov	r3, r30
    2fce:	2a c0       	rjmp	.+84     	; 0x3024 <vfprintf+0xe6>
    2fd0:	f3 2d       	mov	r31, r3
    2fd2:	f8 60       	ori	r31, 0x08	; 8
    2fd4:	1d c0       	rjmp	.+58     	; 0x3010 <vfprintf+0xd2>
    2fd6:	37 fc       	sbrc	r3, 7
    2fd8:	2d c0       	rjmp	.+90     	; 0x3034 <vfprintf+0xf6>
    2fda:	20 ed       	ldi	r18, 0xD0	; 208
    2fdc:	28 0f       	add	r18, r24
    2fde:	2a 30       	cpi	r18, 0x0A	; 10
    2fe0:	40 f0       	brcs	.+16     	; 0x2ff2 <vfprintf+0xb4>
    2fe2:	8e 32       	cpi	r24, 0x2E	; 46
    2fe4:	b9 f4       	brne	.+46     	; 0x3014 <vfprintf+0xd6>
    2fe6:	36 fc       	sbrc	r3, 6
    2fe8:	81 c1       	rjmp	.+770    	; 0x32ec <vfprintf+0x3ae>
    2fea:	23 2d       	mov	r18, r3
    2fec:	20 64       	ori	r18, 0x40	; 64
    2fee:	32 2e       	mov	r3, r18
    2ff0:	19 c0       	rjmp	.+50     	; 0x3024 <vfprintf+0xe6>
    2ff2:	36 fe       	sbrs	r3, 6
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002 <vfprintf+0xc4>
    2ff6:	8a e0       	ldi	r24, 0x0A	; 10
    2ff8:	98 9e       	mul	r9, r24
    2ffa:	20 0d       	add	r18, r0
    2ffc:	11 24       	eor	r1, r1
    2ffe:	92 2e       	mov	r9, r18
    3000:	11 c0       	rjmp	.+34     	; 0x3024 <vfprintf+0xe6>
    3002:	ea e0       	ldi	r30, 0x0A	; 10
    3004:	2e 9e       	mul	r2, r30
    3006:	20 0d       	add	r18, r0
    3008:	11 24       	eor	r1, r1
    300a:	22 2e       	mov	r2, r18
    300c:	f3 2d       	mov	r31, r3
    300e:	f0 62       	ori	r31, 0x20	; 32
    3010:	3f 2e       	mov	r3, r31
    3012:	08 c0       	rjmp	.+16     	; 0x3024 <vfprintf+0xe6>
    3014:	8c 36       	cpi	r24, 0x6C	; 108
    3016:	21 f4       	brne	.+8      	; 0x3020 <vfprintf+0xe2>
    3018:	83 2d       	mov	r24, r3
    301a:	80 68       	ori	r24, 0x80	; 128
    301c:	38 2e       	mov	r3, r24
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <vfprintf+0xe6>
    3020:	88 36       	cpi	r24, 0x68	; 104
    3022:	41 f4       	brne	.+16     	; 0x3034 <vfprintf+0xf6>
    3024:	f7 01       	movw	r30, r14
    3026:	93 fd       	sbrc	r25, 3
    3028:	85 91       	lpm	r24, Z+
    302a:	93 ff       	sbrs	r25, 3
    302c:	81 91       	ld	r24, Z+
    302e:	7f 01       	movw	r14, r30
    3030:	81 11       	cpse	r24, r1
    3032:	b3 cf       	rjmp	.-154    	; 0x2f9a <vfprintf+0x5c>
    3034:	98 2f       	mov	r25, r24
    3036:	9f 7d       	andi	r25, 0xDF	; 223
    3038:	95 54       	subi	r25, 0x45	; 69
    303a:	93 30       	cpi	r25, 0x03	; 3
    303c:	28 f4       	brcc	.+10     	; 0x3048 <vfprintf+0x10a>
    303e:	0c 5f       	subi	r16, 0xFC	; 252
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	9f e3       	ldi	r25, 0x3F	; 63
    3044:	99 83       	std	Y+1, r25	; 0x01
    3046:	0d c0       	rjmp	.+26     	; 0x3062 <vfprintf+0x124>
    3048:	83 36       	cpi	r24, 0x63	; 99
    304a:	31 f0       	breq	.+12     	; 0x3058 <vfprintf+0x11a>
    304c:	83 37       	cpi	r24, 0x73	; 115
    304e:	71 f0       	breq	.+28     	; 0x306c <vfprintf+0x12e>
    3050:	83 35       	cpi	r24, 0x53	; 83
    3052:	09 f0       	breq	.+2      	; 0x3056 <vfprintf+0x118>
    3054:	59 c0       	rjmp	.+178    	; 0x3108 <vfprintf+0x1ca>
    3056:	21 c0       	rjmp	.+66     	; 0x309a <vfprintf+0x15c>
    3058:	f8 01       	movw	r30, r16
    305a:	80 81       	ld	r24, Z
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	0e 5f       	subi	r16, 0xFE	; 254
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	88 24       	eor	r8, r8
    3064:	83 94       	inc	r8
    3066:	91 2c       	mov	r9, r1
    3068:	53 01       	movw	r10, r6
    306a:	13 c0       	rjmp	.+38     	; 0x3092 <vfprintf+0x154>
    306c:	28 01       	movw	r4, r16
    306e:	f2 e0       	ldi	r31, 0x02	; 2
    3070:	4f 0e       	add	r4, r31
    3072:	51 1c       	adc	r5, r1
    3074:	f8 01       	movw	r30, r16
    3076:	a0 80       	ld	r10, Z
    3078:	b1 80       	ldd	r11, Z+1	; 0x01
    307a:	36 fe       	sbrs	r3, 6
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <vfprintf+0x146>
    307e:	69 2d       	mov	r22, r9
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0x14a>
    3084:	6f ef       	ldi	r22, 0xFF	; 255
    3086:	7f ef       	ldi	r23, 0xFF	; 255
    3088:	c5 01       	movw	r24, r10
    308a:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <strnlen>
    308e:	4c 01       	movw	r8, r24
    3090:	82 01       	movw	r16, r4
    3092:	f3 2d       	mov	r31, r3
    3094:	ff 77       	andi	r31, 0x7F	; 127
    3096:	3f 2e       	mov	r3, r31
    3098:	16 c0       	rjmp	.+44     	; 0x30c6 <vfprintf+0x188>
    309a:	28 01       	movw	r4, r16
    309c:	22 e0       	ldi	r18, 0x02	; 2
    309e:	42 0e       	add	r4, r18
    30a0:	51 1c       	adc	r5, r1
    30a2:	f8 01       	movw	r30, r16
    30a4:	a0 80       	ld	r10, Z
    30a6:	b1 80       	ldd	r11, Z+1	; 0x01
    30a8:	36 fe       	sbrs	r3, 6
    30aa:	03 c0       	rjmp	.+6      	; 0x30b2 <vfprintf+0x174>
    30ac:	69 2d       	mov	r22, r9
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <vfprintf+0x178>
    30b2:	6f ef       	ldi	r22, 0xFF	; 255
    30b4:	7f ef       	ldi	r23, 0xFF	; 255
    30b6:	c5 01       	movw	r24, r10
    30b8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <strnlen_P>
    30bc:	4c 01       	movw	r8, r24
    30be:	f3 2d       	mov	r31, r3
    30c0:	f0 68       	ori	r31, 0x80	; 128
    30c2:	3f 2e       	mov	r3, r31
    30c4:	82 01       	movw	r16, r4
    30c6:	33 fc       	sbrc	r3, 3
    30c8:	1b c0       	rjmp	.+54     	; 0x3100 <vfprintf+0x1c2>
    30ca:	82 2d       	mov	r24, r2
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	88 16       	cp	r8, r24
    30d0:	99 06       	cpc	r9, r25
    30d2:	b0 f4       	brcc	.+44     	; 0x3100 <vfprintf+0x1c2>
    30d4:	b6 01       	movw	r22, r12
    30d6:	80 e2       	ldi	r24, 0x20	; 32
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    30de:	2a 94       	dec	r2
    30e0:	f4 cf       	rjmp	.-24     	; 0x30ca <vfprintf+0x18c>
    30e2:	f5 01       	movw	r30, r10
    30e4:	37 fc       	sbrc	r3, 7
    30e6:	85 91       	lpm	r24, Z+
    30e8:	37 fe       	sbrs	r3, 7
    30ea:	81 91       	ld	r24, Z+
    30ec:	5f 01       	movw	r10, r30
    30ee:	b6 01       	movw	r22, r12
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    30f6:	21 10       	cpse	r2, r1
    30f8:	2a 94       	dec	r2
    30fa:	21 e0       	ldi	r18, 0x01	; 1
    30fc:	82 1a       	sub	r8, r18
    30fe:	91 08       	sbc	r9, r1
    3100:	81 14       	cp	r8, r1
    3102:	91 04       	cpc	r9, r1
    3104:	71 f7       	brne	.-36     	; 0x30e2 <vfprintf+0x1a4>
    3106:	e8 c0       	rjmp	.+464    	; 0x32d8 <vfprintf+0x39a>
    3108:	84 36       	cpi	r24, 0x64	; 100
    310a:	11 f0       	breq	.+4      	; 0x3110 <vfprintf+0x1d2>
    310c:	89 36       	cpi	r24, 0x69	; 105
    310e:	41 f5       	brne	.+80     	; 0x3160 <vfprintf+0x222>
    3110:	f8 01       	movw	r30, r16
    3112:	37 fe       	sbrs	r3, 7
    3114:	07 c0       	rjmp	.+14     	; 0x3124 <vfprintf+0x1e6>
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	0c 5f       	subi	r16, 0xFC	; 252
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	08 c0       	rjmp	.+16     	; 0x3134 <vfprintf+0x1f6>
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	07 2e       	mov	r0, r23
    312a:	00 0c       	add	r0, r0
    312c:	88 0b       	sbc	r24, r24
    312e:	99 0b       	sbc	r25, r25
    3130:	0e 5f       	subi	r16, 0xFE	; 254
    3132:	1f 4f       	sbci	r17, 0xFF	; 255
    3134:	f3 2d       	mov	r31, r3
    3136:	ff 76       	andi	r31, 0x6F	; 111
    3138:	3f 2e       	mov	r3, r31
    313a:	97 ff       	sbrs	r25, 7
    313c:	09 c0       	rjmp	.+18     	; 0x3150 <vfprintf+0x212>
    313e:	90 95       	com	r25
    3140:	80 95       	com	r24
    3142:	70 95       	com	r23
    3144:	61 95       	neg	r22
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	8f 4f       	sbci	r24, 0xFF	; 255
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	f0 68       	ori	r31, 0x80	; 128
    314e:	3f 2e       	mov	r3, r31
    3150:	2a e0       	ldi	r18, 0x0A	; 10
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	a3 01       	movw	r20, r6
    3156:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__ultoa_invert>
    315a:	88 2e       	mov	r8, r24
    315c:	86 18       	sub	r8, r6
    315e:	45 c0       	rjmp	.+138    	; 0x31ea <vfprintf+0x2ac>
    3160:	85 37       	cpi	r24, 0x75	; 117
    3162:	31 f4       	brne	.+12     	; 0x3170 <vfprintf+0x232>
    3164:	23 2d       	mov	r18, r3
    3166:	2f 7e       	andi	r18, 0xEF	; 239
    3168:	b2 2e       	mov	r11, r18
    316a:	2a e0       	ldi	r18, 0x0A	; 10
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	25 c0       	rjmp	.+74     	; 0x31ba <vfprintf+0x27c>
    3170:	93 2d       	mov	r25, r3
    3172:	99 7f       	andi	r25, 0xF9	; 249
    3174:	b9 2e       	mov	r11, r25
    3176:	8f 36       	cpi	r24, 0x6F	; 111
    3178:	c1 f0       	breq	.+48     	; 0x31aa <vfprintf+0x26c>
    317a:	18 f4       	brcc	.+6      	; 0x3182 <vfprintf+0x244>
    317c:	88 35       	cpi	r24, 0x58	; 88
    317e:	79 f0       	breq	.+30     	; 0x319e <vfprintf+0x260>
    3180:	b5 c0       	rjmp	.+362    	; 0x32ec <vfprintf+0x3ae>
    3182:	80 37       	cpi	r24, 0x70	; 112
    3184:	19 f0       	breq	.+6      	; 0x318c <vfprintf+0x24e>
    3186:	88 37       	cpi	r24, 0x78	; 120
    3188:	21 f0       	breq	.+8      	; 0x3192 <vfprintf+0x254>
    318a:	b0 c0       	rjmp	.+352    	; 0x32ec <vfprintf+0x3ae>
    318c:	e9 2f       	mov	r30, r25
    318e:	e0 61       	ori	r30, 0x10	; 16
    3190:	be 2e       	mov	r11, r30
    3192:	b4 fe       	sbrs	r11, 4
    3194:	0d c0       	rjmp	.+26     	; 0x31b0 <vfprintf+0x272>
    3196:	fb 2d       	mov	r31, r11
    3198:	f4 60       	ori	r31, 0x04	; 4
    319a:	bf 2e       	mov	r11, r31
    319c:	09 c0       	rjmp	.+18     	; 0x31b0 <vfprintf+0x272>
    319e:	34 fe       	sbrs	r3, 4
    31a0:	0a c0       	rjmp	.+20     	; 0x31b6 <vfprintf+0x278>
    31a2:	29 2f       	mov	r18, r25
    31a4:	26 60       	ori	r18, 0x06	; 6
    31a6:	b2 2e       	mov	r11, r18
    31a8:	06 c0       	rjmp	.+12     	; 0x31b6 <vfprintf+0x278>
    31aa:	28 e0       	ldi	r18, 0x08	; 8
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <vfprintf+0x27c>
    31b0:	20 e1       	ldi	r18, 0x10	; 16
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x27c>
    31b6:	20 e1       	ldi	r18, 0x10	; 16
    31b8:	32 e0       	ldi	r19, 0x02	; 2
    31ba:	f8 01       	movw	r30, r16
    31bc:	b7 fe       	sbrs	r11, 7
    31be:	07 c0       	rjmp	.+14     	; 0x31ce <vfprintf+0x290>
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	0c 5f       	subi	r16, 0xFC	; 252
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	06 c0       	rjmp	.+12     	; 0x31da <vfprintf+0x29c>
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 5f       	subi	r16, 0xFE	; 254
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	a3 01       	movw	r20, r6
    31dc:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__ultoa_invert>
    31e0:	88 2e       	mov	r8, r24
    31e2:	86 18       	sub	r8, r6
    31e4:	fb 2d       	mov	r31, r11
    31e6:	ff 77       	andi	r31, 0x7F	; 127
    31e8:	3f 2e       	mov	r3, r31
    31ea:	36 fe       	sbrs	r3, 6
    31ec:	0d c0       	rjmp	.+26     	; 0x3208 <vfprintf+0x2ca>
    31ee:	23 2d       	mov	r18, r3
    31f0:	2e 7f       	andi	r18, 0xFE	; 254
    31f2:	a2 2e       	mov	r10, r18
    31f4:	89 14       	cp	r8, r9
    31f6:	58 f4       	brcc	.+22     	; 0x320e <vfprintf+0x2d0>
    31f8:	34 fe       	sbrs	r3, 4
    31fa:	0b c0       	rjmp	.+22     	; 0x3212 <vfprintf+0x2d4>
    31fc:	32 fc       	sbrc	r3, 2
    31fe:	09 c0       	rjmp	.+18     	; 0x3212 <vfprintf+0x2d4>
    3200:	83 2d       	mov	r24, r3
    3202:	8e 7e       	andi	r24, 0xEE	; 238
    3204:	a8 2e       	mov	r10, r24
    3206:	05 c0       	rjmp	.+10     	; 0x3212 <vfprintf+0x2d4>
    3208:	b8 2c       	mov	r11, r8
    320a:	a3 2c       	mov	r10, r3
    320c:	03 c0       	rjmp	.+6      	; 0x3214 <vfprintf+0x2d6>
    320e:	b8 2c       	mov	r11, r8
    3210:	01 c0       	rjmp	.+2      	; 0x3214 <vfprintf+0x2d6>
    3212:	b9 2c       	mov	r11, r9
    3214:	a4 fe       	sbrs	r10, 4
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <vfprintf+0x2f8>
    3218:	fe 01       	movw	r30, r28
    321a:	e8 0d       	add	r30, r8
    321c:	f1 1d       	adc	r31, r1
    321e:	80 81       	ld	r24, Z
    3220:	80 33       	cpi	r24, 0x30	; 48
    3222:	21 f4       	brne	.+8      	; 0x322c <vfprintf+0x2ee>
    3224:	9a 2d       	mov	r25, r10
    3226:	99 7e       	andi	r25, 0xE9	; 233
    3228:	a9 2e       	mov	r10, r25
    322a:	09 c0       	rjmp	.+18     	; 0x323e <vfprintf+0x300>
    322c:	a2 fe       	sbrs	r10, 2
    322e:	06 c0       	rjmp	.+12     	; 0x323c <vfprintf+0x2fe>
    3230:	b3 94       	inc	r11
    3232:	b3 94       	inc	r11
    3234:	04 c0       	rjmp	.+8      	; 0x323e <vfprintf+0x300>
    3236:	8a 2d       	mov	r24, r10
    3238:	86 78       	andi	r24, 0x86	; 134
    323a:	09 f0       	breq	.+2      	; 0x323e <vfprintf+0x300>
    323c:	b3 94       	inc	r11
    323e:	a3 fc       	sbrc	r10, 3
    3240:	11 c0       	rjmp	.+34     	; 0x3264 <vfprintf+0x326>
    3242:	a0 fe       	sbrs	r10, 0
    3244:	06 c0       	rjmp	.+12     	; 0x3252 <vfprintf+0x314>
    3246:	b2 14       	cp	r11, r2
    3248:	88 f4       	brcc	.+34     	; 0x326c <vfprintf+0x32e>
    324a:	28 0c       	add	r2, r8
    324c:	92 2c       	mov	r9, r2
    324e:	9b 18       	sub	r9, r11
    3250:	0e c0       	rjmp	.+28     	; 0x326e <vfprintf+0x330>
    3252:	b2 14       	cp	r11, r2
    3254:	60 f4       	brcc	.+24     	; 0x326e <vfprintf+0x330>
    3256:	b6 01       	movw	r22, r12
    3258:	80 e2       	ldi	r24, 0x20	; 32
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    3260:	b3 94       	inc	r11
    3262:	f7 cf       	rjmp	.-18     	; 0x3252 <vfprintf+0x314>
    3264:	b2 14       	cp	r11, r2
    3266:	18 f4       	brcc	.+6      	; 0x326e <vfprintf+0x330>
    3268:	2b 18       	sub	r2, r11
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <vfprintf+0x332>
    326c:	98 2c       	mov	r9, r8
    326e:	21 2c       	mov	r2, r1
    3270:	a4 fe       	sbrs	r10, 4
    3272:	10 c0       	rjmp	.+32     	; 0x3294 <vfprintf+0x356>
    3274:	b6 01       	movw	r22, r12
    3276:	80 e3       	ldi	r24, 0x30	; 48
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    327e:	a2 fe       	sbrs	r10, 2
    3280:	17 c0       	rjmp	.+46     	; 0x32b0 <vfprintf+0x372>
    3282:	a1 fc       	sbrc	r10, 1
    3284:	03 c0       	rjmp	.+6      	; 0x328c <vfprintf+0x34e>
    3286:	88 e7       	ldi	r24, 0x78	; 120
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0x352>
    328c:	88 e5       	ldi	r24, 0x58	; 88
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	b6 01       	movw	r22, r12
    3292:	0c c0       	rjmp	.+24     	; 0x32ac <vfprintf+0x36e>
    3294:	8a 2d       	mov	r24, r10
    3296:	86 78       	andi	r24, 0x86	; 134
    3298:	59 f0       	breq	.+22     	; 0x32b0 <vfprintf+0x372>
    329a:	a1 fe       	sbrs	r10, 1
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <vfprintf+0x364>
    329e:	8b e2       	ldi	r24, 0x2B	; 43
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <vfprintf+0x366>
    32a2:	80 e2       	ldi	r24, 0x20	; 32
    32a4:	a7 fc       	sbrc	r10, 7
    32a6:	8d e2       	ldi	r24, 0x2D	; 45
    32a8:	b6 01       	movw	r22, r12
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    32b0:	89 14       	cp	r8, r9
    32b2:	38 f4       	brcc	.+14     	; 0x32c2 <vfprintf+0x384>
    32b4:	b6 01       	movw	r22, r12
    32b6:	80 e3       	ldi	r24, 0x30	; 48
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    32be:	9a 94       	dec	r9
    32c0:	f7 cf       	rjmp	.-18     	; 0x32b0 <vfprintf+0x372>
    32c2:	8a 94       	dec	r8
    32c4:	f3 01       	movw	r30, r6
    32c6:	e8 0d       	add	r30, r8
    32c8:	f1 1d       	adc	r31, r1
    32ca:	80 81       	ld	r24, Z
    32cc:	b6 01       	movw	r22, r12
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    32d4:	81 10       	cpse	r8, r1
    32d6:	f5 cf       	rjmp	.-22     	; 0x32c2 <vfprintf+0x384>
    32d8:	22 20       	and	r2, r2
    32da:	09 f4       	brne	.+2      	; 0x32de <vfprintf+0x3a0>
    32dc:	42 ce       	rjmp	.-892    	; 0x2f62 <vfprintf+0x24>
    32de:	b6 01       	movw	r22, r12
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <fputc>
    32e8:	2a 94       	dec	r2
    32ea:	f6 cf       	rjmp	.-20     	; 0x32d8 <vfprintf+0x39a>
    32ec:	f6 01       	movw	r30, r12
    32ee:	86 81       	ldd	r24, Z+6	; 0x06
    32f0:	97 81       	ldd	r25, Z+7	; 0x07
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0x3ba>
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	9f ef       	ldi	r25, 0xFF	; 255
    32f8:	2b 96       	adiw	r28, 0x0b	; 11
    32fa:	e2 e1       	ldi	r30, 0x12	; 18
    32fc:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__epilogue_restores__>

00003300 <dtoa_prf>:
    3300:	a9 e0       	ldi	r26, 0x09	; 9
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	e6 e8       	ldi	r30, 0x86	; 134
    3306:	f9 e1       	ldi	r31, 0x19	; 25
    3308:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__prologue_saves__+0xc>
    330c:	6a 01       	movw	r12, r20
    330e:	12 2f       	mov	r17, r18
    3310:	b0 2e       	mov	r11, r16
    3312:	2b e3       	ldi	r18, 0x3B	; 59
    3314:	20 17       	cp	r18, r16
    3316:	20 f0       	brcs	.+8      	; 0x3320 <dtoa_prf+0x20>
    3318:	ff 24       	eor	r15, r15
    331a:	f3 94       	inc	r15
    331c:	f0 0e       	add	r15, r16
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <dtoa_prf+0x24>
    3320:	2c e3       	ldi	r18, 0x3C	; 60
    3322:	f2 2e       	mov	r15, r18
    3324:	0f 2d       	mov	r16, r15
    3326:	27 e0       	ldi	r18, 0x07	; 7
    3328:	ae 01       	movw	r20, r28
    332a:	4f 5f       	subi	r20, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	0e 94 28 1c 	call	0x3850	; 0x3850 <__ftoa_engine>
    3332:	bc 01       	movw	r22, r24
    3334:	49 81       	ldd	r20, Y+1	; 0x01
    3336:	84 2f       	mov	r24, r20
    3338:	89 70       	andi	r24, 0x09	; 9
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	31 f0       	breq	.+12     	; 0x334a <dtoa_prf+0x4a>
    333e:	e1 fc       	sbrc	r14, 1
    3340:	06 c0       	rjmp	.+12     	; 0x334e <dtoa_prf+0x4e>
    3342:	e0 fe       	sbrs	r14, 0
    3344:	06 c0       	rjmp	.+12     	; 0x3352 <dtoa_prf+0x52>
    3346:	90 e2       	ldi	r25, 0x20	; 32
    3348:	05 c0       	rjmp	.+10     	; 0x3354 <dtoa_prf+0x54>
    334a:	9d e2       	ldi	r25, 0x2D	; 45
    334c:	03 c0       	rjmp	.+6      	; 0x3354 <dtoa_prf+0x54>
    334e:	9b e2       	ldi	r25, 0x2B	; 43
    3350:	01 c0       	rjmp	.+2      	; 0x3354 <dtoa_prf+0x54>
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	5e 2d       	mov	r21, r14
    3356:	50 71       	andi	r21, 0x10	; 16
    3358:	43 ff       	sbrs	r20, 3
    335a:	3c c0       	rjmp	.+120    	; 0x33d4 <dtoa_prf+0xd4>
    335c:	91 11       	cpse	r25, r1
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <dtoa_prf+0x64>
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	01 c0       	rjmp	.+2      	; 0x3366 <dtoa_prf+0x66>
    3364:	84 e0       	ldi	r24, 0x04	; 4
    3366:	81 17       	cp	r24, r17
    3368:	18 f4       	brcc	.+6      	; 0x3370 <dtoa_prf+0x70>
    336a:	21 2f       	mov	r18, r17
    336c:	28 1b       	sub	r18, r24
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <dtoa_prf+0x72>
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	51 11       	cpse	r21, r1
    3374:	0b c0       	rjmp	.+22     	; 0x338c <dtoa_prf+0x8c>
    3376:	f6 01       	movw	r30, r12
    3378:	82 2f       	mov	r24, r18
    337a:	30 e2       	ldi	r19, 0x20	; 32
    337c:	88 23       	and	r24, r24
    337e:	19 f0       	breq	.+6      	; 0x3386 <dtoa_prf+0x86>
    3380:	31 93       	st	Z+, r19
    3382:	81 50       	subi	r24, 0x01	; 1
    3384:	fb cf       	rjmp	.-10     	; 0x337c <dtoa_prf+0x7c>
    3386:	c2 0e       	add	r12, r18
    3388:	d1 1c       	adc	r13, r1
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	99 23       	and	r25, r25
    338e:	29 f0       	breq	.+10     	; 0x339a <dtoa_prf+0x9a>
    3390:	d6 01       	movw	r26, r12
    3392:	9c 93       	st	X, r25
    3394:	f6 01       	movw	r30, r12
    3396:	31 96       	adiw	r30, 0x01	; 1
    3398:	6f 01       	movw	r12, r30
    339a:	c6 01       	movw	r24, r12
    339c:	03 96       	adiw	r24, 0x03	; 3
    339e:	e2 fe       	sbrs	r14, 2
    33a0:	0a c0       	rjmp	.+20     	; 0x33b6 <dtoa_prf+0xb6>
    33a2:	3e e4       	ldi	r19, 0x4E	; 78
    33a4:	d6 01       	movw	r26, r12
    33a6:	3c 93       	st	X, r19
    33a8:	41 e4       	ldi	r20, 0x41	; 65
    33aa:	11 96       	adiw	r26, 0x01	; 1
    33ac:	4c 93       	st	X, r20
    33ae:	11 97       	sbiw	r26, 0x01	; 1
    33b0:	12 96       	adiw	r26, 0x02	; 2
    33b2:	3c 93       	st	X, r19
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <dtoa_prf+0xc2>
    33b6:	3e e6       	ldi	r19, 0x6E	; 110
    33b8:	f6 01       	movw	r30, r12
    33ba:	30 83       	st	Z, r19
    33bc:	41 e6       	ldi	r20, 0x61	; 97
    33be:	41 83       	std	Z+1, r20	; 0x01
    33c0:	32 83       	std	Z+2, r19	; 0x02
    33c2:	fc 01       	movw	r30, r24
    33c4:	32 2f       	mov	r19, r18
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	33 23       	and	r19, r19
    33ca:	09 f4       	brne	.+2      	; 0x33ce <dtoa_prf+0xce>
    33cc:	42 c0       	rjmp	.+132    	; 0x3452 <dtoa_prf+0x152>
    33ce:	41 93       	st	Z+, r20
    33d0:	31 50       	subi	r19, 0x01	; 1
    33d2:	fa cf       	rjmp	.-12     	; 0x33c8 <dtoa_prf+0xc8>
    33d4:	42 ff       	sbrs	r20, 2
    33d6:	44 c0       	rjmp	.+136    	; 0x3460 <dtoa_prf+0x160>
    33d8:	91 11       	cpse	r25, r1
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <dtoa_prf+0xe0>
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <dtoa_prf+0xe2>
    33e0:	84 e0       	ldi	r24, 0x04	; 4
    33e2:	81 17       	cp	r24, r17
    33e4:	18 f4       	brcc	.+6      	; 0x33ec <dtoa_prf+0xec>
    33e6:	21 2f       	mov	r18, r17
    33e8:	28 1b       	sub	r18, r24
    33ea:	01 c0       	rjmp	.+2      	; 0x33ee <dtoa_prf+0xee>
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	51 11       	cpse	r21, r1
    33f0:	0b c0       	rjmp	.+22     	; 0x3408 <dtoa_prf+0x108>
    33f2:	f6 01       	movw	r30, r12
    33f4:	82 2f       	mov	r24, r18
    33f6:	30 e2       	ldi	r19, 0x20	; 32
    33f8:	88 23       	and	r24, r24
    33fa:	19 f0       	breq	.+6      	; 0x3402 <dtoa_prf+0x102>
    33fc:	31 93       	st	Z+, r19
    33fe:	81 50       	subi	r24, 0x01	; 1
    3400:	fb cf       	rjmp	.-10     	; 0x33f8 <dtoa_prf+0xf8>
    3402:	c2 0e       	add	r12, r18
    3404:	d1 1c       	adc	r13, r1
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	99 23       	and	r25, r25
    340a:	29 f0       	breq	.+10     	; 0x3416 <dtoa_prf+0x116>
    340c:	d6 01       	movw	r26, r12
    340e:	9c 93       	st	X, r25
    3410:	f6 01       	movw	r30, r12
    3412:	31 96       	adiw	r30, 0x01	; 1
    3414:	6f 01       	movw	r12, r30
    3416:	c6 01       	movw	r24, r12
    3418:	03 96       	adiw	r24, 0x03	; 3
    341a:	e2 fe       	sbrs	r14, 2
    341c:	0b c0       	rjmp	.+22     	; 0x3434 <dtoa_prf+0x134>
    341e:	39 e4       	ldi	r19, 0x49	; 73
    3420:	d6 01       	movw	r26, r12
    3422:	3c 93       	st	X, r19
    3424:	3e e4       	ldi	r19, 0x4E	; 78
    3426:	11 96       	adiw	r26, 0x01	; 1
    3428:	3c 93       	st	X, r19
    342a:	11 97       	sbiw	r26, 0x01	; 1
    342c:	36 e4       	ldi	r19, 0x46	; 70
    342e:	12 96       	adiw	r26, 0x02	; 2
    3430:	3c 93       	st	X, r19
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <dtoa_prf+0x142>
    3434:	39 e6       	ldi	r19, 0x69	; 105
    3436:	f6 01       	movw	r30, r12
    3438:	30 83       	st	Z, r19
    343a:	3e e6       	ldi	r19, 0x6E	; 110
    343c:	31 83       	std	Z+1, r19	; 0x01
    343e:	36 e6       	ldi	r19, 0x66	; 102
    3440:	32 83       	std	Z+2, r19	; 0x02
    3442:	fc 01       	movw	r30, r24
    3444:	32 2f       	mov	r19, r18
    3446:	40 e2       	ldi	r20, 0x20	; 32
    3448:	33 23       	and	r19, r19
    344a:	19 f0       	breq	.+6      	; 0x3452 <dtoa_prf+0x152>
    344c:	41 93       	st	Z+, r20
    344e:	31 50       	subi	r19, 0x01	; 1
    3450:	fb cf       	rjmp	.-10     	; 0x3448 <dtoa_prf+0x148>
    3452:	fc 01       	movw	r30, r24
    3454:	e2 0f       	add	r30, r18
    3456:	f1 1d       	adc	r31, r1
    3458:	10 82       	st	Z, r1
    345a:	8e ef       	ldi	r24, 0xFE	; 254
    345c:	9f ef       	ldi	r25, 0xFF	; 255
    345e:	a6 c0       	rjmp	.+332    	; 0x35ac <dtoa_prf+0x2ac>
    3460:	21 e0       	ldi	r18, 0x01	; 1
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	91 11       	cpse	r25, r1
    3466:	02 c0       	rjmp	.+4      	; 0x346c <dtoa_prf+0x16c>
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	16 16       	cp	r1, r22
    346e:	17 06       	cpc	r1, r23
    3470:	1c f4       	brge	.+6      	; 0x3478 <dtoa_prf+0x178>
    3472:	fb 01       	movw	r30, r22
    3474:	31 96       	adiw	r30, 0x01	; 1
    3476:	02 c0       	rjmp	.+4      	; 0x347c <dtoa_prf+0x17c>
    3478:	e1 e0       	ldi	r30, 0x01	; 1
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	2e 0f       	add	r18, r30
    347e:	3f 1f       	adc	r19, r31
    3480:	bb 20       	and	r11, r11
    3482:	21 f0       	breq	.+8      	; 0x348c <dtoa_prf+0x18c>
    3484:	eb 2d       	mov	r30, r11
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	31 96       	adiw	r30, 0x01	; 1
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <dtoa_prf+0x190>
    348c:	e0 e0       	ldi	r30, 0x00	; 0
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	2e 0f       	add	r18, r30
    3492:	3f 1f       	adc	r19, r31
    3494:	e1 2f       	mov	r30, r17
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	2e 17       	cp	r18, r30
    349a:	3f 07       	cpc	r19, r31
    349c:	1c f4       	brge	.+6      	; 0x34a4 <dtoa_prf+0x1a4>
    349e:	12 1b       	sub	r17, r18
    34a0:	21 2f       	mov	r18, r17
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <dtoa_prf+0x1a6>
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	8e 2d       	mov	r24, r14
    34a8:	88 71       	andi	r24, 0x18	; 24
    34aa:	59 f4       	brne	.+22     	; 0x34c2 <dtoa_prf+0x1c2>
    34ac:	f6 01       	movw	r30, r12
    34ae:	82 2f       	mov	r24, r18
    34b0:	30 e2       	ldi	r19, 0x20	; 32
    34b2:	88 23       	and	r24, r24
    34b4:	19 f0       	breq	.+6      	; 0x34bc <dtoa_prf+0x1bc>
    34b6:	31 93       	st	Z+, r19
    34b8:	81 50       	subi	r24, 0x01	; 1
    34ba:	fb cf       	rjmp	.-10     	; 0x34b2 <dtoa_prf+0x1b2>
    34bc:	c2 0e       	add	r12, r18
    34be:	d1 1c       	adc	r13, r1
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	99 23       	and	r25, r25
    34c4:	29 f0       	breq	.+10     	; 0x34d0 <dtoa_prf+0x1d0>
    34c6:	d6 01       	movw	r26, r12
    34c8:	9c 93       	st	X, r25
    34ca:	f6 01       	movw	r30, r12
    34cc:	31 96       	adiw	r30, 0x01	; 1
    34ce:	6f 01       	movw	r12, r30
    34d0:	51 11       	cpse	r21, r1
    34d2:	0b c0       	rjmp	.+22     	; 0x34ea <dtoa_prf+0x1ea>
    34d4:	f6 01       	movw	r30, r12
    34d6:	82 2f       	mov	r24, r18
    34d8:	90 e3       	ldi	r25, 0x30	; 48
    34da:	88 23       	and	r24, r24
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <dtoa_prf+0x1e4>
    34de:	91 93       	st	Z+, r25
    34e0:	81 50       	subi	r24, 0x01	; 1
    34e2:	fb cf       	rjmp	.-10     	; 0x34da <dtoa_prf+0x1da>
    34e4:	c2 0e       	add	r12, r18
    34e6:	d1 1c       	adc	r13, r1
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	0f 2d       	mov	r16, r15
    34ec:	06 0f       	add	r16, r22
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	34 2f       	mov	r19, r20
    34f2:	30 71       	andi	r19, 0x10	; 16
    34f4:	44 ff       	sbrs	r20, 4
    34f6:	03 c0       	rjmp	.+6      	; 0x34fe <dtoa_prf+0x1fe>
    34f8:	91 33       	cpi	r25, 0x31	; 49
    34fa:	09 f4       	brne	.+2      	; 0x34fe <dtoa_prf+0x1fe>
    34fc:	01 50       	subi	r16, 0x01	; 1
    34fe:	10 16       	cp	r1, r16
    3500:	24 f4       	brge	.+8      	; 0x350a <dtoa_prf+0x20a>
    3502:	09 30       	cpi	r16, 0x09	; 9
    3504:	18 f0       	brcs	.+6      	; 0x350c <dtoa_prf+0x20c>
    3506:	08 e0       	ldi	r16, 0x08	; 8
    3508:	01 c0       	rjmp	.+2      	; 0x350c <dtoa_prf+0x20c>
    350a:	01 e0       	ldi	r16, 0x01	; 1
    350c:	ab 01       	movw	r20, r22
    350e:	77 ff       	sbrs	r23, 7
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <dtoa_prf+0x216>
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	fb 01       	movw	r30, r22
    3518:	e4 1b       	sub	r30, r20
    351a:	f5 0b       	sbc	r31, r21
    351c:	a1 e0       	ldi	r26, 0x01	; 1
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	ac 0f       	add	r26, r28
    3522:	bd 1f       	adc	r27, r29
    3524:	ea 0f       	add	r30, r26
    3526:	fb 1f       	adc	r31, r27
    3528:	8e e2       	ldi	r24, 0x2E	; 46
    352a:	a8 2e       	mov	r10, r24
    352c:	4b 01       	movw	r8, r22
    352e:	80 1a       	sub	r8, r16
    3530:	91 08       	sbc	r9, r1
    3532:	0b 2d       	mov	r16, r11
    3534:	10 e0       	ldi	r17, 0x00	; 0
    3536:	11 95       	neg	r17
    3538:	01 95       	neg	r16
    353a:	11 09       	sbc	r17, r1
    353c:	4f 3f       	cpi	r20, 0xFF	; 255
    353e:	bf ef       	ldi	r27, 0xFF	; 255
    3540:	5b 07       	cpc	r21, r27
    3542:	21 f4       	brne	.+8      	; 0x354c <dtoa_prf+0x24c>
    3544:	d6 01       	movw	r26, r12
    3546:	ac 92       	st	X, r10
    3548:	11 96       	adiw	r26, 0x01	; 1
    354a:	6d 01       	movw	r12, r26
    354c:	64 17       	cp	r22, r20
    354e:	75 07       	cpc	r23, r21
    3550:	2c f0       	brlt	.+10     	; 0x355c <dtoa_prf+0x25c>
    3552:	84 16       	cp	r8, r20
    3554:	95 06       	cpc	r9, r21
    3556:	14 f4       	brge	.+4      	; 0x355c <dtoa_prf+0x25c>
    3558:	81 81       	ldd	r24, Z+1	; 0x01
    355a:	01 c0       	rjmp	.+2      	; 0x355e <dtoa_prf+0x25e>
    355c:	80 e3       	ldi	r24, 0x30	; 48
    355e:	41 50       	subi	r20, 0x01	; 1
    3560:	51 09       	sbc	r21, r1
    3562:	31 96       	adiw	r30, 0x01	; 1
    3564:	d6 01       	movw	r26, r12
    3566:	11 96       	adiw	r26, 0x01	; 1
    3568:	7d 01       	movw	r14, r26
    356a:	40 17       	cp	r20, r16
    356c:	51 07       	cpc	r21, r17
    356e:	24 f0       	brlt	.+8      	; 0x3578 <dtoa_prf+0x278>
    3570:	d6 01       	movw	r26, r12
    3572:	8c 93       	st	X, r24
    3574:	67 01       	movw	r12, r14
    3576:	e2 cf       	rjmp	.-60     	; 0x353c <dtoa_prf+0x23c>
    3578:	64 17       	cp	r22, r20
    357a:	75 07       	cpc	r23, r21
    357c:	39 f4       	brne	.+14     	; 0x358c <dtoa_prf+0x28c>
    357e:	96 33       	cpi	r25, 0x36	; 54
    3580:	20 f4       	brcc	.+8      	; 0x358a <dtoa_prf+0x28a>
    3582:	95 33       	cpi	r25, 0x35	; 53
    3584:	19 f4       	brne	.+6      	; 0x358c <dtoa_prf+0x28c>
    3586:	31 11       	cpse	r19, r1
    3588:	01 c0       	rjmp	.+2      	; 0x358c <dtoa_prf+0x28c>
    358a:	81 e3       	ldi	r24, 0x31	; 49
    358c:	f6 01       	movw	r30, r12
    358e:	80 83       	st	Z, r24
    3590:	f7 01       	movw	r30, r14
    3592:	82 2f       	mov	r24, r18
    3594:	90 e2       	ldi	r25, 0x20	; 32
    3596:	88 23       	and	r24, r24
    3598:	19 f0       	breq	.+6      	; 0x35a0 <dtoa_prf+0x2a0>
    359a:	91 93       	st	Z+, r25
    359c:	81 50       	subi	r24, 0x01	; 1
    359e:	fb cf       	rjmp	.-10     	; 0x3596 <dtoa_prf+0x296>
    35a0:	f7 01       	movw	r30, r14
    35a2:	e2 0f       	add	r30, r18
    35a4:	f1 1d       	adc	r31, r1
    35a6:	10 82       	st	Z, r1
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	29 96       	adiw	r28, 0x09	; 9
    35ae:	ec e0       	ldi	r30, 0x0C	; 12
    35b0:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__epilogue_restores__+0xc>

000035b4 <strtod>:
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	e0 ee       	ldi	r30, 0xE0	; 224
    35ba:	fa e1       	ldi	r31, 0x1A	; 26
    35bc:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__prologue_saves__+0xc>
    35c0:	ec 01       	movw	r28, r24
    35c2:	6b 01       	movw	r12, r22
    35c4:	61 15       	cp	r22, r1
    35c6:	71 05       	cpc	r23, r1
    35c8:	19 f0       	breq	.+6      	; 0x35d0 <strtod+0x1c>
    35ca:	fb 01       	movw	r30, r22
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
    35d0:	7e 01       	movw	r14, r28
    35d2:	ff ef       	ldi	r31, 0xFF	; 255
    35d4:	ef 1a       	sub	r14, r31
    35d6:	ff 0a       	sbc	r15, r31
    35d8:	08 81       	ld	r16, Y
    35da:	80 2f       	mov	r24, r16
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <isspace>
    35e2:	89 2b       	or	r24, r25
    35e4:	11 f0       	breq	.+4      	; 0x35ea <strtod+0x36>
    35e6:	e7 01       	movw	r28, r14
    35e8:	f3 cf       	rjmp	.-26     	; 0x35d0 <strtod+0x1c>
    35ea:	0d 32       	cpi	r16, 0x2D	; 45
    35ec:	39 f4       	brne	.+14     	; 0x35fc <strtod+0x48>
    35ee:	7e 01       	movw	r14, r28
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	e8 0e       	add	r14, r24
    35f4:	f1 1c       	adc	r15, r1
    35f6:	09 81       	ldd	r16, Y+1	; 0x01
    35f8:	11 e0       	ldi	r17, 0x01	; 1
    35fa:	08 c0       	rjmp	.+16     	; 0x360c <strtod+0x58>
    35fc:	0b 32       	cpi	r16, 0x2B	; 43
    35fe:	29 f4       	brne	.+10     	; 0x360a <strtod+0x56>
    3600:	7e 01       	movw	r14, r28
    3602:	92 e0       	ldi	r25, 0x02	; 2
    3604:	e9 0e       	add	r14, r25
    3606:	f1 1c       	adc	r15, r1
    3608:	09 81       	ldd	r16, Y+1	; 0x01
    360a:	10 e0       	ldi	r17, 0x00	; 0
    360c:	e7 01       	movw	r28, r14
    360e:	21 97       	sbiw	r28, 0x01	; 1
    3610:	43 e0       	ldi	r20, 0x03	; 3
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	64 ed       	ldi	r22, 0xD4	; 212
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	ce 01       	movw	r24, r28
    361a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <strncasecmp_P>
    361e:	89 2b       	or	r24, r25
    3620:	c1 f4       	brne	.+48     	; 0x3652 <strtod+0x9e>
    3622:	23 96       	adiw	r28, 0x03	; 3
    3624:	45 e0       	ldi	r20, 0x05	; 5
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	6f ec       	ldi	r22, 0xCF	; 207
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	ce 01       	movw	r24, r28
    362e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <strncasecmp_P>
    3632:	89 2b       	or	r24, r25
    3634:	09 f4       	brne	.+2      	; 0x3638 <strtod+0x84>
    3636:	25 96       	adiw	r28, 0x05	; 5
    3638:	c1 14       	cp	r12, r1
    363a:	d1 04       	cpc	r13, r1
    363c:	19 f0       	breq	.+6      	; 0x3644 <strtod+0x90>
    363e:	f6 01       	movw	r30, r12
    3640:	d1 83       	std	Z+1, r29	; 0x01
    3642:	c0 83       	st	Z, r28
    3644:	11 11       	cpse	r17, r1
    3646:	f6 c0       	rjmp	.+492    	; 0x3834 <strtod+0x280>
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	80 e8       	ldi	r24, 0x80	; 128
    364e:	9f e7       	ldi	r25, 0x7F	; 127
    3650:	fa c0       	rjmp	.+500    	; 0x3846 <strtod+0x292>
    3652:	43 e0       	ldi	r20, 0x03	; 3
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	6c ec       	ldi	r22, 0xCC	; 204
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	ce 01       	movw	r24, r28
    365c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <strncasecmp_P>
    3660:	89 2b       	or	r24, r25
    3662:	59 f4       	brne	.+22     	; 0x367a <strtod+0xc6>
    3664:	c1 14       	cp	r12, r1
    3666:	d1 04       	cpc	r13, r1
    3668:	09 f4       	brne	.+2      	; 0x366c <strtod+0xb8>
    366a:	e9 c0       	rjmp	.+466    	; 0x383e <strtod+0x28a>
    366c:	f2 e0       	ldi	r31, 0x02	; 2
    366e:	ef 0e       	add	r14, r31
    3670:	f1 1c       	adc	r15, r1
    3672:	f6 01       	movw	r30, r12
    3674:	f1 82       	std	Z+1, r15	; 0x01
    3676:	e0 82       	st	Z, r14
    3678:	e2 c0       	rjmp	.+452    	; 0x383e <strtod+0x28a>
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	a9 01       	movw	r20, r18
    3680:	c0 e0       	ldi	r28, 0x00	; 0
    3682:	d0 e0       	ldi	r29, 0x00	; 0
    3684:	f7 01       	movw	r30, r14
    3686:	80 ed       	ldi	r24, 0xD0	; 208
    3688:	a8 2e       	mov	r10, r24
    368a:	a0 0e       	add	r10, r16
    368c:	89 e0       	ldi	r24, 0x09	; 9
    368e:	8a 15       	cp	r24, r10
    3690:	30 f1       	brcs	.+76     	; 0x36de <strtod+0x12a>
    3692:	91 2f       	mov	r25, r17
    3694:	92 60       	ori	r25, 0x02	; 2
    3696:	b9 2e       	mov	r11, r25
    3698:	81 2f       	mov	r24, r17
    369a:	88 70       	andi	r24, 0x08	; 8
    369c:	12 ff       	sbrs	r17, 2
    369e:	04 c0       	rjmp	.+8      	; 0x36a8 <strtod+0xf4>
    36a0:	81 11       	cpse	r24, r1
    36a2:	24 c0       	rjmp	.+72     	; 0x36ec <strtod+0x138>
    36a4:	21 96       	adiw	r28, 0x01	; 1
    36a6:	22 c0       	rjmp	.+68     	; 0x36ec <strtod+0x138>
    36a8:	81 11       	cpse	r24, r1
    36aa:	21 97       	sbiw	r28, 0x01	; 1
    36ac:	a5 e0       	ldi	r26, 0x05	; 5
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__muluhisi3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	aa 1f       	adc	r26, r26
    36be:	bb 1f       	adc	r27, r27
    36c0:	9c 01       	movw	r18, r24
    36c2:	ad 01       	movw	r20, r26
    36c4:	2a 0d       	add	r18, r10
    36c6:	31 1d       	adc	r19, r1
    36c8:	41 1d       	adc	r20, r1
    36ca:	51 1d       	adc	r21, r1
    36cc:	28 39       	cpi	r18, 0x98	; 152
    36ce:	89 e9       	ldi	r24, 0x99	; 153
    36d0:	38 07       	cpc	r19, r24
    36d2:	48 07       	cpc	r20, r24
    36d4:	89 e1       	ldi	r24, 0x19	; 25
    36d6:	58 07       	cpc	r21, r24
    36d8:	48 f0       	brcs	.+18     	; 0x36ec <strtod+0x138>
    36da:	16 60       	ori	r17, 0x06	; 6
    36dc:	06 c0       	rjmp	.+12     	; 0x36ea <strtod+0x136>
    36de:	9e ef       	ldi	r25, 0xFE	; 254
    36e0:	a9 12       	cpse	r10, r25
    36e2:	0a c0       	rjmp	.+20     	; 0x36f8 <strtod+0x144>
    36e4:	13 fd       	sbrc	r17, 3
    36e6:	40 c0       	rjmp	.+128    	; 0x3768 <strtod+0x1b4>
    36e8:	18 60       	ori	r17, 0x08	; 8
    36ea:	b1 2e       	mov	r11, r17
    36ec:	8f ef       	ldi	r24, 0xFF	; 255
    36ee:	e8 1a       	sub	r14, r24
    36f0:	f8 0a       	sbc	r15, r24
    36f2:	00 81       	ld	r16, Z
    36f4:	1b 2d       	mov	r17, r11
    36f6:	c6 cf       	rjmp	.-116    	; 0x3684 <strtod+0xd0>
    36f8:	80 2f       	mov	r24, r16
    36fa:	8f 7d       	andi	r24, 0xDF	; 223
    36fc:	85 34       	cpi	r24, 0x45	; 69
    36fe:	a1 f5       	brne	.+104    	; 0x3768 <strtod+0x1b4>
    3700:	80 81       	ld	r24, Z
    3702:	8d 32       	cpi	r24, 0x2D	; 45
    3704:	11 f4       	brne	.+4      	; 0x370a <strtod+0x156>
    3706:	10 61       	ori	r17, 0x10	; 16
    3708:	06 c0       	rjmp	.+12     	; 0x3716 <strtod+0x162>
    370a:	8b 32       	cpi	r24, 0x2B	; 43
    370c:	21 f0       	breq	.+8      	; 0x3716 <strtod+0x162>
    370e:	31 96       	adiw	r30, 0x01	; 1
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	04 c0       	rjmp	.+8      	; 0x371e <strtod+0x16a>
    3716:	81 81       	ldd	r24, Z+1	; 0x01
    3718:	32 96       	adiw	r30, 0x02	; 2
    371a:	62 e0       	ldi	r22, 0x02	; 2
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	80 53       	subi	r24, 0x30	; 48
    3720:	8a 30       	cpi	r24, 0x0A	; 10
    3722:	18 f0       	brcs	.+6      	; 0x372a <strtod+0x176>
    3724:	e6 1b       	sub	r30, r22
    3726:	f7 0b       	sbc	r31, r23
    3728:	1f c0       	rjmp	.+62     	; 0x3768 <strtod+0x1b4>
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	60 38       	cpi	r22, 0x80	; 128
    3730:	9c e0       	ldi	r25, 0x0C	; 12
    3732:	79 07       	cpc	r23, r25
    3734:	5c f4       	brge	.+22     	; 0x374c <strtod+0x198>
    3736:	db 01       	movw	r26, r22
    3738:	aa 0f       	add	r26, r26
    373a:	bb 1f       	adc	r27, r27
    373c:	aa 0f       	add	r26, r26
    373e:	bb 1f       	adc	r27, r27
    3740:	6a 0f       	add	r22, r26
    3742:	7b 1f       	adc	r23, r27
    3744:	66 0f       	add	r22, r22
    3746:	77 1f       	adc	r23, r23
    3748:	68 0f       	add	r22, r24
    374a:	71 1d       	adc	r23, r1
    374c:	31 96       	adiw	r30, 0x01	; 1
    374e:	df 01       	movw	r26, r30
    3750:	11 97       	sbiw	r26, 0x01	; 1
    3752:	8c 91       	ld	r24, X
    3754:	80 53       	subi	r24, 0x30	; 48
    3756:	8a 30       	cpi	r24, 0x0A	; 10
    3758:	50 f3       	brcs	.-44     	; 0x372e <strtod+0x17a>
    375a:	14 ff       	sbrs	r17, 4
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <strtod+0x1b0>
    375e:	71 95       	neg	r23
    3760:	61 95       	neg	r22
    3762:	71 09       	sbc	r23, r1
    3764:	c6 0f       	add	r28, r22
    3766:	d7 1f       	adc	r29, r23
    3768:	11 ff       	sbrs	r17, 1
    376a:	08 c0       	rjmp	.+16     	; 0x377c <strtod+0x1c8>
    376c:	c1 14       	cp	r12, r1
    376e:	d1 04       	cpc	r13, r1
    3770:	29 f0       	breq	.+10     	; 0x377c <strtod+0x1c8>
    3772:	cf 01       	movw	r24, r30
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f6 01       	movw	r30, r12
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	80 83       	st	Z, r24
    377c:	ca 01       	movw	r24, r20
    377e:	b9 01       	movw	r22, r18
    3780:	0e 94 87 14 	call	0x290e	; 0x290e <__floatunsisf>
    3784:	21 2f       	mov	r18, r17
    3786:	23 70       	andi	r18, 0x03	; 3
    3788:	23 30       	cpi	r18, 0x03	; 3
    378a:	19 f0       	breq	.+6      	; 0x3792 <strtod+0x1de>
    378c:	4b 01       	movw	r8, r22
    378e:	5c 01       	movw	r10, r24
    3790:	06 c0       	rjmp	.+12     	; 0x379e <strtod+0x1ea>
    3792:	4b 01       	movw	r8, r22
    3794:	5c 01       	movw	r10, r24
    3796:	b7 fa       	bst	r11, 7
    3798:	b0 94       	com	r11
    379a:	b7 f8       	bld	r11, 7
    379c:	b0 94       	com	r11
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	a9 01       	movw	r20, r18
    37a4:	c5 01       	movw	r24, r10
    37a6:	b4 01       	movw	r22, r8
    37a8:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <strtod+0x1fe>
    37b0:	3e c0       	rjmp	.+124    	; 0x382e <strtod+0x27a>
    37b2:	d7 ff       	sbrs	r29, 7
    37b4:	06 c0       	rjmp	.+12     	; 0x37c2 <strtod+0x20e>
    37b6:	d1 95       	neg	r29
    37b8:	c1 95       	neg	r28
    37ba:	d1 09       	sbc	r29, r1
    37bc:	0b ee       	ldi	r16, 0xEB	; 235
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <strtod+0x212>
    37c2:	03 e0       	ldi	r16, 0x03	; 3
    37c4:	11 e0       	ldi	r17, 0x01	; 1
    37c6:	68 01       	movw	r12, r16
    37c8:	f8 e1       	ldi	r31, 0x18	; 24
    37ca:	cf 1a       	sub	r12, r31
    37cc:	d1 08       	sbc	r13, r1
    37ce:	90 e2       	ldi	r25, 0x20	; 32
    37d0:	e9 2e       	mov	r14, r25
    37d2:	f1 2c       	mov	r15, r1
    37d4:	ce 15       	cp	r28, r14
    37d6:	df 05       	cpc	r29, r15
    37d8:	74 f0       	brlt	.+28     	; 0x37f6 <strtod+0x242>
    37da:	f8 01       	movw	r30, r16
    37dc:	25 91       	lpm	r18, Z+
    37de:	35 91       	lpm	r19, Z+
    37e0:	45 91       	lpm	r20, Z+
    37e2:	54 91       	lpm	r21, Z
    37e4:	c5 01       	movw	r24, r10
    37e6:	b4 01       	movw	r22, r8
    37e8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__mulsf3>
    37ec:	4b 01       	movw	r8, r22
    37ee:	5c 01       	movw	r10, r24
    37f0:	ce 19       	sub	r28, r14
    37f2:	df 09       	sbc	r29, r15
    37f4:	ef cf       	rjmp	.-34     	; 0x37d4 <strtod+0x220>
    37f6:	04 50       	subi	r16, 0x04	; 4
    37f8:	11 09       	sbc	r17, r1
    37fa:	f5 94       	asr	r15
    37fc:	e7 94       	ror	r14
    37fe:	0c 15       	cp	r16, r12
    3800:	1d 05       	cpc	r17, r13
    3802:	41 f7       	brne	.-48     	; 0x37d4 <strtod+0x220>
    3804:	8a 2d       	mov	r24, r10
    3806:	88 0f       	add	r24, r24
    3808:	8b 2d       	mov	r24, r11
    380a:	88 1f       	adc	r24, r24
    380c:	8f 3f       	cpi	r24, 0xFF	; 255
    380e:	49 f0       	breq	.+18     	; 0x3822 <strtod+0x26e>
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	a9 01       	movw	r20, r18
    3816:	c5 01       	movw	r24, r10
    3818:	b4 01       	movw	r22, r8
    381a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    381e:	81 11       	cpse	r24, r1
    3820:	06 c0       	rjmp	.+12     	; 0x382e <strtod+0x27a>
    3822:	82 e2       	ldi	r24, 0x22	; 34
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <errno+0x1>
    382a:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <errno>
    382e:	c5 01       	movw	r24, r10
    3830:	b4 01       	movw	r22, r8
    3832:	09 c0       	rjmp	.+18     	; 0x3846 <strtod+0x292>
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	80 e8       	ldi	r24, 0x80	; 128
    383a:	9f ef       	ldi	r25, 0xFF	; 255
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <strtod+0x292>
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	80 ec       	ldi	r24, 0xC0	; 192
    3844:	9f e7       	ldi	r25, 0x7F	; 127
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	ec e0       	ldi	r30, 0x0C	; 12
    384c:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__epilogue_restores__+0xc>

00003850 <__ftoa_engine>:
    3850:	28 30       	cpi	r18, 0x08	; 8
    3852:	08 f0       	brcs	.+2      	; 0x3856 <__ftoa_engine+0x6>
    3854:	27 e0       	ldi	r18, 0x07	; 7
    3856:	33 27       	eor	r19, r19
    3858:	da 01       	movw	r26, r20
    385a:	99 0f       	add	r25, r25
    385c:	31 1d       	adc	r19, r1
    385e:	87 fd       	sbrc	r24, 7
    3860:	91 60       	ori	r25, 0x01	; 1
    3862:	00 96       	adiw	r24, 0x00	; 0
    3864:	61 05       	cpc	r22, r1
    3866:	71 05       	cpc	r23, r1
    3868:	39 f4       	brne	.+14     	; 0x3878 <__ftoa_engine+0x28>
    386a:	32 60       	ori	r19, 0x02	; 2
    386c:	2e 5f       	subi	r18, 0xFE	; 254
    386e:	3d 93       	st	X+, r19
    3870:	30 e3       	ldi	r19, 0x30	; 48
    3872:	2a 95       	dec	r18
    3874:	e1 f7       	brne	.-8      	; 0x386e <__ftoa_engine+0x1e>
    3876:	08 95       	ret
    3878:	9f 3f       	cpi	r25, 0xFF	; 255
    387a:	30 f0       	brcs	.+12     	; 0x3888 <__ftoa_engine+0x38>
    387c:	80 38       	cpi	r24, 0x80	; 128
    387e:	71 05       	cpc	r23, r1
    3880:	61 05       	cpc	r22, r1
    3882:	09 f0       	breq	.+2      	; 0x3886 <__ftoa_engine+0x36>
    3884:	3c 5f       	subi	r19, 0xFC	; 252
    3886:	3c 5f       	subi	r19, 0xFC	; 252
    3888:	3d 93       	st	X+, r19
    388a:	91 30       	cpi	r25, 0x01	; 1
    388c:	08 f0       	brcs	.+2      	; 0x3890 <__ftoa_engine+0x40>
    388e:	80 68       	ori	r24, 0x80	; 128
    3890:	91 1d       	adc	r25, r1
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	1f 93       	push	r17
    3898:	0f 93       	push	r16
    389a:	ff 92       	push	r15
    389c:	ef 92       	push	r14
    389e:	19 2f       	mov	r17, r25
    38a0:	98 7f       	andi	r25, 0xF8	; 248
    38a2:	96 95       	lsr	r25
    38a4:	e9 2f       	mov	r30, r25
    38a6:	96 95       	lsr	r25
    38a8:	96 95       	lsr	r25
    38aa:	e9 0f       	add	r30, r25
    38ac:	ff 27       	eor	r31, r31
    38ae:	ef 59       	subi	r30, 0x9F	; 159
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	99 27       	eor	r25, r25
    38b4:	33 27       	eor	r19, r19
    38b6:	ee 24       	eor	r14, r14
    38b8:	ff 24       	eor	r15, r15
    38ba:	a7 01       	movw	r20, r14
    38bc:	e7 01       	movw	r28, r14
    38be:	05 90       	lpm	r0, Z+
    38c0:	08 94       	sec
    38c2:	07 94       	ror	r0
    38c4:	28 f4       	brcc	.+10     	; 0x38d0 <__ftoa_engine+0x80>
    38c6:	36 0f       	add	r19, r22
    38c8:	e7 1e       	adc	r14, r23
    38ca:	f8 1e       	adc	r15, r24
    38cc:	49 1f       	adc	r20, r25
    38ce:	51 1d       	adc	r21, r1
    38d0:	66 0f       	add	r22, r22
    38d2:	77 1f       	adc	r23, r23
    38d4:	88 1f       	adc	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	06 94       	lsr	r0
    38da:	a1 f7       	brne	.-24     	; 0x38c4 <__ftoa_engine+0x74>
    38dc:	05 90       	lpm	r0, Z+
    38de:	07 94       	ror	r0
    38e0:	28 f4       	brcc	.+10     	; 0x38ec <__ftoa_engine+0x9c>
    38e2:	e7 0e       	add	r14, r23
    38e4:	f8 1e       	adc	r15, r24
    38e6:	49 1f       	adc	r20, r25
    38e8:	56 1f       	adc	r21, r22
    38ea:	c1 1d       	adc	r28, r1
    38ec:	77 0f       	add	r23, r23
    38ee:	88 1f       	adc	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	66 1f       	adc	r22, r22
    38f4:	06 94       	lsr	r0
    38f6:	a1 f7       	brne	.-24     	; 0x38e0 <__ftoa_engine+0x90>
    38f8:	05 90       	lpm	r0, Z+
    38fa:	07 94       	ror	r0
    38fc:	28 f4       	brcc	.+10     	; 0x3908 <__ftoa_engine+0xb8>
    38fe:	f8 0e       	add	r15, r24
    3900:	49 1f       	adc	r20, r25
    3902:	56 1f       	adc	r21, r22
    3904:	c7 1f       	adc	r28, r23
    3906:	d1 1d       	adc	r29, r1
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	66 1f       	adc	r22, r22
    390e:	77 1f       	adc	r23, r23
    3910:	06 94       	lsr	r0
    3912:	a1 f7       	brne	.-24     	; 0x38fc <__ftoa_engine+0xac>
    3914:	05 90       	lpm	r0, Z+
    3916:	07 94       	ror	r0
    3918:	20 f4       	brcc	.+8      	; 0x3922 <__ftoa_engine+0xd2>
    391a:	49 0f       	add	r20, r25
    391c:	56 1f       	adc	r21, r22
    391e:	c7 1f       	adc	r28, r23
    3920:	d8 1f       	adc	r29, r24
    3922:	99 0f       	add	r25, r25
    3924:	66 1f       	adc	r22, r22
    3926:	77 1f       	adc	r23, r23
    3928:	88 1f       	adc	r24, r24
    392a:	06 94       	lsr	r0
    392c:	a9 f7       	brne	.-22     	; 0x3918 <__ftoa_engine+0xc8>
    392e:	84 91       	lpm	r24, Z
    3930:	10 95       	com	r17
    3932:	17 70       	andi	r17, 0x07	; 7
    3934:	41 f0       	breq	.+16     	; 0x3946 <__ftoa_engine+0xf6>
    3936:	d6 95       	lsr	r29
    3938:	c7 95       	ror	r28
    393a:	57 95       	ror	r21
    393c:	47 95       	ror	r20
    393e:	f7 94       	ror	r15
    3940:	e7 94       	ror	r14
    3942:	1a 95       	dec	r17
    3944:	c1 f7       	brne	.-16     	; 0x3936 <__ftoa_engine+0xe6>
    3946:	e7 e0       	ldi	r30, 0x07	; 7
    3948:	f1 e0       	ldi	r31, 0x01	; 1
    394a:	68 94       	set
    394c:	15 90       	lpm	r1, Z+
    394e:	15 91       	lpm	r17, Z+
    3950:	35 91       	lpm	r19, Z+
    3952:	65 91       	lpm	r22, Z+
    3954:	95 91       	lpm	r25, Z+
    3956:	05 90       	lpm	r0, Z+
    3958:	7f e2       	ldi	r23, 0x2F	; 47
    395a:	73 95       	inc	r23
    395c:	e1 18       	sub	r14, r1
    395e:	f1 0a       	sbc	r15, r17
    3960:	43 0b       	sbc	r20, r19
    3962:	56 0b       	sbc	r21, r22
    3964:	c9 0b       	sbc	r28, r25
    3966:	d0 09       	sbc	r29, r0
    3968:	c0 f7       	brcc	.-16     	; 0x395a <__ftoa_engine+0x10a>
    396a:	e1 0c       	add	r14, r1
    396c:	f1 1e       	adc	r15, r17
    396e:	43 1f       	adc	r20, r19
    3970:	56 1f       	adc	r21, r22
    3972:	c9 1f       	adc	r28, r25
    3974:	d0 1d       	adc	r29, r0
    3976:	7e f4       	brtc	.+30     	; 0x3996 <__ftoa_engine+0x146>
    3978:	70 33       	cpi	r23, 0x30	; 48
    397a:	11 f4       	brne	.+4      	; 0x3980 <__ftoa_engine+0x130>
    397c:	8a 95       	dec	r24
    397e:	e6 cf       	rjmp	.-52     	; 0x394c <__ftoa_engine+0xfc>
    3980:	e8 94       	clt
    3982:	01 50       	subi	r16, 0x01	; 1
    3984:	30 f0       	brcs	.+12     	; 0x3992 <__ftoa_engine+0x142>
    3986:	08 0f       	add	r16, r24
    3988:	0a f4       	brpl	.+2      	; 0x398c <__ftoa_engine+0x13c>
    398a:	00 27       	eor	r16, r16
    398c:	02 17       	cp	r16, r18
    398e:	08 f4       	brcc	.+2      	; 0x3992 <__ftoa_engine+0x142>
    3990:	20 2f       	mov	r18, r16
    3992:	23 95       	inc	r18
    3994:	02 2f       	mov	r16, r18
    3996:	7a 33       	cpi	r23, 0x3A	; 58
    3998:	28 f0       	brcs	.+10     	; 0x39a4 <__ftoa_engine+0x154>
    399a:	79 e3       	ldi	r23, 0x39	; 57
    399c:	7d 93       	st	X+, r23
    399e:	2a 95       	dec	r18
    39a0:	e9 f7       	brne	.-6      	; 0x399c <__ftoa_engine+0x14c>
    39a2:	10 c0       	rjmp	.+32     	; 0x39c4 <__ftoa_engine+0x174>
    39a4:	7d 93       	st	X+, r23
    39a6:	2a 95       	dec	r18
    39a8:	89 f6       	brne	.-94     	; 0x394c <__ftoa_engine+0xfc>
    39aa:	06 94       	lsr	r0
    39ac:	97 95       	ror	r25
    39ae:	67 95       	ror	r22
    39b0:	37 95       	ror	r19
    39b2:	17 95       	ror	r17
    39b4:	17 94       	ror	r1
    39b6:	e1 18       	sub	r14, r1
    39b8:	f1 0a       	sbc	r15, r17
    39ba:	43 0b       	sbc	r20, r19
    39bc:	56 0b       	sbc	r21, r22
    39be:	c9 0b       	sbc	r28, r25
    39c0:	d0 09       	sbc	r29, r0
    39c2:	98 f0       	brcs	.+38     	; 0x39ea <__ftoa_engine+0x19a>
    39c4:	23 95       	inc	r18
    39c6:	7e 91       	ld	r23, -X
    39c8:	73 95       	inc	r23
    39ca:	7a 33       	cpi	r23, 0x3A	; 58
    39cc:	08 f0       	brcs	.+2      	; 0x39d0 <__ftoa_engine+0x180>
    39ce:	70 e3       	ldi	r23, 0x30	; 48
    39d0:	7c 93       	st	X, r23
    39d2:	20 13       	cpse	r18, r16
    39d4:	b8 f7       	brcc	.-18     	; 0x39c4 <__ftoa_engine+0x174>
    39d6:	7e 91       	ld	r23, -X
    39d8:	70 61       	ori	r23, 0x10	; 16
    39da:	7d 93       	st	X+, r23
    39dc:	30 f0       	brcs	.+12     	; 0x39ea <__ftoa_engine+0x19a>
    39de:	83 95       	inc	r24
    39e0:	71 e3       	ldi	r23, 0x31	; 49
    39e2:	7d 93       	st	X+, r23
    39e4:	70 e3       	ldi	r23, 0x30	; 48
    39e6:	2a 95       	dec	r18
    39e8:	e1 f7       	brne	.-8      	; 0x39e2 <__ftoa_engine+0x192>
    39ea:	11 24       	eor	r1, r1
    39ec:	ef 90       	pop	r14
    39ee:	ff 90       	pop	r15
    39f0:	0f 91       	pop	r16
    39f2:	1f 91       	pop	r17
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	99 27       	eor	r25, r25
    39fa:	87 fd       	sbrc	r24, 7
    39fc:	90 95       	com	r25
    39fe:	08 95       	ret

00003a00 <isspace>:
    3a00:	91 11       	cpse	r25, r1
    3a02:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__ctype_isfalse>
    3a06:	80 32       	cpi	r24, 0x20	; 32
    3a08:	19 f0       	breq	.+6      	; 0x3a10 <isspace+0x10>
    3a0a:	89 50       	subi	r24, 0x09	; 9
    3a0c:	85 50       	subi	r24, 0x05	; 5
    3a0e:	c8 f7       	brcc	.-14     	; 0x3a02 <isspace+0x2>
    3a10:	08 95       	ret

00003a12 <strncasecmp_P>:
    3a12:	fb 01       	movw	r30, r22
    3a14:	dc 01       	movw	r26, r24
    3a16:	41 50       	subi	r20, 0x01	; 1
    3a18:	50 40       	sbci	r21, 0x00	; 0
    3a1a:	88 f0       	brcs	.+34     	; 0x3a3e <strncasecmp_P+0x2c>
    3a1c:	8d 91       	ld	r24, X+
    3a1e:	81 34       	cpi	r24, 0x41	; 65
    3a20:	1c f0       	brlt	.+6      	; 0x3a28 <strncasecmp_P+0x16>
    3a22:	8b 35       	cpi	r24, 0x5B	; 91
    3a24:	0c f4       	brge	.+2      	; 0x3a28 <strncasecmp_P+0x16>
    3a26:	80 5e       	subi	r24, 0xE0	; 224
    3a28:	65 91       	lpm	r22, Z+
    3a2a:	61 34       	cpi	r22, 0x41	; 65
    3a2c:	1c f0       	brlt	.+6      	; 0x3a34 <strncasecmp_P+0x22>
    3a2e:	6b 35       	cpi	r22, 0x5B	; 91
    3a30:	0c f4       	brge	.+2      	; 0x3a34 <strncasecmp_P+0x22>
    3a32:	60 5e       	subi	r22, 0xE0	; 224
    3a34:	86 1b       	sub	r24, r22
    3a36:	61 11       	cpse	r22, r1
    3a38:	71 f3       	breq	.-36     	; 0x3a16 <strncasecmp_P+0x4>
    3a3a:	99 0b       	sbc	r25, r25
    3a3c:	08 95       	ret
    3a3e:	88 1b       	sub	r24, r24
    3a40:	fc cf       	rjmp	.-8      	; 0x3a3a <strncasecmp_P+0x28>

00003a42 <strnlen_P>:
    3a42:	fc 01       	movw	r30, r24
    3a44:	05 90       	lpm	r0, Z+
    3a46:	61 50       	subi	r22, 0x01	; 1
    3a48:	70 40       	sbci	r23, 0x00	; 0
    3a4a:	01 10       	cpse	r0, r1
    3a4c:	d8 f7       	brcc	.-10     	; 0x3a44 <strnlen_P+0x2>
    3a4e:	80 95       	com	r24
    3a50:	90 95       	com	r25
    3a52:	8e 0f       	add	r24, r30
    3a54:	9f 1f       	adc	r25, r31
    3a56:	08 95       	ret

00003a58 <strnlen>:
    3a58:	fc 01       	movw	r30, r24
    3a5a:	61 50       	subi	r22, 0x01	; 1
    3a5c:	70 40       	sbci	r23, 0x00	; 0
    3a5e:	01 90       	ld	r0, Z+
    3a60:	01 10       	cpse	r0, r1
    3a62:	d8 f7       	brcc	.-10     	; 0x3a5a <strnlen+0x2>
    3a64:	80 95       	com	r24
    3a66:	90 95       	com	r25
    3a68:	8e 0f       	add	r24, r30
    3a6a:	9f 1f       	adc	r25, r31
    3a6c:	08 95       	ret

00003a6e <fputc>:
    3a6e:	0f 93       	push	r16
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	fb 01       	movw	r30, r22
    3a78:	23 81       	ldd	r18, Z+3	; 0x03
    3a7a:	21 fd       	sbrc	r18, 1
    3a7c:	03 c0       	rjmp	.+6      	; 0x3a84 <fputc+0x16>
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	2c c0       	rjmp	.+88     	; 0x3adc <fputc+0x6e>
    3a84:	22 ff       	sbrs	r18, 2
    3a86:	16 c0       	rjmp	.+44     	; 0x3ab4 <fputc+0x46>
    3a88:	46 81       	ldd	r20, Z+6	; 0x06
    3a8a:	57 81       	ldd	r21, Z+7	; 0x07
    3a8c:	24 81       	ldd	r18, Z+4	; 0x04
    3a8e:	35 81       	ldd	r19, Z+5	; 0x05
    3a90:	42 17       	cp	r20, r18
    3a92:	53 07       	cpc	r21, r19
    3a94:	44 f4       	brge	.+16     	; 0x3aa6 <fputc+0x38>
    3a96:	a0 81       	ld	r26, Z
    3a98:	b1 81       	ldd	r27, Z+1	; 0x01
    3a9a:	9d 01       	movw	r18, r26
    3a9c:	2f 5f       	subi	r18, 0xFF	; 255
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	31 83       	std	Z+1, r19	; 0x01
    3aa2:	20 83       	st	Z, r18
    3aa4:	8c 93       	st	X, r24
    3aa6:	26 81       	ldd	r18, Z+6	; 0x06
    3aa8:	37 81       	ldd	r19, Z+7	; 0x07
    3aaa:	2f 5f       	subi	r18, 0xFF	; 255
    3aac:	3f 4f       	sbci	r19, 0xFF	; 255
    3aae:	37 83       	std	Z+7, r19	; 0x07
    3ab0:	26 83       	std	Z+6, r18	; 0x06
    3ab2:	14 c0       	rjmp	.+40     	; 0x3adc <fputc+0x6e>
    3ab4:	8b 01       	movw	r16, r22
    3ab6:	ec 01       	movw	r28, r24
    3ab8:	fb 01       	movw	r30, r22
    3aba:	00 84       	ldd	r0, Z+8	; 0x08
    3abc:	f1 85       	ldd	r31, Z+9	; 0x09
    3abe:	e0 2d       	mov	r30, r0
    3ac0:	09 95       	icall
    3ac2:	89 2b       	or	r24, r25
    3ac4:	e1 f6       	brne	.-72     	; 0x3a7e <fputc+0x10>
    3ac6:	d8 01       	movw	r26, r16
    3ac8:	16 96       	adiw	r26, 0x06	; 6
    3aca:	8d 91       	ld	r24, X+
    3acc:	9c 91       	ld	r25, X
    3ace:	17 97       	sbiw	r26, 0x07	; 7
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	17 96       	adiw	r26, 0x07	; 7
    3ad4:	9c 93       	st	X, r25
    3ad6:	8e 93       	st	-X, r24
    3ad8:	16 97       	sbiw	r26, 0x06	; 6
    3ada:	ce 01       	movw	r24, r28
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	08 95       	ret

00003ae6 <__ultoa_invert>:
    3ae6:	fa 01       	movw	r30, r20
    3ae8:	aa 27       	eor	r26, r26
    3aea:	28 30       	cpi	r18, 0x08	; 8
    3aec:	51 f1       	breq	.+84     	; 0x3b42 <__ultoa_invert+0x5c>
    3aee:	20 31       	cpi	r18, 0x10	; 16
    3af0:	81 f1       	breq	.+96     	; 0x3b52 <__ultoa_invert+0x6c>
    3af2:	e8 94       	clt
    3af4:	6f 93       	push	r22
    3af6:	6e 7f       	andi	r22, 0xFE	; 254
    3af8:	6e 5f       	subi	r22, 0xFE	; 254
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	8f 4f       	sbci	r24, 0xFF	; 255
    3afe:	9f 4f       	sbci	r25, 0xFF	; 255
    3b00:	af 4f       	sbci	r26, 0xFF	; 255
    3b02:	b1 e0       	ldi	r27, 0x01	; 1
    3b04:	3e d0       	rcall	.+124    	; 0x3b82 <__ultoa_invert+0x9c>
    3b06:	b4 e0       	ldi	r27, 0x04	; 4
    3b08:	3c d0       	rcall	.+120    	; 0x3b82 <__ultoa_invert+0x9c>
    3b0a:	67 0f       	add	r22, r23
    3b0c:	78 1f       	adc	r23, r24
    3b0e:	89 1f       	adc	r24, r25
    3b10:	9a 1f       	adc	r25, r26
    3b12:	a1 1d       	adc	r26, r1
    3b14:	68 0f       	add	r22, r24
    3b16:	79 1f       	adc	r23, r25
    3b18:	8a 1f       	adc	r24, r26
    3b1a:	91 1d       	adc	r25, r1
    3b1c:	a1 1d       	adc	r26, r1
    3b1e:	6a 0f       	add	r22, r26
    3b20:	71 1d       	adc	r23, r1
    3b22:	81 1d       	adc	r24, r1
    3b24:	91 1d       	adc	r25, r1
    3b26:	a1 1d       	adc	r26, r1
    3b28:	20 d0       	rcall	.+64     	; 0x3b6a <__ultoa_invert+0x84>
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__ultoa_invert+0x48>
    3b2c:	68 94       	set
    3b2e:	3f 91       	pop	r19
    3b30:	2a e0       	ldi	r18, 0x0A	; 10
    3b32:	26 9f       	mul	r18, r22
    3b34:	11 24       	eor	r1, r1
    3b36:	30 19       	sub	r19, r0
    3b38:	30 5d       	subi	r19, 0xD0	; 208
    3b3a:	31 93       	st	Z+, r19
    3b3c:	de f6       	brtc	.-74     	; 0x3af4 <__ultoa_invert+0xe>
    3b3e:	cf 01       	movw	r24, r30
    3b40:	08 95       	ret
    3b42:	46 2f       	mov	r20, r22
    3b44:	47 70       	andi	r20, 0x07	; 7
    3b46:	40 5d       	subi	r20, 0xD0	; 208
    3b48:	41 93       	st	Z+, r20
    3b4a:	b3 e0       	ldi	r27, 0x03	; 3
    3b4c:	0f d0       	rcall	.+30     	; 0x3b6c <__ultoa_invert+0x86>
    3b4e:	c9 f7       	brne	.-14     	; 0x3b42 <__ultoa_invert+0x5c>
    3b50:	f6 cf       	rjmp	.-20     	; 0x3b3e <__ultoa_invert+0x58>
    3b52:	46 2f       	mov	r20, r22
    3b54:	4f 70       	andi	r20, 0x0F	; 15
    3b56:	40 5d       	subi	r20, 0xD0	; 208
    3b58:	4a 33       	cpi	r20, 0x3A	; 58
    3b5a:	18 f0       	brcs	.+6      	; 0x3b62 <__ultoa_invert+0x7c>
    3b5c:	49 5d       	subi	r20, 0xD9	; 217
    3b5e:	31 fd       	sbrc	r19, 1
    3b60:	40 52       	subi	r20, 0x20	; 32
    3b62:	41 93       	st	Z+, r20
    3b64:	02 d0       	rcall	.+4      	; 0x3b6a <__ultoa_invert+0x84>
    3b66:	a9 f7       	brne	.-22     	; 0x3b52 <__ultoa_invert+0x6c>
    3b68:	ea cf       	rjmp	.-44     	; 0x3b3e <__ultoa_invert+0x58>
    3b6a:	b4 e0       	ldi	r27, 0x04	; 4
    3b6c:	a6 95       	lsr	r26
    3b6e:	97 95       	ror	r25
    3b70:	87 95       	ror	r24
    3b72:	77 95       	ror	r23
    3b74:	67 95       	ror	r22
    3b76:	ba 95       	dec	r27
    3b78:	c9 f7       	brne	.-14     	; 0x3b6c <__ultoa_invert+0x86>
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	61 05       	cpc	r22, r1
    3b7e:	71 05       	cpc	r23, r1
    3b80:	08 95       	ret
    3b82:	9b 01       	movw	r18, r22
    3b84:	ac 01       	movw	r20, r24
    3b86:	0a 2e       	mov	r0, r26
    3b88:	06 94       	lsr	r0
    3b8a:	57 95       	ror	r21
    3b8c:	47 95       	ror	r20
    3b8e:	37 95       	ror	r19
    3b90:	27 95       	ror	r18
    3b92:	ba 95       	dec	r27
    3b94:	c9 f7       	brne	.-14     	; 0x3b88 <__ultoa_invert+0xa2>
    3b96:	62 0f       	add	r22, r18
    3b98:	73 1f       	adc	r23, r19
    3b9a:	84 1f       	adc	r24, r20
    3b9c:	95 1f       	adc	r25, r21
    3b9e:	a0 1d       	adc	r26, r0
    3ba0:	08 95       	ret

00003ba2 <__ctype_isfalse>:
    3ba2:	99 27       	eor	r25, r25
    3ba4:	88 27       	eor	r24, r24

00003ba6 <__ctype_istrue>:
    3ba6:	08 95       	ret

00003ba8 <__prologue_saves__>:
    3ba8:	2f 92       	push	r2
    3baa:	3f 92       	push	r3
    3bac:	4f 92       	push	r4
    3bae:	5f 92       	push	r5
    3bb0:	6f 92       	push	r6
    3bb2:	7f 92       	push	r7
    3bb4:	8f 92       	push	r8
    3bb6:	9f 92       	push	r9
    3bb8:	af 92       	push	r10
    3bba:	bf 92       	push	r11
    3bbc:	cf 92       	push	r12
    3bbe:	df 92       	push	r13
    3bc0:	ef 92       	push	r14
    3bc2:	ff 92       	push	r15
    3bc4:	0f 93       	push	r16
    3bc6:	1f 93       	push	r17
    3bc8:	cf 93       	push	r28
    3bca:	df 93       	push	r29
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	ca 1b       	sub	r28, r26
    3bd2:	db 0b       	sbc	r29, r27
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	de bf       	out	0x3e, r29	; 62
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	09 94       	ijmp

00003be0 <__epilogue_restores__>:
    3be0:	2a 88       	ldd	r2, Y+18	; 0x12
    3be2:	39 88       	ldd	r3, Y+17	; 0x11
    3be4:	48 88       	ldd	r4, Y+16	; 0x10
    3be6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bea:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bec:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bee:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bf2:	b9 84       	ldd	r11, Y+9	; 0x09
    3bf4:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf6:	df 80       	ldd	r13, Y+7	; 0x07
    3bf8:	ee 80       	ldd	r14, Y+6	; 0x06
    3bfa:	fd 80       	ldd	r15, Y+5	; 0x05
    3bfc:	0c 81       	ldd	r16, Y+4	; 0x04
    3bfe:	1b 81       	ldd	r17, Y+3	; 0x03
    3c00:	aa 81       	ldd	r26, Y+2	; 0x02
    3c02:	b9 81       	ldd	r27, Y+1	; 0x01
    3c04:	ce 0f       	add	r28, r30
    3c06:	d1 1d       	adc	r29, r1
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	ed 01       	movw	r28, r26
    3c14:	08 95       	ret

00003c16 <_exit>:
    3c16:	f8 94       	cli

00003c18 <__stop_program>:
    3c18:	ff cf       	rjmp	.-2      	; 0x3c18 <__stop_program>

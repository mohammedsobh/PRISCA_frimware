
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00003b5a  00003bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013d  00800140  00800140  00003cce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000329b  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f27  00000000  00000000  000071d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015bb  00000000  00000000  000080fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  000096b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ec  00000000  00000000  00009c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184f  00000000  00000000  0000a424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000bc73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x2c8>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x1d0>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ea e5       	ldi	r30, 0x5A	; 90
     216:	fb e3       	ldi	r31, 0x3B	; 59
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a0 34       	cpi	r26, 0x40	; 64
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	a0 e4       	ldi	r26, 0x40	; 64
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ad 37       	cpi	r26, 0x7D	; 125
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
     238:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Vo+0x1>
     2f4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     334:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <R2>
     338:	70 93 90 01 	sts	0x0190, r23	; 0x800190 <R2+0x1>
     33c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <R2+0x2>
     340:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <logR2>
     350:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <logR2+0x1>
     354:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <logR2+0x2>
     358:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
     3cc:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <T>
     3d0:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <T+0x1>
     3d4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <T+0x2>
     3d8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
     3e8:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <Tc>
     3ec:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <Tc+0x1>
     3f0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <Tc+0x2>
     3f4:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	2a 97       	sbiw	r28, 0x0a	; 10
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	ac 01       	movw	r20, r24
     424:	fe 01       	movw	r30, r28
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     42c:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     42e:	8e 17       	cp	r24, r30
     430:	9f 07       	cpc	r25, r31
     432:	e1 f7       	brne	.-8      	; 0x42c <get_value+0x22>
     434:	a0 e0       	ldi	r26, 0x00	; 0
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(i<80)
	{
		if (String [i] == ch){
     43c:	fa 01       	movw	r30, r20
     43e:	e2 0f       	add	r30, r18
     440:	f3 1f       	adc	r31, r19
     442:	90 81       	ld	r25, Z
     444:	96 13       	cpse	r25, r22
     446:	18 c0       	rjmp	.+48     	; 0x478 <__stack+0x19>
			v [j] = String[j+i+1];
     448:	f9 01       	movw	r30, r18
     44a:	ea 0f       	add	r30, r26
     44c:	fb 1f       	adc	r31, r27
     44e:	8f 01       	movw	r16, r30
     450:	04 0f       	add	r16, r20
     452:	15 1f       	adc	r17, r21
     454:	f8 01       	movw	r30, r16
     456:	71 81       	ldd	r23, Z+1	; 0x01
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8c 0f       	add	r24, r28
     45e:	9d 1f       	adc	r25, r29
     460:	8a 0f       	add	r24, r26
     462:	9b 1f       	adc	r25, r27
     464:	fc 01       	movw	r30, r24
     466:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     468:	f8 01       	movw	r30, r16
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	80 32       	cpi	r24, 0x20	; 32
     46e:	49 f0       	breq	.+18     	; 0x482 <__stack+0x23>
     470:	8d 30       	cpi	r24, 0x0D	; 13
     472:	39 f0       	breq	.+14     	; 0x482 <__stack+0x23>
			break;
			j++;
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x1d>
		}
		else
			i++;
     478:	2f 5f       	subi	r18, 0xFF	; 255
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i<80)
     47c:	20 35       	cpi	r18, 0x50	; 80
     47e:	31 05       	cpc	r19, r1
     480:	ec f2       	brlt	.-70     	; 0x43c <get_value+0x32>
			j++;
		}
		else
			i++;
	}
	return (atof(v));
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
}
     48a:	2a 96       	adiw	r28, 0x0a	; 10
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <get_int>:
int get_int (char* String,char ch)
{
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	2a 97       	sbiw	r28, 0x0a	; 10
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	ac 01       	movw	r20, r24
     4ba:	fe 01       	movw	r30, r28
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	ce 01       	movw	r24, r28
     4c0:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     4c2:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     4c4:	e8 17       	cp	r30, r24
     4c6:	f9 07       	cpc	r31, r25
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <get_int+0x22>
     4ca:	00 e0       	ldi	r16, 0x00	; 0
     4cc:	10 e0       	ldi	r17, 0x00	; 0
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     4d2:	fa 01       	movw	r30, r20
     4d4:	e2 0f       	add	r30, r18
     4d6:	f3 1f       	adc	r31, r19
     4d8:	90 81       	ld	r25, Z
     4da:	96 13       	cpse	r25, r22
     4dc:	15 c0       	rjmp	.+42     	; 0x508 <get_int+0x68>
			v [j] = String[j+i+1];
     4de:	f9 01       	movw	r30, r18
     4e0:	e0 0f       	add	r30, r16
     4e2:	f1 1f       	adc	r31, r17
     4e4:	e4 0f       	add	r30, r20
     4e6:	f5 1f       	adc	r31, r21
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	a1 e0       	ldi	r26, 0x01	; 1
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	ac 0f       	add	r26, r28
     4f0:	bd 1f       	adc	r27, r29
     4f2:	a0 0f       	add	r26, r16
     4f4:	b1 1f       	adc	r27, r17
     4f6:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	80 32       	cpi	r24, 0x20	; 32
     4fc:	41 f0       	breq	.+16     	; 0x50e <get_int+0x6e>
     4fe:	8d 30       	cpi	r24, 0x0D	; 13
     500:	31 f0       	breq	.+12     	; 0x50e <get_int+0x6e>
			break;
			j++;
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	e5 cf       	rjmp	.-54     	; 0x4d2 <get_int+0x32>
		}
		else
			i++;
     508:	2f 5f       	subi	r18, 0xFF	; 255
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	e2 cf       	rjmp	.-60     	; 0x4d2 <get_int+0x32>
	}
	return (atoi(v));
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	0e 94 f7 16 	call	0x2dee	; 0x2dee <atoi>
}
     516:	2a 96       	adiw	r28, 0x0a	; 10
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <find>:
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     52c:	fc 01       	movw	r30, r24
     52e:	20 81       	ld	r18, Z
     530:	62 17       	cp	r22, r18
     532:	59 f0       	breq	.+22     	; 0x54a <find+0x1e>
			f = 1;
			break;
		}
		else if (String [i] == '\r')
     534:	2d 30       	cpi	r18, 0x0D	; 13
     536:	59 f0       	breq	.+22     	; 0x54e <find+0x22>
     538:	31 96       	adiw	r30, 0x01	; 1
     53a:	02 c0       	rjmp	.+4      	; 0x540 <find+0x14>
     53c:	9d 30       	cpi	r25, 0x0D	; 13
     53e:	49 f0       	breq	.+18     	; 0x552 <find+0x26>
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     540:	91 91       	ld	r25, Z+
     542:	96 13       	cpse	r25, r22
     544:	fb cf       	rjmp	.-10     	; 0x53c <find+0x10>
			f = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	08 95       	ret
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	08 95       	ret
     552:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     554:	08 95       	ret

00000556 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	6a 01       	movw	r12, r20
     566:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     568:	28 81       	ld	r18, Y
     56a:	39 81       	ldd	r19, Y+1	; 0x01
     56c:	4a 81       	ldd	r20, Y+2	; 0x02
     56e:	5b 81       	ldd	r21, Y+3	; 0x03
     570:	c7 01       	movw	r24, r14
     572:	b6 01       	movw	r22, r12
     574:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
    *current_pos = new_pos;
     578:	c8 82       	st	Y, r12
     57a:	d9 82       	std	Y+1, r13	; 0x01
     57c:	ea 82       	std	Y+2, r14	; 0x02
     57e:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	08 95       	ret

0000058e <pin_direction>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     58e:	41 11       	cpse	r20, r1
     590:	0d c0       	rjmp	.+26     	; 0x5ac <pin_direction+0x1e>
     592:	e8 2f       	mov	r30, r24
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	21 81       	ldd	r18, Z+1	; 0x01
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <pin_direction+0x14>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	6a 95       	dec	r22
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <pin_direction+0x10>
     5a6:	82 2b       	or	r24, r18
     5a8:	81 83       	std	Z+1, r24	; 0x01
     5aa:	08 95       	ret
     5ac:	e8 2f       	mov	r30, r24
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	21 81       	ldd	r18, Z+1	; 0x01
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <pin_direction+0x2e>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	6a 95       	dec	r22
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <pin_direction+0x2a>
     5c0:	80 95       	com	r24
     5c2:	82 23       	and	r24, r18
     5c4:	81 83       	std	Z+1, r24	; 0x01
     5c6:	08 95       	ret

000005c8 <pin_write>:
     5c8:	44 23       	and	r20, r20
     5ca:	69 f0       	breq	.+26     	; 0x5e6 <pin_write+0x1e>
     5cc:	e8 2f       	mov	r30, r24
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	22 81       	ldd	r18, Z+2	; 0x02
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <pin_write+0x14>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <pin_write+0x10>
     5e0:	82 2b       	or	r24, r18
     5e2:	82 83       	std	Z+2, r24	; 0x02
     5e4:	08 95       	ret
     5e6:	e8 2f       	mov	r30, r24
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	22 81       	ldd	r18, Z+2	; 0x02
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <pin_write+0x2e>
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	6a 95       	dec	r22
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <pin_write+0x2a>
     5fa:	80 95       	com	r24
     5fc:	82 23       	and	r24, r18
     5fe:	82 83       	std	Z+2, r24	; 0x02
     600:	08 95       	ret

00000602 <port_direction>:
     602:	61 11       	cpse	r22, r1
     604:	05 c0       	rjmp	.+10     	; 0x610 <port_direction+0xe>
     606:	e8 2f       	mov	r30, r24
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	81 83       	std	Z+1, r24	; 0x01
     60e:	08 95       	ret
     610:	e8 2f       	mov	r30, r24
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	11 82       	std	Z+1, r1	; 0x01
     616:	08 95       	ret

00000618 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     618:	e8 2f       	mov	r30, r24
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	62 83       	std	Z+2, r22	; 0x02
     61e:	08 95       	ret

00000620 <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     620:	e8 2f       	mov	r30, r24
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	82 81       	ldd	r24, Z+2	; 0x02
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <pin_XOR+0x10>
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	6a 95       	dec	r22
     632:	e2 f7       	brpl	.-8      	; 0x62c <pin_XOR+0xc>
     634:	28 27       	eor	r18, r24
     636:	22 83       	std	Z+2, r18	; 0x02
     638:	08 95       	ret

0000063a <Init>:
					break;
			}
		}
	}
}
void Init(void){
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     646:	81 b3       	in	r24, 0x11	; 17
     648:	80 6b       	ori	r24, 0xB0	; 176
     64a:	81 bb       	out	0x11, r24	; 17
	pin_direction (D, 2, input );
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	80 e3       	ldi	r24, 0x30	; 48
     652:	0e 94 c7 02 	call	0x58e	; 0x58e <pin_direction>
	DDRC = 0XFF;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     65a:	8a b3       	in	r24, 0x1a	; 26
     65c:	80 6f       	ori	r24, 0xF0	; 240
     65e:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     660:	87 b3       	in	r24, 0x17	; 23
     662:	83 60       	ori	r24, 0x03	; 3
     664:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     666:	87 e8       	ldi	r24, 0x87	; 135
     668:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     66a:	3e 9a       	sbi	0x07, 6	; 7
	GICR |= 0x40;
     66c:	8b b7       	in	r24, 0x3b	; 59
     66e:	80 64       	ori	r24, 0x40	; 64
     670:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0x11;
     672:	85 b7       	in	r24, 0x35	; 53
     674:	81 61       	ori	r24, 0x11	; 17
     676:	85 bf       	out	0x35, r24	; 53
	UART_INIT();
     678:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <UART_INIT>
	motor_init();
     67c:	0e 94 4f 11 	call	0x229e	; 0x229e <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     680:	0f 2e       	mov	r0, r31
     682:	fb ed       	ldi	r31, 0xDB	; 219
     684:	cf 2e       	mov	r12, r31
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	df 2e       	mov	r13, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	17 e6       	ldi	r17, 0x67	; 103
     68e:	e1 2e       	mov	r14, r17
     690:	16 e6       	ldi	r17, 0x66	; 102
     692:	f1 2e       	mov	r15, r17
     694:	06 ec       	ldi	r16, 0xC6	; 198
     696:	10 e4       	ldi	r17, 0x40	; 64
     698:	a8 01       	movw	r20, r16
     69a:	97 01       	movw	r18, r14
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	88 e7       	ldi	r24, 0x78	; 120
     6a2:	93 e4       	ldi	r25, 0x43	; 67
     6a4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	ff eb       	ldi	r31, 0xBF	; 191
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	a8 01       	movw	r20, r16
     6b6:	97 01       	movw	r18, r14
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	88 e7       	ldi	r24, 0x78	; 120
     6be:	93 e4       	ldi	r25, 0x43	; 67
     6c0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <Pid_init>
	/*set fast PWM mode with non-inverted output*/
	cli();
     6c4:	f8 94       	cli
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     6c6:	8f b5       	in	r24, 0x2f	; 47
     6c8:	81 6a       	ori	r24, 0xA1	; 161
     6ca:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     6cc:	8e b5       	in	r24, 0x2e	; 46
     6ce:	81 64       	ori	r24, 0x41	; 65
     6d0:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     6d2:	85 b5       	in	r24, 0x25	; 37
     6d4:	8e 66       	ori	r24, 0x6E	; 110
     6d6:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     6d8:	83 b7       	in	r24, 0x33	; 51
     6da:	81 68       	ori	r24, 0x81	; 129
     6dc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     6de:	89 b7       	in	r24, 0x39	; 57
     6e0:	81 60       	ori	r24, 0x01	; 1
     6e2:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     6e4:	12 be       	out	0x32, r1	; 50
	sei();
     6e6:	78 94       	sei

}
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	08 95       	ret

000006f6 <main>:
double R	= 0.00;		//variable to store the radius of circular motion
long wait	= 0;		//variable to store the time that the printer is sleep
int val		= 0;		//variable to store the number of control gcode
int SUBval	= 0;		//variable to store the number of control gcode for some codes
int main(void)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	ea 97       	sbiw	r28, 0x3a	; 58
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
    Init();
     70a:	0e 94 1d 03 	call	0x63a	; 0x63a <Init>
	double value_1;
	double value_2;
	double value_3;
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     70e:	45 e0       	ldi	r20, 0x05	; 5
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	69 e0       	ldi	r22, 0x09	; 9
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     71e:	45 e0       	ldi	r20, 0x05	; 5
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	6b ef       	ldi	r22, 0xFB	; 251
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	85 e0       	ldi	r24, 0x05	; 5
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     72e:	45 e0       	ldi	r20, 0x05	; 5
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	67 e6       	ldi	r22, 0x67	; 103
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	8a e0       	ldi	r24, 0x0A	; 10
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     73e:	45 e0       	ldi	r20, 0x05	; 5
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	65 eb       	ldi	r22, 0xB5	; 181
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	8f e0       	ldi	r24, 0x0F	; 15
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
     756:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <Xspm>
     75a:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <Xspm+0x1>
     75e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <Xspm+0x2>
     762:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <Xspm+0x3>
	Yspm = atof(Y_pos);
     766:	8b ef       	ldi	r24, 0xFB	; 251
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
     76e:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <Yspm>
     772:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <Yspm+0x1>
     776:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Yspm+0x2>
     77a:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <Yspm+0x3>
	Zspm = atof(Z_pos);
     77e:	87 e6       	ldi	r24, 0x67	; 103
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
     786:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <Zspm>
     78a:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <Zspm+0x1>
     78e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Zspm+0x2>
     792:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Zspm+0x3>
	Espm = atof(E_pos);
     796:	85 eb       	ldi	r24, 0xB5	; 181
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
     79e:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <Espm>
     7a2:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <Espm+0x1>
     7a6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Espm+0x2>
     7aa:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <Espm+0x3>
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f3 e6       	ldi	r31, 0x63	; 99
     7b2:	6f 2e       	mov	r6, r31
     7b4:	f2 e0       	ldi	r31, 0x02	; 2
     7b6:	7f 2e       	mov	r7, r31
     7b8:	f0 2d       	mov	r31, r0
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
     7ba:	27 e9       	ldi	r18, 0x97	; 151
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	29 af       	std	Y+57, r18	; 0x39
     7c0:	3a af       	std	Y+58, r19	; 0x3a
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	/****************************************************/
	while (1)
	{
		if (status == 0)
     7c2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <status>
     7c6:	81 11       	cpse	r24, r1
     7c8:	0a c0       	rjmp	.+20     	; 0x7de <main+0xe8>
     7ca:	e3 e1       	ldi	r30, 0x13	; 19
     7cc:	f2 e0       	ldi	r31, 0x02	; 2
		{
			for (int i = 0 ; i < 80 ;i++)
			{
		 		String [i] = 0;
     7ce:	11 92       	st	Z+, r1
	/****************************************************/
	while (1)
	{
		if (status == 0)
		{
			for (int i = 0 ; i < 80 ;i++)
     7d0:	e6 15       	cp	r30, r6
     7d2:	f7 05       	cpc	r31, r7
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0xd8>
			{
		 		String [i] = 0;
			}
			Recive_Data(String); // receive uart data and store it in variable (string)
     7d6:	83 e1       	ldi	r24, 0x13	; 19
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 ef 12 	call	0x25de	; 0x25de <Recive_Data>
		}
		// this code for run the Gcode depending on codes that in https://docs.google.com/document/d/1-IXL4SPSpeL7-teKqPJBG51-9jkx55wjBWgZDoANAug/edit?usp=sharing&fbclid=IwAR3pC85grjWT5KBqa4N7_nx4Ls8xZIw1vQixjXgDGBRfcvUnp72kgWrgpcQ
		if (String[0] == 'M')
     7de:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <String>
     7e2:	8d 34       	cpi	r24, 0x4D	; 77
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <main+0xf2>
     7e6:	ce c5       	rjmp	.+2972   	; 0x1384 <main+0xc8e>
		{
			val = get_int (String,'M');
     7e8:	6d e4       	ldi	r22, 0x4D	; 77
     7ea:	83 e1       	ldi	r24, 0x13	; 19
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 50 02 	call	0x4a0	; 0x4a0 <get_int>
     7f2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <val+0x1>
     7f6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <val>
			switch (val)
     7fa:	8b 36       	cpi	r24, 0x6B	; 107
     7fc:	91 05       	cpc	r25, r1
     7fe:	09 f4       	brne	.+2      	; 0x802 <main+0x10c>
     800:	aa c2       	rjmp	.+1364   	; 0xd56 <main+0x660>
     802:	74 f5       	brge	.+92     	; 0x860 <main+0x16a>
     804:	83 35       	cpi	r24, 0x53	; 83
     806:	91 05       	cpc	r25, r1
     808:	09 f4       	brne	.+2      	; 0x80c <main+0x116>
     80a:	3b c1       	rjmp	.+630    	; 0xa82 <main+0x38c>
     80c:	94 f4       	brge	.+36     	; 0x832 <main+0x13c>
     80e:	81 31       	cpi	r24, 0x11	; 17
     810:	91 05       	cpc	r25, r1
     812:	09 f4       	brne	.+2      	; 0x816 <main+0x120>
     814:	a0 c0       	rjmp	.+320    	; 0x956 <main+0x260>
     816:	24 f4       	brge	.+8      	; 0x820 <main+0x12a>
     818:	02 97       	sbiw	r24, 0x02	; 2
     81a:	08 f4       	brcc	.+2      	; 0x81e <main+0x128>
     81c:	58 c0       	rjmp	.+176    	; 0x8ce <main+0x1d8>
     81e:	d1 cf       	rjmp	.-94     	; 0x7c2 <main+0xcc>
     820:	82 31       	cpi	r24, 0x12	; 18
     822:	91 05       	cpc	r25, r1
     824:	09 f4       	brne	.+2      	; 0x828 <main+0x132>
     826:	9e c0       	rjmp	.+316    	; 0x964 <main+0x26e>
     828:	82 35       	cpi	r24, 0x52	; 82
     82a:	91 05       	cpc	r25, r1
     82c:	09 f4       	brne	.+2      	; 0x830 <main+0x13a>
     82e:	1c c1       	rjmp	.+568    	; 0xa68 <main+0x372>
     830:	c8 cf       	rjmp	.-112    	; 0x7c2 <main+0xcc>
     832:	88 36       	cpi	r24, 0x68	; 104
     834:	91 05       	cpc	r25, r1
     836:	09 f4       	brne	.+2      	; 0x83a <main+0x144>
     838:	6b c2       	rjmp	.+1238   	; 0xd10 <main+0x61a>
     83a:	4c f4       	brge	.+18     	; 0x84e <main+0x158>
     83c:	84 35       	cpi	r24, 0x54	; 84
     83e:	91 05       	cpc	r25, r1
     840:	09 f4       	brne	.+2      	; 0x844 <main+0x14e>
     842:	90 c0       	rjmp	.+288    	; 0x964 <main+0x26e>
     844:	8c 35       	cpi	r24, 0x5C	; 92
     846:	91 05       	cpc	r25, r1
     848:	09 f4       	brne	.+2      	; 0x84c <main+0x156>
     84a:	4f c1       	rjmp	.+670    	; 0xaea <main+0x3f4>
     84c:	ba cf       	rjmp	.-140    	; 0x7c2 <main+0xcc>
     84e:	89 36       	cpi	r24, 0x69	; 105
     850:	91 05       	cpc	r25, r1
     852:	09 f4       	brne	.+2      	; 0x856 <main+0x160>
     854:	6f c2       	rjmp	.+1246   	; 0xd34 <main+0x63e>
     856:	8a 36       	cpi	r24, 0x6A	; 106
     858:	91 05       	cpc	r25, r1
     85a:	09 f4       	brne	.+2      	; 0x85e <main+0x168>
     85c:	6f c2       	rjmp	.+1246   	; 0xd3c <main+0x646>
     85e:	b1 cf       	rjmp	.-158    	; 0x7c2 <main+0xcc>
     860:	8e 3c       	cpi	r24, 0xCE	; 206
     862:	91 05       	cpc	r25, r1
     864:	09 f4       	brne	.+2      	; 0x868 <main+0x172>
     866:	25 c4       	rjmp	.+2122   	; 0x10b2 <main+0x9bc>
     868:	bc f4       	brge	.+46     	; 0x898 <main+0x1a2>
     86a:	82 37       	cpi	r24, 0x72	; 114
     86c:	91 05       	cpc	r25, r1
     86e:	09 f4       	brne	.+2      	; 0x872 <main+0x17c>
     870:	4f c3       	rjmp	.+1694   	; 0xf10 <main+0x81a>
     872:	4c f4       	brge	.+18     	; 0x886 <main+0x190>
     874:	8d 36       	cpi	r24, 0x6D	; 109
     876:	91 05       	cpc	r25, r1
     878:	09 f4       	brne	.+2      	; 0x87c <main+0x186>
     87a:	73 c2       	rjmp	.+1254   	; 0xd62 <main+0x66c>
     87c:	80 37       	cpi	r24, 0x70	; 112
     87e:	91 05       	cpc	r25, r1
     880:	09 f4       	brne	.+2      	; 0x884 <main+0x18e>
     882:	ba c2       	rjmp	.+1396   	; 0xdf8 <main+0x702>
     884:	9e cf       	rjmp	.-196    	; 0x7c2 <main+0xcc>
     886:	8c 38       	cpi	r24, 0x8C	; 140
     888:	91 05       	cpc	r25, r1
     88a:	09 f4       	brne	.+2      	; 0x88e <main+0x198>
     88c:	d7 c3       	rjmp	.+1966   	; 0x103c <main+0x946>
     88e:	8e 3b       	cpi	r24, 0xBE	; 190
     890:	91 05       	cpc	r25, r1
     892:	09 f4       	brne	.+2      	; 0x896 <main+0x1a0>
     894:	e8 c3       	rjmp	.+2000   	; 0x1066 <main+0x970>
     896:	95 cf       	rjmp	.-214    	; 0x7c2 <main+0xcc>
     898:	85 3f       	cpi	r24, 0xF5	; 245
     89a:	51 e0       	ldi	r21, 0x01	; 1
     89c:	95 07       	cpc	r25, r21
     89e:	09 f4       	brne	.+2      	; 0x8a2 <main+0x1ac>
     8a0:	45 c4       	rjmp	.+2186   	; 0x112c <main+0xa36>
     8a2:	5c f4       	brge	.+22     	; 0x8ba <main+0x1c4>
     8a4:	8e 32       	cpi	r24, 0x2E	; 46
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	97 07       	cpc	r25, r23
     8aa:	09 f4       	brne	.+2      	; 0x8ae <main+0x1b8>
     8ac:	22 c4       	rjmp	.+2116   	; 0x10f2 <main+0x9fc>
     8ae:	84 3f       	cpi	r24, 0xF4	; 244
     8b0:	a1 e0       	ldi	r26, 0x01	; 1
     8b2:	9a 07       	cpc	r25, r26
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <main+0x1c2>
     8b6:	19 c1       	rjmp	.+562    	; 0xaea <main+0x3f4>
     8b8:	84 cf       	rjmp	.-248    	; 0x7c2 <main+0xcc>
     8ba:	86 3f       	cpi	r24, 0xF6	; 246
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	9b 07       	cpc	r25, r27
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <main+0x1ce>
     8c2:	13 c1       	rjmp	.+550    	; 0xaea <main+0x3f4>
     8c4:	87 3f       	cpi	r24, 0xF7	; 247
     8c6:	91 40       	sbci	r25, 0x01	; 1
     8c8:	09 f4       	brne	.+2      	; 0x8cc <main+0x1d6>
     8ca:	85 c4       	rjmp	.+2314   	; 0x11d6 <main+0xae0>
     8cc:	7a cf       	rjmp	.-268    	; 0x7c2 <main+0xcc>
			{
				case 0: case 1:
					STEP[0] = 0;
     8ce:	a7 e9       	ldi	r26, 0x97	; 151
     8d0:	b1 e0       	ldi	r27, 0x01	; 1
     8d2:	1d 92       	st	X+, r1
     8d4:	1d 92       	st	X+, r1
     8d6:	1d 92       	st	X+, r1
     8d8:	1c 92       	st	X, r1
     8da:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     8dc:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <STEP+0x4>
     8e0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <STEP+0x5>
     8e4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <STEP+0x6>
     8e8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <STEP+0x7>
					STEP[2] = 0;
     8ec:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <STEP+0x8>
     8f0:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <STEP+0x9>
     8f4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <STEP+0xa>
     8f8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <STEP+0xb>
					STEP[3] = 0;
     8fc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <STEP+0xc>
     900:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <STEP+0xd>
     904:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <STEP+0xe>
     908:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <STEP+0xf>
					F = 0;
     90c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <F>
     910:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <F+0x1>
     914:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <F+0x2>
     918:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <F+0x3>
					Fe = 0;
     91c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <Fe>
     920:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <Fe+0x1>
     924:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Fe+0x2>
     928:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Fe+0x3>
					SE0 = 0.0;
     92c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <SE0>
     930:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <SE0+0x1>
     934:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <SE0+0x2>
     938:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <SE0+0x3>
					SB = 0.0;
     93c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <SB>
     940:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <SB+0x1>
     944:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <SB+0x2>
     948:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <SB+0x3>
					Transmit_Data("ok");
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     954:	36 cf       	rjmp	.-404    	; 0x7c2 <main+0xcc>
				case 17:
					motor_init();
     956:	0e 94 4f 11 	call	0x229e	; 0x229e <motor_init>
					Transmit_Data("ok");
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     962:	2f cf       	rjmp	.-418    	; 0x7c2 <main+0xcc>
				case 18: case 84:
					wait = (get_int(String ,'S')*1000);
     964:	63 e5       	ldi	r22, 0x53	; 83
     966:	83 e1       	ldi	r24, 0x13	; 19
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <get_int>
     96e:	fc 01       	movw	r30, r24
     970:	28 ee       	ldi	r18, 0xE8	; 232
     972:	33 e0       	ldi	r19, 0x03	; 3
     974:	e2 9f       	mul	r30, r18
     976:	c0 01       	movw	r24, r0
     978:	e3 9f       	mul	r30, r19
     97a:	90 0d       	add	r25, r0
     97c:	f2 9f       	mul	r31, r18
     97e:	90 0d       	add	r25, r0
     980:	11 24       	eor	r1, r1
     982:	09 2e       	mov	r0, r25
     984:	00 0c       	add	r0, r0
     986:	aa 0b       	sbc	r26, r26
     988:	bb 0b       	sbc	r27, r27
     98a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <wait>
     98e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <wait+0x1>
     992:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <wait+0x2>
     996:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <wait+0x3>
					status = 1;
     99a:	31 e0       	ldi	r19, 0x01	; 1
     99c:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <status>
					XEN_DES = find(String ,'X');
     9a0:	68 e5       	ldi	r22, 0x58	; 88
     9a2:	83 e1       	ldi	r24, 0x13	; 19
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 96 02 	call	0x52c	; 0x52c <find>
     9aa:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <XEN_DES>
					YEN_DES = find(String ,'Y');
     9ae:	69 e5       	ldi	r22, 0x59	; 89
     9b0:	83 e1       	ldi	r24, 0x13	; 19
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 96 02 	call	0x52c	; 0x52c <find>
     9b8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <YEN_DES>
					ZEN_DES = find(String ,'Z');
     9bc:	6a e5       	ldi	r22, 0x5A	; 90
     9be:	83 e1       	ldi	r24, 0x13	; 19
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 96 02 	call	0x52c	; 0x52c <find>
     9c6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ZEN_DES>
					EEN_DES = find(String ,'E');
     9ca:	65 e4       	ldi	r22, 0x45	; 69
     9cc:	83 e1       	ldi	r24, 0x13	; 19
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 96 02 	call	0x52c	; 0x52c <find>
     9d4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     9d8:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <XEN_DES>
     9dc:	88 e5       	ldi	r24, 0x58	; 88
     9de:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     9e2:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <YEN_DES>
     9e6:	89 e5       	ldi	r24, 0x59	; 89
     9e8:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     9ec:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <YEN_DES>
     9f0:	8a e5       	ldi	r24, 0x5A	; 90
     9f2:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     9f6:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <EEN_DES>
     9fa:	85 e4       	ldi	r24, 0x45	; 69
     9fc:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
					if(wait != 0)
     a00:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <wait>
     a04:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <wait+0x1>
     a08:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <wait+0x2>
     a0c:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <wait+0x3>
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	a1 05       	cpc	r26, r1
     a14:	b1 05       	cpc	r27, r1
     a16:	09 f1       	breq	.+66     	; 0xa5a <main+0x364>
					{
						while(wait > 0)
     a18:	f4 f0       	brlt	.+60     	; 0xa56 <main+0x360>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1a:	8f e9       	ldi	r24, 0x9F	; 159
     a1c:	9f e0       	ldi	r25, 0x0F	; 15
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <main+0x328>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x32e>
     a24:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     a26:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <wait>
     a2a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <wait+0x1>
     a2e:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <wait+0x2>
     a32:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <wait+0x3>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	a1 09       	sbc	r26, r1
     a3a:	b1 09       	sbc	r27, r1
     a3c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <wait>
     a40:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <wait+0x1>
     a44:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <wait+0x2>
     a48:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     a4c:	18 16       	cp	r1, r24
     a4e:	19 06       	cpc	r1, r25
     a50:	1a 06       	cpc	r1, r26
     a52:	1b 06       	cpc	r1, r27
     a54:	14 f3       	brlt	.-60     	; 0xa1a <main+0x324>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     a56:	0e 94 4f 11 	call	0x229e	; 0x229e <motor_init>
					}
					status = 0;
     a5a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
					Transmit_Data("ok");
     a5e:	80 e1       	ldi	r24, 0x10	; 16
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     a66:	ad ce       	rjmp	.-678    	; 0x7c2 <main+0xcc>
				case 82:
					STEP[3] = 0;
     a68:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <STEP+0xc>
     a6c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <STEP+0xd>
     a70:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <STEP+0xe>
     a74:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <STEP+0xf>
					Transmit_Data("ok");
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     a80:	a0 ce       	rjmp	.-704    	; 0x7c2 <main+0xcc>
				case 83:
					old_val_1 = 0;
     a82:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_1.2364>
     a86:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_1.2364+0x1>
     a8a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_1.2364+0x2>
     a8e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_1.2364+0x3>
					old_val_2 = 0;
     a92:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <old_val_2.2365>
     a96:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <old_val_2.2365+0x1>
     a9a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <old_val_2.2365+0x2>
     a9e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <old_val_2.2365+0x3>
					old_val_3 = 0;
     aa2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
     aa6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     aaa:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x2>
     aae:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x3>
					STEP[0] = 0;
     ab2:	a7 e9       	ldi	r26, 0x97	; 151
     ab4:	b1 e0       	ldi	r27, 0x01	; 1
     ab6:	1d 92       	st	X+, r1
     ab8:	1d 92       	st	X+, r1
     aba:	1d 92       	st	X+, r1
     abc:	1c 92       	st	X, r1
     abe:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     ac0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <STEP+0x4>
     ac4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <STEP+0x5>
     ac8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <STEP+0x6>
     acc:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <STEP+0x7>
					STEP[2] = 0;
     ad0:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <STEP+0x8>
     ad4:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <STEP+0x9>
     ad8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <STEP+0xa>
     adc:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <STEP+0xb>
					Transmit_Data("ok");
     ae0:	80 e1       	ldi	r24, 0x10	; 16
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     ae8:	6c ce       	rjmp	.-808    	; 0x7c2 <main+0xcc>
     aea:	e9 e0       	ldi	r30, 0x09	; 9
     aec:	f2 e0       	ldi	r31, 0x02	; 2
     aee:	4b ef       	ldi	r20, 0xFB	; 251
     af0:	51 e0       	ldi	r21, 0x01	; 1
     af2:	27 e6       	ldi	r18, 0x67	; 103
     af4:	32 e0       	ldi	r19, 0x02	; 2
     af6:	a5 eb       	ldi	r26, 0xB5	; 181
     af8:	b1 e0       	ldi	r27, 0x01	; 1
     afa:	7d 01       	movw	r14, r26
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     afc:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     afe:	da 01       	movw	r26, r20
     b00:	1d 92       	st	X+, r1
     b02:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
     b04:	d9 01       	movw	r26, r18
     b06:	1d 92       	st	X+, r1
     b08:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
     b0a:	d7 01       	movw	r26, r14
     b0c:	1d 92       	st	X+, r1
     b0e:	7d 01       	movw	r14, r26
					STEP[1] = 0;
					STEP[2] = 0;
					Transmit_Data("ok");
					break;
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
     b10:	63 e1       	ldi	r22, 0x13	; 19
     b12:	72 e0       	ldi	r23, 0x02	; 2
     b14:	6e 17       	cp	r22, r30
     b16:	7f 07       	cpc	r23, r31
     b18:	89 f7       	brne	.-30     	; 0xafc <main+0x406>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
     b1a:	8c 35       	cpi	r24, 0x5C	; 92
     b1c:	91 05       	cpc	r25, r1
     b1e:	a1 f5       	brne	.+104    	; 0xb88 <main+0x492>
					{
						Xspm = get_value(String,'X');
     b20:	68 e5       	ldi	r22, 0x58	; 88
     b22:	83 e1       	ldi	r24, 0x13	; 19
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b2a:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <Xspm>
     b2e:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <Xspm+0x1>
     b32:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <Xspm+0x2>
     b36:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <Xspm+0x3>
						Yspm = get_value(String,'Y');
     b3a:	69 e5       	ldi	r22, 0x59	; 89
     b3c:	83 e1       	ldi	r24, 0x13	; 19
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b44:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <Yspm>
     b48:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <Yspm+0x1>
     b4c:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Yspm+0x2>
     b50:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <Yspm+0x3>
						Zspm = get_value(String,'Z');
     b54:	6a e5       	ldi	r22, 0x5A	; 90
     b56:	83 e1       	ldi	r24, 0x13	; 19
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b5e:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <Zspm>
     b62:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <Zspm+0x1>
     b66:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Zspm+0x2>
     b6a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Zspm+0x3>
						Espm = get_value(String,'E');
     b6e:	65 e4       	ldi	r22, 0x45	; 69
     b70:	83 e1       	ldi	r24, 0x13	; 19
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b78:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <Espm>
     b7c:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <Espm+0x1>
     b80:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Espm+0x2>
     b84:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <Espm+0x3>
					}
					if (val == 502)
     b88:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <val>
     b8c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <val+0x1>
     b90:	86 3f       	cpi	r24, 0xF6	; 246
     b92:	91 40       	sbci	r25, 0x01	; 1
     b94:	09 f0       	breq	.+2      	; 0xb98 <main+0x4a2>
     b96:	40 c0       	rjmp	.+128    	; 0xc18 <main+0x522>
					{
						Xspm = FXspm;
     b98:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FXspm>
     b9c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FXspm+0x1>
     ba0:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FXspm+0x2>
     ba4:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FXspm+0x3>
     ba8:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <Xspm>
     bac:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <Xspm+0x1>
     bb0:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <Xspm+0x2>
     bb4:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <Xspm+0x3>
						Yspm = FYspm;
     bb8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FYspm>
     bbc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FYspm+0x1>
     bc0:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FYspm+0x2>
     bc4:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FYspm+0x3>
     bc8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Yspm>
     bcc:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Yspm+0x1>
     bd0:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <Yspm+0x2>
     bd4:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <Yspm+0x3>
						Zspm = FZspm;
     bd8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FZspm>
     bdc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FZspm+0x1>
     be0:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FZspm+0x2>
     be4:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FZspm+0x3>
     be8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Zspm>
     bec:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Zspm+0x1>
     bf0:	a0 93 07 02 	sts	0x0207, r26	; 0x800207 <Zspm+0x2>
     bf4:	b0 93 08 02 	sts	0x0208, r27	; 0x800208 <Zspm+0x3>
						Espm = FEspm;
     bf8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <FEspm>
     bfc:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <FEspm+0x1>
     c00:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <FEspm+0x2>
     c04:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <FEspm+0x3>
     c08:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <Espm>
     c0c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <Espm+0x1>
     c10:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <Espm+0x2>
     c14:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
     c18:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <Xspm>
     c1c:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <Xspm+0x1>
     c20:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <Xspm+0x2>
     c24:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <Xspm+0x3>
     c28:	03 e1       	ldi	r16, 0x13	; 19
     c2a:	11 e0       	ldi	r17, 0x01	; 1
     c2c:	23 e0       	ldi	r18, 0x03	; 3
     c2e:	42 e0       	ldi	r20, 0x02	; 2
     c30:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	89 e0       	ldi	r24, 0x09	; 9
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
     c44:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <Yspm>
     c48:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <Yspm+0x1>
     c4c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Yspm+0x2>
     c50:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Yspm+0x3>
     c54:	23 e0       	ldi	r18, 0x03	; 3
     c56:	42 e0       	ldi	r20, 0x02	; 2
     c58:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	eb ef       	ldi	r30, 0xFB	; 251
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	ff 93       	push	r31
     c66:	ef 93       	push	r30
     c68:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
     c6c:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Zspm>
     c70:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <Zspm+0x1>
     c74:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Zspm+0x2>
     c78:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Zspm+0x3>
     c7c:	23 e0       	ldi	r18, 0x03	; 3
     c7e:	42 e0       	ldi	r20, 0x02	; 2
     c80:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	47 e6       	ldi	r20, 0x67	; 103
     c8a:	52 e0       	ldi	r21, 0x02	; 2
     c8c:	5f 93       	push	r21
     c8e:	4f 93       	push	r20
     c90:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
     c94:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <Espm>
     c98:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <Espm+0x1>
     c9c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <Espm+0x2>
     ca0:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <Espm+0x3>
     ca4:	23 e0       	ldi	r18, 0x03	; 3
     ca6:	42 e0       	ldi	r20, 0x02	; 2
     ca8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	85 eb       	ldi	r24, 0xB5	; 181
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     cbc:	45 e0       	ldi	r20, 0x05	; 5
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	69 e0       	ldi	r22, 0x09	; 9
     cc2:	72 e0       	ldi	r23, 0x02	; 2
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     ccc:	45 e0       	ldi	r20, 0x05	; 5
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	6b ef       	ldi	r22, 0xFB	; 251
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     cdc:	45 e0       	ldi	r20, 0x05	; 5
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	67 e6       	ldi	r22, 0x67	; 103
     ce2:	72 e0       	ldi	r23, 0x02	; 2
     ce4:	8a e0       	ldi	r24, 0x0A	; 10
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     cec:	45 e0       	ldi	r20, 0x05	; 5
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	65 eb       	ldi	r22, 0xB5	; 181
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	8f e0       	ldi	r24, 0x0F	; 15
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok");
     cfc:	80 e1       	ldi	r24, 0x10	; 16
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	59 cd       	rjmp	.-1358   	; 0x7c2 <main+0xcc>
				case 104:
					SE0 = get_value(String,'S');
     d10:	63 e5       	ldi	r22, 0x53	; 83
     d12:	83 e1       	ldi	r24, 0x13	; 19
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d1a:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <SE0>
     d1e:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <SE0+0x1>
     d22:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SE0+0x2>
     d26:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SE0+0x3>
					Transmit_Data("ok");
     d2a:	80 e1       	ldi	r24, 0x10	; 16
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     d32:	47 cd       	rjmp	.-1394   	; 0x7c2 <main+0xcc>
				case 105:
					ReadTemp = 1;
     d34:	f1 e0       	ldi	r31, 0x01	; 1
     d36:	f0 93 78 01 	sts	0x0178, r31	; 0x800178 <ReadTemp>
					break;
     d3a:	43 cd       	rjmp	.-1402   	; 0x7c2 <main+0xcc>
				case 106:
					OCR2 = get_value(String,'S');
     d3c:	63 e5       	ldi	r22, 0x53	; 83
     d3e:	83 e1       	ldi	r24, 0x13	; 19
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d46:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fixunssfsi>
     d4a:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok");
     d4c:	80 e1       	ldi	r24, 0x10	; 16
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     d54:	36 cd       	rjmp	.-1428   	; 0x7c2 <main+0xcc>
				case 107:
					OCR2 = 0;
     d56:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok");
     d58:	80 e1       	ldi	r24, 0x10	; 16
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     d60:	30 cd       	rjmp	.-1440   	; 0x7c2 <main+0xcc>
				case 109:
					Bt = get_value(String,'B');
     d62:	62 e4       	ldi	r22, 0x42	; 66
     d64:	83 e1       	ldi	r24, 0x13	; 19
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d6c:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <Bt>
     d70:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <Bt+0x1>
     d74:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <Bt+0x2>
     d78:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <Bt+0x3>
					if (Bt == 0)
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	a9 01       	movw	r20, r18
     d82:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
     d86:	81 11       	cpse	r24, r1
     d88:	22 c0       	rjmp	.+68     	; 0xdce <main+0x6d8>
					{
						SE0 = get_value(String,'S');
     d8a:	63 e5       	ldi	r22, 0x53	; 83
     d8c:	83 e1       	ldi	r24, 0x13	; 19
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d94:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <SE0>
     d98:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <SE0+0x1>
     d9c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SE0+0x2>
     da0:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SE0+0x3>
						status = 1;
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <status>
						while(getTemp(T0) < SE0);
     daa:	80 e5       	ldi	r24, 0x50	; 80
     dac:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     db0:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <SE0>
     db4:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <SE0+0x1>
     db8:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <SE0+0x2>
     dbc:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <SE0+0x3>
     dc0:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	8c f3       	brlt	.-30     	; 0xdaa <main+0x6b4>
						status = 0;
     dc8:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
     dcc:	10 c0       	rjmp	.+32     	; 0xdee <main+0x6f8>
					} 
					else
					{
						status = 1;
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <status>
						while(getTemp(T0) < B);
     dd4:	80 e5       	ldi	r24, 0x50	; 80
     dd6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	48 e5       	ldi	r20, 0x58	; 88
     de0:	52 e4       	ldi	r21, 0x42	; 66
     de2:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
     de6:	88 23       	and	r24, r24
     de8:	ac f3       	brlt	.-22     	; 0xdd4 <main+0x6de>
						status = 0;
     dea:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
					}
					
					Transmit_Data("ok");
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     df6:	e5 cc       	rjmp	.-1590   	; 0x7c2 <main+0xcc>
				case 112:
					value_1 = 0;  //extract first value
					value_2 = 0; //call function to extract second value
					value_3 = 0; //call function to extract third value
					STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	ba 01       	movw	r22, r20
     dfe:	88 e4       	ldi	r24, 0x48	; 72
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <Xspm>
     e0e:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <Xspm+0x1>
     e12:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <Xspm+0x2>
     e16:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <Xspm+0x3>
     e1a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     e1e:	a7 e9       	ldi	r26, 0x97	; 151
     e20:	b1 e0       	ldi	r27, 0x01	; 1
     e22:	6d 93       	st	X+, r22
     e24:	7d 93       	st	X+, r23
     e26:	8d 93       	st	X+, r24
     e28:	9c 93       	st	X, r25
     e2a:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	ba 01       	movw	r22, r20
     e32:	84 e4       	ldi	r24, 0x44	; 68
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
     e3a:	9b 01       	movw	r18, r22
     e3c:	ac 01       	movw	r20, r24
     e3e:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <Yspm>
     e42:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <Yspm+0x1>
     e46:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Yspm+0x2>
     e4a:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Yspm+0x3>
     e4e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     e52:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
     e56:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
     e5a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
     e5e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
					STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	ba 01       	movw	r22, r20
     e68:	80 e4       	ldi	r24, 0x40	; 64
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Zspm>
     e78:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <Zspm+0x1>
     e7c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Zspm+0x2>
     e80:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Zspm+0x3>
     e84:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
     e88:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <STEP+0x8>
     e8c:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <STEP+0x9>
     e90:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <STEP+0xa>
     e94:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <STEP+0xb>
					STEP[3] = 0;
     e98:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <STEP+0xc>
     e9c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <STEP+0xd>
     ea0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <STEP+0xe>
     ea4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <STEP+0xf>
					F = 0;
     ea8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <F>
     eac:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <F+0x1>
     eb0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <F+0x2>
     eb4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <F+0x3>
					Fe = 0;
     eb8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <Fe>
     ebc:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <Fe+0x1>
     ec0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Fe+0x2>
     ec4:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Fe+0x3>
					SE0 = 0;
     ec8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <SE0>
     ecc:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <SE0+0x1>
     ed0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <SE0+0x2>
     ed4:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <SE0+0x3>
					SB = 0;
     ed8:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <SB>
     edc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <SB+0x1>
     ee0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <SB+0x2>
     ee4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <SB+0x3>
					status = 1;
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <status>
					motor_movement(STEP,F,Fe);
     eee:	00 e0       	ldi	r16, 0x00	; 0
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	98 01       	movw	r18, r16
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	ba 01       	movw	r22, r20
     efa:	87 e9       	ldi	r24, 0x97	; 151
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <motor_movement>
					status = 0;
     f02:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
					Transmit_Data("ok");
     f06:	80 e1       	ldi	r24, 0x10	; 16
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
     f0e:	59 cc       	rjmp	.-1870   	; 0x7c2 <main+0xcc>
     f10:	e9 e0       	ldi	r30, 0x09	; 9
     f12:	f2 e0       	ldi	r31, 0x02	; 2
     f14:	8b ef       	ldi	r24, 0xFB	; 251
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	a7 e6       	ldi	r26, 0x67	; 103
     f1a:	b2 e0       	ldi	r27, 0x02	; 2
     f1c:	ad 01       	movw	r20, r26
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     f1e:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     f20:	dc 01       	movw	r26, r24
     f22:	1d 92       	st	X+, r1
     f24:	cd 01       	movw	r24, r26
						Z_pos[i] = 0;
     f26:	da 01       	movw	r26, r20
     f28:	1d 92       	st	X+, r1
     f2a:	ad 01       	movw	r20, r26
					motor_movement(STEP,F,Fe);
					status = 0;
					Transmit_Data("ok");
					break;
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
     f2c:	23 e1       	ldi	r18, 0x13	; 19
     f2e:	32 e0       	ldi	r19, 0x02	; 2
     f30:	2e 17       	cp	r18, r30
     f32:	3f 07       	cpc	r19, r31
     f34:	a1 f7       	brne	.-24     	; 0xf1e <main+0x828>
					{
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(old_val_1, 2,3,"%f"));
     f36:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <old_val_1.2364>
     f3a:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <old_val_1.2364+0x1>
     f3e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <old_val_1.2364+0x2>
     f42:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <old_val_1.2364+0x3>
     f46:	03 e1       	ldi	r16, 0x13	; 19
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	23 e0       	ldi	r18, 0x03	; 3
     f4c:	42 e0       	ldi	r20, 0x02	; 2
     f4e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     f52:	9f 93       	push	r25
     f54:	8f 93       	push	r24
     f56:	49 e0       	ldi	r20, 0x09	; 9
     f58:	52 e0       	ldi	r21, 0x02	; 2
     f5a:	5f 93       	push	r21
     f5c:	4f 93       	push	r20
     f5e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Y_pos,dtostrf(old_val_2, 2,3,"%f"));
     f62:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <old_val_2.2365>
     f66:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <old_val_2.2365+0x1>
     f6a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <old_val_2.2365+0x2>
     f6e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <old_val_2.2365+0x3>
     f72:	23 e0       	ldi	r18, 0x03	; 3
     f74:	42 e0       	ldi	r20, 0x02	; 2
     f76:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	8b ef       	ldi	r24, 0xFB	; 251
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Z_pos,dtostrf(old_val_3, 2,3,"%f"));
     f8a:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__data_end>
     f8e:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__data_end+0x1>
     f92:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x2>
     f96:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x3>
     f9a:	23 e0       	ldi	r18, 0x03	; 3
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	e7 e6       	ldi	r30, 0x67	; 103
     fa8:	f2 e0       	ldi	r31, 0x02	; 2
     faa:	ff 93       	push	r31
     fac:	ef 93       	push	r30
     fae:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					char pos[21]={'X',
     fb2:	88 e5       	ldi	r24, 0x58	; 88
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	a9 e0       	ldi	r26, 0x09	; 9
     fb8:	b2 e0       	ldi	r27, 0x02	; 2
     fba:	8c 91       	ld	r24, X
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <X_pos+0x1>
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <X_pos+0x2>
     fc8:	8c 83       	std	Y+4, r24	; 0x04
     fca:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <X_pos+0x3>
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <X_pos+0x4>
     fd4:	8e 83       	std	Y+6, r24	; 0x06
     fd6:	80 e2       	ldi	r24, 0x20	; 32
     fd8:	8f 83       	std	Y+7, r24	; 0x07
     fda:	99 e5       	ldi	r25, 0x59	; 89
     fdc:	98 87       	std	Y+8, r25	; 0x08
     fde:	eb ef       	ldi	r30, 0xFB	; 251
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	90 81       	ld	r25, Z
     fe4:	99 87       	std	Y+9, r25	; 0x09
     fe6:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Y_pos+0x1>
     fea:	9a 87       	std	Y+10, r25	; 0x0a
     fec:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <Y_pos+0x2>
     ff0:	9b 87       	std	Y+11, r25	; 0x0b
     ff2:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <Y_pos+0x3>
     ff6:	9c 87       	std	Y+12, r25	; 0x0c
     ff8:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <Y_pos+0x4>
     ffc:	9d 87       	std	Y+13, r25	; 0x0d
     ffe:	8e 87       	std	Y+14, r24	; 0x0e
    1000:	8a e5       	ldi	r24, 0x5A	; 90
    1002:	8f 87       	std	Y+15, r24	; 0x0f
    1004:	a7 e6       	ldi	r26, 0x67	; 103
    1006:	b2 e0       	ldi	r27, 0x02	; 2
    1008:	8c 91       	ld	r24, X
    100a:	88 8b       	std	Y+16, r24	; 0x10
    100c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <Z_pos+0x1>
    1010:	89 8b       	std	Y+17, r24	; 0x11
    1012:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Z_pos+0x2>
    1016:	8a 8b       	std	Y+18, r24	; 0x12
    1018:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <Z_pos+0x3>
    101c:	8b 8b       	std	Y+19, r24	; 0x13
    101e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Z_pos+0x4>
    1022:	8c 8b       	std	Y+20, r24	; 0x14
    1024:	8d e0       	ldi	r24, 0x0D	; 13
    1026:	8d 8b       	std	Y+21, r24	; 0x15
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
					Transmit_Data(pos);
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	c3 cb       	rjmp	.-2170   	; 0x7c2 <main+0xcc>
				case 140:
					SB = get_value(String,'S');
    103c:	63 e5       	ldi	r22, 0x53	; 83
    103e:	83 e1       	ldi	r24, 0x13	; 19
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1046:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <SB>
    104a:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <SB+0x1>
    104e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <SB+0x2>
    1052:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <SB+0x3>
					BED_Activ = 1;
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <BED_Activ>
					Transmit_Data("ok");
    105c:	80 e1       	ldi	r24, 0x10	; 16
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    1064:	ae cb       	rjmp	.-2212   	; 0x7c2 <main+0xcc>
				case 190:
					SB = get_value(String,'S');
    1066:	63 e5       	ldi	r22, 0x53	; 83
    1068:	83 e1       	ldi	r24, 0x13	; 19
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1070:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <SB>
    1074:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <SB+0x1>
    1078:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <SB+0x2>
    107c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <SB+0x3>
					status = 1;
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <status>
					while(getTemp(T2) < SB);
    1086:	82 e5       	ldi	r24, 0x52	; 82
    1088:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    108c:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <SB>
    1090:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <SB+0x1>
    1094:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <SB+0x2>
    1098:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <SB+0x3>
    109c:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	8c f3       	brlt	.-30     	; 0x1086 <main+0x990>
					status = 0;
    10a4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
					Transmit_Data("ok");
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    10b0:	88 cb       	rjmp	.-2288   	; 0x7c2 <main+0xcc>
				case 206:
					old_val_1 = 0;
    10b2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_1.2364>
    10b6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_1.2364+0x1>
    10ba:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_1.2364+0x2>
    10be:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_1.2364+0x3>
					old_val_2 = 0;
    10c2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <old_val_2.2365>
    10c6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <old_val_2.2365+0x1>
    10ca:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <old_val_2.2365+0x2>
    10ce:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <old_val_2.2365+0x3>
					old_val_3 = 0;
    10d2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
    10d6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
    10da:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x2>
    10de:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x3>
					homeSet = 1;
    10e2:	31 e0       	ldi	r19, 0x01	; 1
    10e4:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <homeSet>
					Transmit_Data("ok");
    10e8:	80 e1       	ldi	r24, 0x10	; 16
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    10f0:	68 cb       	rjmp	.-2352   	; 0x7c2 <main+0xcc>
				case 302:
					SE0 = get_value(String,'S');
    10f2:	63 e5       	ldi	r22, 0x53	; 83
    10f4:	83 e1       	ldi	r24, 0x13	; 19
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    10fc:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <SE0>
    1100:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <SE0+0x1>
    1104:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SE0+0x2>
    1108:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SE0+0x3>
					if (SE0 <= 25 )
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	48 ec       	ldi	r20, 0xC8	; 200
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1118:	18 16       	cp	r1, r24
    111a:	1c f0       	brlt	.+6      	; 0x1122 <main+0xa2c>
					{
						Fextrud = 1;
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	40 93 79 01 	sts	0x0179, r20	; 0x800179 <Fextrud>
					}
					Transmit_Data("ok");
    1122:	80 e1       	ldi	r24, 0x10	; 16
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    112a:	4b cb       	rjmp	.-2410   	; 0x7c2 <main+0xcc>
				case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    112c:	45 e0       	ldi	r20, 0x05	; 5
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	69 e0       	ldi	r22, 0x09	; 9
    1132:	72 e0       	ldi	r23, 0x02	; 2
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    113c:	45 e0       	ldi	r20, 0x05	; 5
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	6b ef       	ldi	r22, 0xFB	; 251
    1142:	71 e0       	ldi	r23, 0x01	; 1
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    114c:	45 e0       	ldi	r20, 0x05	; 5
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	67 e6       	ldi	r22, 0x67	; 103
    1152:	72 e0       	ldi	r23, 0x02	; 2
    1154:	8a e0       	ldi	r24, 0x0A	; 10
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    115c:	45 e0       	ldi	r20, 0x05	; 5
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	65 eb       	ldi	r22, 0xB5	; 181
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	8f e0       	ldi	r24, 0x0F	; 15
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
    1174:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <Xspm>
    1178:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <Xspm+0x1>
    117c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <Xspm+0x2>
    1180:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <Xspm+0x3>
					Yspm = atof(Y_pos);
    1184:	8b ef       	ldi	r24, 0xFB	; 251
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
    118c:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <Yspm>
    1190:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <Yspm+0x1>
    1194:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Yspm+0x2>
    1198:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <Yspm+0x3>
					Zspm = atof(Z_pos);
    119c:	87 e6       	ldi	r24, 0x67	; 103
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
    11a4:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <Zspm>
    11a8:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <Zspm+0x1>
    11ac:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Zspm+0x2>
    11b0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Zspm+0x3>
					Espm = atof(E_pos);
    11b4:	85 eb       	ldi	r24, 0xB5	; 181
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <atof>
    11bc:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <Espm>
    11c0:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <Espm+0x1>
    11c4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Espm+0x2>
    11c8:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <Espm+0x3>
					Transmit_Data("ok");
    11cc:	80 e1       	ldi	r24, 0x10	; 16
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    11d4:	f6 ca       	rjmp	.-2580   	; 0x7c2 <main+0xcc>
    11d6:	e9 e0       	ldi	r30, 0x09	; 9
    11d8:	f2 e0       	ldi	r31, 0x02	; 2
    11da:	2b ef       	ldi	r18, 0xFB	; 251
    11dc:	31 e0       	ldi	r19, 0x01	; 1
    11de:	87 e6       	ldi	r24, 0x67	; 103
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	a5 eb       	ldi	r26, 0xB5	; 181
    11e4:	b1 e0       	ldi	r27, 0x01	; 1
    11e6:	bd 01       	movw	r22, r26
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    11e8:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    11ea:	d9 01       	movw	r26, r18
    11ec:	1d 92       	st	X+, r1
    11ee:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    11f0:	dc 01       	movw	r26, r24
    11f2:	1d 92       	st	X+, r1
    11f4:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    11f6:	db 01       	movw	r26, r22
    11f8:	1d 92       	st	X+, r1
    11fa:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok");
					break;
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
    11fc:	b2 e0       	ldi	r27, 0x02	; 2
    11fe:	e3 31       	cpi	r30, 0x13	; 19
    1200:	fb 07       	cpc	r31, r27
    1202:	91 f7       	brne	.-28     	; 0x11e8 <main+0xaf2>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    1204:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <Xspm>
    1208:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <Xspm+0x1>
    120c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <Xspm+0x2>
    1210:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <Xspm+0x3>
    1214:	03 e1       	ldi	r16, 0x13	; 19
    1216:	11 e0       	ldi	r17, 0x01	; 1
    1218:	23 e0       	ldi	r18, 0x03	; 3
    121a:	42 e0       	ldi	r20, 0x02	; 2
    121c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1220:	9f 93       	push	r25
    1222:	8f 93       	push	r24
    1224:	e9 e0       	ldi	r30, 0x09	; 9
    1226:	f2 e0       	ldi	r31, 0x02	; 2
    1228:	ff 93       	push	r31
    122a:	ef 93       	push	r30
    122c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    1230:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <Yspm>
    1234:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <Yspm+0x1>
    1238:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Yspm+0x2>
    123c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Yspm+0x3>
    1240:	23 e0       	ldi	r18, 0x03	; 3
    1242:	42 e0       	ldi	r20, 0x02	; 2
    1244:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	4b ef       	ldi	r20, 0xFB	; 251
    124e:	51 e0       	ldi	r21, 0x01	; 1
    1250:	5f 93       	push	r21
    1252:	4f 93       	push	r20
    1254:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    1258:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Zspm>
    125c:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <Zspm+0x1>
    1260:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Zspm+0x2>
    1264:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Zspm+0x3>
    1268:	23 e0       	ldi	r18, 0x03	; 3
    126a:	42 e0       	ldi	r20, 0x02	; 2
    126c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	87 e6       	ldi	r24, 0x67	; 103
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1280:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <Espm>
    1284:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <Espm+0x1>
    1288:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <Espm+0x2>
    128c:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <Espm+0x3>
    1290:	23 e0       	ldi	r18, 0x03	; 3
    1292:	42 e0       	ldi	r20, 0x02	; 2
    1294:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1298:	9f 93       	push	r25
    129a:	8f 93       	push	r24
    129c:	e5 eb       	ldi	r30, 0xB5	; 181
    129e:	f1 e0       	ldi	r31, 0x01	; 1
    12a0:	ff 93       	push	r31
    12a2:	ef 93       	push	r30
    12a4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
					char acc[44]={'X',
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	a9 e0       	ldi	r26, 0x09	; 9
    12ae:	b2 e0       	ldi	r27, 0x02	; 2
    12b0:	8c 91       	ld	r24, X
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <X_pos+0x1>
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <X_pos+0x2>
    12be:	8c 83       	std	Y+4, r24	; 0x04
    12c0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <X_pos+0x3>
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <X_pos+0x4>
    12ca:	8e 83       	std	Y+6, r24	; 0x06
    12cc:	b3 e7       	ldi	r27, 0x73	; 115
    12ce:	bf 83       	std	Y+7, r27	; 0x07
    12d0:	ef e2       	ldi	r30, 0x2F	; 47
    12d2:	e8 87       	std	Y+8, r30	; 0x08
    12d4:	8d e6       	ldi	r24, 0x6D	; 109
    12d6:	89 87       	std	Y+9, r24	; 0x09
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
    12da:	90 e2       	ldi	r25, 0x20	; 32
    12dc:	9b 87       	std	Y+11, r25	; 0x0b
    12de:	29 e5       	ldi	r18, 0x59	; 89
    12e0:	2c 87       	std	Y+12, r18	; 0x0c
    12e2:	ab ef       	ldi	r26, 0xFB	; 251
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	2c 91       	ld	r18, X
    12e8:	2d 87       	std	Y+13, r18	; 0x0d
    12ea:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <Y_pos+0x1>
    12ee:	2e 87       	std	Y+14, r18	; 0x0e
    12f0:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <Y_pos+0x2>
    12f4:	2f 87       	std	Y+15, r18	; 0x0f
    12f6:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <Y_pos+0x3>
    12fa:	28 8b       	std	Y+16, r18	; 0x10
    12fc:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <Y_pos+0x4>
    1300:	29 8b       	std	Y+17, r18	; 0x11
    1302:	b3 e7       	ldi	r27, 0x73	; 115
    1304:	ba 8b       	std	Y+18, r27	; 0x12
    1306:	eb 8b       	std	Y+19, r30	; 0x13
    1308:	8c 8b       	std	Y+20, r24	; 0x14
    130a:	8d 8b       	std	Y+21, r24	; 0x15
    130c:	9e 8b       	std	Y+22, r25	; 0x16
    130e:	2a e5       	ldi	r18, 0x5A	; 90
    1310:	2f 8b       	std	Y+23, r18	; 0x17
    1312:	e7 e6       	ldi	r30, 0x67	; 103
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	20 81       	ld	r18, Z
    1318:	28 8f       	std	Y+24, r18	; 0x18
    131a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <Z_pos+0x1>
    131e:	29 8f       	std	Y+25, r18	; 0x19
    1320:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <Z_pos+0x2>
    1324:	2a 8f       	std	Y+26, r18	; 0x1a
    1326:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <Z_pos+0x3>
    132a:	2b 8f       	std	Y+27, r18	; 0x1b
    132c:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <Z_pos+0x4>
    1330:	2c 8f       	std	Y+28, r18	; 0x1c
    1332:	bd 8f       	std	Y+29, r27	; 0x1d
    1334:	ff e2       	ldi	r31, 0x2F	; 47
    1336:	fe 8f       	std	Y+30, r31	; 0x1e
    1338:	8f 8f       	std	Y+31, r24	; 0x1f
    133a:	88 a3       	std	Y+32, r24	; 0x20
    133c:	99 a3       	std	Y+33, r25	; 0x21
    133e:	95 e4       	ldi	r25, 0x45	; 69
    1340:	9a a3       	std	Y+34, r25	; 0x22
    1342:	a5 eb       	ldi	r26, 0xB5	; 181
    1344:	b1 e0       	ldi	r27, 0x01	; 1
    1346:	9c 91       	ld	r25, X
    1348:	9b a3       	std	Y+35, r25	; 0x23
    134a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <E_pos+0x1>
    134e:	9c a3       	std	Y+36, r25	; 0x24
    1350:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <E_pos+0x2>
    1354:	9d a3       	std	Y+37, r25	; 0x25
    1356:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <E_pos+0x3>
    135a:	9e a3       	std	Y+38, r25	; 0x26
    135c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <E_pos+0x4>
    1360:	9f a3       	std	Y+39, r25	; 0x27
    1362:	b3 e7       	ldi	r27, 0x73	; 115
    1364:	b8 a7       	std	Y+40, r27	; 0x28
    1366:	f9 a7       	std	Y+41, r31	; 0x29
    1368:	8a a7       	std	Y+42, r24	; 0x2a
    136a:	8b a7       	std	Y+43, r24	; 0x2b
    136c:	8d e0       	ldi	r24, 0x0D	; 13
    136e:	8c a7       	std	Y+44, r24	; 0x2c
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break; 				
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	1f ca       	rjmp	.-3010   	; 0x7c2 <main+0xcc>
			}	
		}
		else if (String[0] == 'G')
    1384:	87 34       	cpi	r24, 0x47	; 71
    1386:	09 f0       	breq	.+2      	; 0x138a <main+0xc94>
    1388:	1c ca       	rjmp	.-3016   	; 0x7c2 <main+0xcc>
		{
			val = get_int (String,'G');
    138a:	67 e4       	ldi	r22, 0x47	; 71
    138c:	83 e1       	ldi	r24, 0x13	; 19
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	0e 94 50 02 	call	0x4a0	; 0x4a0 <get_int>
    1394:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <val+0x1>
    1398:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <val>
			switch (val)
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	91 05       	cpc	r25, r1
    13a0:	3c f4       	brge	.+14     	; 0x13b0 <main+0xcba>
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	91 05       	cpc	r25, r1
    13a6:	0c f0       	brlt	.+2      	; 0x13aa <main+0xcb4>
    13a8:	11 c1       	rjmp	.+546    	; 0x15cc <main+0xed6>
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <main+0xcc2>
    13ae:	09 ca       	rjmp	.-3054   	; 0x7c2 <main+0xcc>
    13b0:	4c 97       	sbiw	r24, 0x1c	; 28
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0xcc0>
    13b4:	b0 c3       	rjmp	.+1888   	; 0x1b16 <main+0x1420>
    13b6:	05 ca       	rjmp	.-3062   	; 0x7c2 <main+0xcc>
			{
				case 1:
					motor_init();
    13b8:	0e 94 4f 11 	call	0x229e	; 0x229e <motor_init>
					value_1 = get_value(String,'X');           //extract first value
    13bc:	68 e5       	ldi	r22, 0x58	; 88
    13be:	83 e1       	ldi	r24, 0x13	; 19
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13c6:	6d a7       	std	Y+45, r22	; 0x2d
    13c8:	7e a7       	std	Y+46, r23	; 0x2e
    13ca:	8f a7       	std	Y+47, r24	; 0x2f
    13cc:	98 ab       	std	Y+48, r25	; 0x30
					value_2 = get_value(String,'Y'); //call function to extract second value
    13ce:	69 e5       	ldi	r22, 0x59	; 89
    13d0:	83 e1       	ldi	r24, 0x13	; 19
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13d8:	6b 01       	movw	r12, r22
    13da:	7c 01       	movw	r14, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
    13dc:	6a e5       	ldi	r22, 0x5A	; 90
    13de:	83 e1       	ldi	r24, 0x13	; 19
    13e0:	92 e0       	ldi	r25, 0x02	; 2
    13e2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13e6:	4b 01       	movw	r8, r22
    13e8:	5c 01       	movw	r10, r24
					STEP[3] = get_value(String,'E');
    13ea:	65 e4       	ldi	r22, 0x45	; 69
    13ec:	83 e1       	ldi	r24, 0x13	; 19
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13f4:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <STEP+0xc>
    13f8:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <STEP+0xd>
    13fc:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <STEP+0xe>
    1400:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <STEP+0xf>
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <main+0xd1e>
    1412:	c3 c3       	rjmp	.+1926   	; 0x1b9a <main+0x14a4>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	6d a5       	ldd	r22, Y+45	; 0x2d
    141c:	7e a5       	ldd	r23, Y+46	; 0x2e
    141e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1420:	98 a9       	ldd	r25, Y+48	; 0x30
    1422:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <main+0xd36>
    142a:	b7 c3       	rjmp	.+1902   	; 0x1b9a <main+0x14a4>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	c7 01       	movw	r24, r14
    1434:	b6 01       	movw	r22, r12
    1436:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <main+0xd4a>
    143e:	ad c3       	rjmp	.+1882   	; 0x1b9a <main+0x14a4>
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	c5 01       	movw	r24, r10
    1448:	b4 01       	movw	r22, r8
    144a:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    144e:	81 11       	cpse	r24, r1
    1450:	bb c3       	rjmp	.+1910   	; 0x1bc8 <main+0x14d2>
    1452:	a3 c3       	rjmp	.+1862   	; 0x1b9a <main+0x14a4>
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							Fe = FN;
    1454:	20 92 68 01 	sts	0x0168, r2	; 0x800168 <Fe>
    1458:	30 92 69 01 	sts	0x0169, r3	; 0x800169 <Fe+0x1>
    145c:	40 92 6a 01 	sts	0x016A, r4	; 0x80016a <Fe+0x2>
    1460:	50 92 6b 01 	sts	0x016B, r5	; 0x80016b <Fe+0x3>
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <main+0xd80>
					else
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							F = FN;
    1466:	20 92 70 01 	sts	0x0170, r2	; 0x800170 <F>
    146a:	30 92 71 01 	sts	0x0171, r3	; 0x800171 <F+0x1>
    146e:	40 92 72 01 	sts	0x0172, r4	; 0x800172 <F+0x2>
    1472:	50 92 73 01 	sts	0x0173, r5	; 0x800173 <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	48 e4       	ldi	r20, 0x48	; 72
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1480:	7e a5       	ldd	r23, Y+46	; 0x2e
    1482:	8f a5       	ldd	r24, Y+47	; 0x2f
    1484:	98 a9       	ldd	r25, Y+48	; 0x30
    1486:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    148a:	18 16       	cp	r1, r24
    148c:	0c f4       	brge	.+2      	; 0x1490 <main+0xd9a>
    148e:	99 c0       	rjmp	.+306    	; 0x15c2 <main+0xecc>
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	48 e4       	ldi	r20, 0x48	; 72
    1496:	53 e4       	ldi	r21, 0x43	; 67
    1498:	c7 01       	movw	r24, r14
    149a:	b6 01       	movw	r22, r12
    149c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	0c f4       	brge	.+2      	; 0x14a6 <main+0xdb0>
    14a4:	8e c0       	rjmp	.+284    	; 0x15c2 <main+0xecc>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a ef       	ldi	r20, 0xFA	; 250
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	c5 01       	movw	r24, r10
    14b0:	b4 01       	movw	r22, r8
    14b2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f4       	brge	.+2      	; 0x14bc <main+0xdc6>
    14ba:	83 c0       	rjmp	.+262    	; 0x15c2 <main+0xecc>

					{
						STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    14bc:	4d a5       	ldd	r20, Y+45	; 0x2d
    14be:	5e a5       	ldd	r21, Y+46	; 0x2e
    14c0:	6f a5       	ldd	r22, Y+47	; 0x2f
    14c2:	78 a9       	ldd	r23, Y+48	; 0x30
    14c4:	88 e4       	ldi	r24, 0x48	; 72
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    14cc:	9b 01       	movw	r18, r22
    14ce:	ac 01       	movw	r20, r24
    14d0:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <Xspm>
    14d4:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <Xspm+0x1>
    14d8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <Xspm+0x2>
    14dc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <Xspm+0x3>
    14e0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    14e4:	a7 e9       	ldi	r26, 0x97	; 151
    14e6:	b1 e0       	ldi	r27, 0x01	; 1
    14e8:	6d 93       	st	X+, r22
    14ea:	7d 93       	st	X+, r23
    14ec:	8d 93       	st	X+, r24
    14ee:	9c 93       	st	X, r25
    14f0:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    14f2:	b7 01       	movw	r22, r14
    14f4:	a6 01       	movw	r20, r12
    14f6:	84 e4       	ldi	r24, 0x44	; 68
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <Yspm>
    1506:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <Yspm+0x1>
    150a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Yspm+0x2>
    150e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Yspm+0x3>
    1512:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1516:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    151a:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    151e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    1522:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
						STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    1526:	b5 01       	movw	r22, r10
    1528:	a4 01       	movw	r20, r8
    152a:	80 e4       	ldi	r24, 0x40	; 64
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    1532:	9b 01       	movw	r18, r22
    1534:	ac 01       	movw	r20, r24
    1536:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Zspm>
    153a:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <Zspm+0x1>
    153e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Zspm+0x2>
    1542:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Zspm+0x3>
    1546:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    154a:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <STEP+0x8>
    154e:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <STEP+0x9>
    1552:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <STEP+0xa>
    1556:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <STEP+0xb>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						status = 1;
    155a:	b1 e0       	ldi	r27, 0x01	; 1
    155c:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <status>
						if ((extrud || Fextrud))
    1560:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <extrud>
    1564:	81 11       	cpse	r24, r1
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <main+0xe7a>
    1568:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Fextrud>
    156c:	88 23       	and	r24, r24
    156e:	09 f1       	breq	.+66     	; 0x15b2 <main+0xebc>
						{
							motor_movement(STEP,F,Fe);
    1570:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Fe>
    1574:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <Fe+0x1>
    1578:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Fe+0x2>
    157c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <Fe+0x3>
    1580:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
    1588:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <F>
    158c:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <F+0x1>
    1590:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <F+0x2>
    1594:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <F+0x3>
    1598:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    159c:	ab 01       	movw	r20, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	97 01       	movw	r18, r14
    15a2:	86 01       	movw	r16, r12
    15a4:	87 e9       	ldi	r24, 0x97	; 151
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <motor_movement>
							status = 0;
    15ac:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <main+0xecc>
						} 
						else
						{
							Transmit_Data("error extruder temp.");
    15b2:	86 e1       	ldi	r24, 0x16	; 22
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
							Transmit_Char('\r');
    15ba:	8d e0       	ldi	r24, 0x0D	; 13
    15bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Transmit_Char>
							break;
    15c0:	00 c9       	rjmp	.-3584   	; 0x7c2 <main+0xcc>
						}						
					}
					Transmit_Data("ok");
    15c2:	80 e1       	ldi	r24, 0x10	; 16
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    15ca:	fb c8       	rjmp	.-3594   	; 0x7c2 <main+0xcc>
				case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    15cc:	68 e5       	ldi	r22, 0x58	; 88
    15ce:	83 e1       	ldi	r24, 0x13	; 19
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15d6:	69 ab       	std	Y+49, r22	; 0x31
    15d8:	7a ab       	std	Y+50, r23	; 0x32
    15da:	8b ab       	std	Y+51, r24	; 0x33
    15dc:	9c ab       	std	Y+52, r25	; 0x34
					value_2 = get_value(String,'Y'); //call function to extract second value
    15de:	69 e5       	ldi	r22, 0x59	; 89
    15e0:	83 e1       	ldi	r24, 0x13	; 19
    15e2:	92 e0       	ldi	r25, 0x02	; 2
    15e4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15e8:	6d ab       	std	Y+53, r22	; 0x35
    15ea:	7e ab       	std	Y+54, r23	; 0x36
    15ec:	8f ab       	std	Y+55, r24	; 0x37
    15ee:	98 af       	std	Y+56, r25	; 0x38
					I = get_value(String,'I');
    15f0:	69 e4       	ldi	r22, 0x49	; 73
    15f2:	83 e1       	ldi	r24, 0x13	; 19
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15fa:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <I>
    15fe:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <I+0x1>
    1602:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <I+0x2>
    1606:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <I+0x3>
					J = get_value(String,'J');
    160a:	6a e4       	ldi	r22, 0x4A	; 74
    160c:	83 e1       	ldi	r24, 0x13	; 19
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1614:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <J>
    1618:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <J+0x1>
    161c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <J+0x2>
    1620:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <J+0x3>
					FN = get_value(String,'F');
    1624:	66 e4       	ldi	r22, 0x46	; 70
    1626:	83 e1       	ldi	r24, 0x13	; 19
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    162e:	6b 01       	movw	r12, r22
    1630:	7c 01       	movw	r14, r24
    1632:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <FN>
    1636:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <FN+0x1>
    163a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <FN+0x2>
    163e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <FN+0x3>
					if (FN != 0)
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	a9 01       	movw	r20, r18
    1648:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    164c:	88 23       	and	r24, r24
    164e:	41 f0       	breq	.+16     	; 0x1660 <main+0xf6a>
					{
						F = FN;
    1650:	c0 92 70 01 	sts	0x0170, r12	; 0x800170 <F>
    1654:	d0 92 71 01 	sts	0x0171, r13	; 0x800171 <F+0x1>
    1658:	e0 92 72 01 	sts	0x0172, r14	; 0x800172 <F+0x2>
    165c:	f0 92 73 01 	sts	0x0173, r15	; 0x800173 <F+0x3>
					}
					R = get_value(String,'R');
    1660:	62 e5       	ldi	r22, 0x52	; 82
    1662:	83 e1       	ldi	r24, 0x13	; 19
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    166a:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <R>
    166e:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <R+0x1>
    1672:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <R+0x2>
    1676:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <R+0x3>
					if (R == 0)
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	a9 01       	movw	r20, r18
    1680:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1684:	81 11       	cpse	r24, r1
    1686:	2e c0       	rjmp	.+92     	; 0x16e4 <main+0xfee>
					{
						R = sqrt(pow(I,2)+pow(J,2));
    1688:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <I>
    168c:	d0 90 5d 01 	lds	r13, 0x015D	; 0x80015d <I+0x1>
    1690:	e0 90 5e 01 	lds	r14, 0x015E	; 0x80015e <I+0x2>
    1694:	f0 90 5f 01 	lds	r15, 0x015F	; 0x80015f <I+0x3>
    1698:	80 90 58 01 	lds	r8, 0x0158	; 0x800158 <J>
    169c:	90 90 59 01 	lds	r9, 0x0159	; 0x800159 <J+0x1>
    16a0:	a0 90 5a 01 	lds	r10, 0x015A	; 0x80015a <J+0x2>
    16a4:	b0 90 5b 01 	lds	r11, 0x015B	; 0x80015b <J+0x3>
    16a8:	a5 01       	movw	r20, r10
    16aa:	94 01       	movw	r18, r8
    16ac:	c5 01       	movw	r24, r10
    16ae:	b4 01       	movw	r22, r8
    16b0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    16b4:	4b 01       	movw	r8, r22
    16b6:	5c 01       	movw	r10, r24
    16b8:	a7 01       	movw	r20, r14
    16ba:	96 01       	movw	r18, r12
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	c5 01       	movw	r24, r10
    16ca:	b4 01       	movw	r22, r8
    16cc:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    16d0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <sqrt>
    16d4:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <R>
    16d8:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <R+0x1>
    16dc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <R+0x2>
    16e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <R+0x3>
					} 
					status = 1;
    16e4:	e1 e0       	ldi	r30, 0x01	; 1
    16e6:	e0 93 81 01 	sts	0x0181, r30	; 0x800181 <status>
					for (int th = 0 ; th <= 360 ; th++)
    16ea:	41 2c       	mov	r4, r1
    16ec:	51 2c       	mov	r5, r1
    16ee:	29 ac       	ldd	r2, Y+57	; 0x39
    16f0:	3a ac       	ldd	r3, Y+58	; 0x3a
					{
						double xc = R*cos(th)*cos(th);
    16f2:	b2 01       	movw	r22, r4
    16f4:	05 2c       	mov	r0, r5
    16f6:	00 0c       	add	r0, r0
    16f8:	88 0b       	sbc	r24, r24
    16fa:	99 0b       	sbc	r25, r25
    16fc:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
    1700:	6b 01       	movw	r12, r22
    1702:	7c 01       	movw	r14, r24
    1704:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <cos>
    1708:	6d a7       	std	Y+45, r22	; 0x2d
    170a:	7e a7       	std	Y+46, r23	; 0x2e
    170c:	8f a7       	std	Y+47, r24	; 0x2f
    170e:	98 ab       	std	Y+48, r25	; 0x30
    1710:	80 90 54 01 	lds	r8, 0x0154	; 0x800154 <R>
    1714:	90 90 55 01 	lds	r9, 0x0155	; 0x800155 <R+0x1>
    1718:	a0 90 56 01 	lds	r10, 0x0156	; 0x800156 <R+0x2>
    171c:	b0 90 57 01 	lds	r11, 0x0157	; 0x800157 <R+0x3>
    1720:	a5 01       	movw	r20, r10
    1722:	94 01       	movw	r18, r8
    1724:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1728:	2d a5       	ldd	r18, Y+45	; 0x2d
    172a:	3e a5       	ldd	r19, Y+46	; 0x2e
    172c:	4f a5       	ldd	r20, Y+47	; 0x2f
    172e:	58 a9       	ldd	r21, Y+48	; 0x30
    1730:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1734:	6d a7       	std	Y+45, r22	; 0x2d
    1736:	7e a7       	std	Y+46, r23	; 0x2e
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	98 ab       	std	Y+48, r25	; 0x30
						double yc = R*sin(th)*sin(th);
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <sin>
    1744:	6b 01       	movw	r12, r22
    1746:	7c 01       	movw	r14, r24
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	c5 01       	movw	r24, r10
    174e:	b4 01       	movw	r22, r8
    1750:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1754:	a7 01       	movw	r20, r14
    1756:	96 01       	movw	r18, r12
    1758:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    175c:	6b 01       	movw	r12, r22
    175e:	7c 01       	movw	r14, r24
						if ((xc >= value_1) && (yc >= value_2))
    1760:	2d a5       	ldd	r18, Y+45	; 0x2d
    1762:	3e a5       	ldd	r19, Y+46	; 0x2e
    1764:	4f a5       	ldd	r20, Y+47	; 0x2f
    1766:	58 a9       	ldd	r21, Y+48	; 0x30
    1768:	69 a9       	ldd	r22, Y+49	; 0x31
    176a:	7a a9       	ldd	r23, Y+50	; 0x32
    176c:	8b a9       	ldd	r24, Y+51	; 0x33
    176e:	9c a9       	ldd	r25, Y+52	; 0x34
    1770:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1774:	18 16       	cp	r1, r24
    1776:	5c f0       	brlt	.+22     	; 0x178e <main+0x1098>
    1778:	a7 01       	movw	r20, r14
    177a:	96 01       	movw	r18, r12
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1788:	18 16       	cp	r1, r24
    178a:	0c f0       	brlt	.+2      	; 0x178e <main+0x1098>
    178c:	c0 c1       	rjmp	.+896    	; 0x1b0e <main+0x1418>
							break;
						if ((extrud || Fextrud))
    178e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <extrud>
    1792:	81 11       	cpse	r24, r1
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <main+0x10aa>
    1796:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Fextrud>
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <main+0x10aa>
    179e:	ae c1       	rjmp	.+860    	; 0x1afc <main+0x1406>
						{
							if (val == 2)
    17a0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <val>
    17a4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <val+0x1>
    17a8:	02 97       	sbiw	r24, 0x02	; 2
    17aa:	09 f0       	breq	.+2      	; 0x17ae <main+0x10b8>
    17ac:	b7 c0       	rjmp	.+366    	; 0x191c <main+0x1226>
							{
								if ((I == 0) && (J == 0))
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	a9 01       	movw	r20, r18
    17b4:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <I>
    17b8:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <I+0x1>
    17bc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <I+0x2>
    17c0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <I+0x3>
    17c4:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    17c8:	81 11       	cpse	r24, r1
    17ca:	45 c0       	rjmp	.+138    	; 0x1856 <main+0x1160>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <J>
    17d6:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <J+0x1>
    17da:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <J+0x2>
    17de:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <J+0x3>
    17e2:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    17e6:	81 11       	cpse	r24, r1
    17e8:	36 c0       	rjmp	.+108    	; 0x1856 <main+0x1160>
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm;     //call function to extract first step
    17ea:	4d a5       	ldd	r20, Y+45	; 0x2d
    17ec:	5e a5       	ldd	r21, Y+46	; 0x2e
    17ee:	6f a5       	ldd	r22, Y+47	; 0x2f
    17f0:	78 a9       	ldd	r23, Y+48	; 0x30
    17f2:	88 e4       	ldi	r24, 0x48	; 72
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <Xspm>
    1802:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <Xspm+0x1>
    1806:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <Xspm+0x2>
    180a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <Xspm+0x3>
    180e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1812:	a7 e9       	ldi	r26, 0x97	; 151
    1814:	b1 e0       	ldi	r27, 0x01	; 1
    1816:	6d 93       	st	X+, r22
    1818:	7d 93       	st	X+, r23
    181a:	8d 93       	st	X+, r24
    181c:	9c 93       	st	X, r25
    181e:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm;    //call function to extract second step
    1820:	b7 01       	movw	r22, r14
    1822:	a6 01       	movw	r20, r12
    1824:	84 e4       	ldi	r24, 0x44	; 68
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <Yspm>
    1834:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <Yspm+0x1>
    1838:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Yspm+0x2>
    183c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Yspm+0x3>
    1840:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1844:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    1848:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    184c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    1850:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
    1854:	1d c1       	rjmp	.+570    	; 0x1a90 <main+0x139a>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(-I/I);     //call function to extract first step
    1856:	4d a5       	ldd	r20, Y+45	; 0x2d
    1858:	5e a5       	ldd	r21, Y+46	; 0x2e
    185a:	6f a5       	ldd	r22, Y+47	; 0x2f
    185c:	78 a9       	ldd	r23, Y+48	; 0x30
    185e:	88 e4       	ldi	r24, 0x48	; 72
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    1866:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <I>
    186a:	90 90 5d 01 	lds	r9, 0x015D	; 0x80015d <I+0x1>
    186e:	a0 90 5e 01 	lds	r10, 0x015E	; 0x80015e <I+0x2>
    1872:	b0 90 5f 01 	lds	r11, 0x015F	; 0x80015f <I+0x3>
    1876:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <Xspm>
    187a:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <Xspm+0x1>
    187e:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Xspm+0x2>
    1882:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Xspm+0x3>
    1886:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    188a:	6d a7       	std	Y+45, r22	; 0x2d
    188c:	7e a7       	std	Y+46, r23	; 0x2e
    188e:	8f a7       	std	Y+47, r24	; 0x2f
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	c5 01       	movw	r24, r10
    1894:	b4 01       	movw	r22, r8
    1896:	90 58       	subi	r25, 0x80	; 128
    1898:	a5 01       	movw	r20, r10
    189a:	94 01       	movw	r18, r8
    189c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    18a0:	9b 01       	movw	r18, r22
    18a2:	ac 01       	movw	r20, r24
    18a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    18a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    18a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18aa:	98 a9       	ldd	r25, Y+48	; 0x30
    18ac:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    18b0:	e7 e9       	ldi	r30, 0x97	; 151
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	60 83       	st	Z, r22
    18b6:	71 83       	std	Z+1, r23	; 0x01
    18b8:	82 83       	std	Z+2, r24	; 0x02
    18ba:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(-J/J);    //call function to extract second step
    18bc:	b7 01       	movw	r22, r14
    18be:	a6 01       	movw	r20, r12
    18c0:	84 e4       	ldi	r24, 0x44	; 68
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    18c8:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <J>
    18cc:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <J+0x1>
    18d0:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <J+0x2>
    18d4:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <J+0x3>
    18d8:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <Yspm>
    18dc:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <Yspm+0x1>
    18e0:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <Yspm+0x2>
    18e4:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <Yspm+0x3>
    18e8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    18ec:	4b 01       	movw	r8, r22
    18ee:	5c 01       	movw	r10, r24
    18f0:	c7 01       	movw	r24, r14
    18f2:	b6 01       	movw	r22, r12
    18f4:	90 58       	subi	r25, 0x80	; 128
    18f6:	a7 01       	movw	r20, r14
    18f8:	96 01       	movw	r18, r12
    18fa:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	c5 01       	movw	r24, r10
    1904:	b4 01       	movw	r22, r8
    1906:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    190a:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    190e:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    1912:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    1916:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
    191a:	ba c0       	rjmp	.+372    	; 0x1a90 <main+0x139a>
								}
							} 
							else
							{
								if ((I == 0) && (J == 0))
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	a9 01       	movw	r20, r18
    1922:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <I>
    1926:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <I+0x1>
    192a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <I+0x2>
    192e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <I+0x3>
    1932:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1936:	81 11       	cpse	r24, r1
    1938:	4b c0       	rjmp	.+150    	; 0x19d0 <main+0x12da>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <J>
    1944:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <J+0x1>
    1948:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <J+0x2>
    194c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <J+0x3>
    1950:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1954:	81 11       	cpse	r24, r1
    1956:	3c c0       	rjmp	.+120    	; 0x19d0 <main+0x12da>
								{
									STEP[0] = sub_function (&old_val_1, xc)*-Xspm;     //call function to extract first step
    1958:	4d a5       	ldd	r20, Y+45	; 0x2d
    195a:	5e a5       	ldd	r21, Y+46	; 0x2e
    195c:	6f a5       	ldd	r22, Y+47	; 0x2f
    195e:	78 a9       	ldd	r23, Y+48	; 0x30
    1960:	88 e4       	ldi	r24, 0x48	; 72
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <Xspm>
    1970:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <Xspm+0x1>
    1974:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <Xspm+0x2>
    1978:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <Xspm+0x3>
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	90 58       	subi	r25, 0x80	; 128
    1982:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1986:	a7 e9       	ldi	r26, 0x97	; 151
    1988:	b1 e0       	ldi	r27, 0x01	; 1
    198a:	6d 93       	st	X+, r22
    198c:	7d 93       	st	X+, r23
    198e:	8d 93       	st	X+, r24
    1990:	9c 93       	st	X, r25
    1992:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*-Yspm;    //call function to extract second step
    1994:	b7 01       	movw	r22, r14
    1996:	a6 01       	movw	r20, r12
    1998:	84 e4       	ldi	r24, 0x44	; 68
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    19a0:	9b 01       	movw	r18, r22
    19a2:	ac 01       	movw	r20, r24
    19a4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Yspm>
    19a8:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Yspm+0x1>
    19ac:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <Yspm+0x2>
    19b0:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <Yspm+0x3>
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	90 58       	subi	r25, 0x80	; 128
    19ba:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    19be:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    19c2:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    19c6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    19ca:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
    19ce:	60 c0       	rjmp	.+192    	; 0x1a90 <main+0x139a>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
    19d0:	4d a5       	ldd	r20, Y+45	; 0x2d
    19d2:	5e a5       	ldd	r21, Y+46	; 0x2e
    19d4:	6f a5       	ldd	r22, Y+47	; 0x2f
    19d6:	78 a9       	ldd	r23, Y+48	; 0x30
    19d8:	88 e4       	ldi	r24, 0x48	; 72
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    19e0:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <I>
    19e4:	90 90 5d 01 	lds	r9, 0x015D	; 0x80015d <I+0x1>
    19e8:	a0 90 5e 01 	lds	r10, 0x015E	; 0x80015e <I+0x2>
    19ec:	b0 90 5f 01 	lds	r11, 0x015F	; 0x80015f <I+0x3>
    19f0:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <Xspm>
    19f4:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <Xspm+0x1>
    19f8:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Xspm+0x2>
    19fc:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Xspm+0x3>
    1a00:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1a04:	6d a7       	std	Y+45, r22	; 0x2d
    1a06:	7e a7       	std	Y+46, r23	; 0x2e
    1a08:	8f a7       	std	Y+47, r24	; 0x2f
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	a5 01       	movw	r20, r10
    1a0e:	94 01       	movw	r18, r8
    1a10:	c5 01       	movw	r24, r10
    1a12:	b4 01       	movw	r22, r8
    1a14:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a1e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a22:	98 a9       	ldd	r25, Y+48	; 0x30
    1a24:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1a28:	e7 e9       	ldi	r30, 0x97	; 151
    1a2a:	f1 e0       	ldi	r31, 0x01	; 1
    1a2c:	60 83       	st	Z, r22
    1a2e:	71 83       	std	Z+1, r23	; 0x01
    1a30:	82 83       	std	Z+2, r24	; 0x02
    1a32:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
    1a34:	b7 01       	movw	r22, r14
    1a36:	a6 01       	movw	r20, r12
    1a38:	84 e4       	ldi	r24, 0x44	; 68
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	0e 94 ab 02 	call	0x556	; 0x556 <sub_function>
    1a40:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <J>
    1a44:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <J+0x1>
    1a48:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <J+0x2>
    1a4c:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <J+0x3>
    1a50:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <Yspm>
    1a54:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <Yspm+0x1>
    1a58:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <Yspm+0x2>
    1a5c:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <Yspm+0x3>
    1a60:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1a64:	4b 01       	movw	r8, r22
    1a66:	5c 01       	movw	r10, r24
    1a68:	a7 01       	movw	r20, r14
    1a6a:	96 01       	movw	r18, r12
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	b6 01       	movw	r22, r12
    1a70:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	c5 01       	movw	r24, r10
    1a7a:	b4 01       	movw	r22, r8
    1a7c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    1a80:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    1a84:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    1a88:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    1a8c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
								}
							}
							STEP[2] = 0;
    1a90:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <STEP+0x8>
    1a94:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <STEP+0x9>
    1a98:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <STEP+0xa>
    1a9c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <STEP+0xb>
							STEP[3] = Espm;
    1aa0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <Espm>
    1aa4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <Espm+0x1>
    1aa8:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <Espm+0x2>
    1aac:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <Espm+0x3>
    1ab0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <STEP+0xc>
    1ab4:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <STEP+0xd>
    1ab8:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <STEP+0xe>
    1abc:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <STEP+0xf>
							motor_movement(STEP,F,Fe);
    1ac0:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Fe>
    1ac4:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <Fe+0x1>
    1ac8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Fe+0x2>
    1acc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <Fe+0x3>
    1ad0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    1ad4:	6b 01       	movw	r12, r22
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <F>
    1adc:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <F+0x1>
    1ae0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <F+0x2>
    1ae4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <F+0x3>
    1ae8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    1aec:	ab 01       	movw	r20, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	97 01       	movw	r18, r14
    1af2:	86 01       	movw	r16, r12
    1af4:	82 2d       	mov	r24, r2
    1af6:	93 2d       	mov	r25, r3
    1af8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <motor_movement>
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					} 
					status = 1;
					for (int th = 0 ; th <= 360 ; th++)
    1afc:	ff ef       	ldi	r31, 0xFF	; 255
    1afe:	4f 1a       	sub	r4, r31
    1b00:	5f 0a       	sbc	r5, r31
    1b02:	29 e6       	ldi	r18, 0x69	; 105
    1b04:	42 16       	cp	r4, r18
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	52 06       	cpc	r5, r18
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <main+0x1418>
    1b0c:	f2 cd       	rjmp	.-1052   	; 0x16f2 <main+0xffc>
							STEP[2] = 0;
							STEP[3] = Espm;
							motor_movement(STEP,F,Fe);
						} 
					}
					status = 0;
    1b0e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
					break;
    1b12:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0xcc>
				case 28:
					if (!homeSet)
    1b16:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <homeSet>
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	38 c0       	rjmp	.+112    	; 0x1b8e <main+0x1498>
					{
						STEP[0] = find(String,'X');
    1b1e:	68 e5       	ldi	r22, 0x58	; 88
    1b20:	83 e1       	ldi	r24, 0x13	; 19
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	0e 94 96 02 	call	0x52c	; 0x52c <find>
    1b28:	68 2f       	mov	r22, r24
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 27 14 	call	0x284e	; 0x284e <__floatunsisf>
    1b34:	a7 e9       	ldi	r26, 0x97	; 151
    1b36:	b1 e0       	ldi	r27, 0x01	; 1
    1b38:	6d 93       	st	X+, r22
    1b3a:	7d 93       	st	X+, r23
    1b3c:	8d 93       	st	X+, r24
    1b3e:	9c 93       	st	X, r25
    1b40:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = find(String,'Y');
    1b42:	69 e5       	ldi	r22, 0x59	; 89
    1b44:	83 e1       	ldi	r24, 0x13	; 19
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	0e 94 96 02 	call	0x52c	; 0x52c <find>
    1b4c:	68 2f       	mov	r22, r24
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 27 14 	call	0x284e	; 0x284e <__floatunsisf>
    1b58:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <STEP+0x4>
    1b5c:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <STEP+0x5>
    1b60:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <STEP+0x6>
    1b64:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <STEP+0x7>
						STEP[2] = find(String,'Z');
    1b68:	6a e5       	ldi	r22, 0x5A	; 90
    1b6a:	83 e1       	ldi	r24, 0x13	; 19
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	0e 94 96 02 	call	0x52c	; 0x52c <find>
    1b72:	68 2f       	mov	r22, r24
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 27 14 	call	0x284e	; 0x284e <__floatunsisf>
    1b7e:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <STEP+0x8>
    1b82:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <STEP+0x9>
    1b86:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <STEP+0xa>
    1b8a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <STEP+0xb>
						//make auto home
					} 
					Transmit_Data("ok");
    1b8e:	80 e1       	ldi	r24, 0x10	; 16
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
					break;
    1b96:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0xcc>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					STEP[3] = get_value(String,'E');
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
					{
						FN = get_value(String,'F');
    1b9a:	66 e4       	ldi	r22, 0x46	; 70
    1b9c:	83 e1       	ldi	r24, 0x13	; 19
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1ba4:	1b 01       	movw	r2, r22
    1ba6:	2c 01       	movw	r4, r24
    1ba8:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <FN>
    1bac:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <FN+0x1>
    1bb0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <FN+0x2>
    1bb4:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <FN+0x3>
						if (FN != 0)
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	47 cc       	rjmp	.-1906   	; 0x1454 <main+0xd5e>
    1bc6:	57 cc       	rjmp	.-1874   	; 0x1476 <main+0xd80>
							Fe = FN;
						}
					}
					else
					{
						FN = get_value(String,'F');
    1bc8:	66 e4       	ldi	r22, 0x46	; 70
    1bca:	83 e1       	ldi	r24, 0x13	; 19
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1bd2:	1b 01       	movw	r2, r22
    1bd4:	2c 01       	movw	r4, r24
    1bd6:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <FN>
    1bda:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <FN+0x1>
    1bde:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <FN+0x2>
    1be2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <FN+0x3>
						if (FN != 0)
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	39 cc       	rjmp	.-1934   	; 0x1466 <main+0xd70>
    1bf4:	40 cc       	rjmp	.-1920   	; 0x1476 <main+0xd80>

00001bf6 <__vector_9>:
	TCNT0  = 0;
	sei();

}
ISR(TIMER0_OVF_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	2f 93       	push	r18
    1c0e:	3f 93       	push	r19
    1c10:	4f 93       	push	r20
    1c12:	5f 93       	push	r21
    1c14:	6f 93       	push	r22
    1c16:	7f 93       	push	r23
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	64 97       	sbiw	r28, 0x14	; 20
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	cd bf       	out	0x3d, r28	; 61
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    1c32:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tcon>
    1c36:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <tcon+0x1>
    1c3a:	8d 39       	cpi	r24, 0x9D	; 157
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	30 f4       	brcc	.+12     	; 0x1c4c <__vector_9+0x56>
	{
		tcon++;
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tcon+0x1>
    1c46:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tcon>
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <__vector_9+0x68>
		} else {
		gFlags.pidTimer = 1;
    1c4c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gFlags>
    1c50:	81 60       	ori	r24, 0x01	; 1
    1c52:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gFlags>
		tcon            = 0;
    1c56:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <tcon+0x1>
    1c5a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tcon>
		
	}
	if (gFlags.pidTimer == 1 ) 
    1c5e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gFlags>
    1c62:	80 ff       	sbrs	r24, 0
    1c64:	e9 c0       	rjmp	.+466    	; 0x1e38 <__vector_9+0x242>
	{
 		OCR1A =	pid_Controller(SE0	,getTemp(T2), &SpidData); //out the pid value to control the temperature of extruder
    1c66:	82 e5       	ldi	r24, 0x52	; 82
    1c68:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	ac 01       	movw	r20, r24
    1c70:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <SE0>
    1c74:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <SE0+0x1>
    1c78:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SE0+0x2>
    1c7c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SE0+0x3>
    1c80:	0f eb       	ldi	r16, 0xBF	; 191
    1c82:	11 e0       	ldi	r17, 0x01	; 1
    1c84:	0e 94 d6 11 	call	0x23ac	; 0x23ac <pid_Controller>
    1c88:	9b bd       	out	0x2b, r25	; 43
    1c8a:	8a bd       	out	0x2a, r24	; 42
  		OCR1B = pid_Controller(SB	,getTemp(T0), &BpidData); //out the pid value to control the temperature of heat bed
    1c8c:	80 e5       	ldi	r24, 0x50	; 80
    1c8e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <SB>
    1c9a:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <SB+0x1>
    1c9e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <SB+0x2>
    1ca2:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <SB+0x3>
    1ca6:	0b ed       	ldi	r16, 0xDB	; 219
    1ca8:	11 e0       	ldi	r17, 0x01	; 1
    1caa:	0e 94 d6 11 	call	0x23ac	; 0x23ac <pid_Controller>
    1cae:	99 bd       	out	0x29, r25	; 41
    1cb0:	88 bd       	out	0x28, r24	; 40
		gFlags.pidTimer = 0;
    1cb2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gFlags>
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gFlags>
    1cbc:	e1 e7       	ldi	r30, 0x71	; 113
    1cbe:	f2 e0       	ldi	r31, 0x02	; 2
    1cc0:	a7 ea       	ldi	r26, 0xA7	; 167
    1cc2:	b1 e0       	ldi	r27, 0x01	; 1
    1cc4:	8b e7       	ldi	r24, 0x7B	; 123
    1cc6:	92 e0       	ldi	r25, 0x02	; 2
		for (int x = 0 ; x < 10 ; x ++)
		{
			TE[x] = 0;
    1cc8:	11 92       	st	Z+, r1
			TB[x] = 0;
    1cca:	1d 92       	st	X+, r1
	if (gFlags.pidTimer == 1 ) 
	{
 		OCR1A =	pid_Controller(SE0	,getTemp(T2), &SpidData); //out the pid value to control the temperature of extruder
  		OCR1B = pid_Controller(SB	,getTemp(T0), &BpidData); //out the pid value to control the temperature of heat bed
		gFlags.pidTimer = 0;
		for (int x = 0 ; x < 10 ; x ++)
    1ccc:	e8 17       	cp	r30, r24
    1cce:	f9 07       	cpc	r31, r25
    1cd0:	d9 f7       	brne	.-10     	; 0x1cc8 <__vector_9+0xd2>
		{
			TE[x] = 0;
			TB[x] = 0;
		}
		if (ReadTemp) //send the temperature to uart
    1cd2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ReadTemp>
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <__vector_9+0xe6>
    1cda:	ae c0       	rjmp	.+348    	; 0x1e38 <__vector_9+0x242>
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
    1cdc:	82 e5       	ldi	r24, 0x52	; 82
    1cde:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1ce2:	03 e1       	ldi	r16, 0x13	; 19
    1ce4:	11 e0       	ldi	r17, 0x01	; 1
    1ce6:	23 e0       	ldi	r18, 0x03	; 3
    1ce8:	42 e0       	ldi	r20, 0x02	; 2
    1cea:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1cee:	9f 93       	push	r25
    1cf0:	8f 93       	push	r24
    1cf2:	81 e7       	ldi	r24, 0x71	; 113
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	9f 93       	push	r25
    1cf8:	8f 93       	push	r24
    1cfa:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
    1cfe:	80 e5       	ldi	r24, 0x50	; 80
    1d00:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1d04:	23 e0       	ldi	r18, 0x03	; 3
    1d06:	42 e0       	ldi	r20, 0x02	; 2
    1d08:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <dtostrf>
    1d0c:	9f 93       	push	r25
    1d0e:	8f 93       	push	r24
    1d10:	87 ea       	ldi	r24, 0xA7	; 167
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	9f 93       	push	r25
    1d16:	8f 93       	push	r24
    1d18:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sprintf>
			if ((BED_Activ == 1))
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <BED_Activ>
    1d2a:	88 23       	and	r24, r24
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <__vector_9+0x13a>
    1d2e:	52 c0       	rjmp	.+164    	; 0x1dd4 <__vector_9+0x1de>
			{
				char TEMP[20]={'T',':',
    1d30:	84 e5       	ldi	r24, 0x54	; 84
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	8a e3       	ldi	r24, 0x3A	; 58
    1d36:	8a 83       	std	Y+2, r24	; 0x02
					TE[0],TE[1],TE[2],TE[3],TE[4],
    1d38:	e1 e7       	ldi	r30, 0x71	; 113
    1d3a:	f2 e0       	ldi	r31, 0x02	; 2
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    1d3c:	90 81       	ld	r25, Z
    1d3e:	9b 83       	std	Y+3, r25	; 0x03
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	92 81       	ldd	r25, Z+2	; 0x02
    1d46:	9d 83       	std	Y+5, r25	; 0x05
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	94 81       	ldd	r25, Z+4	; 0x04
    1d4e:	9f 83       	std	Y+7, r25	; 0x07
    1d50:	90 e2       	ldi	r25, 0x20	; 32
    1d52:	98 87       	std	Y+8, r25	; 0x08
    1d54:	25 e4       	ldi	r18, 0x45	; 69
    1d56:	29 87       	std	Y+9, r18	; 0x09
    1d58:	8a 87       	std	Y+10, r24	; 0x0a
    1d5a:	20 e3       	ldi	r18, 0x30	; 48
    1d5c:	2b 87       	std	Y+11, r18	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	92 e4       	ldi	r25, 0x42	; 66
    1d62:	9d 87       	std	Y+13, r25	; 0x0d
    1d64:	8e 87       	std	Y+14, r24	; 0x0e
					TE[0],TE[1],TE[2],TE[3],TE[4],
					' ','E',':','0',' ',
				'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
    1d66:	e7 ea       	ldi	r30, 0xA7	; 167
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
    1d6e:	81 81       	ldd	r24, Z+1	; 0x01
    1d70:	88 8b       	std	Y+16, r24	; 0x10
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	89 8b       	std	Y+17, r24	; 0x11
    1d76:	83 81       	ldd	r24, Z+3	; 0x03
    1d78:	8a 8b       	std	Y+18, r24	; 0x12
    1d7a:	84 81       	ldd	r24, Z+4	; 0x04
    1d7c:	8b 8b       	std	Y+19, r24	; 0x13
    1d7e:	8d e0       	ldi	r24, 0x0D	; 13
    1d80:	8c 8b       	std	Y+20, r24	; 0x14
					TE[0],TE[1],TE[2],TE[3],TE[4],
					' ','E',':','0',' ',
				'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
				if ((SE0 < getTemp(T0)) && (SB < getTemp(T2))) //enable extrude filament
    1d82:	80 e5       	ldi	r24, 0x50	; 80
    1d84:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1d88:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <SE0>
    1d8c:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <SE0+0x1>
    1d90:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <SE0+0x2>
    1d94:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <SE0+0x3>
    1d98:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	9c f4       	brge	.+38     	; 0x1dc6 <__vector_9+0x1d0>
    1da0:	82 e5       	ldi	r24, 0x52	; 82
    1da2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1da6:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <SB>
    1daa:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <SB+0x1>
    1dae:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <SB+0x2>
    1db2:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <SB+0x3>
    1db6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	24 f4       	brge	.+8      	; 0x1dc6 <__vector_9+0x1d0>
				{
					extrud = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <extrud>
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <__vector_9+0x1d4>
				}
				else
				{
					extrud = 0;
    1dc6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <extrud>
				}
				Transmit_Data(TEMP);
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
    1dd2:	32 c0       	rjmp	.+100    	; 0x1e38 <__vector_9+0x242>
			}
			else
			{
				char TEMP[12]={'T',':',
    1dd4:	84 e5       	ldi	r24, 0x54	; 84
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	8a e3       	ldi	r24, 0x3A	; 58
    1dda:	8a 83       	std	Y+2, r24	; 0x02
					TE[0],TE[1],TE[2],TE[3],TE[4],
    1ddc:	e1 e7       	ldi	r30, 0x71	; 113
    1dde:	f2 e0       	ldi	r31, 0x02	; 2
				}
				Transmit_Data(TEMP);
			}
			else
			{
				char TEMP[12]={'T',':',
    1de0:	90 81       	ld	r25, Z
    1de2:	9b 83       	std	Y+3, r25	; 0x03
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	92 81       	ldd	r25, Z+2	; 0x02
    1dea:	9d 83       	std	Y+5, r25	; 0x05
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	94 81       	ldd	r25, Z+4	; 0x04
    1df2:	9f 83       	std	Y+7, r25	; 0x07
    1df4:	90 e2       	ldi	r25, 0x20	; 32
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	95 e4       	ldi	r25, 0x45	; 69
    1dfa:	99 87       	std	Y+9, r25	; 0x09
    1dfc:	8a 87       	std	Y+10, r24	; 0x0a
    1dfe:	80 e3       	ldi	r24, 0x30	; 48
    1e00:	8b 87       	std	Y+11, r24	; 0x0b
    1e02:	8d e0       	ldi	r24, 0x0D	; 13
    1e04:	8c 87       	std	Y+12, r24	; 0x0c
					TE[0],TE[1],TE[2],TE[3],TE[4],
				' ','E',':','0','\r'};
				if ((SE0 < getTemp(T0)))
    1e06:	80 e5       	ldi	r24, 0x50	; 80
    1e08:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1e0c:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <SE0>
    1e10:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <SE0+0x1>
    1e14:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <SE0+0x2>
    1e18:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <SE0+0x3>
    1e1c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	24 f4       	brge	.+8      	; 0x1e2c <__vector_9+0x236>
				{
					extrud = 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <extrud>
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <__vector_9+0x23a>
				}
				else
				{
					extrud = 0;
    1e2c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <extrud>
				}
				Transmit_Data(TEMP);
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
			}
		}
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
    1e38:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <status>
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__vector_9+0x24c>
    1e40:	60 c0       	rjmp	.+192    	; 0x1f02 <__vector_9+0x30c>
    1e42:	5f 9b       	sbis	0x0b, 7	; 11
    1e44:	59 c0       	rjmp	.+178    	; 0x1ef8 <__vector_9+0x302>
    1e46:	e3 e1       	ldi	r30, 0x13	; 19
    1e48:	f2 e0       	ldi	r31, 0x02	; 2
    1e4a:	83 e6       	ldi	r24, 0x63	; 99
    1e4c:	92 e0       	ldi	r25, 0x02	; 2
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    1e4e:	11 92       	st	Z+, r1
		}
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
	{
		for (int i = 0 ; i < 80 ;i++)
    1e50:	8e 17       	cp	r24, r30
    1e52:	9f 07       	cpc	r25, r31
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <__vector_9+0x258>
		{
			String [i] = 0;
		}
		Recive_Data(String);
    1e56:	83 e1       	ldi	r24, 0x13	; 19
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	0e 94 ef 12 	call	0x25de	; 0x25de <Recive_Data>
		Transmit_Data("the printer is busy");
    1e5e:	8b e2       	ldi	r24, 0x2B	; 43
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Transmit_Data>
	}
	if (String[0] == 'M' && status == 1)
    1e66:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <String>
    1e6a:	8d 34       	cpi	r24, 0x4D	; 77
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <__vector_9+0x27a>
    1e6e:	49 c0       	rjmp	.+146    	; 0x1f02 <__vector_9+0x30c>
    1e70:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <status>
    1e74:	88 23       	and	r24, r24
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__vector_9+0x284>
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <__vector_9+0x30c>
	{
		SUBval = get_int(String,'M');
    1e7a:	6d e4       	ldi	r22, 0x4D	; 77
    1e7c:	83 e1       	ldi	r24, 0x13	; 19
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	0e 94 50 02 	call	0x4a0	; 0x4a0 <get_int>
    1e84:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <SUBval+0x1>
    1e88:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <SUBval>
		if (SUBval == 112)
    1e8c:	80 37       	cpi	r24, 0x70	; 112
    1e8e:	91 05       	cpc	r25, r1
    1e90:	c1 f5       	brne	.+112    	; 0x1f02 <__vector_9+0x30c>
		{
			STEP[0] = 0;
    1e92:	e7 e9       	ldi	r30, 0x97	; 151
    1e94:	f1 e0       	ldi	r31, 0x01	; 1
    1e96:	10 82       	st	Z, r1
    1e98:	11 82       	std	Z+1, r1	; 0x01
    1e9a:	12 82       	std	Z+2, r1	; 0x02
    1e9c:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1e9e:	14 82       	std	Z+4, r1	; 0x04
    1ea0:	15 82       	std	Z+5, r1	; 0x05
    1ea2:	16 82       	std	Z+6, r1	; 0x06
    1ea4:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    1ea6:	10 86       	std	Z+8, r1	; 0x08
    1ea8:	11 86       	std	Z+9, r1	; 0x09
    1eaa:	12 86       	std	Z+10, r1	; 0x0a
    1eac:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1eae:	14 86       	std	Z+12, r1	; 0x0c
    1eb0:	15 86       	std	Z+13, r1	; 0x0d
    1eb2:	16 86       	std	Z+14, r1	; 0x0e
    1eb4:	17 86       	std	Z+15, r1	; 0x0f
			motor_movement(STEP,F,Fe);
    1eb6:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Fe>
    1eba:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <Fe+0x1>
    1ebe:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Fe+0x2>
    1ec2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <Fe+0x3>
    1ec6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    1eca:	6b 01       	movw	r12, r22
    1ecc:	7c 01       	movw	r14, r24
    1ece:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <F>
    1ed2:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <F+0x1>
    1ed6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <F+0x2>
    1eda:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <F+0x3>
    1ede:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    1ee2:	ab 01       	movw	r20, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	97 01       	movw	r18, r14
    1ee8:	86 01       	movw	r16, r12
    1eea:	87 e9       	ldi	r24, 0x97	; 151
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <motor_movement>
			status = 0;
    1ef2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <status>
		}
	}
}
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <__vector_9+0x30c>
			String [i] = 0;
		}
		Recive_Data(String);
		Transmit_Data("the printer is busy");
	}
	if (String[0] == 'M' && status == 1)
    1ef8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <String>
    1efc:	8d 34       	cpi	r24, 0x4D	; 77
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <__vector_9+0x30c>
    1f00:	bc cf       	rjmp	.-136    	; 0x1e7a <__vector_9+0x284>
			STEP[3] = 0;
			motor_movement(STEP,F,Fe);
			status = 0;
		}
	}
}
    1f02:	64 96       	adiw	r28, 0x14	; 20
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	df 90       	pop	r13
    1f34:	cf 90       	pop	r12
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <__vector_1>:
ISR (INT0_vect)
{
    1f40:	1f 92       	push	r1
    1f42:	0f 92       	push	r0
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	0f 92       	push	r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	2f 93       	push	r18
    1f4c:	3f 93       	push	r19
    1f4e:	4f 93       	push	r20
    1f50:	5f 93       	push	r21
    1f52:	6f 93       	push	r22
    1f54:	7f 93       	push	r23
    1f56:	8f 93       	push	r24
    1f58:	9f 93       	push	r25
    1f5a:	af 93       	push	r26
    1f5c:	bf 93       	push	r27
    1f5e:	ef 93       	push	r30
    1f60:	ff 93       	push	r31
	pin_write (M_PORT, Z_DIR_PIN ,1 );
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	66 e0       	ldi	r22, 0x06	; 6
    1f66:	83 e3       	ldi	r24, 0x33	; 51
    1f68:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
	pin_write (M_PORT, Z ,0 );
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	62 e0       	ldi	r22, 0x02	; 2
    1f70:	83 e3       	ldi	r24, 0x33	; 51
    1f72:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f76:	8f ea       	ldi	r24, 0xAF	; 175
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <__vector_1+0x3a>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <__vector_1+0x40>
    1f80:	00 00       	nop
	_delay_us (300);
	pin_write (M_PORT, Z ,1 );
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	83 e3       	ldi	r24, 0x33	; 51
    1f88:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
    1f8c:	8f ea       	ldi	r24, 0xAF	; 175
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <__vector_1+0x50>
    1f94:	00 c0       	rjmp	.+0      	; 0x1f96 <__vector_1+0x56>
    1f96:	00 00       	nop
	_delay_us (300);
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],long speed,long exspeed)
{
    1fba:	2f 92       	push	r2
    1fbc:	3f 92       	push	r3
    1fbe:	4f 92       	push	r4
    1fc0:	5f 92       	push	r5
    1fc2:	6f 92       	push	r6
    1fc4:	7f 92       	push	r7
    1fc6:	8f 92       	push	r8
    1fc8:	9f 92       	push	r9
    1fca:	af 92       	push	r10
    1fcc:	bf 92       	push	r11
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	cc 59       	subi	r28, 0x9C	; 156
    1fe4:	d1 09       	sbc	r29, r1
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	6c 01       	movw	r12, r24
    1ff2:	4a 01       	movw	r8, r20
    1ff4:	5b 01       	movw	r10, r22
    1ff6:	c7 56       	subi	r28, 0x67	; 103
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	08 83       	st	Y, r16
    1ffc:	19 83       	std	Y+1, r17	; 0x01
    1ffe:	2a 83       	std	Y+2, r18	; 0x02
    2000:	3b 83       	std	Y+3, r19	; 0x03
    2002:	c9 59       	subi	r28, 0x99	; 153
    2004:	d0 40       	sbci	r29, 0x00	; 0
	long stepDuration = (1/speed)*60*pow(10,6);
    2006:	41 2c       	mov	r4, r1
    2008:	51 2c       	mov	r5, r1
    200a:	32 01       	movw	r6, r4
    200c:	43 94       	inc	r4
    200e:	c3 01       	movw	r24, r6
    2010:	b2 01       	movw	r22, r4
    2012:	a5 01       	movw	r20, r10
    2014:	94 01       	movw	r18, r8
    2016:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodsi4>
    201a:	ac e3       	ldi	r26, 0x3C	; 60
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__muluhisi3>
    2022:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	34 e2       	ldi	r19, 0x24	; 36
    202a:	44 e7       	ldi	r20, 0x74	; 116
    202c:	59 e4       	ldi	r21, 0x49	; 73
    202e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    2032:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    2036:	4b 01       	movw	r8, r22
    2038:	5c 01       	movw	r10, r24
	long exstepDuration = (1/exspeed)*60*pow(10,6);
    203a:	c3 01       	movw	r24, r6
    203c:	b2 01       	movw	r22, r4
    203e:	c7 56       	subi	r28, 0x67	; 103
    2040:	df 4f       	sbci	r29, 0xFF	; 255
    2042:	28 81       	ld	r18, Y
    2044:	39 81       	ldd	r19, Y+1	; 0x01
    2046:	4a 81       	ldd	r20, Y+2	; 0x02
    2048:	5b 81       	ldd	r21, Y+3	; 0x03
    204a:	c9 59       	subi	r28, 0x99	; 153
    204c:	d0 40       	sbci	r29, 0x00	; 0
    204e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodsi4>
    2052:	ac e3       	ldi	r26, 0x3C	; 60
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__muluhisi3>
    205a:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	34 e2       	ldi	r19, 0x24	; 36
    2062:	44 e7       	ldi	r20, 0x74	; 116
    2064:	59 e4       	ldi	r21, 0x49	; 73
    2066:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    206a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    206e:	2b 01       	movw	r4, r22
    2070:	3c 01       	movw	r6, r24
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    2072:	88 e0       	ldi	r24, 0x08	; 8
    2074:	e0 e8       	ldi	r30, 0x80	; 128
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	de 01       	movw	r26, r28
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	01 90       	ld	r0, Z+
    207e:	0d 92       	st	X+, r0
    2080:	8a 95       	dec	r24
    2082:	e1 f7       	brne	.-8      	; 0x207c <motor_movement+0xc2>
    2084:	76 01       	movw	r14, r12
    2086:	8e 01       	movw	r16, r28
    2088:	0f 5f       	subi	r16, 0xFF	; 255
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	1e 01       	movw	r2, r28
    208e:	29 e0       	ldi	r18, 0x09	; 9
    2090:	22 0e       	add	r2, r18
    2092:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	f7 01       	movw	r30, r14
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	8c f4       	brge	.+34     	; 0x20ce <motor_movement+0x114>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	f8 01       	movw	r30, r16
    20b0:	60 81       	ld	r22, Z
    20b2:	83 e3       	ldi	r24, 0x33	; 51
    20b4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
			step [i] = step [i] * -1;
    20b8:	f7 01       	movw	r30, r14
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	a2 81       	ldd	r26, Z+2	; 0x02
    20c0:	b3 81       	ldd	r27, Z+3	; 0x03
    20c2:	b0 58       	subi	r27, 0x80	; 128
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	a2 83       	std	Z+2, r26	; 0x02
    20ca:	b3 83       	std	Z+3, r27	; 0x03
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <motor_movement+0x120>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	f8 01       	movw	r30, r16
    20d2:	60 81       	ld	r22, Z
    20d4:	83 e3       	ldi	r24, 0x33	; 51
    20d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
    20da:	f4 e0       	ldi	r31, 0x04	; 4
    20dc:	ef 0e       	add	r14, r31
    20de:	f1 1c       	adc	r15, r1
    20e0:	0e 5f       	subi	r16, 0xFE	; 254
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],long speed,long exspeed)
{
	long stepDuration = (1/speed)*60*pow(10,6);
	long exstepDuration = (1/exspeed)*60*pow(10,6);
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    20e4:	20 16       	cp	r2, r16
    20e6:	31 06       	cpc	r3, r17
    20e8:	a9 f6       	brne	.-86     	; 0x2094 <motor_movement+0xda>
		int Out;     // make one step to one motor in one unit of time
		int Next[16];
	};
	typedef const struct State STyp; //define STYP from type of struct State
	/*{Current state,{next state}} */
	STyp FSM[4]=
    20ea:	88 e8       	ldi	r24, 0x88	; 136
    20ec:	e8 e8       	ldi	r30, 0x88	; 136
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	de 01       	movw	r26, r28
    20f2:	51 96       	adiw	r26, 0x11	; 17
    20f4:	01 90       	ld	r0, Z+
    20f6:	0d 92       	st	X+, r0
    20f8:	8a 95       	dec	r24
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <motor_movement+0x13a>
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
		j [0] = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9a 87       	std	Y+10, r25	; 0x0a
    2102:	89 87       	std	Y+9, r24	; 0x09
		j [1] = 1;
    2104:	9c 87       	std	Y+12, r25	; 0x0c
    2106:	8b 87       	std	Y+11, r24	; 0x0b
		j [2] = 1;
    2108:	9e 87       	std	Y+14, r25	; 0x0e
    210a:	8d 87       	std	Y+13, r24	; 0x0d
		j [3] = 1;
    210c:	98 8b       	std	Y+16, r25	; 0x10
    210e:	8f 87       	std	Y+15, r24	; 0x0f
		{Y,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
    2110:	00 e0       	ldi	r16, 0x00	; 0
    2112:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2114:	0f 2e       	mov	r0, r31
    2116:	f2 e2       	ldi	r31, 0x22	; 34
    2118:	2f 2e       	mov	r2, r31
    211a:	f0 2d       	mov	r31, r0
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
    211c:	0f 2e       	mov	r0, r31
    211e:	f1 e1       	ldi	r31, 0x11	; 17
    2120:	3f 2e       	mov	r3, r31
    2122:	f0 2d       	mov	r31, r0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2124:	20 9e       	mul	r2, r16
    2126:	f0 01       	movw	r30, r0
    2128:	21 9e       	mul	r2, r17
    212a:	f0 0d       	add	r31, r0
    212c:	11 24       	eor	r1, r1
    212e:	21 e0       	ldi	r18, 0x01	; 1
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	2c 0f       	add	r18, r28
    2134:	3d 1f       	adc	r19, r29
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	60 89       	ldd	r22, Z+16	; 0x10
    213c:	83 e3       	ldi	r24, 0x33	; 51
    213e:	0e 94 10 03 	call	0x620	; 0x620 <pin_XOR>
			 step[S] = step[S] - 1;
    2142:	78 01       	movw	r14, r16
    2144:	ee 0c       	add	r14, r14
    2146:	ff 1c       	adc	r15, r15
    2148:	ee 0c       	add	r14, r14
    214a:	ff 1c       	adc	r15, r15
    214c:	ec 0c       	add	r14, r12
    214e:	fd 1c       	adc	r15, r13
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	f7 01       	movw	r30, r14
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
    2166:	f7 01       	movw	r30, r14
    2168:	60 83       	st	Z, r22
    216a:	71 83       	std	Z+1, r23	; 0x01
    216c:	82 83       	std	Z+2, r24	; 0x02
    216e:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	a9 01       	movw	r20, r18
    2176:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    217a:	18 16       	cp	r1, r24
    217c:	5c f0       	brlt	.+22     	; 0x2194 <motor_movement+0x1da>
			  j[S] = 0;
    217e:	f8 01       	movw	r30, r16
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	21 e0       	ldi	r18, 0x01	; 1
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	2c 0f       	add	r18, r28
    218a:	3d 1f       	adc	r19, r29
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	11 86       	std	Z+9, r1	; 0x09
    2192:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    2194:	03 30       	cpi	r16, 0x03	; 3
    2196:	11 05       	cpc	r17, r1
    2198:	59 f4       	brne	.+22     	; 0x21b0 <motor_movement+0x1f6>
			  {
				  for (int i = exstepDuration ; i>0 ; i-- )
    219a:	c2 01       	movw	r24, r4
    219c:	18 16       	cp	r1, r24
    219e:	19 06       	cpc	r1, r25
    21a0:	8c f4       	brge	.+34     	; 0x21c4 <motor_movement+0x20a>
    21a2:	35 e0       	ldi	r19, 0x05	; 5
    21a4:	3a 95       	dec	r19
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <motor_movement+0x1ea>
    21a8:	00 00       	nop
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	d1 f7       	brne	.-12     	; 0x21a2 <motor_movement+0x1e8>
    21ae:	0a c0       	rjmp	.+20     	; 0x21c4 <motor_movement+0x20a>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>0 ; i-- )
    21b0:	c4 01       	movw	r24, r8
    21b2:	18 16       	cp	r1, r24
    21b4:	19 06       	cpc	r1, r25
    21b6:	34 f4       	brge	.+12     	; 0x21c4 <motor_movement+0x20a>
    21b8:	e5 e0       	ldi	r30, 0x05	; 5
    21ba:	ea 95       	dec	r30
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <motor_movement+0x200>
    21be:	00 00       	nop
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	d1 f7       	brne	.-12     	; 0x21b8 <motor_movement+0x1fe>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    21c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c6:	98 89       	ldd	r25, Y+16	; 0x10
    21c8:	9c 01       	movw	r18, r24
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	22 0f       	add	r18, r18
    21d0:	33 1f       	adc	r19, r19
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    21e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	29 85       	ldd	r18, Y+9	; 0x09
    21f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    21f6:	82 0f       	add	r24, r18
    21f8:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    21fa:	30 9e       	mul	r3, r16
    21fc:	f0 01       	movw	r30, r0
    21fe:	31 9e       	mul	r3, r17
    2200:	f0 0d       	add	r31, r0
    2202:	11 24       	eor	r1, r1
    2204:	e8 0f       	add	r30, r24
    2206:	f9 1f       	adc	r31, r25
    2208:	31 96       	adiw	r30, 0x01	; 1
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	21 e0       	ldi	r18, 0x01	; 1
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	2c 0f       	add	r18, r28
    2214:	3d 1f       	adc	r19, r29
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	00 89       	ldd	r16, Z+16	; 0x10
    221c:	11 89       	ldd	r17, Z+17	; 0x11
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    221e:	89 2b       	or	r24, r25
    2220:	09 f0       	breq	.+2      	; 0x2224 <motor_movement+0x26a>
    2222:	80 cf       	rjmp	.-256    	; 0x2124 <motor_movement+0x16a>
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    2224:	c4 56       	subi	r28, 0x64	; 100
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	9f 90       	pop	r9
    2248:	8f 90       	pop	r8
    224a:	7f 90       	pop	r7
    224c:	6f 90       	pop	r6
    224e:	5f 90       	pop	r5
    2250:	4f 90       	pop	r4
    2252:	3f 90       	pop	r3
    2254:	2f 90       	pop	r2
    2256:	08 95       	ret

00002258 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    2258:	88 35       	cpi	r24, 0x58	; 88
    225a:	49 f0       	breq	.+18     	; 0x226e <motor_EN_DES+0x16>
    225c:	18 f4       	brcc	.+6      	; 0x2264 <motor_EN_DES+0xc>
    225e:	85 34       	cpi	r24, 0x45	; 69
    2260:	c1 f0       	breq	.+48     	; 0x2292 <motor_EN_DES+0x3a>
    2262:	08 95       	ret
    2264:	89 35       	cpi	r24, 0x59	; 89
    2266:	49 f0       	breq	.+18     	; 0x227a <motor_EN_DES+0x22>
    2268:	8a 35       	cpi	r24, 0x5A	; 90
    226a:	69 f0       	breq	.+26     	; 0x2286 <motor_EN_DES+0x2e>
    226c:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    226e:	46 2f       	mov	r20, r22
    2270:	64 e0       	ldi	r22, 0x04	; 4
    2272:	86 e3       	ldi	r24, 0x36	; 54
    2274:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
			break;
    2278:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    227a:	46 2f       	mov	r20, r22
    227c:	65 e0       	ldi	r22, 0x05	; 5
    227e:	86 e3       	ldi	r24, 0x36	; 54
    2280:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
			break;
    2284:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    2286:	46 2f       	mov	r20, r22
    2288:	66 e0       	ldi	r22, 0x06	; 6
    228a:	86 e3       	ldi	r24, 0x36	; 54
    228c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
			break;
    2290:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    2292:	46 2f       	mov	r20, r22
    2294:	67 e0       	ldi	r22, 0x07	; 7
    2296:	86 e3       	ldi	r24, 0x36	; 54
    2298:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pin_write>
    229c:	08 95       	ret

0000229e <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	83 e3       	ldi	r24, 0x33	; 51
    22a2:	0e 94 01 03 	call	0x602	; 0x602 <port_direction>
	port_write(M_PORT,0);
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	83 e3       	ldi	r24, 0x33	; 51
    22aa:	0e 94 0c 03 	call	0x618	; 0x618 <port_write>
	pin_direction(EN_DES_PORT,EN_DES_XPIN,output);
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	64 e0       	ldi	r22, 0x04	; 4
    22b2:	86 e3       	ldi	r24, 0x36	; 54
    22b4:	0e 94 c7 02 	call	0x58e	; 0x58e <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_YPIN,output);
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	65 e0       	ldi	r22, 0x05	; 5
    22bc:	86 e3       	ldi	r24, 0x36	; 54
    22be:	0e 94 c7 02 	call	0x58e	; 0x58e <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_ZPIN,output);
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	66 e0       	ldi	r22, 0x06	; 6
    22c6:	86 e3       	ldi	r24, 0x36	; 54
    22c8:	0e 94 c7 02 	call	0x58e	; 0x58e <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_EPIN,output);
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	67 e0       	ldi	r22, 0x07	; 7
    22d0:	86 e3       	ldi	r24, 0x36	; 54
    22d2:	0e 94 c7 02 	call	0x58e	; 0x58e <pin_direction>
	motor_EN_DES('X',0);
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	88 e5       	ldi	r24, 0x58	; 88
    22da:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
	motor_EN_DES('Y',0);
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	89 e5       	ldi	r24, 0x59	; 89
    22e2:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
	motor_EN_DES('Z',0);
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	8a e5       	ldi	r24, 0x5A	; 90
    22ea:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
	motor_EN_DES('E',0);
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	85 e4       	ldi	r24, 0x45	; 69
    22f2:	0e 94 2c 11 	call	0x2258	; 0x2258 <motor_EN_DES>
    22f6:	08 95       	ret

000022f8 <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    22f8:	8f 92       	push	r8
    22fa:	9f 92       	push	r9
    22fc:	af 92       	push	r10
    22fe:	bf 92       	push	r11
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	49 01       	movw	r8, r18
    2312:	5a 01       	movw	r10, r20
    2314:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    2316:	6c 83       	std	Y+4, r22	; 0x04
    2318:	7d 83       	std	Y+5, r23	; 0x05
    231a:	8e 83       	std	Y+6, r24	; 0x06
    231c:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    231e:	28 87       	std	Y+8, r18	; 0x08
    2320:	39 87       	std	Y+9, r19	; 0x09
    2322:	4a 87       	std	Y+10, r20	; 0x0a
    2324:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    2326:	ec 86       	std	Y+12, r14	; 0x0c
    2328:	fd 86       	std	Y+13, r15	; 0x0d
    232a:	0e 87       	std	Y+14, r16	; 0x0e
    232c:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    233a:	9b 01       	movw	r18, r22
    233c:	ac 01       	movw	r20, r24
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	7e ef       	ldi	r23, 0xFE	; 254
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	96 e4       	ldi	r25, 0x46	; 70
    2346:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    234a:	6c 8b       	std	Y+20, r22	; 0x14
    234c:	7d 8b       	std	Y+21, r23	; 0x15
    234e:	8e 8b       	std	Y+22, r24	; 0x16
    2350:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	c5 01       	movw	r24, r10
    235c:	b4 01       	movw	r22, r8
    235e:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    236a:	9b 01       	movw	r18, r22
    236c:	ac 01       	movw	r20, r24
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	9f e4       	ldi	r25, 0x4F	; 79
    2376:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    237a:	68 8f       	std	Y+24, r22	; 0x18
    237c:	79 8f       	std	Y+25, r23	; 0x19
    237e:	8a 8f       	std	Y+26, r24	; 0x1a
    2380:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    2382:	18 82       	st	Y, r1
    2384:	19 82       	std	Y+1, r1	; 0x01
    2386:	1a 82       	std	Y+2, r1	; 0x02
    2388:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    238a:	18 8a       	std	Y+16, r1	; 0x10
    238c:	19 8a       	std	Y+17, r1	; 0x11
    238e:	1a 8a       	std	Y+18, r1	; 0x12
    2390:	1b 8a       	std	Y+19, r1	; 0x13
}
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	08 95       	ret

000023ac <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    23ac:	4f 92       	push	r4
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	2a 97       	sbiw	r28, 0x0a	; 10
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	1a 87       	std	Y+10, r17	; 0x0a
    23de:	09 87       	std	Y+9, r16	; 0x09
	double error = setPoint - processValue;
    23e0:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
    23e4:	69 83       	std	Y+1, r22	; 0x01
    23e6:	7a 83       	std	Y+2, r23	; 0x02
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	9c 83       	std	Y+4, r25	; 0x04
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    23ec:	f8 01       	movw	r30, r16
    23ee:	c4 84       	ldd	r12, Z+12	; 0x0c
    23f0:	d5 84       	ldd	r13, Z+13	; 0x0d
    23f2:	e6 84       	ldd	r14, Z+14	; 0x0e
    23f4:	f7 84       	ldd	r15, Z+15	; 0x0f
	pid_st ->SumError = pid_st ->SumError + error ;
    23f6:	20 89       	ldd	r18, Z+16	; 0x10
    23f8:	31 89       	ldd	r19, Z+17	; 0x11
    23fa:	42 89       	ldd	r20, Z+18	; 0x12
    23fc:	53 89       	ldd	r21, Z+19	; 0x13
    23fe:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2402:	4b 01       	movw	r8, r22
    2404:	5c 01       	movw	r10, r24
    2406:	f8 01       	movw	r30, r16
    2408:	60 8b       	std	Z+16, r22	; 0x10
    240a:	71 8b       	std	Z+17, r23	; 0x11
    240c:	82 8b       	std	Z+18, r24	; 0x12
    240e:	93 8b       	std	Z+19, r25	; 0x13
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    2410:	20 81       	ld	r18, Z
    2412:	31 81       	ldd	r19, Z+1	; 0x01
    2414:	42 81       	ldd	r20, Z+2	; 0x02
    2416:	53 81       	ldd	r21, Z+3	; 0x03
    2418:	69 81       	ldd	r22, Y+1	; 0x01
    241a:	7a 81       	ldd	r23, Y+2	; 0x02
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	0e 94 08 13 	call	0x2610	; 0x2610 <__subsf3>
    2424:	a7 01       	movw	r20, r14
    2426:	96 01       	movw	r18, r12
    2428:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    242c:	6d 83       	std	Y+5, r22	; 0x05
    242e:	7e 83       	std	Y+6, r23	; 0x06
    2430:	8f 83       	std	Y+7, r24	; 0x07
    2432:	98 87       	std	Y+8, r25	; 0x08
	if (error > (pid_st ->MaxError))
    2434:	f8 01       	movw	r30, r16
    2436:	44 88       	ldd	r4, Z+20	; 0x14
    2438:	55 88       	ldd	r5, Z+21	; 0x15
    243a:	66 88       	ldd	r6, Z+22	; 0x16
    243c:	77 88       	ldd	r7, Z+23	; 0x17
    243e:	a3 01       	movw	r20, r6
    2440:	92 01       	movw	r18, r4
    2442:	69 81       	ldd	r22, Y+1	; 0x01
    2444:	7a 81       	ldd	r23, Y+2	; 0x02
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    244e:	18 16       	cp	r1, r24
    2450:	b4 f0       	brlt	.+44     	; 0x247e <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    2452:	a3 01       	movw	r20, r6
    2454:	92 01       	movw	r18, r4
    2456:	50 58       	subi	r21, 0x80	; 128
    2458:	69 81       	ldd	r22, Y+1	; 0x01
    245a:	7a 81       	ldd	r23, Y+2	; 0x02
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    2464:	88 23       	and	r24, r24
    2466:	ac f0       	brlt	.+42     	; 0x2492 <pid_Controller+0xe6>
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    2468:	a7 01       	movw	r20, r14
    246a:	96 01       	movw	r18, r12
    246c:	69 81       	ldd	r22, Y+1	; 0x01
    246e:	7a 81       	ldd	r23, Y+2	; 0x02
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    2478:	2b 01       	movw	r4, r22
    247a:	3c 01       	movw	r6, r24
    247c:	13 c0       	rjmp	.+38     	; 0x24a4 <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	if (error > (pid_st ->MaxError))
	{
		P_value = INT16_MAX;
    247e:	0f 2e       	mov	r0, r31
    2480:	41 2c       	mov	r4, r1
    2482:	fe ef       	ldi	r31, 0xFE	; 254
    2484:	5f 2e       	mov	r5, r31
    2486:	66 24       	eor	r6, r6
    2488:	6a 94       	dec	r6
    248a:	f6 e4       	ldi	r31, 0x46	; 70
    248c:	7f 2e       	mov	r7, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	09 c0       	rjmp	.+18     	; 0x24a4 <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    2492:	0f 2e       	mov	r0, r31
    2494:	41 2c       	mov	r4, r1
    2496:	fe ef       	ldi	r31, 0xFE	; 254
    2498:	5f 2e       	mov	r5, r31
    249a:	66 24       	eor	r6, r6
    249c:	6a 94       	dec	r6
    249e:	f6 ec       	ldi	r31, 0xC6	; 198
    24a0:	7f 2e       	mov	r7, r31
    24a2:	f0 2d       	mov	r31, r0
	}
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    24a4:	e9 85       	ldd	r30, Y+9	; 0x09
    24a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    24a8:	c0 8c       	ldd	r12, Z+24	; 0x18
    24aa:	d1 8c       	ldd	r13, Z+25	; 0x19
    24ac:	e2 8c       	ldd	r14, Z+26	; 0x1a
    24ae:	f3 8c       	ldd	r15, Z+27	; 0x1b
    24b0:	a7 01       	movw	r20, r14
    24b2:	96 01       	movw	r18, r12
    24b4:	c5 01       	movw	r24, r10
    24b6:	b4 01       	movw	r22, r8
    24b8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__gesf2>
    24bc:	18 16       	cp	r1, r24
    24be:	5c f4       	brge	.+22     	; 0x24d6 <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    24c0:	e9 85       	ldd	r30, Y+9	; 0x09
    24c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    24c4:	c0 8a       	std	Z+16, r12	; 0x10
    24c6:	d1 8a       	std	Z+17, r13	; 0x11
    24c8:	e2 8a       	std	Z+18, r14	; 0x12
    24ca:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5e e4       	ldi	r21, 0x4E	; 78
    24d4:	23 c0       	rjmp	.+70     	; 0x251c <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    24d6:	f7 fa       	bst	r15, 7
    24d8:	f0 94       	com	r15
    24da:	f7 f8       	bld	r15, 7
    24dc:	f0 94       	com	r15
    24de:	a7 01       	movw	r20, r14
    24e0:	96 01       	movw	r18, r12
    24e2:	c5 01       	movw	r24, r10
    24e4:	b4 01       	movw	r22, r8
    24e6:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	6c f0       	brlt	.+26     	; 0x2508 <pid_Controller+0x15c>
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
    24ee:	e9 85       	ldd	r30, Y+9	; 0x09
    24f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    24f2:	20 85       	ldd	r18, Z+8	; 0x08
    24f4:	31 85       	ldd	r19, Z+9	; 0x09
    24f6:	42 85       	ldd	r20, Z+10	; 0x0a
    24f8:	53 85       	ldd	r21, Z+11	; 0x0b
    24fa:	c5 01       	movw	r24, r10
    24fc:	b4 01       	movw	r22, r8
    24fe:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    2502:	9b 01       	movw	r18, r22
    2504:	ac 01       	movw	r20, r24
    2506:	0a c0       	rjmp	.+20     	; 0x251c <pid_Controller+0x170>
		pid_st ->SumError = pid_st ->MaxSumError;
		I_value = INT32_MAX/2;
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    2508:	e9 85       	ldd	r30, Y+9	; 0x09
    250a:	fa 85       	ldd	r31, Y+10	; 0x0a
    250c:	c0 8a       	std	Z+16, r12	; 0x10
    250e:	d1 8a       	std	Z+17, r13	; 0x11
    2510:	e2 8a       	std	Z+18, r14	; 0x12
    2512:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5e ec       	ldi	r21, 0xCE	; 206
	}
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    251c:	c3 01       	movw	r24, r6
    251e:	b2 01       	movw	r22, r4
    2520:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2524:	2d 81       	ldd	r18, Y+5	; 0x05
    2526:	3e 81       	ldd	r19, Y+6	; 0x06
    2528:	4f 81       	ldd	r20, Y+7	; 0x07
    252a:	58 85       	ldd	r21, Y+8	; 0x08
    252c:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	48 ef       	ldi	r20, 0xF8	; 248
    2536:	52 e4       	ldi	r21, 0x42	; 66
    2538:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divsf3>
    253c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fixsfsi>
    2540:	77 23       	and	r23, r23
    2542:	14 f4       	brge	.+4      	; 0x2548 <pid_Controller+0x19c>
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	8b 01       	movw	r16, r22
    254a:	6f 3f       	cpi	r22, 0xFF	; 255
    254c:	71 05       	cpc	r23, r1
    254e:	19 f0       	breq	.+6      	; 0x2556 <pid_Controller+0x1aa>
    2550:	14 f0       	brlt	.+4      	; 0x2556 <pid_Controller+0x1aa>
    2552:	0f ef       	ldi	r16, 0xFF	; 255
    2554:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    2556:	b8 01       	movw	r22, r16
    2558:	01 2e       	mov	r0, r17
    255a:	00 0c       	add	r0, r0
    255c:	88 0b       	sbc	r24, r24
    255e:	99 0b       	sbc	r25, r25
    2560:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
    2564:	e9 85       	ldd	r30, Y+9	; 0x09
    2566:	fa 85       	ldd	r31, Y+10	; 0x0a
    2568:	60 83       	st	Z, r22
    256a:	71 83       	std	Z+1, r23	; 0x01
    256c:	82 83       	std	Z+2, r24	; 0x02
    256e:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    2570:	c8 01       	movw	r24, r16
    2572:	2a 96       	adiw	r28, 0x0a	; 10
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	ff 90       	pop	r15
    2588:	ef 90       	pop	r14
    258a:	df 90       	pop	r13
    258c:	cf 90       	pop	r12
    258e:	bf 90       	pop	r11
    2590:	af 90       	pop	r10
    2592:	9f 90       	pop	r9
    2594:	8f 90       	pop	r8
    2596:	7f 90       	pop	r7
    2598:	6f 90       	pop	r6
    259a:	5f 90       	pop	r5
    259c:	4f 90       	pop	r4
    259e:	08 95       	ret

000025a0 <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    25a4:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    25a6:	88 e1       	ldi	r24, 0x18	; 24
    25a8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    25aa:	86 e8       	ldi	r24, 0x86	; 134
    25ac:	80 bd       	out	0x20, r24	; 32
    25ae:	08 95       	ret

000025b0 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    25b0:	5d 9b       	sbis	0x0b, 5	; 11
    25b2:	fe cf       	rjmp	.-4      	; 0x25b0 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    25b4:	8c b9       	out	0x0c, r24	; 12
    25b6:	08 95       	ret

000025b8 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    25b8:	5f 9b       	sbis	0x0b, 7	; 11
    25ba:	fe cf       	rjmp	.-4      	; 0x25b8 <Recive_Char>
	return(UDR); 
    25bc:	8c b1       	in	r24, 0x0c	; 12
}
    25be:	08 95       	ret

000025c0 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	ec 01       	movw	r28, r24
	while(*ptr_string)
    25c6:	88 81       	ld	r24, Y
    25c8:	88 23       	and	r24, r24
    25ca:	31 f0       	breq	.+12     	; 0x25d8 <Transmit_Data+0x18>
    25cc:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    25ce:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    25d2:	89 91       	ld	r24, Y+
    25d4:	81 11       	cpse	r24, r1
    25d6:	fb cf       	rjmp	.-10     	; 0x25ce <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

000025de <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    25e6:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    25e8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Recive_Char>
	 		if((ch == '\r')) //read till enter key is pressed
    25ec:	8d 30       	cpi	r24, 0x0D	; 13
    25ee:	31 f4       	brne	.+12     	; 0x25fc <Recive_Data+0x1e>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    25f0:	f8 01       	movw	r30, r16
    25f2:	ec 0f       	add	r30, r28
    25f4:	f1 1d       	adc	r31, r1
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    25fa:	06 c0       	rjmp	.+12     	; 0x2608 <Recive_Data+0x2a>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    25fc:	f8 01       	movw	r30, r16
    25fe:	ec 0f       	add	r30, r28
    2600:	f1 1d       	adc	r31, r1
    2602:	80 83       	st	Z, r24
    2604:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    2606:	f0 cf       	rjmp	.-32     	; 0x25e8 <Recive_Data+0xa>
}
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <__subsf3>:
    2610:	50 58       	subi	r21, 0x80	; 128

00002612 <__addsf3>:
    2612:	bb 27       	eor	r27, r27
    2614:	aa 27       	eor	r26, r26
    2616:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    261a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__fp_round>
    261e:	0e 94 91 14 	call	0x2922	; 0x2922 <__fp_pscA>
    2622:	38 f0       	brcs	.+14     	; 0x2632 <__addsf3+0x20>
    2624:	0e 94 98 14 	call	0x2930	; 0x2930 <__fp_pscB>
    2628:	20 f0       	brcs	.+8      	; 0x2632 <__addsf3+0x20>
    262a:	39 f4       	brne	.+14     	; 0x263a <__addsf3+0x28>
    262c:	9f 3f       	cpi	r25, 0xFF	; 255
    262e:	19 f4       	brne	.+6      	; 0x2636 <__addsf3+0x24>
    2630:	26 f4       	brtc	.+8      	; 0x263a <__addsf3+0x28>
    2632:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>
    2636:	0e f4       	brtc	.+2      	; 0x263a <__addsf3+0x28>
    2638:	e0 95       	com	r30
    263a:	e7 fb       	bst	r30, 7
    263c:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>

00002640 <__addsf3x>:
    2640:	e9 2f       	mov	r30, r25
    2642:	0e 94 ef 14 	call	0x29de	; 0x29de <__fp_split3>
    2646:	58 f3       	brcs	.-42     	; 0x261e <__addsf3+0xc>
    2648:	ba 17       	cp	r27, r26
    264a:	62 07       	cpc	r22, r18
    264c:	73 07       	cpc	r23, r19
    264e:	84 07       	cpc	r24, r20
    2650:	95 07       	cpc	r25, r21
    2652:	20 f0       	brcs	.+8      	; 0x265c <__addsf3x+0x1c>
    2654:	79 f4       	brne	.+30     	; 0x2674 <__addsf3x+0x34>
    2656:	a6 f5       	brtc	.+104    	; 0x26c0 <__addsf3x+0x80>
    2658:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__fp_zero>
    265c:	0e f4       	brtc	.+2      	; 0x2660 <__addsf3x+0x20>
    265e:	e0 95       	com	r30
    2660:	0b 2e       	mov	r0, r27
    2662:	ba 2f       	mov	r27, r26
    2664:	a0 2d       	mov	r26, r0
    2666:	0b 01       	movw	r0, r22
    2668:	b9 01       	movw	r22, r18
    266a:	90 01       	movw	r18, r0
    266c:	0c 01       	movw	r0, r24
    266e:	ca 01       	movw	r24, r20
    2670:	a0 01       	movw	r20, r0
    2672:	11 24       	eor	r1, r1
    2674:	ff 27       	eor	r31, r31
    2676:	59 1b       	sub	r21, r25
    2678:	99 f0       	breq	.+38     	; 0x26a0 <__addsf3x+0x60>
    267a:	59 3f       	cpi	r21, 0xF9	; 249
    267c:	50 f4       	brcc	.+20     	; 0x2692 <__addsf3x+0x52>
    267e:	50 3e       	cpi	r21, 0xE0	; 224
    2680:	68 f1       	brcs	.+90     	; 0x26dc <__addsf3x+0x9c>
    2682:	1a 16       	cp	r1, r26
    2684:	f0 40       	sbci	r31, 0x00	; 0
    2686:	a2 2f       	mov	r26, r18
    2688:	23 2f       	mov	r18, r19
    268a:	34 2f       	mov	r19, r20
    268c:	44 27       	eor	r20, r20
    268e:	58 5f       	subi	r21, 0xF8	; 248
    2690:	f3 cf       	rjmp	.-26     	; 0x2678 <__addsf3x+0x38>
    2692:	46 95       	lsr	r20
    2694:	37 95       	ror	r19
    2696:	27 95       	ror	r18
    2698:	a7 95       	ror	r26
    269a:	f0 40       	sbci	r31, 0x00	; 0
    269c:	53 95       	inc	r21
    269e:	c9 f7       	brne	.-14     	; 0x2692 <__addsf3x+0x52>
    26a0:	7e f4       	brtc	.+30     	; 0x26c0 <__addsf3x+0x80>
    26a2:	1f 16       	cp	r1, r31
    26a4:	ba 0b       	sbc	r27, r26
    26a6:	62 0b       	sbc	r22, r18
    26a8:	73 0b       	sbc	r23, r19
    26aa:	84 0b       	sbc	r24, r20
    26ac:	ba f0       	brmi	.+46     	; 0x26dc <__addsf3x+0x9c>
    26ae:	91 50       	subi	r25, 0x01	; 1
    26b0:	a1 f0       	breq	.+40     	; 0x26da <__addsf3x+0x9a>
    26b2:	ff 0f       	add	r31, r31
    26b4:	bb 1f       	adc	r27, r27
    26b6:	66 1f       	adc	r22, r22
    26b8:	77 1f       	adc	r23, r23
    26ba:	88 1f       	adc	r24, r24
    26bc:	c2 f7       	brpl	.-16     	; 0x26ae <__addsf3x+0x6e>
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <__addsf3x+0x9c>
    26c0:	ba 0f       	add	r27, r26
    26c2:	62 1f       	adc	r22, r18
    26c4:	73 1f       	adc	r23, r19
    26c6:	84 1f       	adc	r24, r20
    26c8:	48 f4       	brcc	.+18     	; 0x26dc <__addsf3x+0x9c>
    26ca:	87 95       	ror	r24
    26cc:	77 95       	ror	r23
    26ce:	67 95       	ror	r22
    26d0:	b7 95       	ror	r27
    26d2:	f7 95       	ror	r31
    26d4:	9e 3f       	cpi	r25, 0xFE	; 254
    26d6:	08 f0       	brcs	.+2      	; 0x26da <__addsf3x+0x9a>
    26d8:	b0 cf       	rjmp	.-160    	; 0x263a <__addsf3+0x28>
    26da:	93 95       	inc	r25
    26dc:	88 0f       	add	r24, r24
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <__addsf3x+0xa2>
    26e0:	99 27       	eor	r25, r25
    26e2:	ee 0f       	add	r30, r30
    26e4:	97 95       	ror	r25
    26e6:	87 95       	ror	r24
    26e8:	08 95       	ret

000026ea <__cmpsf2>:
    26ea:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__fp_cmp>
    26ee:	08 f4       	brcc	.+2      	; 0x26f2 <__cmpsf2+0x8>
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	08 95       	ret

000026f4 <cos>:
    26f4:	0e 94 a1 14 	call	0x2942	; 0x2942 <__fp_rempio2>
    26f8:	e3 95       	inc	r30
    26fa:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__fp_sinus>

000026fe <__divsf3>:
    26fe:	0e 94 93 13 	call	0x2726	; 0x2726 <__divsf3x>
    2702:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__fp_round>
    2706:	0e 94 98 14 	call	0x2930	; 0x2930 <__fp_pscB>
    270a:	58 f0       	brcs	.+22     	; 0x2722 <__divsf3+0x24>
    270c:	0e 94 91 14 	call	0x2922	; 0x2922 <__fp_pscA>
    2710:	40 f0       	brcs	.+16     	; 0x2722 <__divsf3+0x24>
    2712:	29 f4       	brne	.+10     	; 0x271e <__divsf3+0x20>
    2714:	5f 3f       	cpi	r21, 0xFF	; 255
    2716:	29 f0       	breq	.+10     	; 0x2722 <__divsf3+0x24>
    2718:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>
    271c:	51 11       	cpse	r21, r1
    271e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_szero>
    2722:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>

00002726 <__divsf3x>:
    2726:	0e 94 ef 14 	call	0x29de	; 0x29de <__fp_split3>
    272a:	68 f3       	brcs	.-38     	; 0x2706 <__divsf3+0x8>

0000272c <__divsf3_pse>:
    272c:	99 23       	and	r25, r25
    272e:	b1 f3       	breq	.-20     	; 0x271c <__divsf3+0x1e>
    2730:	55 23       	and	r21, r21
    2732:	91 f3       	breq	.-28     	; 0x2718 <__divsf3+0x1a>
    2734:	95 1b       	sub	r25, r21
    2736:	55 0b       	sbc	r21, r21
    2738:	bb 27       	eor	r27, r27
    273a:	aa 27       	eor	r26, r26
    273c:	62 17       	cp	r22, r18
    273e:	73 07       	cpc	r23, r19
    2740:	84 07       	cpc	r24, r20
    2742:	38 f0       	brcs	.+14     	; 0x2752 <__divsf3_pse+0x26>
    2744:	9f 5f       	subi	r25, 0xFF	; 255
    2746:	5f 4f       	sbci	r21, 0xFF	; 255
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	44 1f       	adc	r20, r20
    274e:	aa 1f       	adc	r26, r26
    2750:	a9 f3       	breq	.-22     	; 0x273c <__divsf3_pse+0x10>
    2752:	35 d0       	rcall	.+106    	; 0x27be <__divsf3_pse+0x92>
    2754:	0e 2e       	mov	r0, r30
    2756:	3a f0       	brmi	.+14     	; 0x2766 <__divsf3_pse+0x3a>
    2758:	e0 e8       	ldi	r30, 0x80	; 128
    275a:	32 d0       	rcall	.+100    	; 0x27c0 <__divsf3_pse+0x94>
    275c:	91 50       	subi	r25, 0x01	; 1
    275e:	50 40       	sbci	r21, 0x00	; 0
    2760:	e6 95       	lsr	r30
    2762:	00 1c       	adc	r0, r0
    2764:	ca f7       	brpl	.-14     	; 0x2758 <__divsf3_pse+0x2c>
    2766:	2b d0       	rcall	.+86     	; 0x27be <__divsf3_pse+0x92>
    2768:	fe 2f       	mov	r31, r30
    276a:	29 d0       	rcall	.+82     	; 0x27be <__divsf3_pse+0x92>
    276c:	66 0f       	add	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	88 1f       	adc	r24, r24
    2772:	bb 1f       	adc	r27, r27
    2774:	26 17       	cp	r18, r22
    2776:	37 07       	cpc	r19, r23
    2778:	48 07       	cpc	r20, r24
    277a:	ab 07       	cpc	r26, r27
    277c:	b0 e8       	ldi	r27, 0x80	; 128
    277e:	09 f0       	breq	.+2      	; 0x2782 <__divsf3_pse+0x56>
    2780:	bb 0b       	sbc	r27, r27
    2782:	80 2d       	mov	r24, r0
    2784:	bf 01       	movw	r22, r30
    2786:	ff 27       	eor	r31, r31
    2788:	93 58       	subi	r25, 0x83	; 131
    278a:	5f 4f       	sbci	r21, 0xFF	; 255
    278c:	3a f0       	brmi	.+14     	; 0x279c <__divsf3_pse+0x70>
    278e:	9e 3f       	cpi	r25, 0xFE	; 254
    2790:	51 05       	cpc	r21, r1
    2792:	78 f0       	brcs	.+30     	; 0x27b2 <__divsf3_pse+0x86>
    2794:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>
    2798:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_szero>
    279c:	5f 3f       	cpi	r21, 0xFF	; 255
    279e:	e4 f3       	brlt	.-8      	; 0x2798 <__divsf3_pse+0x6c>
    27a0:	98 3e       	cpi	r25, 0xE8	; 232
    27a2:	d4 f3       	brlt	.-12     	; 0x2798 <__divsf3_pse+0x6c>
    27a4:	86 95       	lsr	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b7 95       	ror	r27
    27ac:	f7 95       	ror	r31
    27ae:	9f 5f       	subi	r25, 0xFF	; 255
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <__divsf3_pse+0x78>
    27b2:	88 0f       	add	r24, r24
    27b4:	91 1d       	adc	r25, r1
    27b6:	96 95       	lsr	r25
    27b8:	87 95       	ror	r24
    27ba:	97 f9       	bld	r25, 7
    27bc:	08 95       	ret
    27be:	e1 e0       	ldi	r30, 0x01	; 1
    27c0:	66 0f       	add	r22, r22
    27c2:	77 1f       	adc	r23, r23
    27c4:	88 1f       	adc	r24, r24
    27c6:	bb 1f       	adc	r27, r27
    27c8:	62 17       	cp	r22, r18
    27ca:	73 07       	cpc	r23, r19
    27cc:	84 07       	cpc	r24, r20
    27ce:	ba 07       	cpc	r27, r26
    27d0:	20 f0       	brcs	.+8      	; 0x27da <__divsf3_pse+0xae>
    27d2:	62 1b       	sub	r22, r18
    27d4:	73 0b       	sbc	r23, r19
    27d6:	84 0b       	sbc	r24, r20
    27d8:	ba 0b       	sbc	r27, r26
    27da:	ee 1f       	adc	r30, r30
    27dc:	88 f7       	brcc	.-30     	; 0x27c0 <__divsf3_pse+0x94>
    27de:	e0 95       	com	r30
    27e0:	08 95       	ret

000027e2 <__fixsfsi>:
    27e2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fixunssfsi>
    27e6:	68 94       	set
    27e8:	b1 11       	cpse	r27, r1
    27ea:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_szero>
    27ee:	08 95       	ret

000027f0 <__fixunssfsi>:
    27f0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__fp_splitA>
    27f4:	88 f0       	brcs	.+34     	; 0x2818 <__fixunssfsi+0x28>
    27f6:	9f 57       	subi	r25, 0x7F	; 127
    27f8:	98 f0       	brcs	.+38     	; 0x2820 <__fixunssfsi+0x30>
    27fa:	b9 2f       	mov	r27, r25
    27fc:	99 27       	eor	r25, r25
    27fe:	b7 51       	subi	r27, 0x17	; 23
    2800:	b0 f0       	brcs	.+44     	; 0x282e <__fixunssfsi+0x3e>
    2802:	e1 f0       	breq	.+56     	; 0x283c <__fixunssfsi+0x4c>
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	1a f0       	brmi	.+6      	; 0x2814 <__fixunssfsi+0x24>
    280e:	ba 95       	dec	r27
    2810:	c9 f7       	brne	.-14     	; 0x2804 <__fixunssfsi+0x14>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <__fixunssfsi+0x4c>
    2814:	b1 30       	cpi	r27, 0x01	; 1
    2816:	91 f0       	breq	.+36     	; 0x283c <__fixunssfsi+0x4c>
    2818:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fp_zero>
    281c:	b1 e0       	ldi	r27, 0x01	; 1
    281e:	08 95       	ret
    2820:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__fp_zero>
    2824:	67 2f       	mov	r22, r23
    2826:	78 2f       	mov	r23, r24
    2828:	88 27       	eor	r24, r24
    282a:	b8 5f       	subi	r27, 0xF8	; 248
    282c:	39 f0       	breq	.+14     	; 0x283c <__fixunssfsi+0x4c>
    282e:	b9 3f       	cpi	r27, 0xF9	; 249
    2830:	cc f3       	brlt	.-14     	; 0x2824 <__fixunssfsi+0x34>
    2832:	86 95       	lsr	r24
    2834:	77 95       	ror	r23
    2836:	67 95       	ror	r22
    2838:	b3 95       	inc	r27
    283a:	d9 f7       	brne	.-10     	; 0x2832 <__fixunssfsi+0x42>
    283c:	3e f4       	brtc	.+14     	; 0x284c <__fixunssfsi+0x5c>
    283e:	90 95       	com	r25
    2840:	80 95       	com	r24
    2842:	70 95       	com	r23
    2844:	61 95       	neg	r22
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8f 4f       	sbci	r24, 0xFF	; 255
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	08 95       	ret

0000284e <__floatunsisf>:
    284e:	e8 94       	clt
    2850:	09 c0       	rjmp	.+18     	; 0x2864 <__floatsisf+0x12>

00002852 <__floatsisf>:
    2852:	97 fb       	bst	r25, 7
    2854:	3e f4       	brtc	.+14     	; 0x2864 <__floatsisf+0x12>
    2856:	90 95       	com	r25
    2858:	80 95       	com	r24
    285a:	70 95       	com	r23
    285c:	61 95       	neg	r22
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	99 23       	and	r25, r25
    2866:	a9 f0       	breq	.+42     	; 0x2892 <__floatsisf+0x40>
    2868:	f9 2f       	mov	r31, r25
    286a:	96 e9       	ldi	r25, 0x96	; 150
    286c:	bb 27       	eor	r27, r27
    286e:	93 95       	inc	r25
    2870:	f6 95       	lsr	r31
    2872:	87 95       	ror	r24
    2874:	77 95       	ror	r23
    2876:	67 95       	ror	r22
    2878:	b7 95       	ror	r27
    287a:	f1 11       	cpse	r31, r1
    287c:	f8 cf       	rjmp	.-16     	; 0x286e <__floatsisf+0x1c>
    287e:	fa f4       	brpl	.+62     	; 0x28be <__floatsisf+0x6c>
    2880:	bb 0f       	add	r27, r27
    2882:	11 f4       	brne	.+4      	; 0x2888 <__floatsisf+0x36>
    2884:	60 ff       	sbrs	r22, 0
    2886:	1b c0       	rjmp	.+54     	; 0x28be <__floatsisf+0x6c>
    2888:	6f 5f       	subi	r22, 0xFF	; 255
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	8f 4f       	sbci	r24, 0xFF	; 255
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	16 c0       	rjmp	.+44     	; 0x28be <__floatsisf+0x6c>
    2892:	88 23       	and	r24, r24
    2894:	11 f0       	breq	.+4      	; 0x289a <__floatsisf+0x48>
    2896:	96 e9       	ldi	r25, 0x96	; 150
    2898:	11 c0       	rjmp	.+34     	; 0x28bc <__floatsisf+0x6a>
    289a:	77 23       	and	r23, r23
    289c:	21 f0       	breq	.+8      	; 0x28a6 <__floatsisf+0x54>
    289e:	9e e8       	ldi	r25, 0x8E	; 142
    28a0:	87 2f       	mov	r24, r23
    28a2:	76 2f       	mov	r23, r22
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <__floatsisf+0x5e>
    28a6:	66 23       	and	r22, r22
    28a8:	71 f0       	breq	.+28     	; 0x28c6 <__floatsisf+0x74>
    28aa:	96 e8       	ldi	r25, 0x86	; 134
    28ac:	86 2f       	mov	r24, r22
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	2a f0       	brmi	.+10     	; 0x28be <__floatsisf+0x6c>
    28b4:	9a 95       	dec	r25
    28b6:	66 0f       	add	r22, r22
    28b8:	77 1f       	adc	r23, r23
    28ba:	88 1f       	adc	r24, r24
    28bc:	da f7       	brpl	.-10     	; 0x28b4 <__floatsisf+0x62>
    28be:	88 0f       	add	r24, r24
    28c0:	96 95       	lsr	r25
    28c2:	87 95       	ror	r24
    28c4:	97 f9       	bld	r25, 7
    28c6:	08 95       	ret

000028c8 <__fp_cmp>:
    28c8:	99 0f       	add	r25, r25
    28ca:	00 08       	sbc	r0, r0
    28cc:	55 0f       	add	r21, r21
    28ce:	aa 0b       	sbc	r26, r26
    28d0:	e0 e8       	ldi	r30, 0x80	; 128
    28d2:	fe ef       	ldi	r31, 0xFE	; 254
    28d4:	16 16       	cp	r1, r22
    28d6:	17 06       	cpc	r1, r23
    28d8:	e8 07       	cpc	r30, r24
    28da:	f9 07       	cpc	r31, r25
    28dc:	c0 f0       	brcs	.+48     	; 0x290e <__fp_cmp+0x46>
    28de:	12 16       	cp	r1, r18
    28e0:	13 06       	cpc	r1, r19
    28e2:	e4 07       	cpc	r30, r20
    28e4:	f5 07       	cpc	r31, r21
    28e6:	98 f0       	brcs	.+38     	; 0x290e <__fp_cmp+0x46>
    28e8:	62 1b       	sub	r22, r18
    28ea:	73 0b       	sbc	r23, r19
    28ec:	84 0b       	sbc	r24, r20
    28ee:	95 0b       	sbc	r25, r21
    28f0:	39 f4       	brne	.+14     	; 0x2900 <__fp_cmp+0x38>
    28f2:	0a 26       	eor	r0, r26
    28f4:	61 f0       	breq	.+24     	; 0x290e <__fp_cmp+0x46>
    28f6:	23 2b       	or	r18, r19
    28f8:	24 2b       	or	r18, r20
    28fa:	25 2b       	or	r18, r21
    28fc:	21 f4       	brne	.+8      	; 0x2906 <__fp_cmp+0x3e>
    28fe:	08 95       	ret
    2900:	0a 26       	eor	r0, r26
    2902:	09 f4       	brne	.+2      	; 0x2906 <__fp_cmp+0x3e>
    2904:	a1 40       	sbci	r26, 0x01	; 1
    2906:	a6 95       	lsr	r26
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	81 1d       	adc	r24, r1
    290c:	81 1d       	adc	r24, r1
    290e:	08 95       	ret

00002910 <__fp_inf>:
    2910:	97 f9       	bld	r25, 7
    2912:	9f 67       	ori	r25, 0x7F	; 127
    2914:	80 e8       	ldi	r24, 0x80	; 128
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	08 95       	ret

0000291c <__fp_nan>:
    291c:	9f ef       	ldi	r25, 0xFF	; 255
    291e:	80 ec       	ldi	r24, 0xC0	; 192
    2920:	08 95       	ret

00002922 <__fp_pscA>:
    2922:	00 24       	eor	r0, r0
    2924:	0a 94       	dec	r0
    2926:	16 16       	cp	r1, r22
    2928:	17 06       	cpc	r1, r23
    292a:	18 06       	cpc	r1, r24
    292c:	09 06       	cpc	r0, r25
    292e:	08 95       	ret

00002930 <__fp_pscB>:
    2930:	00 24       	eor	r0, r0
    2932:	0a 94       	dec	r0
    2934:	12 16       	cp	r1, r18
    2936:	13 06       	cpc	r1, r19
    2938:	14 06       	cpc	r1, r20
    293a:	05 06       	cpc	r0, r21
    293c:	08 95       	ret
    293e:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>

00002942 <__fp_rempio2>:
    2942:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__fp_splitA>
    2946:	d8 f3       	brcs	.-10     	; 0x293e <__fp_pscB+0xe>
    2948:	e8 94       	clt
    294a:	e0 e0       	ldi	r30, 0x00	; 0
    294c:	bb 27       	eor	r27, r27
    294e:	9f 57       	subi	r25, 0x7F	; 127
    2950:	f0 f0       	brcs	.+60     	; 0x298e <__fp_rempio2+0x4c>
    2952:	2a ed       	ldi	r18, 0xDA	; 218
    2954:	3f e0       	ldi	r19, 0x0F	; 15
    2956:	49 ec       	ldi	r20, 0xC9	; 201
    2958:	06 c0       	rjmp	.+12     	; 0x2966 <__fp_rempio2+0x24>
    295a:	ee 0f       	add	r30, r30
    295c:	bb 0f       	add	r27, r27
    295e:	66 1f       	adc	r22, r22
    2960:	77 1f       	adc	r23, r23
    2962:	88 1f       	adc	r24, r24
    2964:	28 f0       	brcs	.+10     	; 0x2970 <__fp_rempio2+0x2e>
    2966:	b2 3a       	cpi	r27, 0xA2	; 162
    2968:	62 07       	cpc	r22, r18
    296a:	73 07       	cpc	r23, r19
    296c:	84 07       	cpc	r24, r20
    296e:	28 f0       	brcs	.+10     	; 0x297a <__fp_rempio2+0x38>
    2970:	b2 5a       	subi	r27, 0xA2	; 162
    2972:	62 0b       	sbc	r22, r18
    2974:	73 0b       	sbc	r23, r19
    2976:	84 0b       	sbc	r24, r20
    2978:	e3 95       	inc	r30
    297a:	9a 95       	dec	r25
    297c:	72 f7       	brpl	.-36     	; 0x295a <__fp_rempio2+0x18>
    297e:	80 38       	cpi	r24, 0x80	; 128
    2980:	30 f4       	brcc	.+12     	; 0x298e <__fp_rempio2+0x4c>
    2982:	9a 95       	dec	r25
    2984:	bb 0f       	add	r27, r27
    2986:	66 1f       	adc	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	d2 f7       	brpl	.-12     	; 0x2982 <__fp_rempio2+0x40>
    298e:	90 48       	sbci	r25, 0x80	; 128
    2990:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__fp_mpack_finite>

00002994 <__fp_round>:
    2994:	09 2e       	mov	r0, r25
    2996:	03 94       	inc	r0
    2998:	00 0c       	add	r0, r0
    299a:	11 f4       	brne	.+4      	; 0x29a0 <__fp_round+0xc>
    299c:	88 23       	and	r24, r24
    299e:	52 f0       	brmi	.+20     	; 0x29b4 <__fp_round+0x20>
    29a0:	bb 0f       	add	r27, r27
    29a2:	40 f4       	brcc	.+16     	; 0x29b4 <__fp_round+0x20>
    29a4:	bf 2b       	or	r27, r31
    29a6:	11 f4       	brne	.+4      	; 0x29ac <__fp_round+0x18>
    29a8:	60 ff       	sbrs	r22, 0
    29aa:	04 c0       	rjmp	.+8      	; 0x29b4 <__fp_round+0x20>
    29ac:	6f 5f       	subi	r22, 0xFF	; 255
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	8f 4f       	sbci	r24, 0xFF	; 255
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	08 95       	ret

000029b6 <__fp_sinus>:
    29b6:	ef 93       	push	r30
    29b8:	e0 ff       	sbrs	r30, 0
    29ba:	07 c0       	rjmp	.+14     	; 0x29ca <__fp_sinus+0x14>
    29bc:	a2 ea       	ldi	r26, 0xA2	; 162
    29be:	2a ed       	ldi	r18, 0xDA	; 218
    29c0:	3f e0       	ldi	r19, 0x0F	; 15
    29c2:	49 ec       	ldi	r20, 0xC9	; 201
    29c4:	5f eb       	ldi	r21, 0xBF	; 191
    29c6:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    29ca:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fp_round>
    29ce:	0f 90       	pop	r0
    29d0:	03 94       	inc	r0
    29d2:	01 fc       	sbrc	r0, 1
    29d4:	90 58       	subi	r25, 0x80	; 128
    29d6:	e4 e5       	ldi	r30, 0x54	; 84
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__fp_powsodd>

000029de <__fp_split3>:
    29de:	57 fd       	sbrc	r21, 7
    29e0:	90 58       	subi	r25, 0x80	; 128
    29e2:	44 0f       	add	r20, r20
    29e4:	55 1f       	adc	r21, r21
    29e6:	59 f0       	breq	.+22     	; 0x29fe <__fp_splitA+0x10>
    29e8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ea:	71 f0       	breq	.+28     	; 0x2a08 <__fp_splitA+0x1a>
    29ec:	47 95       	ror	r20

000029ee <__fp_splitA>:
    29ee:	88 0f       	add	r24, r24
    29f0:	97 fb       	bst	r25, 7
    29f2:	99 1f       	adc	r25, r25
    29f4:	61 f0       	breq	.+24     	; 0x2a0e <__fp_splitA+0x20>
    29f6:	9f 3f       	cpi	r25, 0xFF	; 255
    29f8:	79 f0       	breq	.+30     	; 0x2a18 <__fp_splitA+0x2a>
    29fa:	87 95       	ror	r24
    29fc:	08 95       	ret
    29fe:	12 16       	cp	r1, r18
    2a00:	13 06       	cpc	r1, r19
    2a02:	14 06       	cpc	r1, r20
    2a04:	55 1f       	adc	r21, r21
    2a06:	f2 cf       	rjmp	.-28     	; 0x29ec <__fp_split3+0xe>
    2a08:	46 95       	lsr	r20
    2a0a:	f1 df       	rcall	.-30     	; 0x29ee <__fp_splitA>
    2a0c:	08 c0       	rjmp	.+16     	; 0x2a1e <__fp_splitA+0x30>
    2a0e:	16 16       	cp	r1, r22
    2a10:	17 06       	cpc	r1, r23
    2a12:	18 06       	cpc	r1, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	f1 cf       	rjmp	.-30     	; 0x29fa <__fp_splitA+0xc>
    2a18:	86 95       	lsr	r24
    2a1a:	71 05       	cpc	r23, r1
    2a1c:	61 05       	cpc	r22, r1
    2a1e:	08 94       	sec
    2a20:	08 95       	ret

00002a22 <__fp_zero>:
    2a22:	e8 94       	clt

00002a24 <__fp_szero>:
    2a24:	bb 27       	eor	r27, r27
    2a26:	66 27       	eor	r22, r22
    2a28:	77 27       	eor	r23, r23
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	97 f9       	bld	r25, 7
    2a2e:	08 95       	ret

00002a30 <__gesf2>:
    2a30:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__fp_cmp>
    2a34:	08 f4       	brcc	.+2      	; 0x2a38 <__gesf2+0x8>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	08 95       	ret
    2a3a:	16 f0       	brts	.+4      	; 0x2a40 <__gesf2+0x10>
    2a3c:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__fp_mpack>
    2a40:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>
    2a44:	68 94       	set
    2a46:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>

00002a4a <log>:
    2a4a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__fp_splitA>
    2a4e:	a8 f3       	brcs	.-22     	; 0x2a3a <__gesf2+0xa>
    2a50:	99 23       	and	r25, r25
    2a52:	c1 f3       	breq	.-16     	; 0x2a44 <__gesf2+0x14>
    2a54:	ae f3       	brts	.-22     	; 0x2a40 <__gesf2+0x10>
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	1f 93       	push	r17
    2a5c:	0f 93       	push	r16
    2a5e:	ff 92       	push	r15
    2a60:	c9 2f       	mov	r28, r25
    2a62:	dd 27       	eor	r29, r29
    2a64:	88 23       	and	r24, r24
    2a66:	2a f0       	brmi	.+10     	; 0x2a72 <log+0x28>
    2a68:	21 97       	sbiw	r28, 0x01	; 1
    2a6a:	66 0f       	add	r22, r22
    2a6c:	77 1f       	adc	r23, r23
    2a6e:	88 1f       	adc	r24, r24
    2a70:	da f7       	brpl	.-10     	; 0x2a68 <log+0x1e>
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f eb       	ldi	r21, 0xBF	; 191
    2a7a:	9f e3       	ldi	r25, 0x3F	; 63
    2a7c:	88 39       	cpi	r24, 0x98	; 152
    2a7e:	20 f0       	brcs	.+8      	; 0x2a88 <log+0x3e>
    2a80:	80 3e       	cpi	r24, 0xE0	; 224
    2a82:	38 f0       	brcs	.+14     	; 0x2a92 <log+0x48>
    2a84:	21 96       	adiw	r28, 0x01	; 1
    2a86:	8f 77       	andi	r24, 0x7F	; 127
    2a88:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2a8c:	e2 e7       	ldi	r30, 0x72	; 114
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	04 c0       	rjmp	.+8      	; 0x2a9a <log+0x50>
    2a92:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    2a96:	ef e9       	ldi	r30, 0x9F	; 159
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__fp_powser>
    2a9e:	8b 01       	movw	r16, r22
    2aa0:	be 01       	movw	r22, r28
    2aa2:	ec 01       	movw	r28, r24
    2aa4:	fb 2e       	mov	r15, r27
    2aa6:	6f 57       	subi	r22, 0x7F	; 127
    2aa8:	71 09       	sbc	r23, r1
    2aaa:	75 95       	asr	r23
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 0b       	sbc	r24, r24
    2ab0:	99 0b       	sbc	r25, r25
    2ab2:	0e 94 29 14 	call	0x2852	; 0x2852 <__floatsisf>
    2ab6:	28 e1       	ldi	r18, 0x18	; 24
    2ab8:	32 e7       	ldi	r19, 0x72	; 114
    2aba:	41 e3       	ldi	r20, 0x31	; 49
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__mulsf3x>
    2ac2:	af 2d       	mov	r26, r15
    2ac4:	98 01       	movw	r18, r16
    2ac6:	ae 01       	movw	r20, r28
    2ac8:	ff 90       	pop	r15
    2aca:	0f 91       	pop	r16
    2acc:	1f 91       	pop	r17
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    2ad6:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__fp_round>

00002ada <__mulsf3>:
    2ada:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__mulsf3x>
    2ade:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__fp_round>
    2ae2:	0e 94 91 14 	call	0x2922	; 0x2922 <__fp_pscA>
    2ae6:	38 f0       	brcs	.+14     	; 0x2af6 <__mulsf3+0x1c>
    2ae8:	0e 94 98 14 	call	0x2930	; 0x2930 <__fp_pscB>
    2aec:	20 f0       	brcs	.+8      	; 0x2af6 <__mulsf3+0x1c>
    2aee:	95 23       	and	r25, r21
    2af0:	11 f0       	breq	.+4      	; 0x2af6 <__mulsf3+0x1c>
    2af2:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>
    2af6:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>
    2afa:	11 24       	eor	r1, r1
    2afc:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_szero>

00002b00 <__mulsf3x>:
    2b00:	0e 94 ef 14 	call	0x29de	; 0x29de <__fp_split3>
    2b04:	70 f3       	brcs	.-36     	; 0x2ae2 <__mulsf3+0x8>

00002b06 <__mulsf3_pse>:
    2b06:	95 9f       	mul	r25, r21
    2b08:	c1 f3       	breq	.-16     	; 0x2afa <__mulsf3+0x20>
    2b0a:	95 0f       	add	r25, r21
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	55 1f       	adc	r21, r21
    2b10:	62 9f       	mul	r22, r18
    2b12:	f0 01       	movw	r30, r0
    2b14:	72 9f       	mul	r23, r18
    2b16:	bb 27       	eor	r27, r27
    2b18:	f0 0d       	add	r31, r0
    2b1a:	b1 1d       	adc	r27, r1
    2b1c:	63 9f       	mul	r22, r19
    2b1e:	aa 27       	eor	r26, r26
    2b20:	f0 0d       	add	r31, r0
    2b22:	b1 1d       	adc	r27, r1
    2b24:	aa 1f       	adc	r26, r26
    2b26:	64 9f       	mul	r22, r20
    2b28:	66 27       	eor	r22, r22
    2b2a:	b0 0d       	add	r27, r0
    2b2c:	a1 1d       	adc	r26, r1
    2b2e:	66 1f       	adc	r22, r22
    2b30:	82 9f       	mul	r24, r18
    2b32:	22 27       	eor	r18, r18
    2b34:	b0 0d       	add	r27, r0
    2b36:	a1 1d       	adc	r26, r1
    2b38:	62 1f       	adc	r22, r18
    2b3a:	73 9f       	mul	r23, r19
    2b3c:	b0 0d       	add	r27, r0
    2b3e:	a1 1d       	adc	r26, r1
    2b40:	62 1f       	adc	r22, r18
    2b42:	83 9f       	mul	r24, r19
    2b44:	a0 0d       	add	r26, r0
    2b46:	61 1d       	adc	r22, r1
    2b48:	22 1f       	adc	r18, r18
    2b4a:	74 9f       	mul	r23, r20
    2b4c:	33 27       	eor	r19, r19
    2b4e:	a0 0d       	add	r26, r0
    2b50:	61 1d       	adc	r22, r1
    2b52:	23 1f       	adc	r18, r19
    2b54:	84 9f       	mul	r24, r20
    2b56:	60 0d       	add	r22, r0
    2b58:	21 1d       	adc	r18, r1
    2b5a:	82 2f       	mov	r24, r18
    2b5c:	76 2f       	mov	r23, r22
    2b5e:	6a 2f       	mov	r22, r26
    2b60:	11 24       	eor	r1, r1
    2b62:	9f 57       	subi	r25, 0x7F	; 127
    2b64:	50 40       	sbci	r21, 0x00	; 0
    2b66:	9a f0       	brmi	.+38     	; 0x2b8e <__mulsf3_pse+0x88>
    2b68:	f1 f0       	breq	.+60     	; 0x2ba6 <__mulsf3_pse+0xa0>
    2b6a:	88 23       	and	r24, r24
    2b6c:	4a f0       	brmi	.+18     	; 0x2b80 <__mulsf3_pse+0x7a>
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	bb 1f       	adc	r27, r27
    2b74:	66 1f       	adc	r22, r22
    2b76:	77 1f       	adc	r23, r23
    2b78:	88 1f       	adc	r24, r24
    2b7a:	91 50       	subi	r25, 0x01	; 1
    2b7c:	50 40       	sbci	r21, 0x00	; 0
    2b7e:	a9 f7       	brne	.-22     	; 0x2b6a <__mulsf3_pse+0x64>
    2b80:	9e 3f       	cpi	r25, 0xFE	; 254
    2b82:	51 05       	cpc	r21, r1
    2b84:	80 f0       	brcs	.+32     	; 0x2ba6 <__mulsf3_pse+0xa0>
    2b86:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_inf>
    2b8a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_szero>
    2b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b90:	e4 f3       	brlt	.-8      	; 0x2b8a <__mulsf3_pse+0x84>
    2b92:	98 3e       	cpi	r25, 0xE8	; 232
    2b94:	d4 f3       	brlt	.-12     	; 0x2b8a <__mulsf3_pse+0x84>
    2b96:	86 95       	lsr	r24
    2b98:	77 95       	ror	r23
    2b9a:	67 95       	ror	r22
    2b9c:	b7 95       	ror	r27
    2b9e:	f7 95       	ror	r31
    2ba0:	e7 95       	ror	r30
    2ba2:	9f 5f       	subi	r25, 0xFF	; 255
    2ba4:	c1 f7       	brne	.-16     	; 0x2b96 <__mulsf3_pse+0x90>
    2ba6:	fe 2b       	or	r31, r30
    2ba8:	88 0f       	add	r24, r24
    2baa:	91 1d       	adc	r25, r1
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	97 f9       	bld	r25, 7
    2bb2:	08 95       	ret

00002bb4 <sin>:
    2bb4:	9f 93       	push	r25
    2bb6:	0e 94 a1 14 	call	0x2942	; 0x2942 <__fp_rempio2>
    2bba:	0f 90       	pop	r0
    2bbc:	07 fc       	sbrc	r0, 7
    2bbe:	ee 5f       	subi	r30, 0xFE	; 254
    2bc0:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__fp_sinus>
    2bc4:	19 f4       	brne	.+6      	; 0x2bcc <sin+0x18>
    2bc6:	16 f4       	brtc	.+4      	; 0x2bcc <sin+0x18>
    2bc8:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_nan>
    2bcc:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__fp_mpack>

00002bd0 <sqrt>:
    2bd0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__fp_splitA>
    2bd4:	b8 f3       	brcs	.-18     	; 0x2bc4 <sin+0x10>
    2bd6:	99 23       	and	r25, r25
    2bd8:	c9 f3       	breq	.-14     	; 0x2bcc <sin+0x18>
    2bda:	b6 f3       	brts	.-20     	; 0x2bc8 <sin+0x14>
    2bdc:	9f 57       	subi	r25, 0x7F	; 127
    2bde:	55 0b       	sbc	r21, r21
    2be0:	87 ff       	sbrs	r24, 7
    2be2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__fp_norm2>
    2be6:	00 24       	eor	r0, r0
    2be8:	a0 e6       	ldi	r26, 0x60	; 96
    2bea:	40 ea       	ldi	r20, 0xA0	; 160
    2bec:	90 01       	movw	r18, r0
    2bee:	80 58       	subi	r24, 0x80	; 128
    2bf0:	56 95       	lsr	r21
    2bf2:	97 95       	ror	r25
    2bf4:	28 f4       	brcc	.+10     	; 0x2c00 <sqrt+0x30>
    2bf6:	80 5c       	subi	r24, 0xC0	; 192
    2bf8:	66 0f       	add	r22, r22
    2bfa:	77 1f       	adc	r23, r23
    2bfc:	88 1f       	adc	r24, r24
    2bfe:	20 f0       	brcs	.+8      	; 0x2c08 <sqrt+0x38>
    2c00:	26 17       	cp	r18, r22
    2c02:	37 07       	cpc	r19, r23
    2c04:	48 07       	cpc	r20, r24
    2c06:	30 f4       	brcc	.+12     	; 0x2c14 <sqrt+0x44>
    2c08:	62 1b       	sub	r22, r18
    2c0a:	73 0b       	sbc	r23, r19
    2c0c:	84 0b       	sbc	r24, r20
    2c0e:	20 29       	or	r18, r0
    2c10:	31 29       	or	r19, r1
    2c12:	4a 2b       	or	r20, r26
    2c14:	a6 95       	lsr	r26
    2c16:	17 94       	ror	r1
    2c18:	07 94       	ror	r0
    2c1a:	20 25       	eor	r18, r0
    2c1c:	31 25       	eor	r19, r1
    2c1e:	4a 27       	eor	r20, r26
    2c20:	58 f7       	brcc	.-42     	; 0x2bf8 <sqrt+0x28>
    2c22:	66 0f       	add	r22, r22
    2c24:	77 1f       	adc	r23, r23
    2c26:	88 1f       	adc	r24, r24
    2c28:	20 f0       	brcs	.+8      	; 0x2c32 <sqrt+0x62>
    2c2a:	26 17       	cp	r18, r22
    2c2c:	37 07       	cpc	r19, r23
    2c2e:	48 07       	cpc	r20, r24
    2c30:	30 f4       	brcc	.+12     	; 0x2c3e <sqrt+0x6e>
    2c32:	62 0b       	sbc	r22, r18
    2c34:	73 0b       	sbc	r23, r19
    2c36:	84 0b       	sbc	r24, r20
    2c38:	20 0d       	add	r18, r0
    2c3a:	31 1d       	adc	r19, r1
    2c3c:	41 1d       	adc	r20, r1
    2c3e:	a0 95       	com	r26
    2c40:	81 f7       	brne	.-32     	; 0x2c22 <sqrt+0x52>
    2c42:	b9 01       	movw	r22, r18
    2c44:	84 2f       	mov	r24, r20
    2c46:	91 58       	subi	r25, 0x81	; 129
    2c48:	88 0f       	add	r24, r24
    2c4a:	96 95       	lsr	r25
    2c4c:	87 95       	ror	r24
    2c4e:	08 95       	ret

00002c50 <__fp_mpack>:
    2c50:	9f 3f       	cpi	r25, 0xFF	; 255
    2c52:	31 f0       	breq	.+12     	; 0x2c60 <__fp_mpack_finite+0xc>

00002c54 <__fp_mpack_finite>:
    2c54:	91 50       	subi	r25, 0x01	; 1
    2c56:	20 f4       	brcc	.+8      	; 0x2c60 <__fp_mpack_finite+0xc>
    2c58:	87 95       	ror	r24
    2c5a:	77 95       	ror	r23
    2c5c:	67 95       	ror	r22
    2c5e:	b7 95       	ror	r27
    2c60:	88 0f       	add	r24, r24
    2c62:	91 1d       	adc	r25, r1
    2c64:	96 95       	lsr	r25
    2c66:	87 95       	ror	r24
    2c68:	97 f9       	bld	r25, 7
    2c6a:	08 95       	ret

00002c6c <__fp_norm2>:
    2c6c:	91 50       	subi	r25, 0x01	; 1
    2c6e:	50 40       	sbci	r21, 0x00	; 0
    2c70:	66 0f       	add	r22, r22
    2c72:	77 1f       	adc	r23, r23
    2c74:	88 1f       	adc	r24, r24
    2c76:	d2 f7       	brpl	.-12     	; 0x2c6c <__fp_norm2>
    2c78:	08 95       	ret

00002c7a <__fp_powser>:
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	1f 93       	push	r17
    2c80:	0f 93       	push	r16
    2c82:	ff 92       	push	r15
    2c84:	ef 92       	push	r14
    2c86:	df 92       	push	r13
    2c88:	7b 01       	movw	r14, r22
    2c8a:	8c 01       	movw	r16, r24
    2c8c:	68 94       	set
    2c8e:	06 c0       	rjmp	.+12     	; 0x2c9c <__fp_powser+0x22>
    2c90:	da 2e       	mov	r13, r26
    2c92:	ef 01       	movw	r28, r30
    2c94:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__mulsf3x>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e8 94       	clt
    2c9c:	a5 91       	lpm	r26, Z+
    2c9e:	25 91       	lpm	r18, Z+
    2ca0:	35 91       	lpm	r19, Z+
    2ca2:	45 91       	lpm	r20, Z+
    2ca4:	55 91       	lpm	r21, Z+
    2ca6:	a6 f3       	brts	.-24     	; 0x2c90 <__fp_powser+0x16>
    2ca8:	ef 01       	movw	r28, r30
    2caa:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	97 01       	movw	r18, r14
    2cb2:	a8 01       	movw	r20, r16
    2cb4:	da 94       	dec	r13
    2cb6:	69 f7       	brne	.-38     	; 0x2c92 <__fp_powser+0x18>
    2cb8:	df 90       	pop	r13
    2cba:	ef 90       	pop	r14
    2cbc:	ff 90       	pop	r15
    2cbe:	0f 91       	pop	r16
    2cc0:	1f 91       	pop	r17
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <__fp_powsodd>:
    2cc8:	9f 93       	push	r25
    2cca:	8f 93       	push	r24
    2ccc:	7f 93       	push	r23
    2cce:	6f 93       	push	r22
    2cd0:	ff 93       	push	r31
    2cd2:	ef 93       	push	r30
    2cd4:	9b 01       	movw	r18, r22
    2cd6:	ac 01       	movw	r20, r24
    2cd8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    2cdc:	ef 91       	pop	r30
    2cde:	ff 91       	pop	r31
    2ce0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__fp_powser>
    2ce4:	2f 91       	pop	r18
    2ce6:	3f 91       	pop	r19
    2ce8:	4f 91       	pop	r20
    2cea:	5f 91       	pop	r21
    2cec:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__mulsf3>

00002cf0 <__divmodsi4>:
    2cf0:	05 2e       	mov	r0, r21
    2cf2:	97 fb       	bst	r25, 7
    2cf4:	1e f4       	brtc	.+6      	; 0x2cfc <__divmodsi4+0xc>
    2cf6:	00 94       	com	r0
    2cf8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__negsi2>
    2cfc:	57 fd       	sbrc	r21, 7
    2cfe:	07 d0       	rcall	.+14     	; 0x2d0e <__divmodsi4_neg2>
    2d00:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodsi4>
    2d04:	07 fc       	sbrc	r0, 7
    2d06:	03 d0       	rcall	.+6      	; 0x2d0e <__divmodsi4_neg2>
    2d08:	4e f4       	brtc	.+18     	; 0x2d1c <__divmodsi4_exit>
    2d0a:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__negsi2>

00002d0e <__divmodsi4_neg2>:
    2d0e:	50 95       	com	r21
    2d10:	40 95       	com	r20
    2d12:	30 95       	com	r19
    2d14:	21 95       	neg	r18
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	4f 4f       	sbci	r20, 0xFF	; 255
    2d1a:	5f 4f       	sbci	r21, 0xFF	; 255

00002d1c <__divmodsi4_exit>:
    2d1c:	08 95       	ret

00002d1e <__negsi2>:
    2d1e:	90 95       	com	r25
    2d20:	80 95       	com	r24
    2d22:	70 95       	com	r23
    2d24:	61 95       	neg	r22
    2d26:	7f 4f       	sbci	r23, 0xFF	; 255
    2d28:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2c:	08 95       	ret

00002d2e <__muluhisi3>:
    2d2e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__umulhisi3>
    2d32:	a5 9f       	mul	r26, r21
    2d34:	90 0d       	add	r25, r0
    2d36:	b4 9f       	mul	r27, r20
    2d38:	90 0d       	add	r25, r0
    2d3a:	a4 9f       	mul	r26, r20
    2d3c:	80 0d       	add	r24, r0
    2d3e:	91 1d       	adc	r25, r1
    2d40:	11 24       	eor	r1, r1
    2d42:	08 95       	ret

00002d44 <__udivmodsi4>:
    2d44:	a1 e2       	ldi	r26, 0x21	; 33
    2d46:	1a 2e       	mov	r1, r26
    2d48:	aa 1b       	sub	r26, r26
    2d4a:	bb 1b       	sub	r27, r27
    2d4c:	fd 01       	movw	r30, r26
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <__udivmodsi4_ep>

00002d50 <__udivmodsi4_loop>:
    2d50:	aa 1f       	adc	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	ee 1f       	adc	r30, r30
    2d56:	ff 1f       	adc	r31, r31
    2d58:	a2 17       	cp	r26, r18
    2d5a:	b3 07       	cpc	r27, r19
    2d5c:	e4 07       	cpc	r30, r20
    2d5e:	f5 07       	cpc	r31, r21
    2d60:	20 f0       	brcs	.+8      	; 0x2d6a <__udivmodsi4_ep>
    2d62:	a2 1b       	sub	r26, r18
    2d64:	b3 0b       	sbc	r27, r19
    2d66:	e4 0b       	sbc	r30, r20
    2d68:	f5 0b       	sbc	r31, r21

00002d6a <__udivmodsi4_ep>:
    2d6a:	66 1f       	adc	r22, r22
    2d6c:	77 1f       	adc	r23, r23
    2d6e:	88 1f       	adc	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	1a 94       	dec	r1
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <__udivmodsi4_loop>
    2d76:	60 95       	com	r22
    2d78:	70 95       	com	r23
    2d7a:	80 95       	com	r24
    2d7c:	90 95       	com	r25
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	bd 01       	movw	r22, r26
    2d84:	cf 01       	movw	r24, r30
    2d86:	08 95       	ret

00002d88 <__umulhisi3>:
    2d88:	a2 9f       	mul	r26, r18
    2d8a:	b0 01       	movw	r22, r0
    2d8c:	b3 9f       	mul	r27, r19
    2d8e:	c0 01       	movw	r24, r0
    2d90:	a3 9f       	mul	r26, r19
    2d92:	70 0d       	add	r23, r0
    2d94:	81 1d       	adc	r24, r1
    2d96:	11 24       	eor	r1, r1
    2d98:	91 1d       	adc	r25, r1
    2d9a:	b2 9f       	mul	r27, r18
    2d9c:	70 0d       	add	r23, r0
    2d9e:	81 1d       	adc	r24, r1
    2da0:	11 24       	eor	r1, r1
    2da2:	91 1d       	adc	r25, r1
    2da4:	08 95       	ret

00002da6 <dtostrf>:
    2da6:	ef 92       	push	r14
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	e8 01       	movw	r28, r16
    2db2:	47 fd       	sbrc	r20, 7
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <dtostrf+0x14>
    2db6:	34 e0       	ldi	r19, 0x04	; 4
    2db8:	01 c0       	rjmp	.+2      	; 0x2dbc <dtostrf+0x16>
    2dba:	34 e1       	ldi	r19, 0x14	; 20
    2dbc:	04 2e       	mov	r0, r20
    2dbe:	00 0c       	add	r0, r0
    2dc0:	55 0b       	sbc	r21, r21
    2dc2:	57 ff       	sbrs	r21, 7
    2dc4:	03 c0       	rjmp	.+6      	; 0x2dcc <dtostrf+0x26>
    2dc6:	51 95       	neg	r21
    2dc8:	41 95       	neg	r20
    2dca:	51 09       	sbc	r21, r1
    2dcc:	e3 2e       	mov	r14, r19
    2dce:	02 2f       	mov	r16, r18
    2dd0:	24 2f       	mov	r18, r20
    2dd2:	ae 01       	movw	r20, r28
    2dd4:	0e 94 20 19 	call	0x3240	; 0x3240 <dtoa_prf>
    2dd8:	ce 01       	movw	r24, r28
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ef 90       	pop	r14
    2de4:	08 95       	ret

00002de6 <atof>:
    2de6:	66 27       	eor	r22, r22
    2de8:	77 27       	eor	r23, r23
    2dea:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <strtod>

00002dee <atoi>:
    2dee:	fc 01       	movw	r30, r24
    2df0:	88 27       	eor	r24, r24
    2df2:	99 27       	eor	r25, r25
    2df4:	e8 94       	clt
    2df6:	21 91       	ld	r18, Z+
    2df8:	20 32       	cpi	r18, 0x20	; 32
    2dfa:	e9 f3       	breq	.-6      	; 0x2df6 <atoi+0x8>
    2dfc:	29 30       	cpi	r18, 0x09	; 9
    2dfe:	10 f0       	brcs	.+4      	; 0x2e04 <atoi+0x16>
    2e00:	2e 30       	cpi	r18, 0x0E	; 14
    2e02:	c8 f3       	brcs	.-14     	; 0x2df6 <atoi+0x8>
    2e04:	2b 32       	cpi	r18, 0x2B	; 43
    2e06:	41 f0       	breq	.+16     	; 0x2e18 <atoi+0x2a>
    2e08:	2d 32       	cpi	r18, 0x2D	; 45
    2e0a:	39 f4       	brne	.+14     	; 0x2e1a <atoi+0x2c>
    2e0c:	68 94       	set
    2e0e:	04 c0       	rjmp	.+8      	; 0x2e18 <atoi+0x2a>
    2e10:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__mulhi_const_10>
    2e14:	82 0f       	add	r24, r18
    2e16:	91 1d       	adc	r25, r1
    2e18:	21 91       	ld	r18, Z+
    2e1a:	20 53       	subi	r18, 0x30	; 48
    2e1c:	2a 30       	cpi	r18, 0x0A	; 10
    2e1e:	c0 f3       	brcs	.-16     	; 0x2e10 <atoi+0x22>
    2e20:	1e f4       	brtc	.+6      	; 0x2e28 <atoi+0x3a>
    2e22:	90 95       	com	r25
    2e24:	81 95       	neg	r24
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	08 95       	ret

00002e2a <__mulhi_const_10>:
    2e2a:	7a e0       	ldi	r23, 0x0A	; 10
    2e2c:	97 9f       	mul	r25, r23
    2e2e:	90 2d       	mov	r25, r0
    2e30:	87 9f       	mul	r24, r23
    2e32:	80 2d       	mov	r24, r0
    2e34:	91 0d       	add	r25, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	08 95       	ret

00002e3a <sprintf>:
    2e3a:	ae e0       	ldi	r26, 0x0E	; 14
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e3 e2       	ldi	r30, 0x23	; 35
    2e40:	f7 e1       	ldi	r31, 0x17	; 23
    2e42:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__prologue_saves__+0x1c>
    2e46:	0d 89       	ldd	r16, Y+21	; 0x15
    2e48:	1e 89       	ldd	r17, Y+22	; 0x16
    2e4a:	86 e0       	ldi	r24, 0x06	; 6
    2e4c:	8c 83       	std	Y+4, r24	; 0x04
    2e4e:	1a 83       	std	Y+2, r17	; 0x02
    2e50:	09 83       	std	Y+1, r16	; 0x01
    2e52:	8f ef       	ldi	r24, 0xFF	; 255
    2e54:	9f e7       	ldi	r25, 0x7F	; 127
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	8d 83       	std	Y+5, r24	; 0x05
    2e5a:	ae 01       	movw	r20, r28
    2e5c:	47 5e       	subi	r20, 0xE7	; 231
    2e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e60:	6f 89       	ldd	r22, Y+23	; 0x17
    2e62:	78 8d       	ldd	r23, Y+24	; 0x18
    2e64:	ce 01       	movw	r24, r28
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vfprintf>
    2e6c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e6e:	f8 85       	ldd	r31, Y+8	; 0x08
    2e70:	e0 0f       	add	r30, r16
    2e72:	f1 1f       	adc	r31, r17
    2e74:	10 82       	st	Z, r1
    2e76:	2e 96       	adiw	r28, 0x0e	; 14
    2e78:	e4 e0       	ldi	r30, 0x04	; 4
    2e7a:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__epilogue_restores__+0x1c>

00002e7e <vfprintf>:
    2e7e:	ab e0       	ldi	r26, 0x0B	; 11
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e5 e4       	ldi	r30, 0x45	; 69
    2e84:	f7 e1       	ldi	r31, 0x17	; 23
    2e86:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__prologue_saves__>
    2e8a:	6c 01       	movw	r12, r24
    2e8c:	7b 01       	movw	r14, r22
    2e8e:	8a 01       	movw	r16, r20
    2e90:	fc 01       	movw	r30, r24
    2e92:	17 82       	std	Z+7, r1	; 0x07
    2e94:	16 82       	std	Z+6, r1	; 0x06
    2e96:	83 81       	ldd	r24, Z+3	; 0x03
    2e98:	81 ff       	sbrs	r24, 1
    2e9a:	cc c1       	rjmp	.+920    	; 0x3234 <vfprintf+0x3b6>
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	3c 01       	movw	r6, r24
    2ea2:	f6 01       	movw	r30, r12
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	f7 01       	movw	r30, r14
    2ea8:	93 fd       	sbrc	r25, 3
    2eaa:	85 91       	lpm	r24, Z+
    2eac:	93 ff       	sbrs	r25, 3
    2eae:	81 91       	ld	r24, Z+
    2eb0:	7f 01       	movw	r14, r30
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <vfprintf+0x3a>
    2eb6:	ba c1       	rjmp	.+884    	; 0x322c <vfprintf+0x3ae>
    2eb8:	85 32       	cpi	r24, 0x25	; 37
    2eba:	39 f4       	brne	.+14     	; 0x2eca <vfprintf+0x4c>
    2ebc:	93 fd       	sbrc	r25, 3
    2ebe:	85 91       	lpm	r24, Z+
    2ec0:	93 ff       	sbrs	r25, 3
    2ec2:	81 91       	ld	r24, Z+
    2ec4:	7f 01       	movw	r14, r30
    2ec6:	85 32       	cpi	r24, 0x25	; 37
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <vfprintf+0x56>
    2eca:	b6 01       	movw	r22, r12
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    2ed2:	e7 cf       	rjmp	.-50     	; 0x2ea2 <vfprintf+0x24>
    2ed4:	91 2c       	mov	r9, r1
    2ed6:	21 2c       	mov	r2, r1
    2ed8:	31 2c       	mov	r3, r1
    2eda:	ff e1       	ldi	r31, 0x1F	; 31
    2edc:	f3 15       	cp	r31, r3
    2ede:	d8 f0       	brcs	.+54     	; 0x2f16 <vfprintf+0x98>
    2ee0:	8b 32       	cpi	r24, 0x2B	; 43
    2ee2:	79 f0       	breq	.+30     	; 0x2f02 <vfprintf+0x84>
    2ee4:	38 f4       	brcc	.+14     	; 0x2ef4 <vfprintf+0x76>
    2ee6:	80 32       	cpi	r24, 0x20	; 32
    2ee8:	79 f0       	breq	.+30     	; 0x2f08 <vfprintf+0x8a>
    2eea:	83 32       	cpi	r24, 0x23	; 35
    2eec:	a1 f4       	brne	.+40     	; 0x2f16 <vfprintf+0x98>
    2eee:	23 2d       	mov	r18, r3
    2ef0:	20 61       	ori	r18, 0x10	; 16
    2ef2:	1d c0       	rjmp	.+58     	; 0x2f2e <vfprintf+0xb0>
    2ef4:	8d 32       	cpi	r24, 0x2D	; 45
    2ef6:	61 f0       	breq	.+24     	; 0x2f10 <vfprintf+0x92>
    2ef8:	80 33       	cpi	r24, 0x30	; 48
    2efa:	69 f4       	brne	.+26     	; 0x2f16 <vfprintf+0x98>
    2efc:	23 2d       	mov	r18, r3
    2efe:	21 60       	ori	r18, 0x01	; 1
    2f00:	16 c0       	rjmp	.+44     	; 0x2f2e <vfprintf+0xb0>
    2f02:	83 2d       	mov	r24, r3
    2f04:	82 60       	ori	r24, 0x02	; 2
    2f06:	38 2e       	mov	r3, r24
    2f08:	e3 2d       	mov	r30, r3
    2f0a:	e4 60       	ori	r30, 0x04	; 4
    2f0c:	3e 2e       	mov	r3, r30
    2f0e:	2a c0       	rjmp	.+84     	; 0x2f64 <vfprintf+0xe6>
    2f10:	f3 2d       	mov	r31, r3
    2f12:	f8 60       	ori	r31, 0x08	; 8
    2f14:	1d c0       	rjmp	.+58     	; 0x2f50 <vfprintf+0xd2>
    2f16:	37 fc       	sbrc	r3, 7
    2f18:	2d c0       	rjmp	.+90     	; 0x2f74 <vfprintf+0xf6>
    2f1a:	20 ed       	ldi	r18, 0xD0	; 208
    2f1c:	28 0f       	add	r18, r24
    2f1e:	2a 30       	cpi	r18, 0x0A	; 10
    2f20:	40 f0       	brcs	.+16     	; 0x2f32 <vfprintf+0xb4>
    2f22:	8e 32       	cpi	r24, 0x2E	; 46
    2f24:	b9 f4       	brne	.+46     	; 0x2f54 <vfprintf+0xd6>
    2f26:	36 fc       	sbrc	r3, 6
    2f28:	81 c1       	rjmp	.+770    	; 0x322c <vfprintf+0x3ae>
    2f2a:	23 2d       	mov	r18, r3
    2f2c:	20 64       	ori	r18, 0x40	; 64
    2f2e:	32 2e       	mov	r3, r18
    2f30:	19 c0       	rjmp	.+50     	; 0x2f64 <vfprintf+0xe6>
    2f32:	36 fe       	sbrs	r3, 6
    2f34:	06 c0       	rjmp	.+12     	; 0x2f42 <vfprintf+0xc4>
    2f36:	8a e0       	ldi	r24, 0x0A	; 10
    2f38:	98 9e       	mul	r9, r24
    2f3a:	20 0d       	add	r18, r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	92 2e       	mov	r9, r18
    2f40:	11 c0       	rjmp	.+34     	; 0x2f64 <vfprintf+0xe6>
    2f42:	ea e0       	ldi	r30, 0x0A	; 10
    2f44:	2e 9e       	mul	r2, r30
    2f46:	20 0d       	add	r18, r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	22 2e       	mov	r2, r18
    2f4c:	f3 2d       	mov	r31, r3
    2f4e:	f0 62       	ori	r31, 0x20	; 32
    2f50:	3f 2e       	mov	r3, r31
    2f52:	08 c0       	rjmp	.+16     	; 0x2f64 <vfprintf+0xe6>
    2f54:	8c 36       	cpi	r24, 0x6C	; 108
    2f56:	21 f4       	brne	.+8      	; 0x2f60 <vfprintf+0xe2>
    2f58:	83 2d       	mov	r24, r3
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	38 2e       	mov	r3, r24
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <vfprintf+0xe6>
    2f60:	88 36       	cpi	r24, 0x68	; 104
    2f62:	41 f4       	brne	.+16     	; 0x2f74 <vfprintf+0xf6>
    2f64:	f7 01       	movw	r30, r14
    2f66:	93 fd       	sbrc	r25, 3
    2f68:	85 91       	lpm	r24, Z+
    2f6a:	93 ff       	sbrs	r25, 3
    2f6c:	81 91       	ld	r24, Z+
    2f6e:	7f 01       	movw	r14, r30
    2f70:	81 11       	cpse	r24, r1
    2f72:	b3 cf       	rjmp	.-154    	; 0x2eda <vfprintf+0x5c>
    2f74:	98 2f       	mov	r25, r24
    2f76:	9f 7d       	andi	r25, 0xDF	; 223
    2f78:	95 54       	subi	r25, 0x45	; 69
    2f7a:	93 30       	cpi	r25, 0x03	; 3
    2f7c:	28 f4       	brcc	.+10     	; 0x2f88 <vfprintf+0x10a>
    2f7e:	0c 5f       	subi	r16, 0xFC	; 252
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	9f e3       	ldi	r25, 0x3F	; 63
    2f84:	99 83       	std	Y+1, r25	; 0x01
    2f86:	0d c0       	rjmp	.+26     	; 0x2fa2 <vfprintf+0x124>
    2f88:	83 36       	cpi	r24, 0x63	; 99
    2f8a:	31 f0       	breq	.+12     	; 0x2f98 <vfprintf+0x11a>
    2f8c:	83 37       	cpi	r24, 0x73	; 115
    2f8e:	71 f0       	breq	.+28     	; 0x2fac <vfprintf+0x12e>
    2f90:	83 35       	cpi	r24, 0x53	; 83
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <vfprintf+0x118>
    2f94:	59 c0       	rjmp	.+178    	; 0x3048 <vfprintf+0x1ca>
    2f96:	21 c0       	rjmp	.+66     	; 0x2fda <vfprintf+0x15c>
    2f98:	f8 01       	movw	r30, r16
    2f9a:	80 81       	ld	r24, Z
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	0e 5f       	subi	r16, 0xFE	; 254
    2fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa2:	88 24       	eor	r8, r8
    2fa4:	83 94       	inc	r8
    2fa6:	91 2c       	mov	r9, r1
    2fa8:	53 01       	movw	r10, r6
    2faa:	13 c0       	rjmp	.+38     	; 0x2fd2 <vfprintf+0x154>
    2fac:	28 01       	movw	r4, r16
    2fae:	f2 e0       	ldi	r31, 0x02	; 2
    2fb0:	4f 0e       	add	r4, r31
    2fb2:	51 1c       	adc	r5, r1
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	a0 80       	ld	r10, Z
    2fb8:	b1 80       	ldd	r11, Z+1	; 0x01
    2fba:	36 fe       	sbrs	r3, 6
    2fbc:	03 c0       	rjmp	.+6      	; 0x2fc4 <vfprintf+0x146>
    2fbe:	69 2d       	mov	r22, r9
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <vfprintf+0x14a>
    2fc4:	6f ef       	ldi	r22, 0xFF	; 255
    2fc6:	7f ef       	ldi	r23, 0xFF	; 255
    2fc8:	c5 01       	movw	r24, r10
    2fca:	0e 94 cc 1c 	call	0x3998	; 0x3998 <strnlen>
    2fce:	4c 01       	movw	r8, r24
    2fd0:	82 01       	movw	r16, r4
    2fd2:	f3 2d       	mov	r31, r3
    2fd4:	ff 77       	andi	r31, 0x7F	; 127
    2fd6:	3f 2e       	mov	r3, r31
    2fd8:	16 c0       	rjmp	.+44     	; 0x3006 <vfprintf+0x188>
    2fda:	28 01       	movw	r4, r16
    2fdc:	22 e0       	ldi	r18, 0x02	; 2
    2fde:	42 0e       	add	r4, r18
    2fe0:	51 1c       	adc	r5, r1
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	a0 80       	ld	r10, Z
    2fe6:	b1 80       	ldd	r11, Z+1	; 0x01
    2fe8:	36 fe       	sbrs	r3, 6
    2fea:	03 c0       	rjmp	.+6      	; 0x2ff2 <vfprintf+0x174>
    2fec:	69 2d       	mov	r22, r9
    2fee:	70 e0       	ldi	r23, 0x00	; 0
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <vfprintf+0x178>
    2ff2:	6f ef       	ldi	r22, 0xFF	; 255
    2ff4:	7f ef       	ldi	r23, 0xFF	; 255
    2ff6:	c5 01       	movw	r24, r10
    2ff8:	0e 94 c1 1c 	call	0x3982	; 0x3982 <strnlen_P>
    2ffc:	4c 01       	movw	r8, r24
    2ffe:	f3 2d       	mov	r31, r3
    3000:	f0 68       	ori	r31, 0x80	; 128
    3002:	3f 2e       	mov	r3, r31
    3004:	82 01       	movw	r16, r4
    3006:	33 fc       	sbrc	r3, 3
    3008:	1b c0       	rjmp	.+54     	; 0x3040 <vfprintf+0x1c2>
    300a:	82 2d       	mov	r24, r2
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	88 16       	cp	r8, r24
    3010:	99 06       	cpc	r9, r25
    3012:	b0 f4       	brcc	.+44     	; 0x3040 <vfprintf+0x1c2>
    3014:	b6 01       	movw	r22, r12
    3016:	80 e2       	ldi	r24, 0x20	; 32
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    301e:	2a 94       	dec	r2
    3020:	f4 cf       	rjmp	.-24     	; 0x300a <vfprintf+0x18c>
    3022:	f5 01       	movw	r30, r10
    3024:	37 fc       	sbrc	r3, 7
    3026:	85 91       	lpm	r24, Z+
    3028:	37 fe       	sbrs	r3, 7
    302a:	81 91       	ld	r24, Z+
    302c:	5f 01       	movw	r10, r30
    302e:	b6 01       	movw	r22, r12
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    3036:	21 10       	cpse	r2, r1
    3038:	2a 94       	dec	r2
    303a:	21 e0       	ldi	r18, 0x01	; 1
    303c:	82 1a       	sub	r8, r18
    303e:	91 08       	sbc	r9, r1
    3040:	81 14       	cp	r8, r1
    3042:	91 04       	cpc	r9, r1
    3044:	71 f7       	brne	.-36     	; 0x3022 <vfprintf+0x1a4>
    3046:	e8 c0       	rjmp	.+464    	; 0x3218 <vfprintf+0x39a>
    3048:	84 36       	cpi	r24, 0x64	; 100
    304a:	11 f0       	breq	.+4      	; 0x3050 <vfprintf+0x1d2>
    304c:	89 36       	cpi	r24, 0x69	; 105
    304e:	41 f5       	brne	.+80     	; 0x30a0 <vfprintf+0x222>
    3050:	f8 01       	movw	r30, r16
    3052:	37 fe       	sbrs	r3, 7
    3054:	07 c0       	rjmp	.+14     	; 0x3064 <vfprintf+0x1e6>
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	0c 5f       	subi	r16, 0xFC	; 252
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	08 c0       	rjmp	.+16     	; 0x3074 <vfprintf+0x1f6>
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	07 2e       	mov	r0, r23
    306a:	00 0c       	add	r0, r0
    306c:	88 0b       	sbc	r24, r24
    306e:	99 0b       	sbc	r25, r25
    3070:	0e 5f       	subi	r16, 0xFE	; 254
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	f3 2d       	mov	r31, r3
    3076:	ff 76       	andi	r31, 0x6F	; 111
    3078:	3f 2e       	mov	r3, r31
    307a:	97 ff       	sbrs	r25, 7
    307c:	09 c0       	rjmp	.+18     	; 0x3090 <vfprintf+0x212>
    307e:	90 95       	com	r25
    3080:	80 95       	com	r24
    3082:	70 95       	com	r23
    3084:	61 95       	neg	r22
    3086:	7f 4f       	sbci	r23, 0xFF	; 255
    3088:	8f 4f       	sbci	r24, 0xFF	; 255
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	f0 68       	ori	r31, 0x80	; 128
    308e:	3f 2e       	mov	r3, r31
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	a3 01       	movw	r20, r6
    3096:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__ultoa_invert>
    309a:	88 2e       	mov	r8, r24
    309c:	86 18       	sub	r8, r6
    309e:	45 c0       	rjmp	.+138    	; 0x312a <vfprintf+0x2ac>
    30a0:	85 37       	cpi	r24, 0x75	; 117
    30a2:	31 f4       	brne	.+12     	; 0x30b0 <vfprintf+0x232>
    30a4:	23 2d       	mov	r18, r3
    30a6:	2f 7e       	andi	r18, 0xEF	; 239
    30a8:	b2 2e       	mov	r11, r18
    30aa:	2a e0       	ldi	r18, 0x0A	; 10
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	25 c0       	rjmp	.+74     	; 0x30fa <vfprintf+0x27c>
    30b0:	93 2d       	mov	r25, r3
    30b2:	99 7f       	andi	r25, 0xF9	; 249
    30b4:	b9 2e       	mov	r11, r25
    30b6:	8f 36       	cpi	r24, 0x6F	; 111
    30b8:	c1 f0       	breq	.+48     	; 0x30ea <vfprintf+0x26c>
    30ba:	18 f4       	brcc	.+6      	; 0x30c2 <vfprintf+0x244>
    30bc:	88 35       	cpi	r24, 0x58	; 88
    30be:	79 f0       	breq	.+30     	; 0x30de <vfprintf+0x260>
    30c0:	b5 c0       	rjmp	.+362    	; 0x322c <vfprintf+0x3ae>
    30c2:	80 37       	cpi	r24, 0x70	; 112
    30c4:	19 f0       	breq	.+6      	; 0x30cc <vfprintf+0x24e>
    30c6:	88 37       	cpi	r24, 0x78	; 120
    30c8:	21 f0       	breq	.+8      	; 0x30d2 <vfprintf+0x254>
    30ca:	b0 c0       	rjmp	.+352    	; 0x322c <vfprintf+0x3ae>
    30cc:	e9 2f       	mov	r30, r25
    30ce:	e0 61       	ori	r30, 0x10	; 16
    30d0:	be 2e       	mov	r11, r30
    30d2:	b4 fe       	sbrs	r11, 4
    30d4:	0d c0       	rjmp	.+26     	; 0x30f0 <vfprintf+0x272>
    30d6:	fb 2d       	mov	r31, r11
    30d8:	f4 60       	ori	r31, 0x04	; 4
    30da:	bf 2e       	mov	r11, r31
    30dc:	09 c0       	rjmp	.+18     	; 0x30f0 <vfprintf+0x272>
    30de:	34 fe       	sbrs	r3, 4
    30e0:	0a c0       	rjmp	.+20     	; 0x30f6 <vfprintf+0x278>
    30e2:	29 2f       	mov	r18, r25
    30e4:	26 60       	ori	r18, 0x06	; 6
    30e6:	b2 2e       	mov	r11, r18
    30e8:	06 c0       	rjmp	.+12     	; 0x30f6 <vfprintf+0x278>
    30ea:	28 e0       	ldi	r18, 0x08	; 8
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	05 c0       	rjmp	.+10     	; 0x30fa <vfprintf+0x27c>
    30f0:	20 e1       	ldi	r18, 0x10	; 16
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <vfprintf+0x27c>
    30f6:	20 e1       	ldi	r18, 0x10	; 16
    30f8:	32 e0       	ldi	r19, 0x02	; 2
    30fa:	f8 01       	movw	r30, r16
    30fc:	b7 fe       	sbrs	r11, 7
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <vfprintf+0x290>
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	0c 5f       	subi	r16, 0xFC	; 252
    310a:	1f 4f       	sbci	r17, 0xFF	; 255
    310c:	06 c0       	rjmp	.+12     	; 0x311a <vfprintf+0x29c>
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 5f       	subi	r16, 0xFE	; 254
    3118:	1f 4f       	sbci	r17, 0xFF	; 255
    311a:	a3 01       	movw	r20, r6
    311c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__ultoa_invert>
    3120:	88 2e       	mov	r8, r24
    3122:	86 18       	sub	r8, r6
    3124:	fb 2d       	mov	r31, r11
    3126:	ff 77       	andi	r31, 0x7F	; 127
    3128:	3f 2e       	mov	r3, r31
    312a:	36 fe       	sbrs	r3, 6
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <vfprintf+0x2ca>
    312e:	23 2d       	mov	r18, r3
    3130:	2e 7f       	andi	r18, 0xFE	; 254
    3132:	a2 2e       	mov	r10, r18
    3134:	89 14       	cp	r8, r9
    3136:	58 f4       	brcc	.+22     	; 0x314e <vfprintf+0x2d0>
    3138:	34 fe       	sbrs	r3, 4
    313a:	0b c0       	rjmp	.+22     	; 0x3152 <vfprintf+0x2d4>
    313c:	32 fc       	sbrc	r3, 2
    313e:	09 c0       	rjmp	.+18     	; 0x3152 <vfprintf+0x2d4>
    3140:	83 2d       	mov	r24, r3
    3142:	8e 7e       	andi	r24, 0xEE	; 238
    3144:	a8 2e       	mov	r10, r24
    3146:	05 c0       	rjmp	.+10     	; 0x3152 <vfprintf+0x2d4>
    3148:	b8 2c       	mov	r11, r8
    314a:	a3 2c       	mov	r10, r3
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <vfprintf+0x2d6>
    314e:	b8 2c       	mov	r11, r8
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <vfprintf+0x2d6>
    3152:	b9 2c       	mov	r11, r9
    3154:	a4 fe       	sbrs	r10, 4
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <vfprintf+0x2f8>
    3158:	fe 01       	movw	r30, r28
    315a:	e8 0d       	add	r30, r8
    315c:	f1 1d       	adc	r31, r1
    315e:	80 81       	ld	r24, Z
    3160:	80 33       	cpi	r24, 0x30	; 48
    3162:	21 f4       	brne	.+8      	; 0x316c <vfprintf+0x2ee>
    3164:	9a 2d       	mov	r25, r10
    3166:	99 7e       	andi	r25, 0xE9	; 233
    3168:	a9 2e       	mov	r10, r25
    316a:	09 c0       	rjmp	.+18     	; 0x317e <vfprintf+0x300>
    316c:	a2 fe       	sbrs	r10, 2
    316e:	06 c0       	rjmp	.+12     	; 0x317c <vfprintf+0x2fe>
    3170:	b3 94       	inc	r11
    3172:	b3 94       	inc	r11
    3174:	04 c0       	rjmp	.+8      	; 0x317e <vfprintf+0x300>
    3176:	8a 2d       	mov	r24, r10
    3178:	86 78       	andi	r24, 0x86	; 134
    317a:	09 f0       	breq	.+2      	; 0x317e <vfprintf+0x300>
    317c:	b3 94       	inc	r11
    317e:	a3 fc       	sbrc	r10, 3
    3180:	11 c0       	rjmp	.+34     	; 0x31a4 <vfprintf+0x326>
    3182:	a0 fe       	sbrs	r10, 0
    3184:	06 c0       	rjmp	.+12     	; 0x3192 <vfprintf+0x314>
    3186:	b2 14       	cp	r11, r2
    3188:	88 f4       	brcc	.+34     	; 0x31ac <vfprintf+0x32e>
    318a:	28 0c       	add	r2, r8
    318c:	92 2c       	mov	r9, r2
    318e:	9b 18       	sub	r9, r11
    3190:	0e c0       	rjmp	.+28     	; 0x31ae <vfprintf+0x330>
    3192:	b2 14       	cp	r11, r2
    3194:	60 f4       	brcc	.+24     	; 0x31ae <vfprintf+0x330>
    3196:	b6 01       	movw	r22, r12
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    31a0:	b3 94       	inc	r11
    31a2:	f7 cf       	rjmp	.-18     	; 0x3192 <vfprintf+0x314>
    31a4:	b2 14       	cp	r11, r2
    31a6:	18 f4       	brcc	.+6      	; 0x31ae <vfprintf+0x330>
    31a8:	2b 18       	sub	r2, r11
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <vfprintf+0x332>
    31ac:	98 2c       	mov	r9, r8
    31ae:	21 2c       	mov	r2, r1
    31b0:	a4 fe       	sbrs	r10, 4
    31b2:	10 c0       	rjmp	.+32     	; 0x31d4 <vfprintf+0x356>
    31b4:	b6 01       	movw	r22, r12
    31b6:	80 e3       	ldi	r24, 0x30	; 48
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    31be:	a2 fe       	sbrs	r10, 2
    31c0:	17 c0       	rjmp	.+46     	; 0x31f0 <vfprintf+0x372>
    31c2:	a1 fc       	sbrc	r10, 1
    31c4:	03 c0       	rjmp	.+6      	; 0x31cc <vfprintf+0x34e>
    31c6:	88 e7       	ldi	r24, 0x78	; 120
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <vfprintf+0x352>
    31cc:	88 e5       	ldi	r24, 0x58	; 88
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	b6 01       	movw	r22, r12
    31d2:	0c c0       	rjmp	.+24     	; 0x31ec <vfprintf+0x36e>
    31d4:	8a 2d       	mov	r24, r10
    31d6:	86 78       	andi	r24, 0x86	; 134
    31d8:	59 f0       	breq	.+22     	; 0x31f0 <vfprintf+0x372>
    31da:	a1 fe       	sbrs	r10, 1
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <vfprintf+0x364>
    31de:	8b e2       	ldi	r24, 0x2B	; 43
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <vfprintf+0x366>
    31e2:	80 e2       	ldi	r24, 0x20	; 32
    31e4:	a7 fc       	sbrc	r10, 7
    31e6:	8d e2       	ldi	r24, 0x2D	; 45
    31e8:	b6 01       	movw	r22, r12
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    31f0:	89 14       	cp	r8, r9
    31f2:	38 f4       	brcc	.+14     	; 0x3202 <vfprintf+0x384>
    31f4:	b6 01       	movw	r22, r12
    31f6:	80 e3       	ldi	r24, 0x30	; 48
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    31fe:	9a 94       	dec	r9
    3200:	f7 cf       	rjmp	.-18     	; 0x31f0 <vfprintf+0x372>
    3202:	8a 94       	dec	r8
    3204:	f3 01       	movw	r30, r6
    3206:	e8 0d       	add	r30, r8
    3208:	f1 1d       	adc	r31, r1
    320a:	80 81       	ld	r24, Z
    320c:	b6 01       	movw	r22, r12
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    3214:	81 10       	cpse	r8, r1
    3216:	f5 cf       	rjmp	.-22     	; 0x3202 <vfprintf+0x384>
    3218:	22 20       	and	r2, r2
    321a:	09 f4       	brne	.+2      	; 0x321e <vfprintf+0x3a0>
    321c:	42 ce       	rjmp	.-892    	; 0x2ea2 <vfprintf+0x24>
    321e:	b6 01       	movw	r22, r12
    3220:	80 e2       	ldi	r24, 0x20	; 32
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <fputc>
    3228:	2a 94       	dec	r2
    322a:	f6 cf       	rjmp	.-20     	; 0x3218 <vfprintf+0x39a>
    322c:	f6 01       	movw	r30, r12
    322e:	86 81       	ldd	r24, Z+6	; 0x06
    3230:	97 81       	ldd	r25, Z+7	; 0x07
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <vfprintf+0x3ba>
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	9f ef       	ldi	r25, 0xFF	; 255
    3238:	2b 96       	adiw	r28, 0x0b	; 11
    323a:	e2 e1       	ldi	r30, 0x12	; 18
    323c:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__epilogue_restores__>

00003240 <dtoa_prf>:
    3240:	a9 e0       	ldi	r26, 0x09	; 9
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e6 e2       	ldi	r30, 0x26	; 38
    3246:	f9 e1       	ldi	r31, 0x19	; 25
    3248:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__+0xc>
    324c:	6a 01       	movw	r12, r20
    324e:	12 2f       	mov	r17, r18
    3250:	b0 2e       	mov	r11, r16
    3252:	2b e3       	ldi	r18, 0x3B	; 59
    3254:	20 17       	cp	r18, r16
    3256:	20 f0       	brcs	.+8      	; 0x3260 <dtoa_prf+0x20>
    3258:	ff 24       	eor	r15, r15
    325a:	f3 94       	inc	r15
    325c:	f0 0e       	add	r15, r16
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <dtoa_prf+0x24>
    3260:	2c e3       	ldi	r18, 0x3C	; 60
    3262:	f2 2e       	mov	r15, r18
    3264:	0f 2d       	mov	r16, r15
    3266:	27 e0       	ldi	r18, 0x07	; 7
    3268:	ae 01       	movw	r20, r28
    326a:	4f 5f       	subi	r20, 0xFF	; 255
    326c:	5f 4f       	sbci	r21, 0xFF	; 255
    326e:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__ftoa_engine>
    3272:	bc 01       	movw	r22, r24
    3274:	49 81       	ldd	r20, Y+1	; 0x01
    3276:	84 2f       	mov	r24, r20
    3278:	89 70       	andi	r24, 0x09	; 9
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	31 f0       	breq	.+12     	; 0x328a <dtoa_prf+0x4a>
    327e:	e1 fc       	sbrc	r14, 1
    3280:	06 c0       	rjmp	.+12     	; 0x328e <dtoa_prf+0x4e>
    3282:	e0 fe       	sbrs	r14, 0
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <dtoa_prf+0x52>
    3286:	90 e2       	ldi	r25, 0x20	; 32
    3288:	05 c0       	rjmp	.+10     	; 0x3294 <dtoa_prf+0x54>
    328a:	9d e2       	ldi	r25, 0x2D	; 45
    328c:	03 c0       	rjmp	.+6      	; 0x3294 <dtoa_prf+0x54>
    328e:	9b e2       	ldi	r25, 0x2B	; 43
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <dtoa_prf+0x54>
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	5e 2d       	mov	r21, r14
    3296:	50 71       	andi	r21, 0x10	; 16
    3298:	43 ff       	sbrs	r20, 3
    329a:	3c c0       	rjmp	.+120    	; 0x3314 <dtoa_prf+0xd4>
    329c:	91 11       	cpse	r25, r1
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <dtoa_prf+0x64>
    32a0:	83 e0       	ldi	r24, 0x03	; 3
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <dtoa_prf+0x66>
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	81 17       	cp	r24, r17
    32a8:	18 f4       	brcc	.+6      	; 0x32b0 <dtoa_prf+0x70>
    32aa:	21 2f       	mov	r18, r17
    32ac:	28 1b       	sub	r18, r24
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <dtoa_prf+0x72>
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	51 11       	cpse	r21, r1
    32b4:	0b c0       	rjmp	.+22     	; 0x32cc <dtoa_prf+0x8c>
    32b6:	f6 01       	movw	r30, r12
    32b8:	82 2f       	mov	r24, r18
    32ba:	30 e2       	ldi	r19, 0x20	; 32
    32bc:	88 23       	and	r24, r24
    32be:	19 f0       	breq	.+6      	; 0x32c6 <dtoa_prf+0x86>
    32c0:	31 93       	st	Z+, r19
    32c2:	81 50       	subi	r24, 0x01	; 1
    32c4:	fb cf       	rjmp	.-10     	; 0x32bc <dtoa_prf+0x7c>
    32c6:	c2 0e       	add	r12, r18
    32c8:	d1 1c       	adc	r13, r1
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	99 23       	and	r25, r25
    32ce:	29 f0       	breq	.+10     	; 0x32da <dtoa_prf+0x9a>
    32d0:	d6 01       	movw	r26, r12
    32d2:	9c 93       	st	X, r25
    32d4:	f6 01       	movw	r30, r12
    32d6:	31 96       	adiw	r30, 0x01	; 1
    32d8:	6f 01       	movw	r12, r30
    32da:	c6 01       	movw	r24, r12
    32dc:	03 96       	adiw	r24, 0x03	; 3
    32de:	e2 fe       	sbrs	r14, 2
    32e0:	0a c0       	rjmp	.+20     	; 0x32f6 <dtoa_prf+0xb6>
    32e2:	3e e4       	ldi	r19, 0x4E	; 78
    32e4:	d6 01       	movw	r26, r12
    32e6:	3c 93       	st	X, r19
    32e8:	41 e4       	ldi	r20, 0x41	; 65
    32ea:	11 96       	adiw	r26, 0x01	; 1
    32ec:	4c 93       	st	X, r20
    32ee:	11 97       	sbiw	r26, 0x01	; 1
    32f0:	12 96       	adiw	r26, 0x02	; 2
    32f2:	3c 93       	st	X, r19
    32f4:	06 c0       	rjmp	.+12     	; 0x3302 <dtoa_prf+0xc2>
    32f6:	3e e6       	ldi	r19, 0x6E	; 110
    32f8:	f6 01       	movw	r30, r12
    32fa:	30 83       	st	Z, r19
    32fc:	41 e6       	ldi	r20, 0x61	; 97
    32fe:	41 83       	std	Z+1, r20	; 0x01
    3300:	32 83       	std	Z+2, r19	; 0x02
    3302:	fc 01       	movw	r30, r24
    3304:	32 2f       	mov	r19, r18
    3306:	40 e2       	ldi	r20, 0x20	; 32
    3308:	33 23       	and	r19, r19
    330a:	09 f4       	brne	.+2      	; 0x330e <dtoa_prf+0xce>
    330c:	42 c0       	rjmp	.+132    	; 0x3392 <dtoa_prf+0x152>
    330e:	41 93       	st	Z+, r20
    3310:	31 50       	subi	r19, 0x01	; 1
    3312:	fa cf       	rjmp	.-12     	; 0x3308 <dtoa_prf+0xc8>
    3314:	42 ff       	sbrs	r20, 2
    3316:	44 c0       	rjmp	.+136    	; 0x33a0 <dtoa_prf+0x160>
    3318:	91 11       	cpse	r25, r1
    331a:	02 c0       	rjmp	.+4      	; 0x3320 <dtoa_prf+0xe0>
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	01 c0       	rjmp	.+2      	; 0x3322 <dtoa_prf+0xe2>
    3320:	84 e0       	ldi	r24, 0x04	; 4
    3322:	81 17       	cp	r24, r17
    3324:	18 f4       	brcc	.+6      	; 0x332c <dtoa_prf+0xec>
    3326:	21 2f       	mov	r18, r17
    3328:	28 1b       	sub	r18, r24
    332a:	01 c0       	rjmp	.+2      	; 0x332e <dtoa_prf+0xee>
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	51 11       	cpse	r21, r1
    3330:	0b c0       	rjmp	.+22     	; 0x3348 <dtoa_prf+0x108>
    3332:	f6 01       	movw	r30, r12
    3334:	82 2f       	mov	r24, r18
    3336:	30 e2       	ldi	r19, 0x20	; 32
    3338:	88 23       	and	r24, r24
    333a:	19 f0       	breq	.+6      	; 0x3342 <dtoa_prf+0x102>
    333c:	31 93       	st	Z+, r19
    333e:	81 50       	subi	r24, 0x01	; 1
    3340:	fb cf       	rjmp	.-10     	; 0x3338 <dtoa_prf+0xf8>
    3342:	c2 0e       	add	r12, r18
    3344:	d1 1c       	adc	r13, r1
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	99 23       	and	r25, r25
    334a:	29 f0       	breq	.+10     	; 0x3356 <dtoa_prf+0x116>
    334c:	d6 01       	movw	r26, r12
    334e:	9c 93       	st	X, r25
    3350:	f6 01       	movw	r30, r12
    3352:	31 96       	adiw	r30, 0x01	; 1
    3354:	6f 01       	movw	r12, r30
    3356:	c6 01       	movw	r24, r12
    3358:	03 96       	adiw	r24, 0x03	; 3
    335a:	e2 fe       	sbrs	r14, 2
    335c:	0b c0       	rjmp	.+22     	; 0x3374 <dtoa_prf+0x134>
    335e:	39 e4       	ldi	r19, 0x49	; 73
    3360:	d6 01       	movw	r26, r12
    3362:	3c 93       	st	X, r19
    3364:	3e e4       	ldi	r19, 0x4E	; 78
    3366:	11 96       	adiw	r26, 0x01	; 1
    3368:	3c 93       	st	X, r19
    336a:	11 97       	sbiw	r26, 0x01	; 1
    336c:	36 e4       	ldi	r19, 0x46	; 70
    336e:	12 96       	adiw	r26, 0x02	; 2
    3370:	3c 93       	st	X, r19
    3372:	07 c0       	rjmp	.+14     	; 0x3382 <dtoa_prf+0x142>
    3374:	39 e6       	ldi	r19, 0x69	; 105
    3376:	f6 01       	movw	r30, r12
    3378:	30 83       	st	Z, r19
    337a:	3e e6       	ldi	r19, 0x6E	; 110
    337c:	31 83       	std	Z+1, r19	; 0x01
    337e:	36 e6       	ldi	r19, 0x66	; 102
    3380:	32 83       	std	Z+2, r19	; 0x02
    3382:	fc 01       	movw	r30, r24
    3384:	32 2f       	mov	r19, r18
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	33 23       	and	r19, r19
    338a:	19 f0       	breq	.+6      	; 0x3392 <dtoa_prf+0x152>
    338c:	41 93       	st	Z+, r20
    338e:	31 50       	subi	r19, 0x01	; 1
    3390:	fb cf       	rjmp	.-10     	; 0x3388 <dtoa_prf+0x148>
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f1 1d       	adc	r31, r1
    3398:	10 82       	st	Z, r1
    339a:	8e ef       	ldi	r24, 0xFE	; 254
    339c:	9f ef       	ldi	r25, 0xFF	; 255
    339e:	a6 c0       	rjmp	.+332    	; 0x34ec <dtoa_prf+0x2ac>
    33a0:	21 e0       	ldi	r18, 0x01	; 1
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	91 11       	cpse	r25, r1
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <dtoa_prf+0x16c>
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	16 16       	cp	r1, r22
    33ae:	17 06       	cpc	r1, r23
    33b0:	1c f4       	brge	.+6      	; 0x33b8 <dtoa_prf+0x178>
    33b2:	fb 01       	movw	r30, r22
    33b4:	31 96       	adiw	r30, 0x01	; 1
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <dtoa_prf+0x17c>
    33b8:	e1 e0       	ldi	r30, 0x01	; 1
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	2e 0f       	add	r18, r30
    33be:	3f 1f       	adc	r19, r31
    33c0:	bb 20       	and	r11, r11
    33c2:	21 f0       	breq	.+8      	; 0x33cc <dtoa_prf+0x18c>
    33c4:	eb 2d       	mov	r30, r11
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	31 96       	adiw	r30, 0x01	; 1
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <dtoa_prf+0x190>
    33cc:	e0 e0       	ldi	r30, 0x00	; 0
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	2e 0f       	add	r18, r30
    33d2:	3f 1f       	adc	r19, r31
    33d4:	e1 2f       	mov	r30, r17
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	2e 17       	cp	r18, r30
    33da:	3f 07       	cpc	r19, r31
    33dc:	1c f4       	brge	.+6      	; 0x33e4 <dtoa_prf+0x1a4>
    33de:	12 1b       	sub	r17, r18
    33e0:	21 2f       	mov	r18, r17
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <dtoa_prf+0x1a6>
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	8e 2d       	mov	r24, r14
    33e8:	88 71       	andi	r24, 0x18	; 24
    33ea:	59 f4       	brne	.+22     	; 0x3402 <dtoa_prf+0x1c2>
    33ec:	f6 01       	movw	r30, r12
    33ee:	82 2f       	mov	r24, r18
    33f0:	30 e2       	ldi	r19, 0x20	; 32
    33f2:	88 23       	and	r24, r24
    33f4:	19 f0       	breq	.+6      	; 0x33fc <dtoa_prf+0x1bc>
    33f6:	31 93       	st	Z+, r19
    33f8:	81 50       	subi	r24, 0x01	; 1
    33fa:	fb cf       	rjmp	.-10     	; 0x33f2 <dtoa_prf+0x1b2>
    33fc:	c2 0e       	add	r12, r18
    33fe:	d1 1c       	adc	r13, r1
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	99 23       	and	r25, r25
    3404:	29 f0       	breq	.+10     	; 0x3410 <dtoa_prf+0x1d0>
    3406:	d6 01       	movw	r26, r12
    3408:	9c 93       	st	X, r25
    340a:	f6 01       	movw	r30, r12
    340c:	31 96       	adiw	r30, 0x01	; 1
    340e:	6f 01       	movw	r12, r30
    3410:	51 11       	cpse	r21, r1
    3412:	0b c0       	rjmp	.+22     	; 0x342a <dtoa_prf+0x1ea>
    3414:	f6 01       	movw	r30, r12
    3416:	82 2f       	mov	r24, r18
    3418:	90 e3       	ldi	r25, 0x30	; 48
    341a:	88 23       	and	r24, r24
    341c:	19 f0       	breq	.+6      	; 0x3424 <dtoa_prf+0x1e4>
    341e:	91 93       	st	Z+, r25
    3420:	81 50       	subi	r24, 0x01	; 1
    3422:	fb cf       	rjmp	.-10     	; 0x341a <dtoa_prf+0x1da>
    3424:	c2 0e       	add	r12, r18
    3426:	d1 1c       	adc	r13, r1
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	0f 2d       	mov	r16, r15
    342c:	06 0f       	add	r16, r22
    342e:	9a 81       	ldd	r25, Y+2	; 0x02
    3430:	34 2f       	mov	r19, r20
    3432:	30 71       	andi	r19, 0x10	; 16
    3434:	44 ff       	sbrs	r20, 4
    3436:	03 c0       	rjmp	.+6      	; 0x343e <dtoa_prf+0x1fe>
    3438:	91 33       	cpi	r25, 0x31	; 49
    343a:	09 f4       	brne	.+2      	; 0x343e <dtoa_prf+0x1fe>
    343c:	01 50       	subi	r16, 0x01	; 1
    343e:	10 16       	cp	r1, r16
    3440:	24 f4       	brge	.+8      	; 0x344a <dtoa_prf+0x20a>
    3442:	09 30       	cpi	r16, 0x09	; 9
    3444:	18 f0       	brcs	.+6      	; 0x344c <dtoa_prf+0x20c>
    3446:	08 e0       	ldi	r16, 0x08	; 8
    3448:	01 c0       	rjmp	.+2      	; 0x344c <dtoa_prf+0x20c>
    344a:	01 e0       	ldi	r16, 0x01	; 1
    344c:	ab 01       	movw	r20, r22
    344e:	77 ff       	sbrs	r23, 7
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <dtoa_prf+0x216>
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	fb 01       	movw	r30, r22
    3458:	e4 1b       	sub	r30, r20
    345a:	f5 0b       	sbc	r31, r21
    345c:	a1 e0       	ldi	r26, 0x01	; 1
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	ac 0f       	add	r26, r28
    3462:	bd 1f       	adc	r27, r29
    3464:	ea 0f       	add	r30, r26
    3466:	fb 1f       	adc	r31, r27
    3468:	8e e2       	ldi	r24, 0x2E	; 46
    346a:	a8 2e       	mov	r10, r24
    346c:	4b 01       	movw	r8, r22
    346e:	80 1a       	sub	r8, r16
    3470:	91 08       	sbc	r9, r1
    3472:	0b 2d       	mov	r16, r11
    3474:	10 e0       	ldi	r17, 0x00	; 0
    3476:	11 95       	neg	r17
    3478:	01 95       	neg	r16
    347a:	11 09       	sbc	r17, r1
    347c:	4f 3f       	cpi	r20, 0xFF	; 255
    347e:	bf ef       	ldi	r27, 0xFF	; 255
    3480:	5b 07       	cpc	r21, r27
    3482:	21 f4       	brne	.+8      	; 0x348c <dtoa_prf+0x24c>
    3484:	d6 01       	movw	r26, r12
    3486:	ac 92       	st	X, r10
    3488:	11 96       	adiw	r26, 0x01	; 1
    348a:	6d 01       	movw	r12, r26
    348c:	64 17       	cp	r22, r20
    348e:	75 07       	cpc	r23, r21
    3490:	2c f0       	brlt	.+10     	; 0x349c <dtoa_prf+0x25c>
    3492:	84 16       	cp	r8, r20
    3494:	95 06       	cpc	r9, r21
    3496:	14 f4       	brge	.+4      	; 0x349c <dtoa_prf+0x25c>
    3498:	81 81       	ldd	r24, Z+1	; 0x01
    349a:	01 c0       	rjmp	.+2      	; 0x349e <dtoa_prf+0x25e>
    349c:	80 e3       	ldi	r24, 0x30	; 48
    349e:	41 50       	subi	r20, 0x01	; 1
    34a0:	51 09       	sbc	r21, r1
    34a2:	31 96       	adiw	r30, 0x01	; 1
    34a4:	d6 01       	movw	r26, r12
    34a6:	11 96       	adiw	r26, 0x01	; 1
    34a8:	7d 01       	movw	r14, r26
    34aa:	40 17       	cp	r20, r16
    34ac:	51 07       	cpc	r21, r17
    34ae:	24 f0       	brlt	.+8      	; 0x34b8 <dtoa_prf+0x278>
    34b0:	d6 01       	movw	r26, r12
    34b2:	8c 93       	st	X, r24
    34b4:	67 01       	movw	r12, r14
    34b6:	e2 cf       	rjmp	.-60     	; 0x347c <dtoa_prf+0x23c>
    34b8:	64 17       	cp	r22, r20
    34ba:	75 07       	cpc	r23, r21
    34bc:	39 f4       	brne	.+14     	; 0x34cc <dtoa_prf+0x28c>
    34be:	96 33       	cpi	r25, 0x36	; 54
    34c0:	20 f4       	brcc	.+8      	; 0x34ca <dtoa_prf+0x28a>
    34c2:	95 33       	cpi	r25, 0x35	; 53
    34c4:	19 f4       	brne	.+6      	; 0x34cc <dtoa_prf+0x28c>
    34c6:	31 11       	cpse	r19, r1
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <dtoa_prf+0x28c>
    34ca:	81 e3       	ldi	r24, 0x31	; 49
    34cc:	f6 01       	movw	r30, r12
    34ce:	80 83       	st	Z, r24
    34d0:	f7 01       	movw	r30, r14
    34d2:	82 2f       	mov	r24, r18
    34d4:	90 e2       	ldi	r25, 0x20	; 32
    34d6:	88 23       	and	r24, r24
    34d8:	19 f0       	breq	.+6      	; 0x34e0 <dtoa_prf+0x2a0>
    34da:	91 93       	st	Z+, r25
    34dc:	81 50       	subi	r24, 0x01	; 1
    34de:	fb cf       	rjmp	.-10     	; 0x34d6 <dtoa_prf+0x296>
    34e0:	f7 01       	movw	r30, r14
    34e2:	e2 0f       	add	r30, r18
    34e4:	f1 1d       	adc	r31, r1
    34e6:	10 82       	st	Z, r1
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	29 96       	adiw	r28, 0x09	; 9
    34ee:	ec e0       	ldi	r30, 0x0C	; 12
    34f0:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__+0xc>

000034f4 <strtod>:
    34f4:	a0 e0       	ldi	r26, 0x00	; 0
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e0 e8       	ldi	r30, 0x80	; 128
    34fa:	fa e1       	ldi	r31, 0x1A	; 26
    34fc:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__+0xc>
    3500:	ec 01       	movw	r28, r24
    3502:	6b 01       	movw	r12, r22
    3504:	61 15       	cp	r22, r1
    3506:	71 05       	cpc	r23, r1
    3508:	19 f0       	breq	.+6      	; 0x3510 <strtod+0x1c>
    350a:	fb 01       	movw	r30, r22
    350c:	91 83       	std	Z+1, r25	; 0x01
    350e:	80 83       	st	Z, r24
    3510:	7e 01       	movw	r14, r28
    3512:	ff ef       	ldi	r31, 0xFF	; 255
    3514:	ef 1a       	sub	r14, r31
    3516:	ff 0a       	sbc	r15, r31
    3518:	08 81       	ld	r16, Y
    351a:	80 2f       	mov	r24, r16
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 a0 1c 	call	0x3940	; 0x3940 <isspace>
    3522:	89 2b       	or	r24, r25
    3524:	11 f0       	breq	.+4      	; 0x352a <strtod+0x36>
    3526:	e7 01       	movw	r28, r14
    3528:	f3 cf       	rjmp	.-26     	; 0x3510 <strtod+0x1c>
    352a:	0d 32       	cpi	r16, 0x2D	; 45
    352c:	39 f4       	brne	.+14     	; 0x353c <strtod+0x48>
    352e:	7e 01       	movw	r14, r28
    3530:	82 e0       	ldi	r24, 0x02	; 2
    3532:	e8 0e       	add	r14, r24
    3534:	f1 1c       	adc	r15, r1
    3536:	09 81       	ldd	r16, Y+1	; 0x01
    3538:	11 e0       	ldi	r17, 0x01	; 1
    353a:	08 c0       	rjmp	.+16     	; 0x354c <strtod+0x58>
    353c:	0b 32       	cpi	r16, 0x2B	; 43
    353e:	29 f4       	brne	.+10     	; 0x354a <strtod+0x56>
    3540:	7e 01       	movw	r14, r28
    3542:	92 e0       	ldi	r25, 0x02	; 2
    3544:	e9 0e       	add	r14, r25
    3546:	f1 1c       	adc	r15, r1
    3548:	09 81       	ldd	r16, Y+1	; 0x01
    354a:	10 e0       	ldi	r17, 0x00	; 0
    354c:	e7 01       	movw	r28, r14
    354e:	21 97       	sbiw	r28, 0x01	; 1
    3550:	43 e0       	ldi	r20, 0x03	; 3
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	64 ed       	ldi	r22, 0xD4	; 212
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	ce 01       	movw	r24, r28
    355a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <strncasecmp_P>
    355e:	89 2b       	or	r24, r25
    3560:	c1 f4       	brne	.+48     	; 0x3592 <strtod+0x9e>
    3562:	23 96       	adiw	r28, 0x03	; 3
    3564:	45 e0       	ldi	r20, 0x05	; 5
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	6f ec       	ldi	r22, 0xCF	; 207
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	ce 01       	movw	r24, r28
    356e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <strncasecmp_P>
    3572:	89 2b       	or	r24, r25
    3574:	09 f4       	brne	.+2      	; 0x3578 <strtod+0x84>
    3576:	25 96       	adiw	r28, 0x05	; 5
    3578:	c1 14       	cp	r12, r1
    357a:	d1 04       	cpc	r13, r1
    357c:	19 f0       	breq	.+6      	; 0x3584 <strtod+0x90>
    357e:	f6 01       	movw	r30, r12
    3580:	d1 83       	std	Z+1, r29	; 0x01
    3582:	c0 83       	st	Z, r28
    3584:	11 11       	cpse	r17, r1
    3586:	f6 c0       	rjmp	.+492    	; 0x3774 <strtod+0x280>
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	80 e8       	ldi	r24, 0x80	; 128
    358e:	9f e7       	ldi	r25, 0x7F	; 127
    3590:	fa c0       	rjmp	.+500    	; 0x3786 <strtod+0x292>
    3592:	43 e0       	ldi	r20, 0x03	; 3
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	6c ec       	ldi	r22, 0xCC	; 204
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	ce 01       	movw	r24, r28
    359c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <strncasecmp_P>
    35a0:	89 2b       	or	r24, r25
    35a2:	59 f4       	brne	.+22     	; 0x35ba <strtod+0xc6>
    35a4:	c1 14       	cp	r12, r1
    35a6:	d1 04       	cpc	r13, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <strtod+0xb8>
    35aa:	e9 c0       	rjmp	.+466    	; 0x377e <strtod+0x28a>
    35ac:	f2 e0       	ldi	r31, 0x02	; 2
    35ae:	ef 0e       	add	r14, r31
    35b0:	f1 1c       	adc	r15, r1
    35b2:	f6 01       	movw	r30, r12
    35b4:	f1 82       	std	Z+1, r15	; 0x01
    35b6:	e0 82       	st	Z, r14
    35b8:	e2 c0       	rjmp	.+452    	; 0x377e <strtod+0x28a>
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	a9 01       	movw	r20, r18
    35c0:	c0 e0       	ldi	r28, 0x00	; 0
    35c2:	d0 e0       	ldi	r29, 0x00	; 0
    35c4:	f7 01       	movw	r30, r14
    35c6:	80 ed       	ldi	r24, 0xD0	; 208
    35c8:	a8 2e       	mov	r10, r24
    35ca:	a0 0e       	add	r10, r16
    35cc:	89 e0       	ldi	r24, 0x09	; 9
    35ce:	8a 15       	cp	r24, r10
    35d0:	30 f1       	brcs	.+76     	; 0x361e <strtod+0x12a>
    35d2:	91 2f       	mov	r25, r17
    35d4:	92 60       	ori	r25, 0x02	; 2
    35d6:	b9 2e       	mov	r11, r25
    35d8:	81 2f       	mov	r24, r17
    35da:	88 70       	andi	r24, 0x08	; 8
    35dc:	12 ff       	sbrs	r17, 2
    35de:	04 c0       	rjmp	.+8      	; 0x35e8 <strtod+0xf4>
    35e0:	81 11       	cpse	r24, r1
    35e2:	24 c0       	rjmp	.+72     	; 0x362c <strtod+0x138>
    35e4:	21 96       	adiw	r28, 0x01	; 1
    35e6:	22 c0       	rjmp	.+68     	; 0x362c <strtod+0x138>
    35e8:	81 11       	cpse	r24, r1
    35ea:	21 97       	sbiw	r28, 0x01	; 1
    35ec:	a5 e0       	ldi	r26, 0x05	; 5
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__muluhisi3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	aa 1f       	adc	r26, r26
    35fe:	bb 1f       	adc	r27, r27
    3600:	9c 01       	movw	r18, r24
    3602:	ad 01       	movw	r20, r26
    3604:	2a 0d       	add	r18, r10
    3606:	31 1d       	adc	r19, r1
    3608:	41 1d       	adc	r20, r1
    360a:	51 1d       	adc	r21, r1
    360c:	28 39       	cpi	r18, 0x98	; 152
    360e:	89 e9       	ldi	r24, 0x99	; 153
    3610:	38 07       	cpc	r19, r24
    3612:	48 07       	cpc	r20, r24
    3614:	89 e1       	ldi	r24, 0x19	; 25
    3616:	58 07       	cpc	r21, r24
    3618:	48 f0       	brcs	.+18     	; 0x362c <strtod+0x138>
    361a:	16 60       	ori	r17, 0x06	; 6
    361c:	06 c0       	rjmp	.+12     	; 0x362a <strtod+0x136>
    361e:	9e ef       	ldi	r25, 0xFE	; 254
    3620:	a9 12       	cpse	r10, r25
    3622:	0a c0       	rjmp	.+20     	; 0x3638 <strtod+0x144>
    3624:	13 fd       	sbrc	r17, 3
    3626:	40 c0       	rjmp	.+128    	; 0x36a8 <strtod+0x1b4>
    3628:	18 60       	ori	r17, 0x08	; 8
    362a:	b1 2e       	mov	r11, r17
    362c:	8f ef       	ldi	r24, 0xFF	; 255
    362e:	e8 1a       	sub	r14, r24
    3630:	f8 0a       	sbc	r15, r24
    3632:	00 81       	ld	r16, Z
    3634:	1b 2d       	mov	r17, r11
    3636:	c6 cf       	rjmp	.-116    	; 0x35c4 <strtod+0xd0>
    3638:	80 2f       	mov	r24, r16
    363a:	8f 7d       	andi	r24, 0xDF	; 223
    363c:	85 34       	cpi	r24, 0x45	; 69
    363e:	a1 f5       	brne	.+104    	; 0x36a8 <strtod+0x1b4>
    3640:	80 81       	ld	r24, Z
    3642:	8d 32       	cpi	r24, 0x2D	; 45
    3644:	11 f4       	brne	.+4      	; 0x364a <strtod+0x156>
    3646:	10 61       	ori	r17, 0x10	; 16
    3648:	06 c0       	rjmp	.+12     	; 0x3656 <strtod+0x162>
    364a:	8b 32       	cpi	r24, 0x2B	; 43
    364c:	21 f0       	breq	.+8      	; 0x3656 <strtod+0x162>
    364e:	31 96       	adiw	r30, 0x01	; 1
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	04 c0       	rjmp	.+8      	; 0x365e <strtod+0x16a>
    3656:	81 81       	ldd	r24, Z+1	; 0x01
    3658:	32 96       	adiw	r30, 0x02	; 2
    365a:	62 e0       	ldi	r22, 0x02	; 2
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	80 53       	subi	r24, 0x30	; 48
    3660:	8a 30       	cpi	r24, 0x0A	; 10
    3662:	18 f0       	brcs	.+6      	; 0x366a <strtod+0x176>
    3664:	e6 1b       	sub	r30, r22
    3666:	f7 0b       	sbc	r31, r23
    3668:	1f c0       	rjmp	.+62     	; 0x36a8 <strtod+0x1b4>
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	60 38       	cpi	r22, 0x80	; 128
    3670:	9c e0       	ldi	r25, 0x0C	; 12
    3672:	79 07       	cpc	r23, r25
    3674:	5c f4       	brge	.+22     	; 0x368c <strtod+0x198>
    3676:	db 01       	movw	r26, r22
    3678:	aa 0f       	add	r26, r26
    367a:	bb 1f       	adc	r27, r27
    367c:	aa 0f       	add	r26, r26
    367e:	bb 1f       	adc	r27, r27
    3680:	6a 0f       	add	r22, r26
    3682:	7b 1f       	adc	r23, r27
    3684:	66 0f       	add	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	68 0f       	add	r22, r24
    368a:	71 1d       	adc	r23, r1
    368c:	31 96       	adiw	r30, 0x01	; 1
    368e:	df 01       	movw	r26, r30
    3690:	11 97       	sbiw	r26, 0x01	; 1
    3692:	8c 91       	ld	r24, X
    3694:	80 53       	subi	r24, 0x30	; 48
    3696:	8a 30       	cpi	r24, 0x0A	; 10
    3698:	50 f3       	brcs	.-44     	; 0x366e <strtod+0x17a>
    369a:	14 ff       	sbrs	r17, 4
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <strtod+0x1b0>
    369e:	71 95       	neg	r23
    36a0:	61 95       	neg	r22
    36a2:	71 09       	sbc	r23, r1
    36a4:	c6 0f       	add	r28, r22
    36a6:	d7 1f       	adc	r29, r23
    36a8:	11 ff       	sbrs	r17, 1
    36aa:	08 c0       	rjmp	.+16     	; 0x36bc <strtod+0x1c8>
    36ac:	c1 14       	cp	r12, r1
    36ae:	d1 04       	cpc	r13, r1
    36b0:	29 f0       	breq	.+10     	; 0x36bc <strtod+0x1c8>
    36b2:	cf 01       	movw	r24, r30
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f6 01       	movw	r30, r12
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	80 83       	st	Z, r24
    36bc:	ca 01       	movw	r24, r20
    36be:	b9 01       	movw	r22, r18
    36c0:	0e 94 27 14 	call	0x284e	; 0x284e <__floatunsisf>
    36c4:	21 2f       	mov	r18, r17
    36c6:	23 70       	andi	r18, 0x03	; 3
    36c8:	23 30       	cpi	r18, 0x03	; 3
    36ca:	19 f0       	breq	.+6      	; 0x36d2 <strtod+0x1de>
    36cc:	4b 01       	movw	r8, r22
    36ce:	5c 01       	movw	r10, r24
    36d0:	06 c0       	rjmp	.+12     	; 0x36de <strtod+0x1ea>
    36d2:	4b 01       	movw	r8, r22
    36d4:	5c 01       	movw	r10, r24
    36d6:	b7 fa       	bst	r11, 7
    36d8:	b0 94       	com	r11
    36da:	b7 f8       	bld	r11, 7
    36dc:	b0 94       	com	r11
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	a9 01       	movw	r20, r18
    36e4:	c5 01       	movw	r24, r10
    36e6:	b4 01       	movw	r22, r8
    36e8:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <strtod+0x1fe>
    36f0:	3e c0       	rjmp	.+124    	; 0x376e <strtod+0x27a>
    36f2:	d7 ff       	sbrs	r29, 7
    36f4:	06 c0       	rjmp	.+12     	; 0x3702 <strtod+0x20e>
    36f6:	d1 95       	neg	r29
    36f8:	c1 95       	neg	r28
    36fa:	d1 09       	sbc	r29, r1
    36fc:	0b ee       	ldi	r16, 0xEB	; 235
    36fe:	10 e0       	ldi	r17, 0x00	; 0
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <strtod+0x212>
    3702:	03 e0       	ldi	r16, 0x03	; 3
    3704:	11 e0       	ldi	r17, 0x01	; 1
    3706:	68 01       	movw	r12, r16
    3708:	f8 e1       	ldi	r31, 0x18	; 24
    370a:	cf 1a       	sub	r12, r31
    370c:	d1 08       	sbc	r13, r1
    370e:	90 e2       	ldi	r25, 0x20	; 32
    3710:	e9 2e       	mov	r14, r25
    3712:	f1 2c       	mov	r15, r1
    3714:	ce 15       	cp	r28, r14
    3716:	df 05       	cpc	r29, r15
    3718:	74 f0       	brlt	.+28     	; 0x3736 <strtod+0x242>
    371a:	f8 01       	movw	r30, r16
    371c:	25 91       	lpm	r18, Z+
    371e:	35 91       	lpm	r19, Z+
    3720:	45 91       	lpm	r20, Z+
    3722:	54 91       	lpm	r21, Z
    3724:	c5 01       	movw	r24, r10
    3726:	b4 01       	movw	r22, r8
    3728:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__mulsf3>
    372c:	4b 01       	movw	r8, r22
    372e:	5c 01       	movw	r10, r24
    3730:	ce 19       	sub	r28, r14
    3732:	df 09       	sbc	r29, r15
    3734:	ef cf       	rjmp	.-34     	; 0x3714 <strtod+0x220>
    3736:	04 50       	subi	r16, 0x04	; 4
    3738:	11 09       	sbc	r17, r1
    373a:	f5 94       	asr	r15
    373c:	e7 94       	ror	r14
    373e:	0c 15       	cp	r16, r12
    3740:	1d 05       	cpc	r17, r13
    3742:	41 f7       	brne	.-48     	; 0x3714 <strtod+0x220>
    3744:	8a 2d       	mov	r24, r10
    3746:	88 0f       	add	r24, r24
    3748:	8b 2d       	mov	r24, r11
    374a:	88 1f       	adc	r24, r24
    374c:	8f 3f       	cpi	r24, 0xFF	; 255
    374e:	49 f0       	breq	.+18     	; 0x3762 <strtod+0x26e>
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	a9 01       	movw	r20, r18
    3756:	c5 01       	movw	r24, r10
    3758:	b4 01       	movw	r22, r8
    375a:	0e 94 75 13 	call	0x26ea	; 0x26ea <__cmpsf2>
    375e:	81 11       	cpse	r24, r1
    3760:	06 c0       	rjmp	.+12     	; 0x376e <strtod+0x27a>
    3762:	82 e2       	ldi	r24, 0x22	; 34
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <errno+0x1>
    376a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <errno>
    376e:	c5 01       	movw	r24, r10
    3770:	b4 01       	movw	r22, r8
    3772:	09 c0       	rjmp	.+18     	; 0x3786 <strtod+0x292>
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	80 e8       	ldi	r24, 0x80	; 128
    377a:	9f ef       	ldi	r25, 0xFF	; 255
    377c:	04 c0       	rjmp	.+8      	; 0x3786 <strtod+0x292>
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	80 ec       	ldi	r24, 0xC0	; 192
    3784:	9f e7       	ldi	r25, 0x7F	; 127
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	ec e0       	ldi	r30, 0x0C	; 12
    378c:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__+0xc>

00003790 <__ftoa_engine>:
    3790:	28 30       	cpi	r18, 0x08	; 8
    3792:	08 f0       	brcs	.+2      	; 0x3796 <__ftoa_engine+0x6>
    3794:	27 e0       	ldi	r18, 0x07	; 7
    3796:	33 27       	eor	r19, r19
    3798:	da 01       	movw	r26, r20
    379a:	99 0f       	add	r25, r25
    379c:	31 1d       	adc	r19, r1
    379e:	87 fd       	sbrc	r24, 7
    37a0:	91 60       	ori	r25, 0x01	; 1
    37a2:	00 96       	adiw	r24, 0x00	; 0
    37a4:	61 05       	cpc	r22, r1
    37a6:	71 05       	cpc	r23, r1
    37a8:	39 f4       	brne	.+14     	; 0x37b8 <__ftoa_engine+0x28>
    37aa:	32 60       	ori	r19, 0x02	; 2
    37ac:	2e 5f       	subi	r18, 0xFE	; 254
    37ae:	3d 93       	st	X+, r19
    37b0:	30 e3       	ldi	r19, 0x30	; 48
    37b2:	2a 95       	dec	r18
    37b4:	e1 f7       	brne	.-8      	; 0x37ae <__ftoa_engine+0x1e>
    37b6:	08 95       	ret
    37b8:	9f 3f       	cpi	r25, 0xFF	; 255
    37ba:	30 f0       	brcs	.+12     	; 0x37c8 <__ftoa_engine+0x38>
    37bc:	80 38       	cpi	r24, 0x80	; 128
    37be:	71 05       	cpc	r23, r1
    37c0:	61 05       	cpc	r22, r1
    37c2:	09 f0       	breq	.+2      	; 0x37c6 <__ftoa_engine+0x36>
    37c4:	3c 5f       	subi	r19, 0xFC	; 252
    37c6:	3c 5f       	subi	r19, 0xFC	; 252
    37c8:	3d 93       	st	X+, r19
    37ca:	91 30       	cpi	r25, 0x01	; 1
    37cc:	08 f0       	brcs	.+2      	; 0x37d0 <__ftoa_engine+0x40>
    37ce:	80 68       	ori	r24, 0x80	; 128
    37d0:	91 1d       	adc	r25, r1
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	1f 93       	push	r17
    37d8:	0f 93       	push	r16
    37da:	ff 92       	push	r15
    37dc:	ef 92       	push	r14
    37de:	19 2f       	mov	r17, r25
    37e0:	98 7f       	andi	r25, 0xF8	; 248
    37e2:	96 95       	lsr	r25
    37e4:	e9 2f       	mov	r30, r25
    37e6:	96 95       	lsr	r25
    37e8:	96 95       	lsr	r25
    37ea:	e9 0f       	add	r30, r25
    37ec:	ff 27       	eor	r31, r31
    37ee:	ef 59       	subi	r30, 0x9F	; 159
    37f0:	fe 4f       	sbci	r31, 0xFE	; 254
    37f2:	99 27       	eor	r25, r25
    37f4:	33 27       	eor	r19, r19
    37f6:	ee 24       	eor	r14, r14
    37f8:	ff 24       	eor	r15, r15
    37fa:	a7 01       	movw	r20, r14
    37fc:	e7 01       	movw	r28, r14
    37fe:	05 90       	lpm	r0, Z+
    3800:	08 94       	sec
    3802:	07 94       	ror	r0
    3804:	28 f4       	brcc	.+10     	; 0x3810 <__ftoa_engine+0x80>
    3806:	36 0f       	add	r19, r22
    3808:	e7 1e       	adc	r14, r23
    380a:	f8 1e       	adc	r15, r24
    380c:	49 1f       	adc	r20, r25
    380e:	51 1d       	adc	r21, r1
    3810:	66 0f       	add	r22, r22
    3812:	77 1f       	adc	r23, r23
    3814:	88 1f       	adc	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	06 94       	lsr	r0
    381a:	a1 f7       	brne	.-24     	; 0x3804 <__ftoa_engine+0x74>
    381c:	05 90       	lpm	r0, Z+
    381e:	07 94       	ror	r0
    3820:	28 f4       	brcc	.+10     	; 0x382c <__ftoa_engine+0x9c>
    3822:	e7 0e       	add	r14, r23
    3824:	f8 1e       	adc	r15, r24
    3826:	49 1f       	adc	r20, r25
    3828:	56 1f       	adc	r21, r22
    382a:	c1 1d       	adc	r28, r1
    382c:	77 0f       	add	r23, r23
    382e:	88 1f       	adc	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	66 1f       	adc	r22, r22
    3834:	06 94       	lsr	r0
    3836:	a1 f7       	brne	.-24     	; 0x3820 <__ftoa_engine+0x90>
    3838:	05 90       	lpm	r0, Z+
    383a:	07 94       	ror	r0
    383c:	28 f4       	brcc	.+10     	; 0x3848 <__ftoa_engine+0xb8>
    383e:	f8 0e       	add	r15, r24
    3840:	49 1f       	adc	r20, r25
    3842:	56 1f       	adc	r21, r22
    3844:	c7 1f       	adc	r28, r23
    3846:	d1 1d       	adc	r29, r1
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	66 1f       	adc	r22, r22
    384e:	77 1f       	adc	r23, r23
    3850:	06 94       	lsr	r0
    3852:	a1 f7       	brne	.-24     	; 0x383c <__ftoa_engine+0xac>
    3854:	05 90       	lpm	r0, Z+
    3856:	07 94       	ror	r0
    3858:	20 f4       	brcc	.+8      	; 0x3862 <__ftoa_engine+0xd2>
    385a:	49 0f       	add	r20, r25
    385c:	56 1f       	adc	r21, r22
    385e:	c7 1f       	adc	r28, r23
    3860:	d8 1f       	adc	r29, r24
    3862:	99 0f       	add	r25, r25
    3864:	66 1f       	adc	r22, r22
    3866:	77 1f       	adc	r23, r23
    3868:	88 1f       	adc	r24, r24
    386a:	06 94       	lsr	r0
    386c:	a9 f7       	brne	.-22     	; 0x3858 <__ftoa_engine+0xc8>
    386e:	84 91       	lpm	r24, Z
    3870:	10 95       	com	r17
    3872:	17 70       	andi	r17, 0x07	; 7
    3874:	41 f0       	breq	.+16     	; 0x3886 <__ftoa_engine+0xf6>
    3876:	d6 95       	lsr	r29
    3878:	c7 95       	ror	r28
    387a:	57 95       	ror	r21
    387c:	47 95       	ror	r20
    387e:	f7 94       	ror	r15
    3880:	e7 94       	ror	r14
    3882:	1a 95       	dec	r17
    3884:	c1 f7       	brne	.-16     	; 0x3876 <__ftoa_engine+0xe6>
    3886:	e7 e0       	ldi	r30, 0x07	; 7
    3888:	f1 e0       	ldi	r31, 0x01	; 1
    388a:	68 94       	set
    388c:	15 90       	lpm	r1, Z+
    388e:	15 91       	lpm	r17, Z+
    3890:	35 91       	lpm	r19, Z+
    3892:	65 91       	lpm	r22, Z+
    3894:	95 91       	lpm	r25, Z+
    3896:	05 90       	lpm	r0, Z+
    3898:	7f e2       	ldi	r23, 0x2F	; 47
    389a:	73 95       	inc	r23
    389c:	e1 18       	sub	r14, r1
    389e:	f1 0a       	sbc	r15, r17
    38a0:	43 0b       	sbc	r20, r19
    38a2:	56 0b       	sbc	r21, r22
    38a4:	c9 0b       	sbc	r28, r25
    38a6:	d0 09       	sbc	r29, r0
    38a8:	c0 f7       	brcc	.-16     	; 0x389a <__ftoa_engine+0x10a>
    38aa:	e1 0c       	add	r14, r1
    38ac:	f1 1e       	adc	r15, r17
    38ae:	43 1f       	adc	r20, r19
    38b0:	56 1f       	adc	r21, r22
    38b2:	c9 1f       	adc	r28, r25
    38b4:	d0 1d       	adc	r29, r0
    38b6:	7e f4       	brtc	.+30     	; 0x38d6 <__ftoa_engine+0x146>
    38b8:	70 33       	cpi	r23, 0x30	; 48
    38ba:	11 f4       	brne	.+4      	; 0x38c0 <__ftoa_engine+0x130>
    38bc:	8a 95       	dec	r24
    38be:	e6 cf       	rjmp	.-52     	; 0x388c <__ftoa_engine+0xfc>
    38c0:	e8 94       	clt
    38c2:	01 50       	subi	r16, 0x01	; 1
    38c4:	30 f0       	brcs	.+12     	; 0x38d2 <__ftoa_engine+0x142>
    38c6:	08 0f       	add	r16, r24
    38c8:	0a f4       	brpl	.+2      	; 0x38cc <__ftoa_engine+0x13c>
    38ca:	00 27       	eor	r16, r16
    38cc:	02 17       	cp	r16, r18
    38ce:	08 f4       	brcc	.+2      	; 0x38d2 <__ftoa_engine+0x142>
    38d0:	20 2f       	mov	r18, r16
    38d2:	23 95       	inc	r18
    38d4:	02 2f       	mov	r16, r18
    38d6:	7a 33       	cpi	r23, 0x3A	; 58
    38d8:	28 f0       	brcs	.+10     	; 0x38e4 <__ftoa_engine+0x154>
    38da:	79 e3       	ldi	r23, 0x39	; 57
    38dc:	7d 93       	st	X+, r23
    38de:	2a 95       	dec	r18
    38e0:	e9 f7       	brne	.-6      	; 0x38dc <__ftoa_engine+0x14c>
    38e2:	10 c0       	rjmp	.+32     	; 0x3904 <__ftoa_engine+0x174>
    38e4:	7d 93       	st	X+, r23
    38e6:	2a 95       	dec	r18
    38e8:	89 f6       	brne	.-94     	; 0x388c <__ftoa_engine+0xfc>
    38ea:	06 94       	lsr	r0
    38ec:	97 95       	ror	r25
    38ee:	67 95       	ror	r22
    38f0:	37 95       	ror	r19
    38f2:	17 95       	ror	r17
    38f4:	17 94       	ror	r1
    38f6:	e1 18       	sub	r14, r1
    38f8:	f1 0a       	sbc	r15, r17
    38fa:	43 0b       	sbc	r20, r19
    38fc:	56 0b       	sbc	r21, r22
    38fe:	c9 0b       	sbc	r28, r25
    3900:	d0 09       	sbc	r29, r0
    3902:	98 f0       	brcs	.+38     	; 0x392a <__ftoa_engine+0x19a>
    3904:	23 95       	inc	r18
    3906:	7e 91       	ld	r23, -X
    3908:	73 95       	inc	r23
    390a:	7a 33       	cpi	r23, 0x3A	; 58
    390c:	08 f0       	brcs	.+2      	; 0x3910 <__ftoa_engine+0x180>
    390e:	70 e3       	ldi	r23, 0x30	; 48
    3910:	7c 93       	st	X, r23
    3912:	20 13       	cpse	r18, r16
    3914:	b8 f7       	brcc	.-18     	; 0x3904 <__ftoa_engine+0x174>
    3916:	7e 91       	ld	r23, -X
    3918:	70 61       	ori	r23, 0x10	; 16
    391a:	7d 93       	st	X+, r23
    391c:	30 f0       	brcs	.+12     	; 0x392a <__ftoa_engine+0x19a>
    391e:	83 95       	inc	r24
    3920:	71 e3       	ldi	r23, 0x31	; 49
    3922:	7d 93       	st	X+, r23
    3924:	70 e3       	ldi	r23, 0x30	; 48
    3926:	2a 95       	dec	r18
    3928:	e1 f7       	brne	.-8      	; 0x3922 <__ftoa_engine+0x192>
    392a:	11 24       	eor	r1, r1
    392c:	ef 90       	pop	r14
    392e:	ff 90       	pop	r15
    3930:	0f 91       	pop	r16
    3932:	1f 91       	pop	r17
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	99 27       	eor	r25, r25
    393a:	87 fd       	sbrc	r24, 7
    393c:	90 95       	com	r25
    393e:	08 95       	ret

00003940 <isspace>:
    3940:	91 11       	cpse	r25, r1
    3942:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__ctype_isfalse>
    3946:	80 32       	cpi	r24, 0x20	; 32
    3948:	19 f0       	breq	.+6      	; 0x3950 <isspace+0x10>
    394a:	89 50       	subi	r24, 0x09	; 9
    394c:	85 50       	subi	r24, 0x05	; 5
    394e:	c8 f7       	brcc	.-14     	; 0x3942 <isspace+0x2>
    3950:	08 95       	ret

00003952 <strncasecmp_P>:
    3952:	fb 01       	movw	r30, r22
    3954:	dc 01       	movw	r26, r24
    3956:	41 50       	subi	r20, 0x01	; 1
    3958:	50 40       	sbci	r21, 0x00	; 0
    395a:	88 f0       	brcs	.+34     	; 0x397e <strncasecmp_P+0x2c>
    395c:	8d 91       	ld	r24, X+
    395e:	81 34       	cpi	r24, 0x41	; 65
    3960:	1c f0       	brlt	.+6      	; 0x3968 <strncasecmp_P+0x16>
    3962:	8b 35       	cpi	r24, 0x5B	; 91
    3964:	0c f4       	brge	.+2      	; 0x3968 <strncasecmp_P+0x16>
    3966:	80 5e       	subi	r24, 0xE0	; 224
    3968:	65 91       	lpm	r22, Z+
    396a:	61 34       	cpi	r22, 0x41	; 65
    396c:	1c f0       	brlt	.+6      	; 0x3974 <strncasecmp_P+0x22>
    396e:	6b 35       	cpi	r22, 0x5B	; 91
    3970:	0c f4       	brge	.+2      	; 0x3974 <strncasecmp_P+0x22>
    3972:	60 5e       	subi	r22, 0xE0	; 224
    3974:	86 1b       	sub	r24, r22
    3976:	61 11       	cpse	r22, r1
    3978:	71 f3       	breq	.-36     	; 0x3956 <strncasecmp_P+0x4>
    397a:	99 0b       	sbc	r25, r25
    397c:	08 95       	ret
    397e:	88 1b       	sub	r24, r24
    3980:	fc cf       	rjmp	.-8      	; 0x397a <strncasecmp_P+0x28>

00003982 <strnlen_P>:
    3982:	fc 01       	movw	r30, r24
    3984:	05 90       	lpm	r0, Z+
    3986:	61 50       	subi	r22, 0x01	; 1
    3988:	70 40       	sbci	r23, 0x00	; 0
    398a:	01 10       	cpse	r0, r1
    398c:	d8 f7       	brcc	.-10     	; 0x3984 <strnlen_P+0x2>
    398e:	80 95       	com	r24
    3990:	90 95       	com	r25
    3992:	8e 0f       	add	r24, r30
    3994:	9f 1f       	adc	r25, r31
    3996:	08 95       	ret

00003998 <strnlen>:
    3998:	fc 01       	movw	r30, r24
    399a:	61 50       	subi	r22, 0x01	; 1
    399c:	70 40       	sbci	r23, 0x00	; 0
    399e:	01 90       	ld	r0, Z+
    39a0:	01 10       	cpse	r0, r1
    39a2:	d8 f7       	brcc	.-10     	; 0x399a <strnlen+0x2>
    39a4:	80 95       	com	r24
    39a6:	90 95       	com	r25
    39a8:	8e 0f       	add	r24, r30
    39aa:	9f 1f       	adc	r25, r31
    39ac:	08 95       	ret

000039ae <fputc>:
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	fb 01       	movw	r30, r22
    39b8:	23 81       	ldd	r18, Z+3	; 0x03
    39ba:	21 fd       	sbrc	r18, 1
    39bc:	03 c0       	rjmp	.+6      	; 0x39c4 <fputc+0x16>
    39be:	8f ef       	ldi	r24, 0xFF	; 255
    39c0:	9f ef       	ldi	r25, 0xFF	; 255
    39c2:	2c c0       	rjmp	.+88     	; 0x3a1c <fputc+0x6e>
    39c4:	22 ff       	sbrs	r18, 2
    39c6:	16 c0       	rjmp	.+44     	; 0x39f4 <fputc+0x46>
    39c8:	46 81       	ldd	r20, Z+6	; 0x06
    39ca:	57 81       	ldd	r21, Z+7	; 0x07
    39cc:	24 81       	ldd	r18, Z+4	; 0x04
    39ce:	35 81       	ldd	r19, Z+5	; 0x05
    39d0:	42 17       	cp	r20, r18
    39d2:	53 07       	cpc	r21, r19
    39d4:	44 f4       	brge	.+16     	; 0x39e6 <fputc+0x38>
    39d6:	a0 81       	ld	r26, Z
    39d8:	b1 81       	ldd	r27, Z+1	; 0x01
    39da:	9d 01       	movw	r18, r26
    39dc:	2f 5f       	subi	r18, 0xFF	; 255
    39de:	3f 4f       	sbci	r19, 0xFF	; 255
    39e0:	31 83       	std	Z+1, r19	; 0x01
    39e2:	20 83       	st	Z, r18
    39e4:	8c 93       	st	X, r24
    39e6:	26 81       	ldd	r18, Z+6	; 0x06
    39e8:	37 81       	ldd	r19, Z+7	; 0x07
    39ea:	2f 5f       	subi	r18, 0xFF	; 255
    39ec:	3f 4f       	sbci	r19, 0xFF	; 255
    39ee:	37 83       	std	Z+7, r19	; 0x07
    39f0:	26 83       	std	Z+6, r18	; 0x06
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <fputc+0x6e>
    39f4:	8b 01       	movw	r16, r22
    39f6:	ec 01       	movw	r28, r24
    39f8:	fb 01       	movw	r30, r22
    39fa:	00 84       	ldd	r0, Z+8	; 0x08
    39fc:	f1 85       	ldd	r31, Z+9	; 0x09
    39fe:	e0 2d       	mov	r30, r0
    3a00:	09 95       	icall
    3a02:	89 2b       	or	r24, r25
    3a04:	e1 f6       	brne	.-72     	; 0x39be <fputc+0x10>
    3a06:	d8 01       	movw	r26, r16
    3a08:	16 96       	adiw	r26, 0x06	; 6
    3a0a:	8d 91       	ld	r24, X+
    3a0c:	9c 91       	ld	r25, X
    3a0e:	17 97       	sbiw	r26, 0x07	; 7
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	17 96       	adiw	r26, 0x07	; 7
    3a14:	9c 93       	st	X, r25
    3a16:	8e 93       	st	-X, r24
    3a18:	16 97       	sbiw	r26, 0x06	; 6
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	08 95       	ret

00003a26 <__ultoa_invert>:
    3a26:	fa 01       	movw	r30, r20
    3a28:	aa 27       	eor	r26, r26
    3a2a:	28 30       	cpi	r18, 0x08	; 8
    3a2c:	51 f1       	breq	.+84     	; 0x3a82 <__ultoa_invert+0x5c>
    3a2e:	20 31       	cpi	r18, 0x10	; 16
    3a30:	81 f1       	breq	.+96     	; 0x3a92 <__ultoa_invert+0x6c>
    3a32:	e8 94       	clt
    3a34:	6f 93       	push	r22
    3a36:	6e 7f       	andi	r22, 0xFE	; 254
    3a38:	6e 5f       	subi	r22, 0xFE	; 254
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	af 4f       	sbci	r26, 0xFF	; 255
    3a42:	b1 e0       	ldi	r27, 0x01	; 1
    3a44:	3e d0       	rcall	.+124    	; 0x3ac2 <__ultoa_invert+0x9c>
    3a46:	b4 e0       	ldi	r27, 0x04	; 4
    3a48:	3c d0       	rcall	.+120    	; 0x3ac2 <__ultoa_invert+0x9c>
    3a4a:	67 0f       	add	r22, r23
    3a4c:	78 1f       	adc	r23, r24
    3a4e:	89 1f       	adc	r24, r25
    3a50:	9a 1f       	adc	r25, r26
    3a52:	a1 1d       	adc	r26, r1
    3a54:	68 0f       	add	r22, r24
    3a56:	79 1f       	adc	r23, r25
    3a58:	8a 1f       	adc	r24, r26
    3a5a:	91 1d       	adc	r25, r1
    3a5c:	a1 1d       	adc	r26, r1
    3a5e:	6a 0f       	add	r22, r26
    3a60:	71 1d       	adc	r23, r1
    3a62:	81 1d       	adc	r24, r1
    3a64:	91 1d       	adc	r25, r1
    3a66:	a1 1d       	adc	r26, r1
    3a68:	20 d0       	rcall	.+64     	; 0x3aaa <__ultoa_invert+0x84>
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <__ultoa_invert+0x48>
    3a6c:	68 94       	set
    3a6e:	3f 91       	pop	r19
    3a70:	2a e0       	ldi	r18, 0x0A	; 10
    3a72:	26 9f       	mul	r18, r22
    3a74:	11 24       	eor	r1, r1
    3a76:	30 19       	sub	r19, r0
    3a78:	30 5d       	subi	r19, 0xD0	; 208
    3a7a:	31 93       	st	Z+, r19
    3a7c:	de f6       	brtc	.-74     	; 0x3a34 <__ultoa_invert+0xe>
    3a7e:	cf 01       	movw	r24, r30
    3a80:	08 95       	ret
    3a82:	46 2f       	mov	r20, r22
    3a84:	47 70       	andi	r20, 0x07	; 7
    3a86:	40 5d       	subi	r20, 0xD0	; 208
    3a88:	41 93       	st	Z+, r20
    3a8a:	b3 e0       	ldi	r27, 0x03	; 3
    3a8c:	0f d0       	rcall	.+30     	; 0x3aac <__ultoa_invert+0x86>
    3a8e:	c9 f7       	brne	.-14     	; 0x3a82 <__ultoa_invert+0x5c>
    3a90:	f6 cf       	rjmp	.-20     	; 0x3a7e <__ultoa_invert+0x58>
    3a92:	46 2f       	mov	r20, r22
    3a94:	4f 70       	andi	r20, 0x0F	; 15
    3a96:	40 5d       	subi	r20, 0xD0	; 208
    3a98:	4a 33       	cpi	r20, 0x3A	; 58
    3a9a:	18 f0       	brcs	.+6      	; 0x3aa2 <__ultoa_invert+0x7c>
    3a9c:	49 5d       	subi	r20, 0xD9	; 217
    3a9e:	31 fd       	sbrc	r19, 1
    3aa0:	40 52       	subi	r20, 0x20	; 32
    3aa2:	41 93       	st	Z+, r20
    3aa4:	02 d0       	rcall	.+4      	; 0x3aaa <__ultoa_invert+0x84>
    3aa6:	a9 f7       	brne	.-22     	; 0x3a92 <__ultoa_invert+0x6c>
    3aa8:	ea cf       	rjmp	.-44     	; 0x3a7e <__ultoa_invert+0x58>
    3aaa:	b4 e0       	ldi	r27, 0x04	; 4
    3aac:	a6 95       	lsr	r26
    3aae:	97 95       	ror	r25
    3ab0:	87 95       	ror	r24
    3ab2:	77 95       	ror	r23
    3ab4:	67 95       	ror	r22
    3ab6:	ba 95       	dec	r27
    3ab8:	c9 f7       	brne	.-14     	; 0x3aac <__ultoa_invert+0x86>
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	61 05       	cpc	r22, r1
    3abe:	71 05       	cpc	r23, r1
    3ac0:	08 95       	ret
    3ac2:	9b 01       	movw	r18, r22
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	0a 2e       	mov	r0, r26
    3ac8:	06 94       	lsr	r0
    3aca:	57 95       	ror	r21
    3acc:	47 95       	ror	r20
    3ace:	37 95       	ror	r19
    3ad0:	27 95       	ror	r18
    3ad2:	ba 95       	dec	r27
    3ad4:	c9 f7       	brne	.-14     	; 0x3ac8 <__ultoa_invert+0xa2>
    3ad6:	62 0f       	add	r22, r18
    3ad8:	73 1f       	adc	r23, r19
    3ada:	84 1f       	adc	r24, r20
    3adc:	95 1f       	adc	r25, r21
    3ade:	a0 1d       	adc	r26, r0
    3ae0:	08 95       	ret

00003ae2 <__ctype_isfalse>:
    3ae2:	99 27       	eor	r25, r25
    3ae4:	88 27       	eor	r24, r24

00003ae6 <__ctype_istrue>:
    3ae6:	08 95       	ret

00003ae8 <__prologue_saves__>:
    3ae8:	2f 92       	push	r2
    3aea:	3f 92       	push	r3
    3aec:	4f 92       	push	r4
    3aee:	5f 92       	push	r5
    3af0:	6f 92       	push	r6
    3af2:	7f 92       	push	r7
    3af4:	8f 92       	push	r8
    3af6:	9f 92       	push	r9
    3af8:	af 92       	push	r10
    3afa:	bf 92       	push	r11
    3afc:	cf 92       	push	r12
    3afe:	df 92       	push	r13
    3b00:	ef 92       	push	r14
    3b02:	ff 92       	push	r15
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	ca 1b       	sub	r28, r26
    3b12:	db 0b       	sbc	r29, r27
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	09 94       	ijmp

00003b20 <__epilogue_restores__>:
    3b20:	2a 88       	ldd	r2, Y+18	; 0x12
    3b22:	39 88       	ldd	r3, Y+17	; 0x11
    3b24:	48 88       	ldd	r4, Y+16	; 0x10
    3b26:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b28:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b30:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b32:	b9 84       	ldd	r11, Y+9	; 0x09
    3b34:	c8 84       	ldd	r12, Y+8	; 0x08
    3b36:	df 80       	ldd	r13, Y+7	; 0x07
    3b38:	ee 80       	ldd	r14, Y+6	; 0x06
    3b3a:	fd 80       	ldd	r15, Y+5	; 0x05
    3b3c:	0c 81       	ldd	r16, Y+4	; 0x04
    3b3e:	1b 81       	ldd	r17, Y+3	; 0x03
    3b40:	aa 81       	ldd	r26, Y+2	; 0x02
    3b42:	b9 81       	ldd	r27, Y+1	; 0x01
    3b44:	ce 0f       	add	r28, r30
    3b46:	d1 1d       	adc	r29, r1
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	ed 01       	movw	r28, r26
    3b54:	08 95       	ret

00003b56 <_exit>:
    3b56:	f8 94       	cli

00003b58 <__stop_program>:
    3b58:	ff cf       	rjmp	.-2      	; 0x3b58 <__stop_program>

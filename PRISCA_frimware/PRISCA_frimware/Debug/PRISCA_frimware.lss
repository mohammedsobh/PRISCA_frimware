
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000013a2  00001436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008b  0080007a  0080007a  00001450  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110f  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  000026af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e4  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00003774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007cc  00000000  00000000  00003de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000045ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_9>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x449>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	4e 41       	sbci	r20, 0x1E	; 30
      b0:	4e 49       	Address 0x000000b0 is out of bounds.
.word	0xffff	; ????

000000b1 <pstr_inity>:
      b1:	49 4e 49 54 59                                      INITY

000000b6 <pstr_inf>:
      b6:	49 4e 46                                            INF

000000b9 <pwr_m10>:
      b9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000d1 <pwr_p10>:
      d1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf e5       	ldi	r28, 0x5F	; 95
      f0:	d4 e0       	ldi	r29, 0x04	; 4
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	a0 e6       	ldi	r26, 0x60	; 96
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e2 ea       	ldi	r30, 0xA2	; 162
      fe:	f3 e1       	ldi	r31, 0x13	; 19
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	aa 37       	cpi	r26, 0x7A	; 122
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	aa e7       	ldi	r26, 0x7A	; 122
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 30       	cpi	r26, 0x05	; 5
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
     120:	0c 94 cf 09 	jmp	0x139e	; 0x139e <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	2a 97       	sbiw	r28, 0x0a	; 10
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	ac 01       	movw	r20, r24
     142:	fe 01       	movw	r30, r28
     144:	31 96       	adiw	r30, 0x01	; 1
     146:	ce 01       	movw	r24, r28
     148:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     14a:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     14c:	e8 17       	cp	r30, r24
     14e:	f9 07       	cpc	r31, r25
     150:	e1 f7       	brne	.-8      	; 0x14a <get_value+0x22>
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     15a:	fa 01       	movw	r30, r20
     15c:	e2 0f       	add	r30, r18
     15e:	f3 1f       	adc	r31, r19
     160:	90 81       	ld	r25, Z
     162:	96 13       	cpse	r25, r22
     164:	15 c0       	rjmp	.+42     	; 0x190 <get_value+0x68>
			v [j] = String[j+i+1];
     166:	f9 01       	movw	r30, r18
     168:	e0 0f       	add	r30, r16
     16a:	f1 1f       	adc	r31, r17
     16c:	e4 0f       	add	r30, r20
     16e:	f5 1f       	adc	r31, r21
     170:	81 81       	ldd	r24, Z+1	; 0x01
     172:	a1 e0       	ldi	r26, 0x01	; 1
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	ac 0f       	add	r26, r28
     178:	bd 1f       	adc	r27, r29
     17a:	a0 0f       	add	r26, r16
     17c:	b1 1f       	adc	r27, r17
     17e:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == ';'))
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	80 32       	cpi	r24, 0x20	; 32
     184:	41 f0       	breq	.+16     	; 0x196 <get_value+0x6e>
     186:	8b 33       	cpi	r24, 0x3B	; 59
     188:	31 f0       	breq	.+12     	; 0x196 <get_value+0x6e>
			break;
			j++;
     18a:	0f 5f       	subi	r16, 0xFF	; 255
     18c:	1f 4f       	sbci	r17, 0xFF	; 255
     18e:	e5 cf       	rjmp	.-54     	; 0x15a <get_value+0x32>
		}
		else
		i++;
     190:	2f 5f       	subi	r18, 0xFF	; 255
     192:	3f 4f       	sbci	r19, 0xFF	; 255
     194:	e2 cf       	rjmp	.-60     	; 0x15a <get_value+0x32>
	}
	return (atof(v));
     196:	ce 01       	movw	r24, r28
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <atof>
}
     19e:	2a 96       	adiw	r28, 0x0a	; 10
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	08 95       	ret

000001b4 <get_int>:
int get_int (char* String,char ch)
{
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	2a 97       	sbiw	r28, 0x0a	; 10
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	ac 01       	movw	r20, r24
     1ce:	fe 01       	movw	r30, r28
     1d0:	31 96       	adiw	r30, 0x01	; 1
     1d2:	ce 01       	movw	r24, r28
     1d4:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     1d6:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     1d8:	e8 17       	cp	r30, r24
     1da:	f9 07       	cpc	r31, r25
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <get_int+0x22>
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     1e6:	fa 01       	movw	r30, r20
     1e8:	e2 0f       	add	r30, r18
     1ea:	f3 1f       	adc	r31, r19
     1ec:	90 81       	ld	r25, Z
     1ee:	96 13       	cpse	r25, r22
     1f0:	15 c0       	rjmp	.+42     	; 0x21c <get_int+0x68>
			v [j] = String[j+i+1];
     1f2:	f9 01       	movw	r30, r18
     1f4:	e0 0f       	add	r30, r16
     1f6:	f1 1f       	adc	r31, r17
     1f8:	e4 0f       	add	r30, r20
     1fa:	f5 1f       	adc	r31, r21
     1fc:	81 81       	ldd	r24, Z+1	; 0x01
     1fe:	a1 e0       	ldi	r26, 0x01	; 1
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	ac 0f       	add	r26, r28
     204:	bd 1f       	adc	r27, r29
     206:	a0 0f       	add	r26, r16
     208:	b1 1f       	adc	r27, r17
     20a:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == ';'))
     20c:	82 81       	ldd	r24, Z+2	; 0x02
     20e:	80 32       	cpi	r24, 0x20	; 32
     210:	41 f0       	breq	.+16     	; 0x222 <get_int+0x6e>
     212:	8b 33       	cpi	r24, 0x3B	; 59
     214:	31 f0       	breq	.+12     	; 0x222 <get_int+0x6e>
			break;
			j++;
     216:	0f 5f       	subi	r16, 0xFF	; 255
     218:	1f 4f       	sbci	r17, 0xFF	; 255
     21a:	e5 cf       	rjmp	.-54     	; 0x1e6 <get_int+0x32>
		}
		else
		i++;
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	3f 4f       	sbci	r19, 0xFF	; 255
     220:	e2 cf       	rjmp	.-60     	; 0x1e6 <get_int+0x32>
	}
	return (atoi(v));
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 e6 07 	call	0xfcc	; 0xfcc <atoi>
}
     22a:	2a 96       	adiw	r28, 0x0a	; 10
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ec 01       	movw	r28, r24
     24e:	6a 01       	movw	r12, r20
     250:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     252:	28 81       	ld	r18, Y
     254:	39 81       	ldd	r19, Y+1	; 0x01
     256:	4a 81       	ldd	r20, Y+2	; 0x02
     258:	5b 81       	ldd	r21, Y+3	; 0x03
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
    *current_pos = new_pos;
     262:	c8 82       	st	Y, r12
     264:	d9 82       	std	Y+1, r13	; 0x01
     266:	ea 82       	std	Y+2, r14	; 0x02
     268:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	08 95       	ret

00000278 <Init>:
			}
		}
	}
}
void Init(void){
	ADCSRA |= 0x87; //to active A/D pins
     278:	86 b1       	in	r24, 0x06	; 6
     27a:	87 68       	ori	r24, 0x87	; 135
     27c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     27e:	3e 9a       	sbi	0x07, 6	; 7
	DDRA &= ~(0<<PA0);// use PA0,1 as input for thermistor 
     280:	8a b3       	in	r24, 0x1a	; 26
     282:	8a bb       	out	0x1a, r24	; 26
	DDRD |= (1<<PD5);
     284:	8d 9a       	sbi	0x11, 5	; 17
	UART_INIT();
     286:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <UART_INIT>
	TCNT0 = 0;
     28a:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS02) | (1<<CS00); // PRESCALER 1024
     28c:	83 b7       	in	r24, 0x33	; 51
     28e:	85 60       	ori	r24, 0x05	; 5
     290:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	89 bf       	out	0x39, r24	; 57
	sei();
     296:	78 94       	sei
     298:	08 95       	ret

0000029a <ADC_value>:
}
int ADC_value(void)
{
	ADMUX &= ~(1 << MUX0); // reset MUX0 to select ADC0
     29a:	38 98       	cbi	0x07, 0	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     29c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     29e:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2a0:	34 9a       	sbi	0x06, 4	; 6
	value=ADC*(4.88E-3);		 // to convert D/A (the analoge volt) * (5/1024) = (the analoge volt)*0.00488
     2a2:	64 b1       	in	r22, 0x04	; 4
     2a4:	75 b1       	in	r23, 0x05	; 5
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatunsisf>
     2ae:	28 e6       	ldi	r18, 0x68	; 104
     2b0:	38 ee       	ldi	r19, 0xE8	; 232
     2b2:	4f e9       	ldi	r20, 0x9F	; 159
     2b4:	5b e3       	ldi	r21, 0x3B	; 59
     2b6:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     2ba:	0e 94 03 06 	call	0xc06	; 0xc06 <__fixsfsi>
     2be:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <value+0x1>
     2c2:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <value>
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2c6:	84 b1       	in	r24, 0x04	; 4
     2c8:	95 b1       	in	r25, 0x05	; 5
}
     2ca:	08 95       	ret

000002cc <getTemp>:
double getTemp()
{
     2cc:	8f 92       	push	r8
     2ce:	9f 92       	push	r9
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
	Vo = ADC_value();
     2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_value>
     2e0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Vo+0x1>
     2e4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Vo>
	R2 = R1 * (1023.0 / (float)Vo - 1.0);
     2e8:	bc 01       	movw	r22, r24
     2ea:	99 0f       	add	r25, r25
     2ec:	88 0b       	sbc	r24, r24
     2ee:	99 0b       	sbc	r25, r25
     2f0:	0e 94 3b 06 	call	0xc76	; 0xc76 <__floatsisf>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 ec       	ldi	r23, 0xC0	; 192
     2fc:	8f e7       	ldi	r24, 0x7F	; 127
     2fe:	94 e4       	ldi	r25, 0x44	; 68
     300:	0e 94 91 05 	call	0xb22	; 0xb22 <__divsf3>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e8       	ldi	r20, 0x80	; 128
     30a:	5f e3       	ldi	r21, 0x3F	; 63
     30c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
     310:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     314:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     318:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     31c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     320:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     324:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <R2>
     328:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <R2+0x1>
     32c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <R2+0x2>
     330:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <R2+0x3>
	logR2 = log(R2);
     334:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <log>
     338:	6b 01       	movw	r12, r22
     33a:	7c 01       	movw	r14, r24
     33c:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <logR2>
     340:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <logR2+0x1>
     344:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <logR2+0x2>
     348:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	T = T - 273.15;
     34c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     350:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     354:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     358:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     35c:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     360:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     364:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     368:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     36c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     370:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     374:	4b 01       	movw	r8, r22
     376:	5c 01       	movw	r10, r24
     378:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     37c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     380:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     384:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     390:	a7 01       	movw	r20, r14
     392:	96 01       	movw	r18, r12
     394:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     398:	a7 01       	movw	r20, r14
     39a:	96 01       	movw	r18, r12
     39c:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	9f e3       	ldi	r25, 0x3F	; 63
     3b8:	0e 94 91 05 	call	0xb22	; 0xb22 <__divsf3>
     3bc:	23 e3       	ldi	r18, 0x33	; 51
     3be:	33 e9       	ldi	r19, 0x93	; 147
     3c0:	48 e8       	ldi	r20, 0x88	; 136
     3c2:	53 e4       	ldi	r21, 0x43	; 67
     3c4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
     3c8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <T>
     3cc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <T+0x1>
     3d0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <T+0x2>
     3d4:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <T+0x3>
	return (T);
}
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	bf 90       	pop	r11
     3e2:	af 90       	pop	r10
     3e4:	9f 90       	pop	r9
     3e6:	8f 90       	pop	r8
     3e8:	08 95       	ret

000003ea <main>:
uint8_t d = 100; //no. of steps per 1mm
volatile int value; // to storage the instantaneous change in ADC converter

int main(void)
{
    Init();
     3ea:	0e 94 3c 01 	call	0x278	; 0x278 <Init>
     3ee:	cc ee       	ldi	r28, 0xEC	; 236
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	ec e9       	ldi	r30, 0x9C	; 156
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
	int val = 0;
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
     3f6:	11 92       	st	Z+, r1
	double value_2;
	double value_3;
	int val = 0;
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
     3f8:	ec 17       	cp	r30, r28
     3fa:	fd 07       	cpc	r31, r29
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0xc>
		{
			String [i] = 0;
		}
		Recive_Data(String);
     3fe:	8c e9       	ldi	r24, 0x9C	; 156
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 01 05 	call	0xa02	; 0xa02 <Recive_Data>
		if (String[0] == 'M')
     406:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <String>
     40a:	8d 34       	cpi	r24, 0x4D	; 77
     40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	46 c0       	rjmp	.+140    	; 0x49c <__stack+0x3d>
		{
			val = get_int (String,'M');
     410:	6d e4       	ldi	r22, 0x4D	; 77
     412:	8c e9       	ldi	r24, 0x9C	; 156
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_int>
			if (val == 105)
     41a:	89 36       	cpi	r24, 0x69	; 105
     41c:	91 05       	cpc	r25, r1
     41e:	29 f4       	brne	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				Transmit_Data("ok");
     420:	80 e7       	ldi	r24, 0x70	; 112
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     428:	e4 cf       	rjmp	.-56     	; 0x3f2 <main+0x8>
			}
			if (val == 104)
     42a:	88 36       	cpi	r24, 0x68	; 104
     42c:	91 05       	cpc	r25, r1
     42e:	91 f4       	brne	.+36     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{
				S = get_value(String,'S');
     430:	63 e5       	ldi	r22, 0x53	; 83
     432:	8c e9       	ldi	r24, 0x9C	; 156
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     43a:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <S>
     43e:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <S+0x1>
     442:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <S+0x2>
     446:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <S+0x3>
				Transmit_Data("ok");
     44a:	80 e7       	ldi	r24, 0x70	; 112
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     452:	cf cf       	rjmp	.-98     	; 0x3f2 <main+0x8>
			}
			if (val == 109)
     454:	8d 36       	cpi	r24, 0x6D	; 109
     456:	91 05       	cpc	r25, r1
     458:	61 f6       	brne	.-104    	; 0x3f2 <main+0x8>
			{
				PORTD |= (1<<PD5);
     45a:	95 9a       	sbi	0x12, 5	; 18
				while(getTemp() <= (S+2));
     45c:	0e 94 66 01 	call	0x2cc	; 0x2cc <getTemp>
     460:	6b 01       	movw	r12, r22
     462:	7c 01       	movw	r14, r24
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e4       	ldi	r21, 0x40	; 64
     46c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <S>
     470:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <S+0x1>
     474:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <S+0x2>
     478:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <S+0x3>
     47c:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     48c:	18 16       	cp	r1, r24
     48e:	34 f7       	brge	.-52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				PORTD &=~ (1<<PD5);
     490:	95 98       	cbi	0x12, 5	; 18
				Transmit_Data("ok");
     492:	80 e7       	ldi	r24, 0x70	; 112
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     49a:	ab cf       	rjmp	.-170    	; 0x3f2 <main+0x8>
			}
		}
		else if (String[0] == 'G')
     49c:	87 34       	cpi	r24, 0x47	; 71
     49e:	09 f0       	breq	.+2      	; 0x4a2 <__stack+0x43>
     4a0:	a8 cf       	rjmp	.-176    	; 0x3f2 <main+0x8>
		{
			val = get_int (String,'G');
     4a2:	67 e4       	ldi	r22, 0x47	; 71
     4a4:	8c e9       	ldi	r24, 0x9C	; 156
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_int>
			if (val == '1')
     4ac:	81 33       	cpi	r24, 0x31	; 49
     4ae:	91 05       	cpc	r25, r1
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <__stack+0x55>
     4b2:	00 c1       	rjmp	.+512    	; 0x6b4 <__stack+0x255>
			{
				value_1 = get_value(String,'X');           //extract first value
     4b4:	68 e5       	ldi	r22, 0x58	; 88
     4b6:	8c e9       	ldi	r24, 0x9C	; 156
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
				value_2 = get_value(String,'Y'); //call function to extract second value
     4c2:	69 e5       	ldi	r22, 0x59	; 89
     4c4:	8c e9       	ldi	r24, 0x9C	; 156
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     4cc:	4b 01       	movw	r8, r22
     4ce:	5c 01       	movw	r10, r24
				value_3 = get_value(String,'Z'); //call function to extract third value
     4d0:	6a e5       	ldi	r22, 0x5A	; 90
     4d2:	8c e9       	ldi	r24, 0x9C	; 156
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     4da:	2b 01       	movw	r4, r22
     4dc:	3c 01       	movw	r6, r24
				E = get_value(String,'E');
     4de:	65 e4       	ldi	r22, 0x45	; 69
     4e0:	8c e9       	ldi	r24, 0x9C	; 156
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     4e8:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <E>
     4ec:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <E+0x1>
     4f0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <E+0x2>
     4f4:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <E+0x3>
				if ((E && value_1 && value_2 && value_3) == 0)
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	a9 01       	movw	r20, r18
     4fe:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	09 f4       	brne	.+2      	; 0x508 <__stack+0xa9>
     506:	d0 c1       	rjmp	.+928    	; 0x8a8 <__stack+0x449>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	a9 01       	movw	r20, r18
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <__stack+0xbd>
     51a:	c6 c1       	rjmp	.+908    	; 0x8a8 <__stack+0x449>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	c5 01       	movw	r24, r10
     524:	b4 01       	movw	r22, r8
     526:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     52a:	88 23       	and	r24, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <__stack+0xd1>
     52e:	bc c1       	rjmp	.+888    	; 0x8a8 <__stack+0x449>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	a9 01       	movw	r20, r18
     536:	c3 01       	movw	r24, r6
     538:	b2 01       	movw	r22, r4
     53a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     53e:	81 11       	cpse	r24, r1
     540:	c1 c1       	rjmp	.+898    	; 0x8c4 <__stack+0x465>
     542:	b2 c1       	rjmp	.+868    	; 0x8a8 <__stack+0x449>
				{
					if (get_value(String,'F') != 0)
					{
						Fe = get_value(String,'F');
     544:	66 e4       	ldi	r22, 0x46	; 70
     546:	8c e9       	ldi	r24, 0x9C	; 156
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     54e:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <Fe>
     552:	70 93 f5 00 	sts	0x00F5, r23	; 0x8000f5 <Fe+0x1>
     556:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Fe+0x2>
     55a:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <Fe+0x3>
     55e:	0d c0       	rjmp	.+26     	; 0x57a <__stack+0x11b>
				} 
				else
				{
					if (get_value(String,'F') != 0)
					{
						F = get_value(String,'F');
     560:	66 e4       	ldi	r22, 0x46	; 70
     562:	8c e9       	ldi	r24, 0x9C	; 156
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     56a:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <F>
     56e:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <F+0x1>
     572:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <F+0x2>
     576:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <F+0x3>
					}
				}
				if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	46 ed       	ldi	r20, 0xD6	; 214
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     58a:	18 16       	cp	r1, r24
     58c:	0c f4       	brge	.+2      	; 0x590 <__stack+0x131>
     58e:	31 cf       	rjmp	.-414    	; 0x3f2 <main+0x8>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	46 ed       	ldi	r20, 0xD6	; 214
     596:	52 e4       	ldi	r21, 0x42	; 66
     598:	c5 01       	movw	r24, r10
     59a:	b4 01       	movw	r22, r8
     59c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	0c f4       	brge	.+2      	; 0x5a6 <__stack+0x147>
     5a4:	26 cf       	rjmp	.-436    	; 0x3f2 <main+0x8>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4a ef       	ldi	r20, 0xFA	; 250
     5ac:	53 e4       	ldi	r21, 0x43	; 67
     5ae:	c3 01       	movw	r24, r6
     5b0:	b2 01       	movw	r22, r4
     5b2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     5b6:	18 16       	cp	r1, r24
     5b8:	0c f4       	brge	.+2      	; 0x5bc <__stack+0x15d>
     5ba:	1b cf       	rjmp	.-458    	; 0x3f2 <main+0x8>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	46 ed       	ldi	r20, 0xD6	; 214
     5c2:	52 ec       	ldi	r21, 0xC2	; 194
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	0c f4       	brge	.+2      	; 0x5d2 <__stack+0x173>
     5d0:	10 cf       	rjmp	.-480    	; 0x3f2 <main+0x8>
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	46 ed       	ldi	r20, 0xD6	; 214
     5d8:	52 ec       	ldi	r21, 0xC2	; 194
     5da:	c5 01       	movw	r24, r10
     5dc:	b4 01       	movw	r22, r8
     5de:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	0c f4       	brge	.+2      	; 0x5e8 <__stack+0x189>
     5e6:	05 cf       	rjmp	.-502    	; 0x3f2 <main+0x8>
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     5f6:	88 23       	and	r24, r24
     5f8:	0c f4       	brge	.+2      	; 0x5fc <__stack+0x19d>
     5fa:	fb ce       	rjmp	.-522    	; 0x3f2 <main+0x8>

				{
					x = sub_function (&old_val_1, value_1);     //call function to extract first step
     5fc:	b7 01       	movw	r22, r14
     5fe:	a6 01       	movw	r20, r12
     600:	82 e8       	ldi	r24, 0x82	; 130
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     608:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <x>
     60c:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <x+0x1>
     610:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <x+0x2>
     614:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <x+0x3>
					y = sub_function (&old_val_2, value_2);    //call function to extract second step
     618:	b5 01       	movw	r22, r10
     61a:	a4 01       	movw	r20, r8
     61c:	8e e7       	ldi	r24, 0x7E	; 126
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     624:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <y>
     628:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <y+0x1>
     62c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <y+0x2>
     630:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <y+0x3>
					z = sub_function (&old_val_3, value_3);    //call function to extract third step
     634:	b3 01       	movw	r22, r6
     636:	a2 01       	movw	r20, r4
     638:	8a e7       	ldi	r24, 0x7A	; 122
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     640:	2b 01       	movw	r4, r22
     642:	3c 01       	movw	r6, r24
     644:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <z>
     648:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <z+0x1>
     64c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <z+0x2>
     650:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <z+0x3>
					value_1 = 0;
					value_2 = 0;
					value_3 = 0;
					while (!(x && y && z == 0));
     654:	80 90 86 00 	lds	r8, 0x0086	; 0x800086 <x>
     658:	90 90 87 00 	lds	r9, 0x0087	; 0x800087 <x+0x1>
     65c:	a0 90 88 00 	lds	r10, 0x0088	; 0x800088 <x+0x2>
     660:	b0 90 89 00 	lds	r11, 0x0089	; 0x800089 <x+0x3>
     664:	c0 90 98 00 	lds	r12, 0x0098	; 0x800098 <y>
     668:	d0 90 99 00 	lds	r13, 0x0099	; 0x800099 <y+0x1>
     66c:	e0 90 9a 00 	lds	r14, 0x009A	; 0x80009a <y+0x2>
     670:	f0 90 9b 00 	lds	r15, 0x009B	; 0x80009b <y+0x3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	a9 01       	movw	r20, r18
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     682:	88 23       	and	r24, r24
     684:	b9 f3       	breq	.-18     	; 0x674 <__stack+0x215>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	a9 01       	movw	r20, r18
     68c:	c7 01       	movw	r24, r14
     68e:	b6 01       	movw	r22, r12
     690:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     694:	88 23       	and	r24, r24
     696:	71 f3       	breq	.-36     	; 0x674 <__stack+0x215>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	a9 01       	movw	r20, r18
     69e:	c3 01       	movw	r24, r6
     6a0:	b2 01       	movw	r22, r4
     6a2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     6a6:	81 11       	cpse	r24, r1
     6a8:	e5 cf       	rjmp	.-54     	; 0x674 <__stack+0x215>
					Transmit_Data("ok");
     6aa:	80 e7       	ldi	r24, 0x70	; 112
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     6b2:	9f ce       	rjmp	.-706    	; 0x3f2 <main+0x8>
				}
				}
				if (val == '0')
     6b4:	c0 97       	sbiw	r24, 0x30	; 48
     6b6:	09 f0       	breq	.+2      	; 0x6ba <__stack+0x25b>
     6b8:	9c ce       	rjmp	.-712    	; 0x3f2 <main+0x8>
				{
					value_1 = get_value(String,'X');           //extract first value
     6ba:	68 e5       	ldi	r22, 0x58	; 88
     6bc:	8c e9       	ldi	r24, 0x9C	; 156
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
					value_2 = get_value(String,'Y'); //call function to extract second value
     6c8:	69 e5       	ldi	r22, 0x59	; 89
     6ca:	8c e9       	ldi	r24, 0x9C	; 156
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6d2:	4b 01       	movw	r8, r22
     6d4:	5c 01       	movw	r10, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
     6d6:	6a e5       	ldi	r22, 0x5A	; 90
     6d8:	8c e9       	ldi	r24, 0x9C	; 156
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6e0:	2b 01       	movw	r4, r22
     6e2:	3c 01       	movw	r6, r24
					E = get_value(String,'E');
     6e4:	65 e4       	ldi	r22, 0x45	; 69
     6e6:	8c e9       	ldi	r24, 0x9C	; 156
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6ee:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <E>
     6f2:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <E+0x1>
     6f6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <E+0x2>
     6fa:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <E+0x3>
					if ((E && value_1 && value_2 && value_3) == 0)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	a9 01       	movw	r20, r18
     704:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     708:	88 23       	and	r24, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <__stack+0x2af>
     70c:	e9 c0       	rjmp	.+466    	; 0x8e0 <__stack+0x481>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     71c:	88 23       	and	r24, r24
     71e:	09 f4       	brne	.+2      	; 0x722 <__stack+0x2c3>
     720:	df c0       	rjmp	.+446    	; 0x8e0 <__stack+0x481>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	a9 01       	movw	r20, r18
     728:	c5 01       	movw	r24, r10
     72a:	b4 01       	movw	r22, r8
     72c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	09 f4       	brne	.+2      	; 0x736 <__stack+0x2d7>
     734:	d5 c0       	rjmp	.+426    	; 0x8e0 <__stack+0x481>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	c3 01       	movw	r24, r6
     73e:	b2 01       	movw	r22, r4
     740:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     744:	81 11       	cpse	r24, r1
     746:	0e c0       	rjmp	.+28     	; 0x764 <__stack+0x305>
     748:	cb c0       	rjmp	.+406    	; 0x8e0 <__stack+0x481>
					{
						if (get_value(String,'F') != 0)
						{
							F = get_value(String,'F');
     74a:	66 e4       	ldi	r22, 0x46	; 70
     74c:	8c e9       	ldi	r24, 0x9C	; 156
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     754:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <F>
     758:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <F+0x1>
     75c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <F+0x2>
     760:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <F+0x3>
						}
					}
					if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	46 ed       	ldi	r20, 0xD6	; 214
     76a:	52 e4       	ldi	r21, 0x42	; 66
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     774:	18 16       	cp	r1, r24
     776:	0c f4       	brge	.+2      	; 0x77a <__stack+0x31b>
     778:	92 c0       	rjmp	.+292    	; 0x89e <__stack+0x43f>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	46 ed       	ldi	r20, 0xD6	; 214
     780:	52 e4       	ldi	r21, 0x42	; 66
     782:	c5 01       	movw	r24, r10
     784:	b4 01       	movw	r22, r8
     786:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     78a:	18 16       	cp	r1, r24
     78c:	0c f4       	brge	.+2      	; 0x790 <__stack+0x331>
     78e:	87 c0       	rjmp	.+270    	; 0x89e <__stack+0x43f>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	4a ef       	ldi	r20, 0xFA	; 250
     796:	53 e4       	ldi	r21, 0x43	; 67
     798:	c3 01       	movw	r24, r6
     79a:	b2 01       	movw	r22, r4
     79c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	0c f4       	brge	.+2      	; 0x7a6 <__stack+0x347>
     7a4:	7c c0       	rjmp	.+248    	; 0x89e <__stack+0x43f>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	46 ed       	ldi	r20, 0xD6	; 214
     7ac:	52 ec       	ldi	r21, 0xC2	; 194
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     7b6:	88 23       	and	r24, r24
     7b8:	0c f4       	brge	.+2      	; 0x7bc <__stack+0x35d>
     7ba:	71 c0       	rjmp	.+226    	; 0x89e <__stack+0x43f>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	46 ed       	ldi	r20, 0xD6	; 214
     7c2:	52 ec       	ldi	r21, 0xC2	; 194
     7c4:	c5 01       	movw	r24, r10
     7c6:	b4 01       	movw	r22, r8
     7c8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     7cc:	88 23       	and	r24, r24
     7ce:	0c f4       	brge	.+2      	; 0x7d2 <__stack+0x373>
     7d0:	66 c0       	rjmp	.+204    	; 0x89e <__stack+0x43f>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	a9 01       	movw	r20, r18
     7d8:	c3 01       	movw	r24, r6
     7da:	b2 01       	movw	r22, r4
     7dc:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	0c f4       	brge	.+2      	; 0x7e6 <__stack+0x387>
     7e4:	5c c0       	rjmp	.+184    	; 0x89e <__stack+0x43f>

					{
						x = sub_function (&old_val_1, value_1);     //call function to extract first step
     7e6:	b7 01       	movw	r22, r14
     7e8:	a6 01       	movw	r20, r12
     7ea:	82 e8       	ldi	r24, 0x82	; 130
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     7f2:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <x>
     7f6:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <x+0x1>
     7fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <x+0x2>
     7fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <x+0x3>
						y = sub_function (&old_val_2, value_2);    //call function to extract second step
     802:	b5 01       	movw	r22, r10
     804:	a4 01       	movw	r20, r8
     806:	8e e7       	ldi	r24, 0x7E	; 126
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     80e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <y>
     812:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <y+0x1>
     816:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <y+0x2>
     81a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <y+0x3>
						z = sub_function (&old_val_3, value_3);    //call function to extract third step
     81e:	b3 01       	movw	r22, r6
     820:	a2 01       	movw	r20, r4
     822:	8a e7       	ldi	r24, 0x7A	; 122
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 20 01 	call	0x240	; 0x240 <sub_function>
     82a:	2b 01       	movw	r4, r22
     82c:	3c 01       	movw	r6, r24
     82e:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <z>
     832:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <z+0x1>
     836:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <z+0x2>
     83a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <z+0x3>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						while (!(x && y && z == 0));
     83e:	80 90 86 00 	lds	r8, 0x0086	; 0x800086 <x>
     842:	90 90 87 00 	lds	r9, 0x0087	; 0x800087 <x+0x1>
     846:	a0 90 88 00 	lds	r10, 0x0088	; 0x800088 <x+0x2>
     84a:	b0 90 89 00 	lds	r11, 0x0089	; 0x800089 <x+0x3>
     84e:	c0 90 98 00 	lds	r12, 0x0098	; 0x800098 <y>
     852:	d0 90 99 00 	lds	r13, 0x0099	; 0x800099 <y+0x1>
     856:	e0 90 9a 00 	lds	r14, 0x009A	; 0x80009a <y+0x2>
     85a:	f0 90 9b 00 	lds	r15, 0x009B	; 0x80009b <y+0x3>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	a9 01       	movw	r20, r18
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	b9 f3       	breq	.-18     	; 0x85e <__stack+0x3ff>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     87e:	88 23       	and	r24, r24
     880:	71 f3       	breq	.-36     	; 0x85e <__stack+0x3ff>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	a9 01       	movw	r20, r18
     888:	c3 01       	movw	r24, r6
     88a:	b2 01       	movw	r22, r4
     88c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     890:	81 11       	cpse	r24, r1
     892:	e5 cf       	rjmp	.-54     	; 0x85e <__stack+0x3ff>
						Transmit_Data("ok");
     894:	80 e7       	ldi	r24, 0x70	; 112
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     89c:	aa cd       	rjmp	.-1196   	; 0x3f2 <main+0x8>
					}
				else
				Transmit_Data("error");
     89e:	83 e7       	ldi	r24, 0x73	; 115
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Transmit_Data>
     8a6:	a5 cd       	rjmp	.-1206   	; 0x3f2 <main+0x8>
				value_2 = get_value(String,'Y'); //call function to extract second value
				value_3 = get_value(String,'Z'); //call function to extract third value
				E = get_value(String,'E');
				if ((E && value_1 && value_2 && value_3) == 0)
				{
					if (get_value(String,'F') != 0)
     8a8:	66 e4       	ldi	r22, 0x46	; 70
     8aa:	8c e9       	ldi	r24, 0x9C	; 156
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	a9 01       	movw	r20, r18
     8b8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     8bc:	88 23       	and	r24, r24
     8be:	09 f4       	brne	.+2      	; 0x8c2 <__stack+0x463>
     8c0:	5c ce       	rjmp	.-840    	; 0x57a <__stack+0x11b>
     8c2:	40 ce       	rjmp	.-896    	; 0x544 <__stack+0xe5>
						Fe = get_value(String,'F');
					}
				} 
				else
				{
					if (get_value(String,'F') != 0)
     8c4:	66 e4       	ldi	r22, 0x46	; 70
     8c6:	8c e9       	ldi	r24, 0x9C	; 156
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	a9 01       	movw	r20, r18
     8d4:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x47f>
     8dc:	4e ce       	rjmp	.-868    	; 0x57a <__stack+0x11b>
     8de:	40 ce       	rjmp	.-896    	; 0x560 <__stack+0x101>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					E = get_value(String,'E');
					if ((E && value_1 && value_2 && value_3) == 0)
					{
						if (get_value(String,'F') != 0)
     8e0:	66 e4       	ldi	r22, 0x46	; 70
     8e2:	8c e9       	ldi	r24, 0x9C	; 156
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	a9 01       	movw	r20, r18
     8f0:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__stack+0x49b>
     8f8:	35 cf       	rjmp	.-406    	; 0x764 <__stack+0x305>
     8fa:	27 cf       	rjmp	.-434    	; 0x74a <__stack+0x2eb>

000008fc <__vector_9>:
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	T = T - 273.15;
	return (T);
}
ISR(TIMER0_OVF_vect)
{
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	if (getTemp() <= S)
     926:	0e 94 66 01 	call	0x2cc	; 0x2cc <getTemp>
     92a:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <S>
     92e:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <S+0x1>
     932:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <S+0x2>
     936:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <S+0x3>
     93a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
     93e:	18 16       	cp	r1, r24
     940:	14 f0       	brlt	.+4      	; 0x946 <__vector_9+0x4a>
	{
		PORTD |= (1<<PD5);
     942:	95 9a       	sbi	0x12, 5	; 18
     944:	1b c0       	rjmp	.+54     	; 0x97c <__vector_9+0x80>
	} 
	else if (getTemp() > (S+2))
     946:	0e 94 66 01 	call	0x2cc	; 0x2cc <getTemp>
     94a:	6b 01       	movw	r12, r22
     94c:	7c 01       	movw	r14, r24
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e4       	ldi	r21, 0x40	; 64
     956:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <S>
     95a:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <S+0x1>
     95e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <S+0x2>
     962:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <S+0x3>
     966:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     976:	18 16       	cp	r1, r24
     978:	0c f4       	brge	.+2      	; 0x97c <__vector_9+0x80>
	{
		PORTD &=~ (1<<PD5);
     97a:	95 98       	cbi	0x12, 5	; 18
	}
	
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	7f 91       	pop	r23
     98a:	6f 91       	pop	r22
     98c:	5f 91       	pop	r21
     98e:	4f 91       	pop	r20
     990:	3f 91       	pop	r19
     992:	2f 91       	pop	r18
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <UART_INIT>:

void UART_INIT()
{
	long t;
	t =Crystal();
	UBRRL =  (uint8_t) (t);
     9a6:	87 e6       	ldi	r24, 0x67	; 103
     9a8:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(t>>8);
     9aa:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
     9ac:	88 e1       	ldi	r24, 0x18	; 24
     9ae:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
     9b0:	86 e8       	ldi	r24, 0x86	; 134
     9b2:	80 bd       	out	0x20, r24	; 32
     9b4:	08 95       	ret

000009b6 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (!(UCSRA & (1<<5)));    //waits until 'bin 5' equal to 1, becomes Empty.
     9b6:	5d 9b       	sbis	0x0b, 5	; 11
     9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
     9ba:	8c b9       	out	0x0c, r24	; 12
     9bc:	08 95       	ret

000009be <Recive_Char>:

char Recive_Char(void)
{
	long times = 0 ;
	bool stu =  0;
	while (! (UCSRA & (1 << RXC)))
     9be:	5f 9b       	sbis	0x0b, 7	; 11
     9c0:	06 c0       	rjmp	.+12     	; 0x9ce <Recive_Char+0x10>
     9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <Recive_Char+0x22>
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	a1 09       	sbc	r26, r1
     9c8:	b1 09       	sbc	r27, r1
	{
		if (times >= (90000))
     9ca:	29 f4       	brne	.+10     	; 0x9d6 <Recive_Char+0x18>
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <Recive_Char+0x1e>

char Recive_Char(void)
{
	long times = 0 ;
	bool stu =  0;
	while (! (UCSRA & (1 << RXC)))
     9ce:	80 e9       	ldi	r24, 0x90	; 144
     9d0:	9f e5       	ldi	r25, 0x5F	; 95
     9d2:	a1 e0       	ldi	r26, 0x01	; 1
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	5f 9b       	sbis	0x0b, 7	; 11
     9d8:	f5 cf       	rjmp	.-22     	; 0x9c4 <Recive_Char+0x6>
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <Recive_Char+0x22>
		}
		times += 1;
	}   //waits until 'bin7' equal to 1, have unread data in the receive buffer
	if (stu == 1)
	{
		return(';');
     9dc:	8b e3       	ldi	r24, 0x3B	; 59
     9de:	08 95       	ret
	}
	else
	{
		return(UDR);
     9e0:	8c b1       	in	r24, 0x0c	; 12
	}   
	 
}
     9e2:	08 95       	ret

000009e4 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
	while(*ptr_string)
     9ea:	88 81       	ld	r24, Y
     9ec:	88 23       	and	r24, r24
     9ee:	31 f0       	breq	.+12     	; 0x9fc <Transmit_Data+0x18>
     9f0:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
     9f2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Transmit_Char>
	}   
	 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
     9f6:	89 91       	ld	r24, Y+
     9f8:	81 11       	cpse	r24, r1
     9fa:	fb cf       	rjmp	.-10     	; 0x9f2 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
     a0a:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
     a0c:	0e 94 df 04 	call	0x9be	; 0x9be <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
     a10:	8b 33       	cpi	r24, 0x3B	; 59
     a12:	29 f4       	brne	.+10     	; 0xa1e <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
     a14:	f8 01       	movw	r30, r16
     a16:	ec 0f       	add	r30, r28
     a18:	f1 1d       	adc	r31, r1
     a1a:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
     a1e:	88 30       	cpi	r24, 0x08	; 8
     a20:	21 f4       	brne	.+8      	; 0xa2a <Recive_Data+0x28>
     a22:	cc 23       	and	r28, r28
     a24:	11 f0       	breq	.+4      	; 0xa2a <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
     a26:	c1 50       	subi	r28, 0x01	; 1
     a28:	f1 cf       	rjmp	.-30     	; 0xa0c <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
     a2a:	f8 01       	movw	r30, r16
     a2c:	ec 0f       	add	r30, r28
     a2e:	f1 1d       	adc	r31, r1
     a30:	80 83       	st	Z, r24
	             len++;
     a32:	cf 5f       	subi	r28, 0xFF	; 255
     a34:	eb cf       	rjmp	.-42     	; 0xa0c <Recive_Data+0xa>
	         }
	 	}

	
}
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <__subsf3>:
     a3e:	50 58       	subi	r21, 0x80	; 128

00000a40 <__addsf3>:
     a40:	bb 27       	eor	r27, r27
     a42:	aa 27       	eor	r26, r26
     a44:	0e 94 37 05 	call	0xa6e	; 0xa6e <__addsf3x>
     a48:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_round>
     a4c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscA>
     a50:	38 f0       	brcs	.+14     	; 0xa60 <__addsf3+0x20>
     a52:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscB>
     a56:	20 f0       	brcs	.+8      	; 0xa60 <__addsf3+0x20>
     a58:	39 f4       	brne	.+14     	; 0xa68 <__addsf3+0x28>
     a5a:	9f 3f       	cpi	r25, 0xFF	; 255
     a5c:	19 f4       	brne	.+6      	; 0xa64 <__addsf3+0x24>
     a5e:	26 f4       	brtc	.+8      	; 0xa68 <__addsf3+0x28>
     a60:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_nan>
     a64:	0e f4       	brtc	.+2      	; 0xa68 <__addsf3+0x28>
     a66:	e0 95       	com	r30
     a68:	e7 fb       	bst	r30, 7
     a6a:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>

00000a6e <__addsf3x>:
     a6e:	e9 2f       	mov	r30, r25
     a70:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_split3>
     a74:	58 f3       	brcs	.-42     	; 0xa4c <__addsf3+0xc>
     a76:	ba 17       	cp	r27, r26
     a78:	62 07       	cpc	r22, r18
     a7a:	73 07       	cpc	r23, r19
     a7c:	84 07       	cpc	r24, r20
     a7e:	95 07       	cpc	r25, r21
     a80:	20 f0       	brcs	.+8      	; 0xa8a <__addsf3x+0x1c>
     a82:	79 f4       	brne	.+30     	; 0xaa2 <__addsf3x+0x34>
     a84:	a6 f5       	brtc	.+104    	; 0xaee <__addsf3x+0x80>
     a86:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__fp_zero>
     a8a:	0e f4       	brtc	.+2      	; 0xa8e <__addsf3x+0x20>
     a8c:	e0 95       	com	r30
     a8e:	0b 2e       	mov	r0, r27
     a90:	ba 2f       	mov	r27, r26
     a92:	a0 2d       	mov	r26, r0
     a94:	0b 01       	movw	r0, r22
     a96:	b9 01       	movw	r22, r18
     a98:	90 01       	movw	r18, r0
     a9a:	0c 01       	movw	r0, r24
     a9c:	ca 01       	movw	r24, r20
     a9e:	a0 01       	movw	r20, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	ff 27       	eor	r31, r31
     aa4:	59 1b       	sub	r21, r25
     aa6:	99 f0       	breq	.+38     	; 0xace <__addsf3x+0x60>
     aa8:	59 3f       	cpi	r21, 0xF9	; 249
     aaa:	50 f4       	brcc	.+20     	; 0xac0 <__addsf3x+0x52>
     aac:	50 3e       	cpi	r21, 0xE0	; 224
     aae:	68 f1       	brcs	.+90     	; 0xb0a <__addsf3x+0x9c>
     ab0:	1a 16       	cp	r1, r26
     ab2:	f0 40       	sbci	r31, 0x00	; 0
     ab4:	a2 2f       	mov	r26, r18
     ab6:	23 2f       	mov	r18, r19
     ab8:	34 2f       	mov	r19, r20
     aba:	44 27       	eor	r20, r20
     abc:	58 5f       	subi	r21, 0xF8	; 248
     abe:	f3 cf       	rjmp	.-26     	; 0xaa6 <__addsf3x+0x38>
     ac0:	46 95       	lsr	r20
     ac2:	37 95       	ror	r19
     ac4:	27 95       	ror	r18
     ac6:	a7 95       	ror	r26
     ac8:	f0 40       	sbci	r31, 0x00	; 0
     aca:	53 95       	inc	r21
     acc:	c9 f7       	brne	.-14     	; 0xac0 <__addsf3x+0x52>
     ace:	7e f4       	brtc	.+30     	; 0xaee <__addsf3x+0x80>
     ad0:	1f 16       	cp	r1, r31
     ad2:	ba 0b       	sbc	r27, r26
     ad4:	62 0b       	sbc	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	84 0b       	sbc	r24, r20
     ada:	ba f0       	brmi	.+46     	; 0xb0a <__addsf3x+0x9c>
     adc:	91 50       	subi	r25, 0x01	; 1
     ade:	a1 f0       	breq	.+40     	; 0xb08 <__addsf3x+0x9a>
     ae0:	ff 0f       	add	r31, r31
     ae2:	bb 1f       	adc	r27, r27
     ae4:	66 1f       	adc	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	c2 f7       	brpl	.-16     	; 0xadc <__addsf3x+0x6e>
     aec:	0e c0       	rjmp	.+28     	; 0xb0a <__addsf3x+0x9c>
     aee:	ba 0f       	add	r27, r26
     af0:	62 1f       	adc	r22, r18
     af2:	73 1f       	adc	r23, r19
     af4:	84 1f       	adc	r24, r20
     af6:	48 f4       	brcc	.+18     	; 0xb0a <__addsf3x+0x9c>
     af8:	87 95       	ror	r24
     afa:	77 95       	ror	r23
     afc:	67 95       	ror	r22
     afe:	b7 95       	ror	r27
     b00:	f7 95       	ror	r31
     b02:	9e 3f       	cpi	r25, 0xFE	; 254
     b04:	08 f0       	brcs	.+2      	; 0xb08 <__addsf3x+0x9a>
     b06:	b0 cf       	rjmp	.-160    	; 0xa68 <__addsf3+0x28>
     b08:	93 95       	inc	r25
     b0a:	88 0f       	add	r24, r24
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <__addsf3x+0xa2>
     b0e:	99 27       	eor	r25, r25
     b10:	ee 0f       	add	r30, r30
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	08 95       	ret

00000b18 <__cmpsf2>:
     b18:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_cmp>
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__cmpsf2+0x8>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret

00000b22 <__divsf3>:
     b22:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divsf3x>
     b26:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_round>
     b2a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscB>
     b2e:	58 f0       	brcs	.+22     	; 0xb46 <__divsf3+0x24>
     b30:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscA>
     b34:	40 f0       	brcs	.+16     	; 0xb46 <__divsf3+0x24>
     b36:	29 f4       	brne	.+10     	; 0xb42 <__divsf3+0x20>
     b38:	5f 3f       	cpi	r21, 0xFF	; 255
     b3a:	29 f0       	breq	.+10     	; 0xb46 <__divsf3+0x24>
     b3c:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>
     b40:	51 11       	cpse	r21, r1
     b42:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>
     b46:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_nan>

00000b4a <__divsf3x>:
     b4a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_split3>
     b4e:	68 f3       	brcs	.-38     	; 0xb2a <__divsf3+0x8>

00000b50 <__divsf3_pse>:
     b50:	99 23       	and	r25, r25
     b52:	b1 f3       	breq	.-20     	; 0xb40 <__divsf3+0x1e>
     b54:	55 23       	and	r21, r21
     b56:	91 f3       	breq	.-28     	; 0xb3c <__divsf3+0x1a>
     b58:	95 1b       	sub	r25, r21
     b5a:	55 0b       	sbc	r21, r21
     b5c:	bb 27       	eor	r27, r27
     b5e:	aa 27       	eor	r26, r26
     b60:	62 17       	cp	r22, r18
     b62:	73 07       	cpc	r23, r19
     b64:	84 07       	cpc	r24, r20
     b66:	38 f0       	brcs	.+14     	; 0xb76 <__divsf3_pse+0x26>
     b68:	9f 5f       	subi	r25, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	44 1f       	adc	r20, r20
     b72:	aa 1f       	adc	r26, r26
     b74:	a9 f3       	breq	.-22     	; 0xb60 <__divsf3_pse+0x10>
     b76:	35 d0       	rcall	.+106    	; 0xbe2 <__divsf3_pse+0x92>
     b78:	0e 2e       	mov	r0, r30
     b7a:	3a f0       	brmi	.+14     	; 0xb8a <__divsf3_pse+0x3a>
     b7c:	e0 e8       	ldi	r30, 0x80	; 128
     b7e:	32 d0       	rcall	.+100    	; 0xbe4 <__divsf3_pse+0x94>
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	50 40       	sbci	r21, 0x00	; 0
     b84:	e6 95       	lsr	r30
     b86:	00 1c       	adc	r0, r0
     b88:	ca f7       	brpl	.-14     	; 0xb7c <__divsf3_pse+0x2c>
     b8a:	2b d0       	rcall	.+86     	; 0xbe2 <__divsf3_pse+0x92>
     b8c:	fe 2f       	mov	r31, r30
     b8e:	29 d0       	rcall	.+82     	; 0xbe2 <__divsf3_pse+0x92>
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	88 1f       	adc	r24, r24
     b96:	bb 1f       	adc	r27, r27
     b98:	26 17       	cp	r18, r22
     b9a:	37 07       	cpc	r19, r23
     b9c:	48 07       	cpc	r20, r24
     b9e:	ab 07       	cpc	r26, r27
     ba0:	b0 e8       	ldi	r27, 0x80	; 128
     ba2:	09 f0       	breq	.+2      	; 0xba6 <__divsf3_pse+0x56>
     ba4:	bb 0b       	sbc	r27, r27
     ba6:	80 2d       	mov	r24, r0
     ba8:	bf 01       	movw	r22, r30
     baa:	ff 27       	eor	r31, r31
     bac:	93 58       	subi	r25, 0x83	; 131
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	3a f0       	brmi	.+14     	; 0xbc0 <__divsf3_pse+0x70>
     bb2:	9e 3f       	cpi	r25, 0xFE	; 254
     bb4:	51 05       	cpc	r21, r1
     bb6:	78 f0       	brcs	.+30     	; 0xbd6 <__divsf3_pse+0x86>
     bb8:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>
     bbc:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>
     bc0:	5f 3f       	cpi	r21, 0xFF	; 255
     bc2:	e4 f3       	brlt	.-8      	; 0xbbc <__divsf3_pse+0x6c>
     bc4:	98 3e       	cpi	r25, 0xE8	; 232
     bc6:	d4 f3       	brlt	.-12     	; 0xbbc <__divsf3_pse+0x6c>
     bc8:	86 95       	lsr	r24
     bca:	77 95       	ror	r23
     bcc:	67 95       	ror	r22
     bce:	b7 95       	ror	r27
     bd0:	f7 95       	ror	r31
     bd2:	9f 5f       	subi	r25, 0xFF	; 255
     bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__divsf3_pse+0x78>
     bd6:	88 0f       	add	r24, r24
     bd8:	91 1d       	adc	r25, r1
     bda:	96 95       	lsr	r25
     bdc:	87 95       	ror	r24
     bde:	97 f9       	bld	r25, 7
     be0:	08 95       	ret
     be2:	e1 e0       	ldi	r30, 0x01	; 1
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	88 1f       	adc	r24, r24
     bea:	bb 1f       	adc	r27, r27
     bec:	62 17       	cp	r22, r18
     bee:	73 07       	cpc	r23, r19
     bf0:	84 07       	cpc	r24, r20
     bf2:	ba 07       	cpc	r27, r26
     bf4:	20 f0       	brcs	.+8      	; 0xbfe <__divsf3_pse+0xae>
     bf6:	62 1b       	sub	r22, r18
     bf8:	73 0b       	sbc	r23, r19
     bfa:	84 0b       	sbc	r24, r20
     bfc:	ba 0b       	sbc	r27, r26
     bfe:	ee 1f       	adc	r30, r30
     c00:	88 f7       	brcc	.-30     	; 0xbe4 <__divsf3_pse+0x94>
     c02:	e0 95       	com	r30
     c04:	08 95       	ret

00000c06 <__fixsfsi>:
     c06:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fixunssfsi>
     c0a:	68 94       	set
     c0c:	b1 11       	cpse	r27, r1
     c0e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>
     c12:	08 95       	ret

00000c14 <__fixunssfsi>:
     c14:	0e 94 ca 06 	call	0xd94	; 0xd94 <__fp_splitA>
     c18:	88 f0       	brcs	.+34     	; 0xc3c <__fixunssfsi+0x28>
     c1a:	9f 57       	subi	r25, 0x7F	; 127
     c1c:	98 f0       	brcs	.+38     	; 0xc44 <__fixunssfsi+0x30>
     c1e:	b9 2f       	mov	r27, r25
     c20:	99 27       	eor	r25, r25
     c22:	b7 51       	subi	r27, 0x17	; 23
     c24:	b0 f0       	brcs	.+44     	; 0xc52 <__fixunssfsi+0x3e>
     c26:	e1 f0       	breq	.+56     	; 0xc60 <__fixunssfsi+0x4c>
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	88 1f       	adc	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	1a f0       	brmi	.+6      	; 0xc38 <__fixunssfsi+0x24>
     c32:	ba 95       	dec	r27
     c34:	c9 f7       	brne	.-14     	; 0xc28 <__fixunssfsi+0x14>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <__fixunssfsi+0x4c>
     c38:	b1 30       	cpi	r27, 0x01	; 1
     c3a:	91 f0       	breq	.+36     	; 0xc60 <__fixunssfsi+0x4c>
     c3c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_zero>
     c40:	b1 e0       	ldi	r27, 0x01	; 1
     c42:	08 95       	ret
     c44:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__fp_zero>
     c48:	67 2f       	mov	r22, r23
     c4a:	78 2f       	mov	r23, r24
     c4c:	88 27       	eor	r24, r24
     c4e:	b8 5f       	subi	r27, 0xF8	; 248
     c50:	39 f0       	breq	.+14     	; 0xc60 <__fixunssfsi+0x4c>
     c52:	b9 3f       	cpi	r27, 0xF9	; 249
     c54:	cc f3       	brlt	.-14     	; 0xc48 <__fixunssfsi+0x34>
     c56:	86 95       	lsr	r24
     c58:	77 95       	ror	r23
     c5a:	67 95       	ror	r22
     c5c:	b3 95       	inc	r27
     c5e:	d9 f7       	brne	.-10     	; 0xc56 <__fixunssfsi+0x42>
     c60:	3e f4       	brtc	.+14     	; 0xc70 <__fixunssfsi+0x5c>
     c62:	90 95       	com	r25
     c64:	80 95       	com	r24
     c66:	70 95       	com	r23
     c68:	61 95       	neg	r22
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	08 95       	ret

00000c72 <__floatunsisf>:
     c72:	e8 94       	clt
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <__floatsisf+0x12>

00000c76 <__floatsisf>:
     c76:	97 fb       	bst	r25, 7
     c78:	3e f4       	brtc	.+14     	; 0xc88 <__floatsisf+0x12>
     c7a:	90 95       	com	r25
     c7c:	80 95       	com	r24
     c7e:	70 95       	com	r23
     c80:	61 95       	neg	r22
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	8f 4f       	sbci	r24, 0xFF	; 255
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	99 23       	and	r25, r25
     c8a:	a9 f0       	breq	.+42     	; 0xcb6 <__floatsisf+0x40>
     c8c:	f9 2f       	mov	r31, r25
     c8e:	96 e9       	ldi	r25, 0x96	; 150
     c90:	bb 27       	eor	r27, r27
     c92:	93 95       	inc	r25
     c94:	f6 95       	lsr	r31
     c96:	87 95       	ror	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b7 95       	ror	r27
     c9e:	f1 11       	cpse	r31, r1
     ca0:	f8 cf       	rjmp	.-16     	; 0xc92 <__floatsisf+0x1c>
     ca2:	fa f4       	brpl	.+62     	; 0xce2 <__floatsisf+0x6c>
     ca4:	bb 0f       	add	r27, r27
     ca6:	11 f4       	brne	.+4      	; 0xcac <__floatsisf+0x36>
     ca8:	60 ff       	sbrs	r22, 0
     caa:	1b c0       	rjmp	.+54     	; 0xce2 <__floatsisf+0x6c>
     cac:	6f 5f       	subi	r22, 0xFF	; 255
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	8f 4f       	sbci	r24, 0xFF	; 255
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	16 c0       	rjmp	.+44     	; 0xce2 <__floatsisf+0x6c>
     cb6:	88 23       	and	r24, r24
     cb8:	11 f0       	breq	.+4      	; 0xcbe <__floatsisf+0x48>
     cba:	96 e9       	ldi	r25, 0x96	; 150
     cbc:	11 c0       	rjmp	.+34     	; 0xce0 <__floatsisf+0x6a>
     cbe:	77 23       	and	r23, r23
     cc0:	21 f0       	breq	.+8      	; 0xcca <__floatsisf+0x54>
     cc2:	9e e8       	ldi	r25, 0x8E	; 142
     cc4:	87 2f       	mov	r24, r23
     cc6:	76 2f       	mov	r23, r22
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <__floatsisf+0x5e>
     cca:	66 23       	and	r22, r22
     ccc:	71 f0       	breq	.+28     	; 0xcea <__floatsisf+0x74>
     cce:	96 e8       	ldi	r25, 0x86	; 134
     cd0:	86 2f       	mov	r24, r22
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	2a f0       	brmi	.+10     	; 0xce2 <__floatsisf+0x6c>
     cd8:	9a 95       	dec	r25
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	88 1f       	adc	r24, r24
     ce0:	da f7       	brpl	.-10     	; 0xcd8 <__floatsisf+0x62>
     ce2:	88 0f       	add	r24, r24
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	97 f9       	bld	r25, 7
     cea:	08 95       	ret

00000cec <__fp_cmp>:
     cec:	99 0f       	add	r25, r25
     cee:	00 08       	sbc	r0, r0
     cf0:	55 0f       	add	r21, r21
     cf2:	aa 0b       	sbc	r26, r26
     cf4:	e0 e8       	ldi	r30, 0x80	; 128
     cf6:	fe ef       	ldi	r31, 0xFE	; 254
     cf8:	16 16       	cp	r1, r22
     cfa:	17 06       	cpc	r1, r23
     cfc:	e8 07       	cpc	r30, r24
     cfe:	f9 07       	cpc	r31, r25
     d00:	c0 f0       	brcs	.+48     	; 0xd32 <__fp_cmp+0x46>
     d02:	12 16       	cp	r1, r18
     d04:	13 06       	cpc	r1, r19
     d06:	e4 07       	cpc	r30, r20
     d08:	f5 07       	cpc	r31, r21
     d0a:	98 f0       	brcs	.+38     	; 0xd32 <__fp_cmp+0x46>
     d0c:	62 1b       	sub	r22, r18
     d0e:	73 0b       	sbc	r23, r19
     d10:	84 0b       	sbc	r24, r20
     d12:	95 0b       	sbc	r25, r21
     d14:	39 f4       	brne	.+14     	; 0xd24 <__fp_cmp+0x38>
     d16:	0a 26       	eor	r0, r26
     d18:	61 f0       	breq	.+24     	; 0xd32 <__fp_cmp+0x46>
     d1a:	23 2b       	or	r18, r19
     d1c:	24 2b       	or	r18, r20
     d1e:	25 2b       	or	r18, r21
     d20:	21 f4       	brne	.+8      	; 0xd2a <__fp_cmp+0x3e>
     d22:	08 95       	ret
     d24:	0a 26       	eor	r0, r26
     d26:	09 f4       	brne	.+2      	; 0xd2a <__fp_cmp+0x3e>
     d28:	a1 40       	sbci	r26, 0x01	; 1
     d2a:	a6 95       	lsr	r26
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	81 1d       	adc	r24, r1
     d30:	81 1d       	adc	r24, r1
     d32:	08 95       	ret

00000d34 <__fp_inf>:
     d34:	97 f9       	bld	r25, 7
     d36:	9f 67       	ori	r25, 0x7F	; 127
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	08 95       	ret

00000d40 <__fp_nan>:
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	80 ec       	ldi	r24, 0xC0	; 192
     d44:	08 95       	ret

00000d46 <__fp_pscA>:
     d46:	00 24       	eor	r0, r0
     d48:	0a 94       	dec	r0
     d4a:	16 16       	cp	r1, r22
     d4c:	17 06       	cpc	r1, r23
     d4e:	18 06       	cpc	r1, r24
     d50:	09 06       	cpc	r0, r25
     d52:	08 95       	ret

00000d54 <__fp_pscB>:
     d54:	00 24       	eor	r0, r0
     d56:	0a 94       	dec	r0
     d58:	12 16       	cp	r1, r18
     d5a:	13 06       	cpc	r1, r19
     d5c:	14 06       	cpc	r1, r20
     d5e:	05 06       	cpc	r0, r21
     d60:	08 95       	ret

00000d62 <__fp_round>:
     d62:	09 2e       	mov	r0, r25
     d64:	03 94       	inc	r0
     d66:	00 0c       	add	r0, r0
     d68:	11 f4       	brne	.+4      	; 0xd6e <__fp_round+0xc>
     d6a:	88 23       	and	r24, r24
     d6c:	52 f0       	brmi	.+20     	; 0xd82 <__fp_round+0x20>
     d6e:	bb 0f       	add	r27, r27
     d70:	40 f4       	brcc	.+16     	; 0xd82 <__fp_round+0x20>
     d72:	bf 2b       	or	r27, r31
     d74:	11 f4       	brne	.+4      	; 0xd7a <__fp_round+0x18>
     d76:	60 ff       	sbrs	r22, 0
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__fp_round+0x20>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	08 95       	ret

00000d84 <__fp_split3>:
     d84:	57 fd       	sbrc	r21, 7
     d86:	90 58       	subi	r25, 0x80	; 128
     d88:	44 0f       	add	r20, r20
     d8a:	55 1f       	adc	r21, r21
     d8c:	59 f0       	breq	.+22     	; 0xda4 <__fp_splitA+0x10>
     d8e:	5f 3f       	cpi	r21, 0xFF	; 255
     d90:	71 f0       	breq	.+28     	; 0xdae <__fp_splitA+0x1a>
     d92:	47 95       	ror	r20

00000d94 <__fp_splitA>:
     d94:	88 0f       	add	r24, r24
     d96:	97 fb       	bst	r25, 7
     d98:	99 1f       	adc	r25, r25
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <__fp_splitA+0x20>
     d9c:	9f 3f       	cpi	r25, 0xFF	; 255
     d9e:	79 f0       	breq	.+30     	; 0xdbe <__fp_splitA+0x2a>
     da0:	87 95       	ror	r24
     da2:	08 95       	ret
     da4:	12 16       	cp	r1, r18
     da6:	13 06       	cpc	r1, r19
     da8:	14 06       	cpc	r1, r20
     daa:	55 1f       	adc	r21, r21
     dac:	f2 cf       	rjmp	.-28     	; 0xd92 <__fp_split3+0xe>
     dae:	46 95       	lsr	r20
     db0:	f1 df       	rcall	.-30     	; 0xd94 <__fp_splitA>
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <__fp_splitA+0x30>
     db4:	16 16       	cp	r1, r22
     db6:	17 06       	cpc	r1, r23
     db8:	18 06       	cpc	r1, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	f1 cf       	rjmp	.-30     	; 0xda0 <__fp_splitA+0xc>
     dbe:	86 95       	lsr	r24
     dc0:	71 05       	cpc	r23, r1
     dc2:	61 05       	cpc	r22, r1
     dc4:	08 94       	sec
     dc6:	08 95       	ret

00000dc8 <__fp_zero>:
     dc8:	e8 94       	clt

00000dca <__fp_szero>:
     dca:	bb 27       	eor	r27, r27
     dcc:	66 27       	eor	r22, r22
     dce:	77 27       	eor	r23, r23
     dd0:	cb 01       	movw	r24, r22
     dd2:	97 f9       	bld	r25, 7
     dd4:	08 95       	ret

00000dd6 <__gesf2>:
     dd6:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_cmp>
     dda:	08 f4       	brcc	.+2      	; 0xdde <__gesf2+0x8>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	08 95       	ret
     de0:	16 f0       	brts	.+4      	; 0xde6 <__gesf2+0x10>
     de2:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_mpack>
     de6:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_nan>
     dea:	68 94       	set
     dec:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>

00000df0 <log>:
     df0:	0e 94 ca 06 	call	0xd94	; 0xd94 <__fp_splitA>
     df4:	a8 f3       	brcs	.-22     	; 0xde0 <__gesf2+0xa>
     df6:	99 23       	and	r25, r25
     df8:	c1 f3       	breq	.-16     	; 0xdea <__gesf2+0x14>
     dfa:	ae f3       	brts	.-22     	; 0xde6 <__gesf2+0x10>
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	1f 93       	push	r17
     e02:	0f 93       	push	r16
     e04:	ff 92       	push	r15
     e06:	c9 2f       	mov	r28, r25
     e08:	dd 27       	eor	r29, r29
     e0a:	88 23       	and	r24, r24
     e0c:	2a f0       	brmi	.+10     	; 0xe18 <log+0x28>
     e0e:	21 97       	sbiw	r28, 0x01	; 1
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	da f7       	brpl	.-10     	; 0xe0e <log+0x1e>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f eb       	ldi	r21, 0xBF	; 191
     e20:	9f e3       	ldi	r25, 0x3F	; 63
     e22:	88 39       	cpi	r24, 0x98	; 152
     e24:	20 f0       	brcs	.+8      	; 0xe2e <log+0x3e>
     e26:	80 3e       	cpi	r24, 0xE0	; 224
     e28:	38 f0       	brcs	.+14     	; 0xe38 <log+0x48>
     e2a:	21 96       	adiw	r28, 0x01	; 1
     e2c:	8f 77       	andi	r24, 0x7F	; 127
     e2e:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     e32:	e4 e5       	ldi	r30, 0x54	; 84
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <log+0x50>
     e38:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3>
     e3c:	e1 e8       	ldi	r30, 0x81	; 129
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_powser>
     e44:	8b 01       	movw	r16, r22
     e46:	be 01       	movw	r22, r28
     e48:	ec 01       	movw	r28, r24
     e4a:	fb 2e       	mov	r15, r27
     e4c:	6f 57       	subi	r22, 0x7F	; 127
     e4e:	71 09       	sbc	r23, r1
     e50:	75 95       	asr	r23
     e52:	77 1f       	adc	r23, r23
     e54:	88 0b       	sbc	r24, r24
     e56:	99 0b       	sbc	r25, r25
     e58:	0e 94 3b 06 	call	0xc76	; 0xc76 <__floatsisf>
     e5c:	28 e1       	ldi	r18, 0x18	; 24
     e5e:	32 e7       	ldi	r19, 0x72	; 114
     e60:	41 e3       	ldi	r20, 0x31	; 49
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3x>
     e68:	af 2d       	mov	r26, r15
     e6a:	98 01       	movw	r18, r16
     e6c:	ae 01       	movw	r20, r28
     e6e:	ff 90       	pop	r15
     e70:	0f 91       	pop	r16
     e72:	1f 91       	pop	r17
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	0e 94 37 05 	call	0xa6e	; 0xa6e <__addsf3x>
     e7c:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_round>

00000e80 <__mulsf3>:
     e80:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3x>
     e84:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_round>
     e88:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscA>
     e8c:	38 f0       	brcs	.+14     	; 0xe9c <__mulsf3+0x1c>
     e8e:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscB>
     e92:	20 f0       	brcs	.+8      	; 0xe9c <__mulsf3+0x1c>
     e94:	95 23       	and	r25, r21
     e96:	11 f0       	breq	.+4      	; 0xe9c <__mulsf3+0x1c>
     e98:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>
     e9c:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_nan>
     ea0:	11 24       	eor	r1, r1
     ea2:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>

00000ea6 <__mulsf3x>:
     ea6:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_split3>
     eaa:	70 f3       	brcs	.-36     	; 0xe88 <__mulsf3+0x8>

00000eac <__mulsf3_pse>:
     eac:	95 9f       	mul	r25, r21
     eae:	c1 f3       	breq	.-16     	; 0xea0 <__mulsf3+0x20>
     eb0:	95 0f       	add	r25, r21
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	55 1f       	adc	r21, r21
     eb6:	62 9f       	mul	r22, r18
     eb8:	f0 01       	movw	r30, r0
     eba:	72 9f       	mul	r23, r18
     ebc:	bb 27       	eor	r27, r27
     ebe:	f0 0d       	add	r31, r0
     ec0:	b1 1d       	adc	r27, r1
     ec2:	63 9f       	mul	r22, r19
     ec4:	aa 27       	eor	r26, r26
     ec6:	f0 0d       	add	r31, r0
     ec8:	b1 1d       	adc	r27, r1
     eca:	aa 1f       	adc	r26, r26
     ecc:	64 9f       	mul	r22, r20
     ece:	66 27       	eor	r22, r22
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	66 1f       	adc	r22, r22
     ed6:	82 9f       	mul	r24, r18
     ed8:	22 27       	eor	r18, r18
     eda:	b0 0d       	add	r27, r0
     edc:	a1 1d       	adc	r26, r1
     ede:	62 1f       	adc	r22, r18
     ee0:	73 9f       	mul	r23, r19
     ee2:	b0 0d       	add	r27, r0
     ee4:	a1 1d       	adc	r26, r1
     ee6:	62 1f       	adc	r22, r18
     ee8:	83 9f       	mul	r24, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	22 1f       	adc	r18, r18
     ef0:	74 9f       	mul	r23, r20
     ef2:	33 27       	eor	r19, r19
     ef4:	a0 0d       	add	r26, r0
     ef6:	61 1d       	adc	r22, r1
     ef8:	23 1f       	adc	r18, r19
     efa:	84 9f       	mul	r24, r20
     efc:	60 0d       	add	r22, r0
     efe:	21 1d       	adc	r18, r1
     f00:	82 2f       	mov	r24, r18
     f02:	76 2f       	mov	r23, r22
     f04:	6a 2f       	mov	r22, r26
     f06:	11 24       	eor	r1, r1
     f08:	9f 57       	subi	r25, 0x7F	; 127
     f0a:	50 40       	sbci	r21, 0x00	; 0
     f0c:	9a f0       	brmi	.+38     	; 0xf34 <__mulsf3_pse+0x88>
     f0e:	f1 f0       	breq	.+60     	; 0xf4c <__mulsf3_pse+0xa0>
     f10:	88 23       	and	r24, r24
     f12:	4a f0       	brmi	.+18     	; 0xf26 <__mulsf3_pse+0x7a>
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	bb 1f       	adc	r27, r27
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	88 1f       	adc	r24, r24
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	50 40       	sbci	r21, 0x00	; 0
     f24:	a9 f7       	brne	.-22     	; 0xf10 <__mulsf3_pse+0x64>
     f26:	9e 3f       	cpi	r25, 0xFE	; 254
     f28:	51 05       	cpc	r21, r1
     f2a:	80 f0       	brcs	.+32     	; 0xf4c <__mulsf3_pse+0xa0>
     f2c:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_inf>
     f30:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>
     f34:	5f 3f       	cpi	r21, 0xFF	; 255
     f36:	e4 f3       	brlt	.-8      	; 0xf30 <__mulsf3_pse+0x84>
     f38:	98 3e       	cpi	r25, 0xE8	; 232
     f3a:	d4 f3       	brlt	.-12     	; 0xf30 <__mulsf3_pse+0x84>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f7 95       	ror	r31
     f46:	e7 95       	ror	r30
     f48:	9f 5f       	subi	r25, 0xFF	; 255
     f4a:	c1 f7       	brne	.-16     	; 0xf3c <__mulsf3_pse+0x90>
     f4c:	fe 2b       	or	r31, r30
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret

00000f5a <__fp_mpack>:
     f5a:	9f 3f       	cpi	r25, 0xFF	; 255
     f5c:	31 f0       	breq	.+12     	; 0xf6a <__fp_mpack_finite+0xc>

00000f5e <__fp_mpack_finite>:
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	20 f4       	brcc	.+8      	; 0xf6a <__fp_mpack_finite+0xc>
     f62:	87 95       	ror	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b7 95       	ror	r27
     f6a:	88 0f       	add	r24, r24
     f6c:	91 1d       	adc	r25, r1
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret

00000f76 <__fp_powser>:
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	1f 93       	push	r17
     f7c:	0f 93       	push	r16
     f7e:	ff 92       	push	r15
     f80:	ef 92       	push	r14
     f82:	df 92       	push	r13
     f84:	7b 01       	movw	r14, r22
     f86:	8c 01       	movw	r16, r24
     f88:	68 94       	set
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <__fp_powser+0x22>
     f8c:	da 2e       	mov	r13, r26
     f8e:	ef 01       	movw	r28, r30
     f90:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3x>
     f94:	fe 01       	movw	r30, r28
     f96:	e8 94       	clt
     f98:	a5 91       	lpm	r26, Z+
     f9a:	25 91       	lpm	r18, Z+
     f9c:	35 91       	lpm	r19, Z+
     f9e:	45 91       	lpm	r20, Z+
     fa0:	55 91       	lpm	r21, Z+
     fa2:	a6 f3       	brts	.-24     	; 0xf8c <__fp_powser+0x16>
     fa4:	ef 01       	movw	r28, r30
     fa6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__addsf3x>
     faa:	fe 01       	movw	r30, r28
     fac:	97 01       	movw	r18, r14
     fae:	a8 01       	movw	r20, r16
     fb0:	da 94       	dec	r13
     fb2:	69 f7       	brne	.-38     	; 0xf8e <__fp_powser+0x18>
     fb4:	df 90       	pop	r13
     fb6:	ef 90       	pop	r14
     fb8:	ff 90       	pop	r15
     fba:	0f 91       	pop	r16
     fbc:	1f 91       	pop	r17
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <atof>:
     fc4:	66 27       	eor	r22, r22
     fc6:	77 27       	eor	r23, r23
     fc8:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <strtod>

00000fcc <atoi>:
     fcc:	fc 01       	movw	r30, r24
     fce:	88 27       	eor	r24, r24
     fd0:	99 27       	eor	r25, r25
     fd2:	e8 94       	clt
     fd4:	21 91       	ld	r18, Z+
     fd6:	20 32       	cpi	r18, 0x20	; 32
     fd8:	e9 f3       	breq	.-6      	; 0xfd4 <atoi+0x8>
     fda:	29 30       	cpi	r18, 0x09	; 9
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <atoi+0x16>
     fde:	2e 30       	cpi	r18, 0x0E	; 14
     fe0:	c8 f3       	brcs	.-14     	; 0xfd4 <atoi+0x8>
     fe2:	2b 32       	cpi	r18, 0x2B	; 43
     fe4:	41 f0       	breq	.+16     	; 0xff6 <atoi+0x2a>
     fe6:	2d 32       	cpi	r18, 0x2D	; 45
     fe8:	39 f4       	brne	.+14     	; 0xff8 <atoi+0x2c>
     fea:	68 94       	set
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <atoi+0x2a>
     fee:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulhi_const_10>
     ff2:	82 0f       	add	r24, r18
     ff4:	91 1d       	adc	r25, r1
     ff6:	21 91       	ld	r18, Z+
     ff8:	20 53       	subi	r18, 0x30	; 48
     ffa:	2a 30       	cpi	r18, 0x0A	; 10
     ffc:	c0 f3       	brcs	.-16     	; 0xfee <atoi+0x22>
     ffe:	1e f4       	brtc	.+6      	; 0x1006 <atoi+0x3a>
    1000:	90 95       	com	r25
    1002:	81 95       	neg	r24
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__mulhi_const_10>:
    1008:	7a e0       	ldi	r23, 0x0A	; 10
    100a:	97 9f       	mul	r25, r23
    100c:	90 2d       	mov	r25, r0
    100e:	87 9f       	mul	r24, r23
    1010:	80 2d       	mov	r24, r0
    1012:	91 0d       	add	r25, r1
    1014:	11 24       	eor	r1, r1
    1016:	08 95       	ret

00001018 <strtod>:
    1018:	a0 e0       	ldi	r26, 0x00	; 0
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	f8 e0       	ldi	r31, 0x08	; 8
    1020:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__prologue_saves__+0xc>
    1024:	ec 01       	movw	r28, r24
    1026:	6b 01       	movw	r12, r22
    1028:	61 15       	cp	r22, r1
    102a:	71 05       	cpc	r23, r1
    102c:	19 f0       	breq	.+6      	; 0x1034 <strtod+0x1c>
    102e:	fb 01       	movw	r30, r22
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	7e 01       	movw	r14, r28
    1036:	ff ef       	ldi	r31, 0xFF	; 255
    1038:	ef 1a       	sub	r14, r31
    103a:	ff 0a       	sbc	r15, r31
    103c:	08 81       	ld	r16, Y
    103e:	80 2f       	mov	r24, r16
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <isspace>
    1046:	89 2b       	or	r24, r25
    1048:	11 f0       	breq	.+4      	; 0x104e <strtod+0x36>
    104a:	e7 01       	movw	r28, r14
    104c:	f3 cf       	rjmp	.-26     	; 0x1034 <strtod+0x1c>
    104e:	0d 32       	cpi	r16, 0x2D	; 45
    1050:	39 f4       	brne	.+14     	; 0x1060 <strtod+0x48>
    1052:	7e 01       	movw	r14, r28
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	e8 0e       	add	r14, r24
    1058:	f1 1c       	adc	r15, r1
    105a:	09 81       	ldd	r16, Y+1	; 0x01
    105c:	11 e0       	ldi	r17, 0x01	; 1
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <strtod+0x58>
    1060:	0b 32       	cpi	r16, 0x2B	; 43
    1062:	29 f4       	brne	.+10     	; 0x106e <strtod+0x56>
    1064:	7e 01       	movw	r14, r28
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	e9 0e       	add	r14, r25
    106a:	f1 1c       	adc	r15, r1
    106c:	09 81       	ldd	r16, Y+1	; 0x01
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	e7 01       	movw	r28, r14
    1072:	21 97       	sbiw	r28, 0x01	; 1
    1074:	43 e0       	ldi	r20, 0x03	; 3
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	66 eb       	ldi	r22, 0xB6	; 182
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	ce 01       	movw	r24, r28
    107e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <strncasecmp_P>
    1082:	89 2b       	or	r24, r25
    1084:	c1 f4       	brne	.+48     	; 0x10b6 <strtod+0x9e>
    1086:	23 96       	adiw	r28, 0x03	; 3
    1088:	45 e0       	ldi	r20, 0x05	; 5
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	61 eb       	ldi	r22, 0xB1	; 177
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	ce 01       	movw	r24, r28
    1092:	0e 94 63 09 	call	0x12c6	; 0x12c6 <strncasecmp_P>
    1096:	89 2b       	or	r24, r25
    1098:	09 f4       	brne	.+2      	; 0x109c <strtod+0x84>
    109a:	25 96       	adiw	r28, 0x05	; 5
    109c:	c1 14       	cp	r12, r1
    109e:	d1 04       	cpc	r13, r1
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <strtod+0x90>
    10a2:	f6 01       	movw	r30, r12
    10a4:	d1 83       	std	Z+1, r29	; 0x01
    10a6:	c0 83       	st	Z, r28
    10a8:	11 11       	cpse	r17, r1
    10aa:	f6 c0       	rjmp	.+492    	; 0x1298 <strtod+0x280>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	80 e8       	ldi	r24, 0x80	; 128
    10b2:	9f e7       	ldi	r25, 0x7F	; 127
    10b4:	fa c0       	rjmp	.+500    	; 0x12aa <strtod+0x292>
    10b6:	43 e0       	ldi	r20, 0x03	; 3
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	6e ea       	ldi	r22, 0xAE	; 174
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <strncasecmp_P>
    10c4:	89 2b       	or	r24, r25
    10c6:	59 f4       	brne	.+22     	; 0x10de <strtod+0xc6>
    10c8:	c1 14       	cp	r12, r1
    10ca:	d1 04       	cpc	r13, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <strtod+0xb8>
    10ce:	e9 c0       	rjmp	.+466    	; 0x12a2 <strtod+0x28a>
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	ef 0e       	add	r14, r31
    10d4:	f1 1c       	adc	r15, r1
    10d6:	f6 01       	movw	r30, r12
    10d8:	f1 82       	std	Z+1, r15	; 0x01
    10da:	e0 82       	st	Z, r14
    10dc:	e2 c0       	rjmp	.+452    	; 0x12a2 <strtod+0x28a>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	d0 e0       	ldi	r29, 0x00	; 0
    10e8:	f7 01       	movw	r30, r14
    10ea:	80 ed       	ldi	r24, 0xD0	; 208
    10ec:	a8 2e       	mov	r10, r24
    10ee:	a0 0e       	add	r10, r16
    10f0:	89 e0       	ldi	r24, 0x09	; 9
    10f2:	8a 15       	cp	r24, r10
    10f4:	30 f1       	brcs	.+76     	; 0x1142 <strtod+0x12a>
    10f6:	91 2f       	mov	r25, r17
    10f8:	92 60       	ori	r25, 0x02	; 2
    10fa:	b9 2e       	mov	r11, r25
    10fc:	81 2f       	mov	r24, r17
    10fe:	88 70       	andi	r24, 0x08	; 8
    1100:	12 ff       	sbrs	r17, 2
    1102:	04 c0       	rjmp	.+8      	; 0x110c <strtod+0xf4>
    1104:	81 11       	cpse	r24, r1
    1106:	24 c0       	rjmp	.+72     	; 0x1150 <strtod+0x138>
    1108:	21 96       	adiw	r28, 0x01	; 1
    110a:	22 c0       	rjmp	.+68     	; 0x1150 <strtod+0x138>
    110c:	81 11       	cpse	r24, r1
    110e:	21 97       	sbiw	r28, 0x01	; 1
    1110:	a5 e0       	ldi	r26, 0x05	; 5
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__muluhisi3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	aa 1f       	adc	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	9c 01       	movw	r18, r24
    1126:	ad 01       	movw	r20, r26
    1128:	2a 0d       	add	r18, r10
    112a:	31 1d       	adc	r19, r1
    112c:	41 1d       	adc	r20, r1
    112e:	51 1d       	adc	r21, r1
    1130:	28 39       	cpi	r18, 0x98	; 152
    1132:	89 e9       	ldi	r24, 0x99	; 153
    1134:	38 07       	cpc	r19, r24
    1136:	48 07       	cpc	r20, r24
    1138:	89 e1       	ldi	r24, 0x19	; 25
    113a:	58 07       	cpc	r21, r24
    113c:	48 f0       	brcs	.+18     	; 0x1150 <strtod+0x138>
    113e:	16 60       	ori	r17, 0x06	; 6
    1140:	06 c0       	rjmp	.+12     	; 0x114e <strtod+0x136>
    1142:	9e ef       	ldi	r25, 0xFE	; 254
    1144:	a9 12       	cpse	r10, r25
    1146:	0a c0       	rjmp	.+20     	; 0x115c <strtod+0x144>
    1148:	13 fd       	sbrc	r17, 3
    114a:	40 c0       	rjmp	.+128    	; 0x11cc <strtod+0x1b4>
    114c:	18 60       	ori	r17, 0x08	; 8
    114e:	b1 2e       	mov	r11, r17
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	e8 1a       	sub	r14, r24
    1154:	f8 0a       	sbc	r15, r24
    1156:	00 81       	ld	r16, Z
    1158:	1b 2d       	mov	r17, r11
    115a:	c6 cf       	rjmp	.-116    	; 0x10e8 <strtod+0xd0>
    115c:	80 2f       	mov	r24, r16
    115e:	8f 7d       	andi	r24, 0xDF	; 223
    1160:	85 34       	cpi	r24, 0x45	; 69
    1162:	a1 f5       	brne	.+104    	; 0x11cc <strtod+0x1b4>
    1164:	80 81       	ld	r24, Z
    1166:	8d 32       	cpi	r24, 0x2D	; 45
    1168:	11 f4       	brne	.+4      	; 0x116e <strtod+0x156>
    116a:	10 61       	ori	r17, 0x10	; 16
    116c:	06 c0       	rjmp	.+12     	; 0x117a <strtod+0x162>
    116e:	8b 32       	cpi	r24, 0x2B	; 43
    1170:	21 f0       	breq	.+8      	; 0x117a <strtod+0x162>
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <strtod+0x16a>
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	32 96       	adiw	r30, 0x02	; 2
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	80 53       	subi	r24, 0x30	; 48
    1184:	8a 30       	cpi	r24, 0x0A	; 10
    1186:	18 f0       	brcs	.+6      	; 0x118e <strtod+0x176>
    1188:	e6 1b       	sub	r30, r22
    118a:	f7 0b       	sbc	r31, r23
    118c:	1f c0       	rjmp	.+62     	; 0x11cc <strtod+0x1b4>
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	60 38       	cpi	r22, 0x80	; 128
    1194:	9c e0       	ldi	r25, 0x0C	; 12
    1196:	79 07       	cpc	r23, r25
    1198:	5c f4       	brge	.+22     	; 0x11b0 <strtod+0x198>
    119a:	db 01       	movw	r26, r22
    119c:	aa 0f       	add	r26, r26
    119e:	bb 1f       	adc	r27, r27
    11a0:	aa 0f       	add	r26, r26
    11a2:	bb 1f       	adc	r27, r27
    11a4:	6a 0f       	add	r22, r26
    11a6:	7b 1f       	adc	r23, r27
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	68 0f       	add	r22, r24
    11ae:	71 1d       	adc	r23, r1
    11b0:	31 96       	adiw	r30, 0x01	; 1
    11b2:	df 01       	movw	r26, r30
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	8c 91       	ld	r24, X
    11b8:	80 53       	subi	r24, 0x30	; 48
    11ba:	8a 30       	cpi	r24, 0x0A	; 10
    11bc:	50 f3       	brcs	.-44     	; 0x1192 <strtod+0x17a>
    11be:	14 ff       	sbrs	r17, 4
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <strtod+0x1b0>
    11c2:	71 95       	neg	r23
    11c4:	61 95       	neg	r22
    11c6:	71 09       	sbc	r23, r1
    11c8:	c6 0f       	add	r28, r22
    11ca:	d7 1f       	adc	r29, r23
    11cc:	11 ff       	sbrs	r17, 1
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <strtod+0x1c8>
    11d0:	c1 14       	cp	r12, r1
    11d2:	d1 04       	cpc	r13, r1
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <strtod+0x1c8>
    11d6:	cf 01       	movw	r24, r30
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f6 01       	movw	r30, r12
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	ca 01       	movw	r24, r20
    11e2:	b9 01       	movw	r22, r18
    11e4:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatunsisf>
    11e8:	21 2f       	mov	r18, r17
    11ea:	23 70       	andi	r18, 0x03	; 3
    11ec:	23 30       	cpi	r18, 0x03	; 3
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <strtod+0x1de>
    11f0:	4b 01       	movw	r8, r22
    11f2:	5c 01       	movw	r10, r24
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <strtod+0x1ea>
    11f6:	4b 01       	movw	r8, r22
    11f8:	5c 01       	movw	r10, r24
    11fa:	b7 fa       	bst	r11, 7
    11fc:	b0 94       	com	r11
    11fe:	b7 f8       	bld	r11, 7
    1200:	b0 94       	com	r11
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	c5 01       	movw	r24, r10
    120a:	b4 01       	movw	r22, r8
    120c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
    1210:	88 23       	and	r24, r24
    1212:	09 f4       	brne	.+2      	; 0x1216 <strtod+0x1fe>
    1214:	3e c0       	rjmp	.+124    	; 0x1292 <strtod+0x27a>
    1216:	d7 ff       	sbrs	r29, 7
    1218:	06 c0       	rjmp	.+12     	; 0x1226 <strtod+0x20e>
    121a:	d1 95       	neg	r29
    121c:	c1 95       	neg	r28
    121e:	d1 09       	sbc	r29, r1
    1220:	0d ec       	ldi	r16, 0xCD	; 205
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <strtod+0x212>
    1226:	05 ee       	ldi	r16, 0xE5	; 229
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	68 01       	movw	r12, r16
    122c:	f8 e1       	ldi	r31, 0x18	; 24
    122e:	cf 1a       	sub	r12, r31
    1230:	d1 08       	sbc	r13, r1
    1232:	90 e2       	ldi	r25, 0x20	; 32
    1234:	e9 2e       	mov	r14, r25
    1236:	f1 2c       	mov	r15, r1
    1238:	ce 15       	cp	r28, r14
    123a:	df 05       	cpc	r29, r15
    123c:	74 f0       	brlt	.+28     	; 0x125a <strtod+0x242>
    123e:	f8 01       	movw	r30, r16
    1240:	25 91       	lpm	r18, Z+
    1242:	35 91       	lpm	r19, Z+
    1244:	45 91       	lpm	r20, Z+
    1246:	54 91       	lpm	r21, Z
    1248:	c5 01       	movw	r24, r10
    124a:	b4 01       	movw	r22, r8
    124c:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
    1250:	4b 01       	movw	r8, r22
    1252:	5c 01       	movw	r10, r24
    1254:	ce 19       	sub	r28, r14
    1256:	df 09       	sbc	r29, r15
    1258:	ef cf       	rjmp	.-34     	; 0x1238 <strtod+0x220>
    125a:	04 50       	subi	r16, 0x04	; 4
    125c:	11 09       	sbc	r17, r1
    125e:	f5 94       	asr	r15
    1260:	e7 94       	ror	r14
    1262:	0c 15       	cp	r16, r12
    1264:	1d 05       	cpc	r17, r13
    1266:	41 f7       	brne	.-48     	; 0x1238 <strtod+0x220>
    1268:	8a 2d       	mov	r24, r10
    126a:	88 0f       	add	r24, r24
    126c:	8b 2d       	mov	r24, r11
    126e:	88 1f       	adc	r24, r24
    1270:	8f 3f       	cpi	r24, 0xFF	; 255
    1272:	49 f0       	breq	.+18     	; 0x1286 <strtod+0x26e>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	c5 01       	movw	r24, r10
    127c:	b4 01       	movw	r22, r8
    127e:	0e 94 8c 05 	call	0xb18	; 0xb18 <__cmpsf2>
    1282:	81 11       	cpse	r24, r1
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <strtod+0x27a>
    1286:	82 e2       	ldi	r24, 0x22	; 34
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <errno+0x1>
    128e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <errno>
    1292:	c5 01       	movw	r24, r10
    1294:	b4 01       	movw	r22, r8
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <strtod+0x292>
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <strtod+0x292>
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	9f e7       	ldi	r25, 0x7F	; 127
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	ec e0       	ldi	r30, 0x0C	; 12
    12b0:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__epilogue_restores__+0xc>

000012b4 <isspace>:
    12b4:	91 11       	cpse	r25, r1
    12b6:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__ctype_isfalse>
    12ba:	80 32       	cpi	r24, 0x20	; 32
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <isspace+0x10>
    12be:	89 50       	subi	r24, 0x09	; 9
    12c0:	85 50       	subi	r24, 0x05	; 5
    12c2:	c8 f7       	brcc	.-14     	; 0x12b6 <isspace+0x2>
    12c4:	08 95       	ret

000012c6 <strncasecmp_P>:
    12c6:	fb 01       	movw	r30, r22
    12c8:	dc 01       	movw	r26, r24
    12ca:	41 50       	subi	r20, 0x01	; 1
    12cc:	50 40       	sbci	r21, 0x00	; 0
    12ce:	88 f0       	brcs	.+34     	; 0x12f2 <strncasecmp_P+0x2c>
    12d0:	8d 91       	ld	r24, X+
    12d2:	81 34       	cpi	r24, 0x41	; 65
    12d4:	1c f0       	brlt	.+6      	; 0x12dc <strncasecmp_P+0x16>
    12d6:	8b 35       	cpi	r24, 0x5B	; 91
    12d8:	0c f4       	brge	.+2      	; 0x12dc <strncasecmp_P+0x16>
    12da:	80 5e       	subi	r24, 0xE0	; 224
    12dc:	65 91       	lpm	r22, Z+
    12de:	61 34       	cpi	r22, 0x41	; 65
    12e0:	1c f0       	brlt	.+6      	; 0x12e8 <strncasecmp_P+0x22>
    12e2:	6b 35       	cpi	r22, 0x5B	; 91
    12e4:	0c f4       	brge	.+2      	; 0x12e8 <strncasecmp_P+0x22>
    12e6:	60 5e       	subi	r22, 0xE0	; 224
    12e8:	86 1b       	sub	r24, r22
    12ea:	61 11       	cpse	r22, r1
    12ec:	71 f3       	breq	.-36     	; 0x12ca <strncasecmp_P+0x4>
    12ee:	99 0b       	sbc	r25, r25
    12f0:	08 95       	ret
    12f2:	88 1b       	sub	r24, r24
    12f4:	fc cf       	rjmp	.-8      	; 0x12ee <strncasecmp_P+0x28>

000012f6 <__ctype_isfalse>:
    12f6:	99 27       	eor	r25, r25
    12f8:	88 27       	eor	r24, r24

000012fa <__ctype_istrue>:
    12fa:	08 95       	ret

000012fc <__muluhisi3>:
    12fc:	0e 94 c0 09 	call	0x1380	; 0x1380 <__umulhisi3>
    1300:	a5 9f       	mul	r26, r21
    1302:	90 0d       	add	r25, r0
    1304:	b4 9f       	mul	r27, r20
    1306:	90 0d       	add	r25, r0
    1308:	a4 9f       	mul	r26, r20
    130a:	80 0d       	add	r24, r0
    130c:	91 1d       	adc	r25, r1
    130e:	11 24       	eor	r1, r1
    1310:	08 95       	ret

00001312 <__prologue_saves__>:
    1312:	2f 92       	push	r2
    1314:	3f 92       	push	r3
    1316:	4f 92       	push	r4
    1318:	5f 92       	push	r5
    131a:	6f 92       	push	r6
    131c:	7f 92       	push	r7
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	ca 1b       	sub	r28, r26
    133c:	db 0b       	sbc	r29, r27
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	09 94       	ijmp

0000134a <__epilogue_restores__>:
    134a:	2a 88       	ldd	r2, Y+18	; 0x12
    134c:	39 88       	ldd	r3, Y+17	; 0x11
    134e:	48 88       	ldd	r4, Y+16	; 0x10
    1350:	5f 84       	ldd	r5, Y+15	; 0x0f
    1352:	6e 84       	ldd	r6, Y+14	; 0x0e
    1354:	7d 84       	ldd	r7, Y+13	; 0x0d
    1356:	8c 84       	ldd	r8, Y+12	; 0x0c
    1358:	9b 84       	ldd	r9, Y+11	; 0x0b
    135a:	aa 84       	ldd	r10, Y+10	; 0x0a
    135c:	b9 84       	ldd	r11, Y+9	; 0x09
    135e:	c8 84       	ldd	r12, Y+8	; 0x08
    1360:	df 80       	ldd	r13, Y+7	; 0x07
    1362:	ee 80       	ldd	r14, Y+6	; 0x06
    1364:	fd 80       	ldd	r15, Y+5	; 0x05
    1366:	0c 81       	ldd	r16, Y+4	; 0x04
    1368:	1b 81       	ldd	r17, Y+3	; 0x03
    136a:	aa 81       	ldd	r26, Y+2	; 0x02
    136c:	b9 81       	ldd	r27, Y+1	; 0x01
    136e:	ce 0f       	add	r28, r30
    1370:	d1 1d       	adc	r29, r1
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	ed 01       	movw	r28, r26
    137e:	08 95       	ret

00001380 <__umulhisi3>:
    1380:	a2 9f       	mul	r26, r18
    1382:	b0 01       	movw	r22, r0
    1384:	b3 9f       	mul	r27, r19
    1386:	c0 01       	movw	r24, r0
    1388:	a3 9f       	mul	r26, r19
    138a:	70 0d       	add	r23, r0
    138c:	81 1d       	adc	r24, r1
    138e:	11 24       	eor	r1, r1
    1390:	91 1d       	adc	r25, r1
    1392:	b2 9f       	mul	r27, r18
    1394:	70 0d       	add	r23, r0
    1396:	81 1d       	adc	r24, r1
    1398:	11 24       	eor	r1, r1
    139a:	91 1d       	adc	r25, r1
    139c:	08 95       	ret

0000139e <_exit>:
    139e:	f8 94       	cli

000013a0 <__stop_program>:
    13a0:	ff cf       	rjmp	.-2      	; 0x13a0 <__stop_program>


PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000146e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000146e  00001502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008b  0080007a  0080007a  0000151c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ba  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af5  00000000  00000000  0000414b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <main+0x2ce>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	4e 41       	sbci	r20, 0x1E	; 30
      b0:	4e 49       	Address 0x000000b0 is out of bounds.
.word	0xffff	; ????

000000b1 <pstr_inity>:
      b1:	49 4e 49 54 59                                      INITY

000000b6 <pstr_inf>:
      b6:	49 4e 46                                            INF

000000b9 <pwr_m10>:
      b9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000d1 <pwr_p10>:
      d1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf e5       	ldi	r28, 0x5F	; 95
      f0:	d4 e0       	ldi	r29, 0x04	; 4
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	a0 e6       	ldi	r26, 0x60	; 96
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	ee e6       	ldi	r30, 0x6E	; 110
      fe:	f4 e1       	ldi	r31, 0x14	; 20
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	aa 37       	cpi	r26, 0x7A	; 122
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	aa e7       	ldi	r26, 0x7A	; 122
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 30       	cpi	r26, 0x05	; 5
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
     120:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <X_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double X_value (char* String)
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	2a 97       	sbiw	r28, 0x0a	; 10
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	ac 01       	movw	r20, r24
     13e:	fe 01       	movw	r30, r28
     140:	31 96       	adiw	r30, 0x01	; 1
     142:	ce 01       	movw	r24, r28
     144:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char X_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		X_v [i] = 0;
     146:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double X_value (char* String)
{
	int i = 0,j=0;
	char X_v[10];
	for (int i = 0 ; i < 10 ;i++)
     148:	8e 17       	cp	r24, r30
     14a:	9f 07       	cpc	r25, r31
     14c:	e1 f7       	brne	.-8      	; 0x146 <X_value+0x1e>
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
	{
		X_v [i] = 0;
	}
	while(i < 80)
	{
		if (String [i] == 'X'){
     156:	fa 01       	movw	r30, r20
     158:	e2 0f       	add	r30, r18
     15a:	f3 1f       	adc	r31, r19
     15c:	90 81       	ld	r25, Z
     15e:	98 35       	cpi	r25, 0x58	; 88
     160:	99 f4       	brne	.+38     	; 0x188 <X_value+0x60>
			X_v [j] = String[j+i+1];
     162:	f9 01       	movw	r30, r18
     164:	e6 0f       	add	r30, r22
     166:	f7 1f       	adc	r31, r23
     168:	e4 0f       	add	r30, r20
     16a:	f5 1f       	adc	r31, r21
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	a1 e0       	ldi	r26, 0x01	; 1
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	ac 0f       	add	r26, r28
     174:	bd 1f       	adc	r27, r29
     176:	a6 0f       	add	r26, r22
     178:	b7 1f       	adc	r27, r23
     17a:	8c 93       	st	X, r24
			if (String [j+i+2] == ' ')
     17c:	82 81       	ldd	r24, Z+2	; 0x02
     17e:	80 32       	cpi	r24, 0x20	; 32
     180:	41 f0       	breq	.+16     	; 0x192 <X_value+0x6a>
			break;
			j++;
     182:	6f 5f       	subi	r22, 0xFF	; 255
     184:	7f 4f       	sbci	r23, 0xFF	; 255
     186:	02 c0       	rjmp	.+4      	; 0x18c <X_value+0x64>
		}
		else
		i++;
     188:	2f 5f       	subi	r18, 0xFF	; 255
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
	char X_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		X_v [i] = 0;
	}
	while(i < 80)
     18c:	20 35       	cpi	r18, 0x50	; 80
     18e:	31 05       	cpc	r19, r1
     190:	14 f3       	brlt	.-60     	; 0x156 <X_value+0x2e>
			j++;
		}
		else
		i++;
	}
	return (atof(X_v));
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     19a:	2a 96       	adiw	r28, 0x0a	; 10
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <Y_value>:

double Y_value (char* String)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	2a 97       	sbiw	r28, 0x0a	; 10
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	ac 01       	movw	r20, r24
     1c2:	fe 01       	movw	r30, r28
     1c4:	31 96       	adiw	r30, 0x01	; 1
     1c6:	ce 01       	movw	r24, r28
     1c8:	0b 96       	adiw	r24, 0x0b	; 11
    int i = 0,j=0;
	char Y_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		Y_v [i] = 0;
     1ca:	11 92       	st	Z+, r1

double Y_value (char* String)
{
    int i = 0,j=0;
	char Y_v[10];
	for (int i = 0 ; i < 10 ;i++)
     1cc:	8e 17       	cp	r24, r30
     1ce:	9f 07       	cpc	r25, r31
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <Y_value+0x1e>
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
	{
		Y_v [i] = 0;
	}
    while(i < 80)
    {
        if (String [i] == 'Y'){
     1da:	fa 01       	movw	r30, r20
     1dc:	e2 0f       	add	r30, r18
     1de:	f3 1f       	adc	r31, r19
     1e0:	90 81       	ld	r25, Z
     1e2:	99 35       	cpi	r25, 0x59	; 89
     1e4:	99 f4       	brne	.+38     	; 0x20c <Y_value+0x60>
				Y_v [j] = String[j+i+1];
     1e6:	f9 01       	movw	r30, r18
     1e8:	e6 0f       	add	r30, r22
     1ea:	f7 1f       	adc	r31, r23
     1ec:	e4 0f       	add	r30, r20
     1ee:	f5 1f       	adc	r31, r21
     1f0:	81 81       	ldd	r24, Z+1	; 0x01
     1f2:	a1 e0       	ldi	r26, 0x01	; 1
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	ac 0f       	add	r26, r28
     1f8:	bd 1f       	adc	r27, r29
     1fa:	a6 0f       	add	r26, r22
     1fc:	b7 1f       	adc	r27, r23
     1fe:	8c 93       	st	X, r24
				if (String [j+i+2] == ' ')
     200:	82 81       	ldd	r24, Z+2	; 0x02
     202:	80 32       	cpi	r24, 0x20	; 32
     204:	41 f0       	breq	.+16     	; 0x216 <Y_value+0x6a>
				break;
				j++;
     206:	6f 5f       	subi	r22, 0xFF	; 255
     208:	7f 4f       	sbci	r23, 0xFF	; 255
     20a:	02 c0       	rjmp	.+4      	; 0x210 <Y_value+0x64>
		}
		else
		i++;
     20c:	2f 5f       	subi	r18, 0xFF	; 255
     20e:	3f 4f       	sbci	r19, 0xFF	; 255
	char Y_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		Y_v [i] = 0;
	}
    while(i < 80)
     210:	20 35       	cpi	r18, 0x50	; 80
     212:	31 05       	cpc	r19, r1
     214:	14 f3       	brlt	.-60     	; 0x1da <Y_value+0x2e>
				j++;
		}
		else
		i++;
    }
    return (atof(Y_v));
     216:	ce 01       	movw	r24, r28
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     21e:	2a 96       	adiw	r28, 0x0a	; 10
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <Z_value>:
double Z_value (char* String)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	2a 97       	sbiw	r28, 0x0a	; 10
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	f8 94       	cli
     23e:	de bf       	out	0x3e, r29	; 62
     240:	0f be       	out	0x3f, r0	; 63
     242:	cd bf       	out	0x3d, r28	; 61
     244:	ac 01       	movw	r20, r24
     246:	fe 01       	movw	r30, r28
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	ce 01       	movw	r24, r28
     24c:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char Z_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		Z_v [i] = 0;
     24e:	11 92       	st	Z+, r1
}
double Z_value (char* String)
{
	int i = 0,j=0;
	char Z_v[10];
	for (int i = 0 ; i < 10 ;i++)
     250:	8e 17       	cp	r24, r30
     252:	9f 07       	cpc	r25, r31
     254:	e1 f7       	brne	.-8      	; 0x24e <Z_value+0x1e>
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
	{
		Z_v [i] = 0;
	}
	while(i < 80)
	{
		if (String [i] == 'Z'){
     25e:	fa 01       	movw	r30, r20
     260:	e2 0f       	add	r30, r18
     262:	f3 1f       	adc	r31, r19
     264:	90 81       	ld	r25, Z
     266:	9a 35       	cpi	r25, 0x5A	; 90
     268:	99 f4       	brne	.+38     	; 0x290 <Z_value+0x60>
			Z_v [j] = String[j+i+1];
     26a:	f9 01       	movw	r30, r18
     26c:	e6 0f       	add	r30, r22
     26e:	f7 1f       	adc	r31, r23
     270:	e4 0f       	add	r30, r20
     272:	f5 1f       	adc	r31, r21
     274:	81 81       	ldd	r24, Z+1	; 0x01
     276:	a1 e0       	ldi	r26, 0x01	; 1
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	ac 0f       	add	r26, r28
     27c:	bd 1f       	adc	r27, r29
     27e:	a6 0f       	add	r26, r22
     280:	b7 1f       	adc	r27, r23
     282:	8c 93       	st	X, r24
			if (String [j+i+2] == ' ')
     284:	82 81       	ldd	r24, Z+2	; 0x02
     286:	80 32       	cpi	r24, 0x20	; 32
     288:	41 f0       	breq	.+16     	; 0x29a <Z_value+0x6a>
			break;
			j++;
     28a:	6f 5f       	subi	r22, 0xFF	; 255
     28c:	7f 4f       	sbci	r23, 0xFF	; 255
     28e:	02 c0       	rjmp	.+4      	; 0x294 <Z_value+0x64>
		}
		else
		i++;
     290:	2f 5f       	subi	r18, 0xFF	; 255
     292:	3f 4f       	sbci	r19, 0xFF	; 255
	char Z_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		Z_v [i] = 0;
	}
	while(i < 80)
     294:	20 35       	cpi	r18, 0x50	; 80
     296:	31 05       	cpc	r19, r1
     298:	14 f3       	brlt	.-60     	; 0x25e <Z_value+0x2e>
			j++;
		}
		else
		i++;
	}	
	return (atof(Z_v));
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     2a2:	2a 96       	adiw	r28, 0x0a	; 10
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <F_value>:
double F_value (char* String)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	2a 97       	sbiw	r28, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	ac 01       	movw	r20, r24
     2ca:	fe 01       	movw	r30, r28
     2cc:	31 96       	adiw	r30, 0x01	; 1
     2ce:	ce 01       	movw	r24, r28
     2d0:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char F_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		F_v [i] = 0;
     2d2:	11 92       	st	Z+, r1
}
double F_value (char* String)
{
	int i = 0,j=0;
	char F_v[10];
	for (int i = 0 ; i < 10 ;i++)
     2d4:	8e 17       	cp	r24, r30
     2d6:	9f 07       	cpc	r25, r31
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <F_value+0x1e>
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
	{
		F_v [i] = 0;
	}
	while(i < 80)
	{
		if (String [i] == 'F'){
     2e2:	fa 01       	movw	r30, r20
     2e4:	e2 0f       	add	r30, r18
     2e6:	f3 1f       	adc	r31, r19
     2e8:	90 81       	ld	r25, Z
     2ea:	96 34       	cpi	r25, 0x46	; 70
     2ec:	99 f4       	brne	.+38     	; 0x314 <F_value+0x60>
			F_v [j] = String[j+i+1];
     2ee:	f9 01       	movw	r30, r18
     2f0:	e6 0f       	add	r30, r22
     2f2:	f7 1f       	adc	r31, r23
     2f4:	e4 0f       	add	r30, r20
     2f6:	f5 1f       	adc	r31, r21
     2f8:	81 81       	ldd	r24, Z+1	; 0x01
     2fa:	a1 e0       	ldi	r26, 0x01	; 1
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	ac 0f       	add	r26, r28
     300:	bd 1f       	adc	r27, r29
     302:	a6 0f       	add	r26, r22
     304:	b7 1f       	adc	r27, r23
     306:	8c 93       	st	X, r24
			if (String [j+i+2] == ' ')
     308:	82 81       	ldd	r24, Z+2	; 0x02
     30a:	80 32       	cpi	r24, 0x20	; 32
     30c:	41 f0       	breq	.+16     	; 0x31e <F_value+0x6a>
			break;
			j++;
     30e:	6f 5f       	subi	r22, 0xFF	; 255
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	02 c0       	rjmp	.+4      	; 0x318 <F_value+0x64>
		}
		else
		i++;
     314:	2f 5f       	subi	r18, 0xFF	; 255
     316:	3f 4f       	sbci	r19, 0xFF	; 255
	char F_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		F_v [i] = 0;
	}
	while(i < 80)
     318:	20 35       	cpi	r18, 0x50	; 80
     31a:	31 05       	cpc	r19, r1
     31c:	14 f3       	brlt	.-60     	; 0x2e2 <F_value+0x2e>
			j++;
		}
		else
		i++;
	}
	return (atof(F_v));
     31e:	ce 01       	movw	r24, r28
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     326:	2a 96       	adiw	r28, 0x0a	; 10
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <S_value>:
double S_value (char* String)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	2a 97       	sbiw	r28, 0x0a	; 10
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	ac 01       	movw	r20, r24
     34e:	fe 01       	movw	r30, r28
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	ce 01       	movw	r24, r28
     354:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char S_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		S_v [i] = 0;
     356:	11 92       	st	Z+, r1
}
double S_value (char* String)
{
	int i = 0,j=0;
	char S_v[10];
	for (int i = 0 ; i < 10 ;i++)
     358:	8e 17       	cp	r24, r30
     35a:	9f 07       	cpc	r25, r31
     35c:	e1 f7       	brne	.-8      	; 0x356 <S_value+0x1e>
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
	{
		S_v [i] = 0;
	}
	while(i < 80)
	{
		if (String [i] == 'S'){
     366:	fa 01       	movw	r30, r20
     368:	e2 0f       	add	r30, r18
     36a:	f3 1f       	adc	r31, r19
     36c:	90 81       	ld	r25, Z
     36e:	93 35       	cpi	r25, 0x53	; 83
     370:	99 f4       	brne	.+38     	; 0x398 <S_value+0x60>
			S_v [j] = String[j+i+1];
     372:	f9 01       	movw	r30, r18
     374:	e6 0f       	add	r30, r22
     376:	f7 1f       	adc	r31, r23
     378:	e4 0f       	add	r30, r20
     37a:	f5 1f       	adc	r31, r21
     37c:	81 81       	ldd	r24, Z+1	; 0x01
     37e:	a1 e0       	ldi	r26, 0x01	; 1
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ac 0f       	add	r26, r28
     384:	bd 1f       	adc	r27, r29
     386:	a6 0f       	add	r26, r22
     388:	b7 1f       	adc	r27, r23
     38a:	8c 93       	st	X, r24
			if (String [j+i+2] == ' ')
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	80 32       	cpi	r24, 0x20	; 32
     390:	41 f0       	breq	.+16     	; 0x3a2 <S_value+0x6a>
			break;
			j++;
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	02 c0       	rjmp	.+4      	; 0x39c <S_value+0x64>
		}
		else
		i++;
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
	char S_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		S_v [i] = 0;
	}
	while(i < 80)
     39c:	20 35       	cpi	r18, 0x50	; 80
     39e:	31 05       	cpc	r19, r1
     3a0:	14 f3       	brlt	.-60     	; 0x366 <S_value+0x2e>
			j++;
		}
		else
		i++;
	}
	return (atof(S_v));
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     3aa:	2a 96       	adiw	r28, 0x0a	; 10
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <E_value>:
double E_value (char* String)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	2a 97       	sbiw	r28, 0x0a	; 10
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	ac 01       	movw	r20, r24
     3d2:	fe 01       	movw	r30, r28
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	ce 01       	movw	r24, r28
     3d8:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char E_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		E_v [i] = 0;
     3da:	11 92       	st	Z+, r1
}
double E_value (char* String)
{
	int i = 0,j=0;
	char E_v[10];
	for (int i = 0 ; i < 10 ;i++)
     3dc:	8e 17       	cp	r24, r30
     3de:	9f 07       	cpc	r25, r31
     3e0:	e1 f7       	brne	.-8      	; 0x3da <E_value+0x1e>
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		E_v [i] = 0;
	}
	while(i < 80)
	{
		if (String [i] == 'E'){
     3ea:	fa 01       	movw	r30, r20
     3ec:	e2 0f       	add	r30, r18
     3ee:	f3 1f       	adc	r31, r19
     3f0:	90 81       	ld	r25, Z
     3f2:	95 34       	cpi	r25, 0x45	; 69
     3f4:	99 f4       	brne	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			E_v [j] = String[j+i+1];
     3f6:	f9 01       	movw	r30, r18
     3f8:	e6 0f       	add	r30, r22
     3fa:	f7 1f       	adc	r31, r23
     3fc:	e4 0f       	add	r30, r20
     3fe:	f5 1f       	adc	r31, r21
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	a1 e0       	ldi	r26, 0x01	; 1
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	ac 0f       	add	r26, r28
     408:	bd 1f       	adc	r27, r29
     40a:	a6 0f       	add	r26, r22
     40c:	b7 1f       	adc	r27, r23
     40e:	8c 93       	st	X, r24
			if (String [j+i+2] == ' ')
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			break;
			j++;
     416:	6f 5f       	subi	r22, 0xFF	; 255
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		}
		else
		i++;
     41c:	2f 5f       	subi	r18, 0xFF	; 255
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
	char E_v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		E_v [i] = 0;
	}
	while(i < 80)
     420:	20 35       	cpi	r18, 0x50	; 80
     422:	31 05       	cpc	r19, r1
     424:	14 f3       	brlt	.-60     	; 0x3ea <E_value+0x2e>
			j++;
		}
		else
		i++;
	}
	return (atof(E_v));
     426:	ce 01       	movw	r24, r28
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	0e 94 48 08 	call	0x1090	; 0x1090 <atof>
}
     42e:	2a 96       	adiw	r28, 0x0a	; 10
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	ec 01       	movw	r28, r24
     44e:	6a 01       	movw	r12, r20
     450:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     452:	28 81       	ld	r18, Y
     454:	39 81       	ldd	r19, Y+1	; 0x01
     456:	4a 81       	ldd	r20, Y+2	; 0x02
     458:	5b 81       	ldd	r21, Y+3	; 0x03
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__subsf3>
    *current_pos = new_pos;
     462:	c8 82       	st	Y, r12
     464:	d9 82       	std	Y+1, r13	; 0x01
     466:	ea 82       	std	Y+2, r14	; 0x02
     468:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	08 95       	ret

00000478 <Init>:
			}
		}
	}
}
void Init(void){
	ADCSRA |= 0x87; //to active A/D pins
     478:	86 b1       	in	r24, 0x06	; 6
     47a:	87 68       	ori	r24, 0x87	; 135
     47c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     47e:	3e 9a       	sbi	0x07, 6	; 7
	DDRA &= ~(0<<PA0);// use PA0,1 as input for thermistor 
     480:	8a b3       	in	r24, 0x1a	; 26
     482:	8a bb       	out	0x1a, r24	; 26
	UART_INIT();
     484:	0e 94 48 05 	call	0xa90	; 0xa90 <UART_INIT>
     488:	08 95       	ret

0000048a <ADC_value>:
}
int ADC_value(void)
{
	ADMUX &= ~(1 << MUX0); // reset MUX0 to select ADC0
     48a:	38 98       	cbi	0x07, 0	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     48c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     48e:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     490:	34 9a       	sbi	0x06, 4	; 6
	value=ADC*(4.88E-3);		 // to convert D/A (the analoge volt) * (5/1024) = (the analoge volt)*0.00488
     492:	64 b1       	in	r22, 0x04	; 4
     494:	75 b1       	in	r23, 0x05	; 5
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
     49e:	28 e6       	ldi	r18, 0x68	; 104
     4a0:	38 ee       	ldi	r19, 0xE8	; 232
     4a2:	4f e9       	ldi	r20, 0x9F	; 159
     4a4:	5b e3       	ldi	r21, 0x3B	; 59
     4a6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     4aa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fixsfsi>
     4ae:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <value+0x1>
     4b2:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <value>
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     4b6:	84 b1       	in	r24, 0x04	; 4
     4b8:	95 b1       	in	r25, 0x05	; 5
}
     4ba:	08 95       	ret

000004bc <getTemp>:
double getTemp()
{
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
	Vo = ADC_value();
     4cc:	0e 94 45 02 	call	0x48a	; 0x48a <ADC_value>
     4d0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Vo+0x1>
     4d4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Vo>
	R2 = R1 * (1023.0 / (float)Vo - 1.0);
     4d8:	bc 01       	movw	r22, r24
     4da:	99 0f       	add	r25, r25
     4dc:	88 0b       	sbc	r24, r24
     4de:	99 0b       	sbc	r25, r25
     4e0:	0e 94 a1 06 	call	0xd42	; 0xd42 <__floatsisf>
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 ec       	ldi	r23, 0xC0	; 192
     4ec:	8f e7       	ldi	r24, 0x7F	; 127
     4ee:	94 e4       	ldi	r25, 0x44	; 68
     4f0:	0e 94 f7 05 	call	0xbee	; 0xbee <__divsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	0e 94 85 05 	call	0xb0a	; 0xb0a <__subsf3>
     500:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     504:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     508:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     50c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     510:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     514:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <R2>
     518:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <R2+0x1>
     51c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <R2+0x2>
     520:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <R2+0x3>
	logR2 = log(R2);
     524:	0e 94 5e 07 	call	0xebc	; 0xebc <log>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
     52c:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <logR2>
     530:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <logR2+0x1>
     534:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <logR2+0x2>
     538:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	T = T - 273.15;
     53c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     540:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     544:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     548:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     54c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     550:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     554:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     558:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     55c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     560:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     564:	4b 01       	movw	r8, r22
     566:	5c 01       	movw	r10, r24
     568:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     56c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     570:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     574:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     578:	c7 01       	movw	r24, r14
     57a:	b6 01       	movw	r22, r12
     57c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     588:	a7 01       	movw	r20, r14
     58a:	96 01       	movw	r18, r12
     58c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     590:	9b 01       	movw	r18, r22
     592:	ac 01       	movw	r20, r24
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e8       	ldi	r24, 0x80	; 128
     5a6:	9f e3       	ldi	r25, 0x3F	; 63
     5a8:	0e 94 f7 05 	call	0xbee	; 0xbee <__divsf3>
     5ac:	23 e3       	ldi	r18, 0x33	; 51
     5ae:	33 e9       	ldi	r19, 0x93	; 147
     5b0:	48 e8       	ldi	r20, 0x88	; 136
     5b2:	53 e4       	ldi	r21, 0x43	; 67
     5b4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__subsf3>
     5b8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <T>
     5bc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <T+0x1>
     5c0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <T+0x2>
     5c4:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <T+0x3>
	return (T);
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	bf 90       	pop	r11
     5d2:	af 90       	pop	r10
     5d4:	9f 90       	pop	r9
     5d6:	8f 90       	pop	r8
     5d8:	08 95       	ret

000005da <main>:
bool status; // to control the start and stop button
uint8_t d = 100; //no. of steps per 1mm
volatile int value; // to storage the instantaneous change in ADC converter

int main(void)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <main+0x6>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <main+0x8>
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
    Init();
     5e8:	0e 94 3c 02 	call	0x478	; 0x478 <Init>
     5ec:	0c ee       	ldi	r16, 0xEC	; 236
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	ec e9       	ldi	r30, 0x9C	; 156
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
	char arr[5];
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
     5f4:	11 92       	st	Z+, r1
	double value_3;
	int val = 0;
	char arr[5];
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
     5f6:	0e 17       	cp	r16, r30
     5f8:	1f 07       	cpc	r17, r31
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <main+0x1a>
		{
			String [i] = 0;
		}
		for (int i = 0 ; i < 5 ;i++)
		{
			arr [i] = 0;
     5fc:	19 82       	std	Y+1, r1	; 0x01
     5fe:	1a 82       	std	Y+2, r1	; 0x02
     600:	1b 82       	std	Y+3, r1	; 0x03
     602:	1c 82       	std	Y+4, r1	; 0x04
     604:	1d 82       	std	Y+5, r1	; 0x05
		}
		Recive_Data(String);
     606:	8c e9       	ldi	r24, 0x9C	; 156
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 67 05 	call	0xace	; 0xace <Recive_Data>
		i = 1;
		if (String[0] == 'M')
     60e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <String>
     612:	8d 34       	cpi	r24, 0x4D	; 77
     614:	09 f0       	breq	.+2      	; 0x618 <main+0x3e>
     616:	43 c0       	rjmp	.+134    	; 0x69e <main+0xc4>
		{
			while(String[i] != ';')
     618:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <String+0x1>
     61c:	8b 33       	cpi	r24, 0x3B	; 59
     61e:	41 f0       	breq	.+16     	; 0x630 <main+0x56>
     620:	de 01       	movw	r26, r28
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	ee e9       	ldi	r30, 0x9E	; 158
     626:	f0 e0       	ldi	r31, 0x00	; 0
			{
				arr[j] = String[i];
     628:	8d 93       	st	X+, r24
		}
		Recive_Data(String);
		i = 1;
		if (String[0] == 'M')
		{
			while(String[i] != ';')
     62a:	81 91       	ld	r24, Z+
     62c:	8b 33       	cpi	r24, 0x3B	; 59
     62e:	e1 f7       	brne	.-8      	; 0x628 <main+0x4e>
			{
				arr[j] = String[i];
				j += 1;
				i += 1;
			}
			val = atoi(arr);
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	0e 94 4c 08 	call	0x1098	; 0x1098 <atoi>
			j = 0;
			if (val == 105)
     638:	89 36       	cpi	r24, 0x69	; 105
     63a:	91 05       	cpc	r25, r1
     63c:	29 f4       	brne	.+10     	; 0x648 <main+0x6e>
			{
				Transmit_Data("ok");
     63e:	80 e7       	ldi	r24, 0x70	; 112
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     646:	d4 cf       	rjmp	.-88     	; 0x5f0 <main+0x16>
			}
			if (val == 104)
     648:	88 36       	cpi	r24, 0x68	; 104
     64a:	91 05       	cpc	r25, r1
     64c:	89 f4       	brne	.+34     	; 0x670 <main+0x96>
			{
				S = S_value(String);
     64e:	8c e9       	ldi	r24, 0x9C	; 156
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 9c 01 	call	0x338	; 0x338 <S_value>
     656:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <S>
     65a:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <S+0x1>
     65e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <S+0x2>
     662:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <S+0x3>
				Transmit_Data("ok");
     666:	80 e7       	ldi	r24, 0x70	; 112
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     66e:	c0 cf       	rjmp	.-128    	; 0x5f0 <main+0x16>
			}
			if (val == 109)
     670:	8d 36       	cpi	r24, 0x6D	; 109
     672:	91 05       	cpc	r25, r1
     674:	09 f0       	breq	.+2      	; 0x678 <main+0x9e>
     676:	bc cf       	rjmp	.-136    	; 0x5f0 <main+0x16>
			{
				while(getTemp() != S);
     678:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getTemp>
     67c:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <S>
     680:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <S+0x1>
     684:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <S+0x2>
     688:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <S+0x3>
     68c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     690:	81 11       	cpse	r24, r1
     692:	f2 cf       	rjmp	.-28     	; 0x678 <main+0x9e>
				Transmit_Data("ok");
     694:	80 e7       	ldi	r24, 0x70	; 112
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     69c:	a9 cf       	rjmp	.-174    	; 0x5f0 <main+0x16>
			}
		}
		else if (String[0] == 'G')
     69e:	87 34       	cpi	r24, 0x47	; 71
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <main+0xca>
     6a2:	a6 cf       	rjmp	.-180    	; 0x5f0 <main+0x16>
		{
			while(String[i] != ' ')
     6a4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <String+0x1>
     6a8:	80 32       	cpi	r24, 0x20	; 32
     6aa:	41 f0       	breq	.+16     	; 0x6bc <main+0xe2>
     6ac:	de 01       	movw	r26, r28
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	ee e9       	ldi	r30, 0x9E	; 158
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
			{
				arr[j] = String[i];
     6b4:	8d 93       	st	X+, r24
				Transmit_Data("ok");
			}
		}
		else if (String[0] == 'G')
		{
			while(String[i] != ' ')
     6b6:	81 91       	ld	r24, Z+
     6b8:	80 32       	cpi	r24, 0x20	; 32
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0xda>
			{
				arr[j] = String[i];
				j += 1;
				i += 1;
			}
			val = atoi(arr);
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	0e 94 4c 08 	call	0x1098	; 0x1098 <atoi>
			j = 0;
			if (val == '1')
     6c4:	81 33       	cpi	r24, 0x31	; 49
     6c6:	91 05       	cpc	r25, r1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0xf2>
     6ca:	fa c0       	rjmp	.+500    	; 0x8c0 <main+0x2e6>
			{
				value_1 = X_value(String);           //extract first value
     6cc:	8c e9       	ldi	r24, 0x9C	; 156
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 94 00 	call	0x128	; 0x128 <X_value>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
				value_2 = Y_value (String); //call function to extract second value
     6d8:	8c e9       	ldi	r24, 0x9C	; 156
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Y_value>
     6e0:	4b 01       	movw	r8, r22
     6e2:	5c 01       	movw	r10, r24
				value_3 = Z_value (String); //call function to extract third value
     6e4:	8c e9       	ldi	r24, 0x9C	; 156
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 18 01 	call	0x230	; 0x230 <Z_value>
     6ec:	2b 01       	movw	r4, r22
     6ee:	3c 01       	movw	r6, r24
				E = E_value(String);
     6f0:	8c e9       	ldi	r24, 0x9C	; 156
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 de 01 	call	0x3bc	; 0x3bc <E_value>
     6f8:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <E>
     6fc:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <E+0x1>
     700:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <E+0x2>
     704:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <E+0x3>
				if ((E && value_1 && value_2 && value_3) == 0)
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	09 f4       	brne	.+2      	; 0x718 <main+0x13e>
     716:	a2 c1       	rjmp	.+836    	; 0xa5c <main+0x482>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     726:	88 23       	and	r24, r24
     728:	09 f4       	brne	.+2      	; 0x72c <main+0x152>
     72a:	98 c1       	rjmp	.+816    	; 0xa5c <main+0x482>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	a9 01       	movw	r20, r18
     732:	c5 01       	movw	r24, r10
     734:	b4 01       	movw	r22, r8
     736:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     73a:	88 23       	and	r24, r24
     73c:	09 f4       	brne	.+2      	; 0x740 <main+0x166>
     73e:	8e c1       	rjmp	.+796    	; 0xa5c <main+0x482>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	c3 01       	movw	r24, r6
     748:	b2 01       	movw	r22, r4
     74a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     74e:	81 11       	cpse	r24, r1
     750:	92 c1       	rjmp	.+804    	; 0xa76 <main+0x49c>
     752:	84 c1       	rjmp	.+776    	; 0xa5c <main+0x482>
				{
					if (F_value(String) != 0)
					{
						Fe = F_value(String);
     754:	8c e9       	ldi	r24, 0x9C	; 156
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     75c:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <Fe>
     760:	70 93 f5 00 	sts	0x00F5, r23	; 0x8000f5 <Fe+0x1>
     764:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Fe+0x2>
     768:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <Fe+0x3>
     76c:	0c c0       	rjmp	.+24     	; 0x786 <main+0x1ac>
				} 
				else
				{
					if (F_value(String) != 0)
					{
						F = F_value(String);
     76e:	8c e9       	ldi	r24, 0x9C	; 156
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     776:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <F>
     77a:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <F+0x1>
     77e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <F+0x2>
     782:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <F+0x3>
					}
				}
				if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	46 ed       	ldi	r20, 0xD6	; 214
     78c:	52 e4       	ldi	r21, 0x42	; 66
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     796:	18 16       	cp	r1, r24
     798:	0c f4       	brge	.+2      	; 0x79c <main+0x1c2>
     79a:	2a cf       	rjmp	.-428    	; 0x5f0 <main+0x16>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	46 ed       	ldi	r20, 0xD6	; 214
     7a2:	52 e4       	ldi	r21, 0x42	; 66
     7a4:	c5 01       	movw	r24, r10
     7a6:	b4 01       	movw	r22, r8
     7a8:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     7ac:	18 16       	cp	r1, r24
     7ae:	0c f4       	brge	.+2      	; 0x7b2 <main+0x1d8>
     7b0:	1f cf       	rjmp	.-450    	; 0x5f0 <main+0x16>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	4a ef       	ldi	r20, 0xFA	; 250
     7b8:	53 e4       	ldi	r21, 0x43	; 67
     7ba:	c3 01       	movw	r24, r6
     7bc:	b2 01       	movw	r22, r4
     7be:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     7c2:	18 16       	cp	r1, r24
     7c4:	0c f4       	brge	.+2      	; 0x7c8 <main+0x1ee>
     7c6:	14 cf       	rjmp	.-472    	; 0x5f0 <main+0x16>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	46 ed       	ldi	r20, 0xD6	; 214
     7ce:	52 ec       	ldi	r21, 0xC2	; 194
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     7d8:	88 23       	and	r24, r24
     7da:	0c f4       	brge	.+2      	; 0x7de <main+0x204>
     7dc:	09 cf       	rjmp	.-494    	; 0x5f0 <main+0x16>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	46 ed       	ldi	r20, 0xD6	; 214
     7e4:	52 ec       	ldi	r21, 0xC2	; 194
     7e6:	c5 01       	movw	r24, r10
     7e8:	b4 01       	movw	r22, r8
     7ea:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     7ee:	88 23       	and	r24, r24
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <main+0x21a>
     7f2:	fe ce       	rjmp	.-516    	; 0x5f0 <main+0x16>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	a9 01       	movw	r20, r18
     7fa:	c3 01       	movw	r24, r6
     7fc:	b2 01       	movw	r22, r4
     7fe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     802:	88 23       	and	r24, r24
     804:	0c f4       	brge	.+2      	; 0x808 <main+0x22e>
     806:	f4 ce       	rjmp	.-536    	; 0x5f0 <main+0x16>

				{
					x = sub_function (&old_val_1, value_1);     //call function to extract first step
     808:	b7 01       	movw	r22, r14
     80a:	a6 01       	movw	r20, r12
     80c:	82 e8       	ldi	r24, 0x82	; 130
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     814:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <x>
     818:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <x+0x1>
     81c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <x+0x2>
     820:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <x+0x3>
					y = sub_function (&old_val_2, value_2);    //call function to extract second step
     824:	b5 01       	movw	r22, r10
     826:	a4 01       	movw	r20, r8
     828:	8e e7       	ldi	r24, 0x7E	; 126
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     830:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <y>
     834:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <y+0x1>
     838:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <y+0x2>
     83c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <y+0x3>
					z = sub_function (&old_val_3, value_3);    //call function to extract third step
     840:	b3 01       	movw	r22, r6
     842:	a2 01       	movw	r20, r4
     844:	8a e7       	ldi	r24, 0x7A	; 122
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     84c:	2b 01       	movw	r4, r22
     84e:	3c 01       	movw	r6, r24
     850:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <z>
     854:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <z+0x1>
     858:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <z+0x2>
     85c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <z+0x3>
					value_1 = 0;
					value_2 = 0;
					value_3 = 0;
					while (!(x && y && z == 0));
     860:	c0 90 86 00 	lds	r12, 0x0086	; 0x800086 <x>
     864:	d0 90 87 00 	lds	r13, 0x0087	; 0x800087 <x+0x1>
     868:	e0 90 88 00 	lds	r14, 0x0088	; 0x800088 <x+0x2>
     86c:	f0 90 89 00 	lds	r15, 0x0089	; 0x800089 <x+0x3>
     870:	80 90 98 00 	lds	r8, 0x0098	; 0x800098 <y>
     874:	90 90 99 00 	lds	r9, 0x0099	; 0x800099 <y+0x1>
     878:	a0 90 9a 00 	lds	r10, 0x009A	; 0x80009a <y+0x2>
     87c:	b0 90 9b 00 	lds	r11, 0x009B	; 0x80009b <y+0x3>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     88e:	88 23       	and	r24, r24
     890:	b9 f3       	breq	.-18     	; 0x880 <main+0x2a6>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	71 f3       	breq	.-36     	; 0x880 <main+0x2a6>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	c3 01       	movw	r24, r6
     8ac:	b2 01       	movw	r22, r4
     8ae:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     8b2:	81 11       	cpse	r24, r1
     8b4:	e5 cf       	rjmp	.-54     	; 0x880 <main+0x2a6>
					Transmit_Data("ok");
     8b6:	80 e7       	ldi	r24, 0x70	; 112
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     8be:	98 ce       	rjmp	.-720    	; 0x5f0 <main+0x16>
				}
				}
				if (val == '0')
     8c0:	c0 97       	sbiw	r24, 0x30	; 48
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <main+0x2ec>
     8c4:	95 ce       	rjmp	.-726    	; 0x5f0 <main+0x16>
				{
					value_1 = X_value(String);           //extract first value
     8c6:	8c e9       	ldi	r24, 0x9C	; 156
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 94 00 	call	0x128	; 0x128 <X_value>
     8ce:	2b 01       	movw	r4, r22
     8d0:	3c 01       	movw	r6, r24
					value_2 = Y_value (String); //call function to extract second value
     8d2:	8c e9       	ldi	r24, 0x9C	; 156
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Y_value>
     8da:	4b 01       	movw	r8, r22
     8dc:	5c 01       	movw	r10, r24
					value_3 = Z_value (String); //call function to extract third value
     8de:	8c e9       	ldi	r24, 0x9C	; 156
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 18 01 	call	0x230	; 0x230 <Z_value>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
					if (F_value(String) != 0)
     8ea:	8c e9       	ldi	r24, 0x9C	; 156
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	a9 01       	movw	r20, r18
     8f8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	61 f0       	breq	.+24     	; 0x918 <main+0x33e>
					{
						F = F_value(String);
     900:	8c e9       	ldi	r24, 0x9C	; 156
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     908:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <F>
     90c:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <F+0x1>
     910:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <F+0x2>
     914:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <F+0x3>
					}
					if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	46 ed       	ldi	r20, 0xD6	; 214
     91e:	52 e4       	ldi	r21, 0x42	; 66
     920:	c3 01       	movw	r24, r6
     922:	b2 01       	movw	r22, r4
     924:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     928:	18 16       	cp	r1, r24
     92a:	0c f4       	brge	.+2      	; 0x92e <main+0x354>
     92c:	92 c0       	rjmp	.+292    	; 0xa52 <main+0x478>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	46 ed       	ldi	r20, 0xD6	; 214
     934:	52 e4       	ldi	r21, 0x42	; 66
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     93e:	18 16       	cp	r1, r24
     940:	0c f4       	brge	.+2      	; 0x944 <main+0x36a>
     942:	87 c0       	rjmp	.+270    	; 0xa52 <main+0x478>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4a ef       	ldi	r20, 0xFA	; 250
     94a:	53 e4       	ldi	r21, 0x43	; 67
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	0e 94 51 07 	call	0xea2	; 0xea2 <__gesf2>
     954:	18 16       	cp	r1, r24
     956:	0c f4       	brge	.+2      	; 0x95a <main+0x380>
     958:	7c c0       	rjmp	.+248    	; 0xa52 <main+0x478>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	46 ed       	ldi	r20, 0xD6	; 214
     960:	52 ec       	ldi	r21, 0xC2	; 194
     962:	c3 01       	movw	r24, r6
     964:	b2 01       	movw	r22, r4
     966:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     96a:	88 23       	and	r24, r24
     96c:	0c f4       	brge	.+2      	; 0x970 <main+0x396>
     96e:	71 c0       	rjmp	.+226    	; 0xa52 <main+0x478>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	46 ed       	ldi	r20, 0xD6	; 214
     976:	52 ec       	ldi	r21, 0xC2	; 194
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     980:	88 23       	and	r24, r24
     982:	0c f4       	brge	.+2      	; 0x986 <main+0x3ac>
     984:	66 c0       	rjmp	.+204    	; 0xa52 <main+0x478>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	0c f4       	brge	.+2      	; 0x99a <main+0x3c0>
     998:	5c c0       	rjmp	.+184    	; 0xa52 <main+0x478>

					{
						x = sub_function (&old_val_1, value_1);     //call function to extract first step
     99a:	b3 01       	movw	r22, r6
     99c:	a2 01       	movw	r20, r4
     99e:	82 e8       	ldi	r24, 0x82	; 130
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     9a6:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <x>
     9aa:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <x+0x1>
     9ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <x+0x2>
     9b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <x+0x3>
						y = sub_function (&old_val_2, value_2);    //call function to extract second step
     9b6:	b5 01       	movw	r22, r10
     9b8:	a4 01       	movw	r20, r8
     9ba:	8e e7       	ldi	r24, 0x7E	; 126
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     9c2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <y>
     9c6:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <y+0x1>
     9ca:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <y+0x2>
     9ce:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <y+0x3>
						z = sub_function (&old_val_3, value_3);    //call function to extract third step
     9d2:	b7 01       	movw	r22, r14
     9d4:	a6 01       	movw	r20, r12
     9d6:	8a e7       	ldi	r24, 0x7A	; 122
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 20 02 	call	0x440	; 0x440 <sub_function>
     9de:	2b 01       	movw	r4, r22
     9e0:	3c 01       	movw	r6, r24
     9e2:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <z>
     9e6:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <z+0x1>
     9ea:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <z+0x2>
     9ee:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <z+0x3>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						while (!(x && y && z == 0));
     9f2:	c0 90 86 00 	lds	r12, 0x0086	; 0x800086 <x>
     9f6:	d0 90 87 00 	lds	r13, 0x0087	; 0x800087 <x+0x1>
     9fa:	e0 90 88 00 	lds	r14, 0x0088	; 0x800088 <x+0x2>
     9fe:	f0 90 89 00 	lds	r15, 0x0089	; 0x800089 <x+0x3>
     a02:	80 90 98 00 	lds	r8, 0x0098	; 0x800098 <y>
     a06:	90 90 99 00 	lds	r9, 0x0099	; 0x800099 <y+0x1>
     a0a:	a0 90 9a 00 	lds	r10, 0x009A	; 0x80009a <y+0x2>
     a0e:	b0 90 9b 00 	lds	r11, 0x009B	; 0x80009b <y+0x3>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	a9 01       	movw	r20, r18
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     a20:	88 23       	and	r24, r24
     a22:	b9 f3       	breq	.-18     	; 0xa12 <main+0x438>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     a32:	88 23       	and	r24, r24
     a34:	71 f3       	breq	.-36     	; 0xa12 <main+0x438>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	a9 01       	movw	r20, r18
     a3c:	c3 01       	movw	r24, r6
     a3e:	b2 01       	movw	r22, r4
     a40:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     a44:	81 11       	cpse	r24, r1
     a46:	e5 cf       	rjmp	.-54     	; 0xa12 <main+0x438>
						Transmit_Data("ok");
     a48:	80 e7       	ldi	r24, 0x70	; 112
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     a50:	cf cd       	rjmp	.-1122   	; 0x5f0 <main+0x16>
					}
				else
				Transmit_Data("error");
     a52:	83 e7       	ldi	r24, 0x73	; 115
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 58 05 	call	0xab0	; 0xab0 <Transmit_Data>
     a5a:	ca cd       	rjmp	.-1132   	; 0x5f0 <main+0x16>
				value_2 = Y_value (String); //call function to extract second value
				value_3 = Z_value (String); //call function to extract third value
				E = E_value(String);
				if ((E && value_1 && value_2 && value_3) == 0)
				{
					if (F_value(String) != 0)
     a5c:	8c e9       	ldi	r24, 0x9C	; 156
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <main+0x49a>
     a72:	89 ce       	rjmp	.-750    	; 0x786 <main+0x1ac>
     a74:	6f ce       	rjmp	.-802    	; 0x754 <main+0x17a>
						Fe = F_value(String);
					}
				} 
				else
				{
					if (F_value(String) != 0)
     a76:	8c e9       	ldi	r24, 0x9C	; 156
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <F_value>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	a9 01       	movw	r20, r18
     a84:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
     a88:	88 23       	and	r24, r24
     a8a:	09 f4       	brne	.+2      	; 0xa8e <main+0x4b4>
     a8c:	7c ce       	rjmp	.-776    	; 0x786 <main+0x1ac>
     a8e:	6f ce       	rjmp	.-802    	; 0x76e <main+0x194>

00000a90 <UART_INIT>:

void UART_INIT()
{
	long t;
	t =Crystal();
	UBRRL =  (uint8_t) (t);
     a90:	87 e6       	ldi	r24, 0x67	; 103
     a92:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(t>>8);
     a94:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
     a9a:	86 e8       	ldi	r24, 0x86	; 134
     a9c:	80 bd       	out	0x20, r24	; 32
     a9e:	08 95       	ret

00000aa0 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (!(UCSRA & (1<<5)));    //waits until 'bin 5' equal to 1, becomes Empty.
     aa0:	5d 9b       	sbis	0x0b, 5	; 11
     aa2:	fe cf       	rjmp	.-4      	; 0xaa0 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
     aa4:	8c b9       	out	0x0c, r24	; 12
     aa6:	08 95       	ret

00000aa8 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));   //waits until 'bin7' equal to 1, have unread data in the receive buffer
     aa8:	5f 9b       	sbis	0x0b, 7	; 11
     aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <Recive_Char>
	return UDR;                  //Receive one character
     aac:	8c b1       	in	r24, 0x0c	; 12
}
     aae:	08 95       	ret

00000ab0 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
	while(*ptr_string)
     ab6:	88 81       	ld	r24, Y
     ab8:	88 23       	and	r24, r24
     aba:	31 f0       	breq	.+12     	; 0xac8 <Transmit_Data+0x18>
     abc:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
     abe:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));   //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return UDR;                  //Receive one character
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
     ac2:	89 91       	ld	r24, Y+
     ac4:	81 11       	cpse	r24, r1
     ac6:	fb cf       	rjmp	.-10     	; 0xabe <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
     ad6:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
     ad8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
     adc:	8b 33       	cpi	r24, 0x3B	; 59
     ade:	29 f4       	brne	.+10     	; 0xaea <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
     ae0:	f8 01       	movw	r30, r16
     ae2:	ec 0f       	add	r30, r28
     ae4:	f1 1d       	adc	r31, r1
     ae6:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
     ae8:	0c c0       	rjmp	.+24     	; 0xb02 <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
     aea:	88 30       	cpi	r24, 0x08	; 8
     aec:	21 f4       	brne	.+8      	; 0xaf6 <Recive_Data+0x28>
     aee:	cc 23       	and	r28, r28
     af0:	11 f0       	breq	.+4      	; 0xaf6 <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
     af2:	c1 50       	subi	r28, 0x01	; 1
     af4:	f1 cf       	rjmp	.-30     	; 0xad8 <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
     af6:	f8 01       	movw	r30, r16
     af8:	ec 0f       	add	r30, r28
     afa:	f1 1d       	adc	r31, r1
     afc:	80 83       	st	Z, r24
	             len++;
     afe:	cf 5f       	subi	r28, 0xFF	; 255
     b00:	eb cf       	rjmp	.-42     	; 0xad8 <Recive_Data+0xa>
	         }
	 	}

	
}
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <__subsf3>:
     b0a:	50 58       	subi	r21, 0x80	; 128

00000b0c <__addsf3>:
     b0c:	bb 27       	eor	r27, r27
     b0e:	aa 27       	eor	r26, r26
     b10:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__addsf3x>
     b14:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
     b18:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
     b1c:	38 f0       	brcs	.+14     	; 0xb2c <__addsf3+0x20>
     b1e:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
     b22:	20 f0       	brcs	.+8      	; 0xb2c <__addsf3+0x20>
     b24:	39 f4       	brne	.+14     	; 0xb34 <__addsf3+0x28>
     b26:	9f 3f       	cpi	r25, 0xFF	; 255
     b28:	19 f4       	brne	.+6      	; 0xb30 <__addsf3+0x24>
     b2a:	26 f4       	brtc	.+8      	; 0xb34 <__addsf3+0x28>
     b2c:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
     b30:	0e f4       	brtc	.+2      	; 0xb34 <__addsf3+0x28>
     b32:	e0 95       	com	r30
     b34:	e7 fb       	bst	r30, 7
     b36:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>

00000b3a <__addsf3x>:
     b3a:	e9 2f       	mov	r30, r25
     b3c:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_split3>
     b40:	58 f3       	brcs	.-42     	; 0xb18 <__addsf3+0xc>
     b42:	ba 17       	cp	r27, r26
     b44:	62 07       	cpc	r22, r18
     b46:	73 07       	cpc	r23, r19
     b48:	84 07       	cpc	r24, r20
     b4a:	95 07       	cpc	r25, r21
     b4c:	20 f0       	brcs	.+8      	; 0xb56 <__addsf3x+0x1c>
     b4e:	79 f4       	brne	.+30     	; 0xb6e <__addsf3x+0x34>
     b50:	a6 f5       	brtc	.+104    	; 0xbba <__addsf3x+0x80>
     b52:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_zero>
     b56:	0e f4       	brtc	.+2      	; 0xb5a <__addsf3x+0x20>
     b58:	e0 95       	com	r30
     b5a:	0b 2e       	mov	r0, r27
     b5c:	ba 2f       	mov	r27, r26
     b5e:	a0 2d       	mov	r26, r0
     b60:	0b 01       	movw	r0, r22
     b62:	b9 01       	movw	r22, r18
     b64:	90 01       	movw	r18, r0
     b66:	0c 01       	movw	r0, r24
     b68:	ca 01       	movw	r24, r20
     b6a:	a0 01       	movw	r20, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	ff 27       	eor	r31, r31
     b70:	59 1b       	sub	r21, r25
     b72:	99 f0       	breq	.+38     	; 0xb9a <__addsf3x+0x60>
     b74:	59 3f       	cpi	r21, 0xF9	; 249
     b76:	50 f4       	brcc	.+20     	; 0xb8c <__addsf3x+0x52>
     b78:	50 3e       	cpi	r21, 0xE0	; 224
     b7a:	68 f1       	brcs	.+90     	; 0xbd6 <__addsf3x+0x9c>
     b7c:	1a 16       	cp	r1, r26
     b7e:	f0 40       	sbci	r31, 0x00	; 0
     b80:	a2 2f       	mov	r26, r18
     b82:	23 2f       	mov	r18, r19
     b84:	34 2f       	mov	r19, r20
     b86:	44 27       	eor	r20, r20
     b88:	58 5f       	subi	r21, 0xF8	; 248
     b8a:	f3 cf       	rjmp	.-26     	; 0xb72 <__addsf3x+0x38>
     b8c:	46 95       	lsr	r20
     b8e:	37 95       	ror	r19
     b90:	27 95       	ror	r18
     b92:	a7 95       	ror	r26
     b94:	f0 40       	sbci	r31, 0x00	; 0
     b96:	53 95       	inc	r21
     b98:	c9 f7       	brne	.-14     	; 0xb8c <__addsf3x+0x52>
     b9a:	7e f4       	brtc	.+30     	; 0xbba <__addsf3x+0x80>
     b9c:	1f 16       	cp	r1, r31
     b9e:	ba 0b       	sbc	r27, r26
     ba0:	62 0b       	sbc	r22, r18
     ba2:	73 0b       	sbc	r23, r19
     ba4:	84 0b       	sbc	r24, r20
     ba6:	ba f0       	brmi	.+46     	; 0xbd6 <__addsf3x+0x9c>
     ba8:	91 50       	subi	r25, 0x01	; 1
     baa:	a1 f0       	breq	.+40     	; 0xbd4 <__addsf3x+0x9a>
     bac:	ff 0f       	add	r31, r31
     bae:	bb 1f       	adc	r27, r27
     bb0:	66 1f       	adc	r22, r22
     bb2:	77 1f       	adc	r23, r23
     bb4:	88 1f       	adc	r24, r24
     bb6:	c2 f7       	brpl	.-16     	; 0xba8 <__addsf3x+0x6e>
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <__addsf3x+0x9c>
     bba:	ba 0f       	add	r27, r26
     bbc:	62 1f       	adc	r22, r18
     bbe:	73 1f       	adc	r23, r19
     bc0:	84 1f       	adc	r24, r20
     bc2:	48 f4       	brcc	.+18     	; 0xbd6 <__addsf3x+0x9c>
     bc4:	87 95       	ror	r24
     bc6:	77 95       	ror	r23
     bc8:	67 95       	ror	r22
     bca:	b7 95       	ror	r27
     bcc:	f7 95       	ror	r31
     bce:	9e 3f       	cpi	r25, 0xFE	; 254
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <__addsf3x+0x9a>
     bd2:	b0 cf       	rjmp	.-160    	; 0xb34 <__addsf3+0x28>
     bd4:	93 95       	inc	r25
     bd6:	88 0f       	add	r24, r24
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <__addsf3x+0xa2>
     bda:	99 27       	eor	r25, r25
     bdc:	ee 0f       	add	r30, r30
     bde:	97 95       	ror	r25
     be0:	87 95       	ror	r24
     be2:	08 95       	ret

00000be4 <__cmpsf2>:
     be4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_cmp>
     be8:	08 f4       	brcc	.+2      	; 0xbec <__cmpsf2+0x8>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret

00000bee <__divsf3>:
     bee:	0e 94 0b 06 	call	0xc16	; 0xc16 <__divsf3x>
     bf2:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
     bf6:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
     bfa:	58 f0       	brcs	.+22     	; 0xc12 <__divsf3+0x24>
     bfc:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
     c00:	40 f0       	brcs	.+16     	; 0xc12 <__divsf3+0x24>
     c02:	29 f4       	brne	.+10     	; 0xc0e <__divsf3+0x20>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	29 f0       	breq	.+10     	; 0xc12 <__divsf3+0x24>
     c08:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
     c0c:	51 11       	cpse	r21, r1
     c0e:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_szero>
     c12:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>

00000c16 <__divsf3x>:
     c16:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_split3>
     c1a:	68 f3       	brcs	.-38     	; 0xbf6 <__divsf3+0x8>

00000c1c <__divsf3_pse>:
     c1c:	99 23       	and	r25, r25
     c1e:	b1 f3       	breq	.-20     	; 0xc0c <__divsf3+0x1e>
     c20:	55 23       	and	r21, r21
     c22:	91 f3       	breq	.-28     	; 0xc08 <__divsf3+0x1a>
     c24:	95 1b       	sub	r25, r21
     c26:	55 0b       	sbc	r21, r21
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	62 17       	cp	r22, r18
     c2e:	73 07       	cpc	r23, r19
     c30:	84 07       	cpc	r24, r20
     c32:	38 f0       	brcs	.+14     	; 0xc42 <__divsf3_pse+0x26>
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	aa 1f       	adc	r26, r26
     c40:	a9 f3       	breq	.-22     	; 0xc2c <__divsf3_pse+0x10>
     c42:	35 d0       	rcall	.+106    	; 0xcae <__divsf3_pse+0x92>
     c44:	0e 2e       	mov	r0, r30
     c46:	3a f0       	brmi	.+14     	; 0xc56 <__divsf3_pse+0x3a>
     c48:	e0 e8       	ldi	r30, 0x80	; 128
     c4a:	32 d0       	rcall	.+100    	; 0xcb0 <__divsf3_pse+0x94>
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	50 40       	sbci	r21, 0x00	; 0
     c50:	e6 95       	lsr	r30
     c52:	00 1c       	adc	r0, r0
     c54:	ca f7       	brpl	.-14     	; 0xc48 <__divsf3_pse+0x2c>
     c56:	2b d0       	rcall	.+86     	; 0xcae <__divsf3_pse+0x92>
     c58:	fe 2f       	mov	r31, r30
     c5a:	29 d0       	rcall	.+82     	; 0xcae <__divsf3_pse+0x92>
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	bb 1f       	adc	r27, r27
     c64:	26 17       	cp	r18, r22
     c66:	37 07       	cpc	r19, r23
     c68:	48 07       	cpc	r20, r24
     c6a:	ab 07       	cpc	r26, r27
     c6c:	b0 e8       	ldi	r27, 0x80	; 128
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__divsf3_pse+0x56>
     c70:	bb 0b       	sbc	r27, r27
     c72:	80 2d       	mov	r24, r0
     c74:	bf 01       	movw	r22, r30
     c76:	ff 27       	eor	r31, r31
     c78:	93 58       	subi	r25, 0x83	; 131
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	3a f0       	brmi	.+14     	; 0xc8c <__divsf3_pse+0x70>
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	51 05       	cpc	r21, r1
     c82:	78 f0       	brcs	.+30     	; 0xca2 <__divsf3_pse+0x86>
     c84:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
     c88:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_szero>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	e4 f3       	brlt	.-8      	; 0xc88 <__divsf3_pse+0x6c>
     c90:	98 3e       	cpi	r25, 0xE8	; 232
     c92:	d4 f3       	brlt	.-12     	; 0xc88 <__divsf3_pse+0x6c>
     c94:	86 95       	lsr	r24
     c96:	77 95       	ror	r23
     c98:	67 95       	ror	r22
     c9a:	b7 95       	ror	r27
     c9c:	f7 95       	ror	r31
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	c9 f7       	brne	.-14     	; 0xc94 <__divsf3_pse+0x78>
     ca2:	88 0f       	add	r24, r24
     ca4:	91 1d       	adc	r25, r1
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	97 f9       	bld	r25, 7
     cac:	08 95       	ret
     cae:	e1 e0       	ldi	r30, 0x01	; 1
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	bb 1f       	adc	r27, r27
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	ba 07       	cpc	r27, r26
     cc0:	20 f0       	brcs	.+8      	; 0xcca <__divsf3_pse+0xae>
     cc2:	62 1b       	sub	r22, r18
     cc4:	73 0b       	sbc	r23, r19
     cc6:	84 0b       	sbc	r24, r20
     cc8:	ba 0b       	sbc	r27, r26
     cca:	ee 1f       	adc	r30, r30
     ccc:	88 f7       	brcc	.-30     	; 0xcb0 <__divsf3_pse+0x94>
     cce:	e0 95       	com	r30
     cd0:	08 95       	ret

00000cd2 <__fixsfsi>:
     cd2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
     cd6:	68 94       	set
     cd8:	b1 11       	cpse	r27, r1
     cda:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_szero>
     cde:	08 95       	ret

00000ce0 <__fixunssfsi>:
     ce0:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_splitA>
     ce4:	88 f0       	brcs	.+34     	; 0xd08 <__fixunssfsi+0x28>
     ce6:	9f 57       	subi	r25, 0x7F	; 127
     ce8:	98 f0       	brcs	.+38     	; 0xd10 <__fixunssfsi+0x30>
     cea:	b9 2f       	mov	r27, r25
     cec:	99 27       	eor	r25, r25
     cee:	b7 51       	subi	r27, 0x17	; 23
     cf0:	b0 f0       	brcs	.+44     	; 0xd1e <__fixunssfsi+0x3e>
     cf2:	e1 f0       	breq	.+56     	; 0xd2c <__fixunssfsi+0x4c>
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	88 1f       	adc	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	1a f0       	brmi	.+6      	; 0xd04 <__fixunssfsi+0x24>
     cfe:	ba 95       	dec	r27
     d00:	c9 f7       	brne	.-14     	; 0xcf4 <__fixunssfsi+0x14>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <__fixunssfsi+0x4c>
     d04:	b1 30       	cpi	r27, 0x01	; 1
     d06:	91 f0       	breq	.+36     	; 0xd2c <__fixunssfsi+0x4c>
     d08:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_zero>
     d0c:	b1 e0       	ldi	r27, 0x01	; 1
     d0e:	08 95       	ret
     d10:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_zero>
     d14:	67 2f       	mov	r22, r23
     d16:	78 2f       	mov	r23, r24
     d18:	88 27       	eor	r24, r24
     d1a:	b8 5f       	subi	r27, 0xF8	; 248
     d1c:	39 f0       	breq	.+14     	; 0xd2c <__fixunssfsi+0x4c>
     d1e:	b9 3f       	cpi	r27, 0xF9	; 249
     d20:	cc f3       	brlt	.-14     	; 0xd14 <__fixunssfsi+0x34>
     d22:	86 95       	lsr	r24
     d24:	77 95       	ror	r23
     d26:	67 95       	ror	r22
     d28:	b3 95       	inc	r27
     d2a:	d9 f7       	brne	.-10     	; 0xd22 <__fixunssfsi+0x42>
     d2c:	3e f4       	brtc	.+14     	; 0xd3c <__fixunssfsi+0x5c>
     d2e:	90 95       	com	r25
     d30:	80 95       	com	r24
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__floatunsisf>:
     d3e:	e8 94       	clt
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__floatsisf+0x12>

00000d42 <__floatsisf>:
     d42:	97 fb       	bst	r25, 7
     d44:	3e f4       	brtc	.+14     	; 0xd54 <__floatsisf+0x12>
     d46:	90 95       	com	r25
     d48:	80 95       	com	r24
     d4a:	70 95       	com	r23
     d4c:	61 95       	neg	r22
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	99 23       	and	r25, r25
     d56:	a9 f0       	breq	.+42     	; 0xd82 <__floatsisf+0x40>
     d58:	f9 2f       	mov	r31, r25
     d5a:	96 e9       	ldi	r25, 0x96	; 150
     d5c:	bb 27       	eor	r27, r27
     d5e:	93 95       	inc	r25
     d60:	f6 95       	lsr	r31
     d62:	87 95       	ror	r24
     d64:	77 95       	ror	r23
     d66:	67 95       	ror	r22
     d68:	b7 95       	ror	r27
     d6a:	f1 11       	cpse	r31, r1
     d6c:	f8 cf       	rjmp	.-16     	; 0xd5e <__floatsisf+0x1c>
     d6e:	fa f4       	brpl	.+62     	; 0xdae <__floatsisf+0x6c>
     d70:	bb 0f       	add	r27, r27
     d72:	11 f4       	brne	.+4      	; 0xd78 <__floatsisf+0x36>
     d74:	60 ff       	sbrs	r22, 0
     d76:	1b c0       	rjmp	.+54     	; 0xdae <__floatsisf+0x6c>
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	16 c0       	rjmp	.+44     	; 0xdae <__floatsisf+0x6c>
     d82:	88 23       	and	r24, r24
     d84:	11 f0       	breq	.+4      	; 0xd8a <__floatsisf+0x48>
     d86:	96 e9       	ldi	r25, 0x96	; 150
     d88:	11 c0       	rjmp	.+34     	; 0xdac <__floatsisf+0x6a>
     d8a:	77 23       	and	r23, r23
     d8c:	21 f0       	breq	.+8      	; 0xd96 <__floatsisf+0x54>
     d8e:	9e e8       	ldi	r25, 0x8E	; 142
     d90:	87 2f       	mov	r24, r23
     d92:	76 2f       	mov	r23, r22
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <__floatsisf+0x5e>
     d96:	66 23       	and	r22, r22
     d98:	71 f0       	breq	.+28     	; 0xdb6 <__floatsisf+0x74>
     d9a:	96 e8       	ldi	r25, 0x86	; 134
     d9c:	86 2f       	mov	r24, r22
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	2a f0       	brmi	.+10     	; 0xdae <__floatsisf+0x6c>
     da4:	9a 95       	dec	r25
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	da f7       	brpl	.-10     	; 0xda4 <__floatsisf+0x62>
     dae:	88 0f       	add	r24, r24
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret

00000db8 <__fp_cmp>:
     db8:	99 0f       	add	r25, r25
     dba:	00 08       	sbc	r0, r0
     dbc:	55 0f       	add	r21, r21
     dbe:	aa 0b       	sbc	r26, r26
     dc0:	e0 e8       	ldi	r30, 0x80	; 128
     dc2:	fe ef       	ldi	r31, 0xFE	; 254
     dc4:	16 16       	cp	r1, r22
     dc6:	17 06       	cpc	r1, r23
     dc8:	e8 07       	cpc	r30, r24
     dca:	f9 07       	cpc	r31, r25
     dcc:	c0 f0       	brcs	.+48     	; 0xdfe <__fp_cmp+0x46>
     dce:	12 16       	cp	r1, r18
     dd0:	13 06       	cpc	r1, r19
     dd2:	e4 07       	cpc	r30, r20
     dd4:	f5 07       	cpc	r31, r21
     dd6:	98 f0       	brcs	.+38     	; 0xdfe <__fp_cmp+0x46>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	95 0b       	sbc	r25, r21
     de0:	39 f4       	brne	.+14     	; 0xdf0 <__fp_cmp+0x38>
     de2:	0a 26       	eor	r0, r26
     de4:	61 f0       	breq	.+24     	; 0xdfe <__fp_cmp+0x46>
     de6:	23 2b       	or	r18, r19
     de8:	24 2b       	or	r18, r20
     dea:	25 2b       	or	r18, r21
     dec:	21 f4       	brne	.+8      	; 0xdf6 <__fp_cmp+0x3e>
     dee:	08 95       	ret
     df0:	0a 26       	eor	r0, r26
     df2:	09 f4       	brne	.+2      	; 0xdf6 <__fp_cmp+0x3e>
     df4:	a1 40       	sbci	r26, 0x01	; 1
     df6:	a6 95       	lsr	r26
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	81 1d       	adc	r24, r1
     dfc:	81 1d       	adc	r24, r1
     dfe:	08 95       	ret

00000e00 <__fp_inf>:
     e00:	97 f9       	bld	r25, 7
     e02:	9f 67       	ori	r25, 0x7F	; 127
     e04:	80 e8       	ldi	r24, 0x80	; 128
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	08 95       	ret

00000e0c <__fp_nan>:
     e0c:	9f ef       	ldi	r25, 0xFF	; 255
     e0e:	80 ec       	ldi	r24, 0xC0	; 192
     e10:	08 95       	ret

00000e12 <__fp_pscA>:
     e12:	00 24       	eor	r0, r0
     e14:	0a 94       	dec	r0
     e16:	16 16       	cp	r1, r22
     e18:	17 06       	cpc	r1, r23
     e1a:	18 06       	cpc	r1, r24
     e1c:	09 06       	cpc	r0, r25
     e1e:	08 95       	ret

00000e20 <__fp_pscB>:
     e20:	00 24       	eor	r0, r0
     e22:	0a 94       	dec	r0
     e24:	12 16       	cp	r1, r18
     e26:	13 06       	cpc	r1, r19
     e28:	14 06       	cpc	r1, r20
     e2a:	05 06       	cpc	r0, r21
     e2c:	08 95       	ret

00000e2e <__fp_round>:
     e2e:	09 2e       	mov	r0, r25
     e30:	03 94       	inc	r0
     e32:	00 0c       	add	r0, r0
     e34:	11 f4       	brne	.+4      	; 0xe3a <__fp_round+0xc>
     e36:	88 23       	and	r24, r24
     e38:	52 f0       	brmi	.+20     	; 0xe4e <__fp_round+0x20>
     e3a:	bb 0f       	add	r27, r27
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fp_round+0x20>
     e3e:	bf 2b       	or	r27, r31
     e40:	11 f4       	brne	.+4      	; 0xe46 <__fp_round+0x18>
     e42:	60 ff       	sbrs	r22, 0
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <__fp_round+0x20>
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	8f 4f       	sbci	r24, 0xFF	; 255
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	08 95       	ret

00000e50 <__fp_split3>:
     e50:	57 fd       	sbrc	r21, 7
     e52:	90 58       	subi	r25, 0x80	; 128
     e54:	44 0f       	add	r20, r20
     e56:	55 1f       	adc	r21, r21
     e58:	59 f0       	breq	.+22     	; 0xe70 <__fp_splitA+0x10>
     e5a:	5f 3f       	cpi	r21, 0xFF	; 255
     e5c:	71 f0       	breq	.+28     	; 0xe7a <__fp_splitA+0x1a>
     e5e:	47 95       	ror	r20

00000e60 <__fp_splitA>:
     e60:	88 0f       	add	r24, r24
     e62:	97 fb       	bst	r25, 7
     e64:	99 1f       	adc	r25, r25
     e66:	61 f0       	breq	.+24     	; 0xe80 <__fp_splitA+0x20>
     e68:	9f 3f       	cpi	r25, 0xFF	; 255
     e6a:	79 f0       	breq	.+30     	; 0xe8a <__fp_splitA+0x2a>
     e6c:	87 95       	ror	r24
     e6e:	08 95       	ret
     e70:	12 16       	cp	r1, r18
     e72:	13 06       	cpc	r1, r19
     e74:	14 06       	cpc	r1, r20
     e76:	55 1f       	adc	r21, r21
     e78:	f2 cf       	rjmp	.-28     	; 0xe5e <__fp_split3+0xe>
     e7a:	46 95       	lsr	r20
     e7c:	f1 df       	rcall	.-30     	; 0xe60 <__fp_splitA>
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <__fp_splitA+0x30>
     e80:	16 16       	cp	r1, r22
     e82:	17 06       	cpc	r1, r23
     e84:	18 06       	cpc	r1, r24
     e86:	99 1f       	adc	r25, r25
     e88:	f1 cf       	rjmp	.-30     	; 0xe6c <__fp_splitA+0xc>
     e8a:	86 95       	lsr	r24
     e8c:	71 05       	cpc	r23, r1
     e8e:	61 05       	cpc	r22, r1
     e90:	08 94       	sec
     e92:	08 95       	ret

00000e94 <__fp_zero>:
     e94:	e8 94       	clt

00000e96 <__fp_szero>:
     e96:	bb 27       	eor	r27, r27
     e98:	66 27       	eor	r22, r22
     e9a:	77 27       	eor	r23, r23
     e9c:	cb 01       	movw	r24, r22
     e9e:	97 f9       	bld	r25, 7
     ea0:	08 95       	ret

00000ea2 <__gesf2>:
     ea2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_cmp>
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <__gesf2+0x8>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	08 95       	ret
     eac:	16 f0       	brts	.+4      	; 0xeb2 <__gesf2+0x10>
     eae:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_mpack>
     eb2:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
     eb6:	68 94       	set
     eb8:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>

00000ebc <log>:
     ebc:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_splitA>
     ec0:	a8 f3       	brcs	.-22     	; 0xeac <__gesf2+0xa>
     ec2:	99 23       	and	r25, r25
     ec4:	c1 f3       	breq	.-16     	; 0xeb6 <__gesf2+0x14>
     ec6:	ae f3       	brts	.-22     	; 0xeb2 <__gesf2+0x10>
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	1f 93       	push	r17
     ece:	0f 93       	push	r16
     ed0:	ff 92       	push	r15
     ed2:	c9 2f       	mov	r28, r25
     ed4:	dd 27       	eor	r29, r29
     ed6:	88 23       	and	r24, r24
     ed8:	2a f0       	brmi	.+10     	; 0xee4 <log+0x28>
     eda:	21 97       	sbiw	r28, 0x01	; 1
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	88 1f       	adc	r24, r24
     ee2:	da f7       	brpl	.-10     	; 0xeda <log+0x1e>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f eb       	ldi	r21, 0xBF	; 191
     eec:	9f e3       	ldi	r25, 0x3F	; 63
     eee:	88 39       	cpi	r24, 0x98	; 152
     ef0:	20 f0       	brcs	.+8      	; 0xefa <log+0x3e>
     ef2:	80 3e       	cpi	r24, 0xE0	; 224
     ef4:	38 f0       	brcs	.+14     	; 0xf04 <log+0x48>
     ef6:	21 96       	adiw	r28, 0x01	; 1
     ef8:	8f 77       	andi	r24, 0x7F	; 127
     efa:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     efe:	e4 e5       	ldi	r30, 0x54	; 84
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <log+0x50>
     f04:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     f08:	e1 e8       	ldi	r30, 0x81	; 129
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_powser>
     f10:	8b 01       	movw	r16, r22
     f12:	be 01       	movw	r22, r28
     f14:	ec 01       	movw	r28, r24
     f16:	fb 2e       	mov	r15, r27
     f18:	6f 57       	subi	r22, 0x7F	; 127
     f1a:	71 09       	sbc	r23, r1
     f1c:	75 95       	asr	r23
     f1e:	77 1f       	adc	r23, r23
     f20:	88 0b       	sbc	r24, r24
     f22:	99 0b       	sbc	r25, r25
     f24:	0e 94 a1 06 	call	0xd42	; 0xd42 <__floatsisf>
     f28:	28 e1       	ldi	r18, 0x18	; 24
     f2a:	32 e7       	ldi	r19, 0x72	; 114
     f2c:	41 e3       	ldi	r20, 0x31	; 49
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 b9 07 	call	0xf72	; 0xf72 <__mulsf3x>
     f34:	af 2d       	mov	r26, r15
     f36:	98 01       	movw	r18, r16
     f38:	ae 01       	movw	r20, r28
     f3a:	ff 90       	pop	r15
     f3c:	0f 91       	pop	r16
     f3e:	1f 91       	pop	r17
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__addsf3x>
     f48:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>

00000f4c <__mulsf3>:
     f4c:	0e 94 b9 07 	call	0xf72	; 0xf72 <__mulsf3x>
     f50:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
     f54:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
     f58:	38 f0       	brcs	.+14     	; 0xf68 <__mulsf3+0x1c>
     f5a:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <__mulsf3+0x1c>
     f60:	95 23       	and	r25, r21
     f62:	11 f0       	breq	.+4      	; 0xf68 <__mulsf3+0x1c>
     f64:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
     f68:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
     f6c:	11 24       	eor	r1, r1
     f6e:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_szero>

00000f72 <__mulsf3x>:
     f72:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_split3>
     f76:	70 f3       	brcs	.-36     	; 0xf54 <__mulsf3+0x8>

00000f78 <__mulsf3_pse>:
     f78:	95 9f       	mul	r25, r21
     f7a:	c1 f3       	breq	.-16     	; 0xf6c <__mulsf3+0x20>
     f7c:	95 0f       	add	r25, r21
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	55 1f       	adc	r21, r21
     f82:	62 9f       	mul	r22, r18
     f84:	f0 01       	movw	r30, r0
     f86:	72 9f       	mul	r23, r18
     f88:	bb 27       	eor	r27, r27
     f8a:	f0 0d       	add	r31, r0
     f8c:	b1 1d       	adc	r27, r1
     f8e:	63 9f       	mul	r22, r19
     f90:	aa 27       	eor	r26, r26
     f92:	f0 0d       	add	r31, r0
     f94:	b1 1d       	adc	r27, r1
     f96:	aa 1f       	adc	r26, r26
     f98:	64 9f       	mul	r22, r20
     f9a:	66 27       	eor	r22, r22
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	66 1f       	adc	r22, r22
     fa2:	82 9f       	mul	r24, r18
     fa4:	22 27       	eor	r18, r18
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	62 1f       	adc	r22, r18
     fac:	73 9f       	mul	r23, r19
     fae:	b0 0d       	add	r27, r0
     fb0:	a1 1d       	adc	r26, r1
     fb2:	62 1f       	adc	r22, r18
     fb4:	83 9f       	mul	r24, r19
     fb6:	a0 0d       	add	r26, r0
     fb8:	61 1d       	adc	r22, r1
     fba:	22 1f       	adc	r18, r18
     fbc:	74 9f       	mul	r23, r20
     fbe:	33 27       	eor	r19, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	23 1f       	adc	r18, r19
     fc6:	84 9f       	mul	r24, r20
     fc8:	60 0d       	add	r22, r0
     fca:	21 1d       	adc	r18, r1
     fcc:	82 2f       	mov	r24, r18
     fce:	76 2f       	mov	r23, r22
     fd0:	6a 2f       	mov	r22, r26
     fd2:	11 24       	eor	r1, r1
     fd4:	9f 57       	subi	r25, 0x7F	; 127
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	9a f0       	brmi	.+38     	; 0x1000 <__mulsf3_pse+0x88>
     fda:	f1 f0       	breq	.+60     	; 0x1018 <__mulsf3_pse+0xa0>
     fdc:	88 23       	and	r24, r24
     fde:	4a f0       	brmi	.+18     	; 0xff2 <__mulsf3_pse+0x7a>
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	bb 1f       	adc	r27, r27
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	50 40       	sbci	r21, 0x00	; 0
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__mulsf3_pse+0x64>
     ff2:	9e 3f       	cpi	r25, 0xFE	; 254
     ff4:	51 05       	cpc	r21, r1
     ff6:	80 f0       	brcs	.+32     	; 0x1018 <__mulsf3_pse+0xa0>
     ff8:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
     ffc:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_szero>
    1000:	5f 3f       	cpi	r21, 0xFF	; 255
    1002:	e4 f3       	brlt	.-8      	; 0xffc <__mulsf3_pse+0x84>
    1004:	98 3e       	cpi	r25, 0xE8	; 232
    1006:	d4 f3       	brlt	.-12     	; 0xffc <__mulsf3_pse+0x84>
    1008:	86 95       	lsr	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	b7 95       	ror	r27
    1010:	f7 95       	ror	r31
    1012:	e7 95       	ror	r30
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	c1 f7       	brne	.-16     	; 0x1008 <__mulsf3_pse+0x90>
    1018:	fe 2b       	or	r31, r30
    101a:	88 0f       	add	r24, r24
    101c:	91 1d       	adc	r25, r1
    101e:	96 95       	lsr	r25
    1020:	87 95       	ror	r24
    1022:	97 f9       	bld	r25, 7
    1024:	08 95       	ret

00001026 <__fp_mpack>:
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	31 f0       	breq	.+12     	; 0x1036 <__fp_mpack_finite+0xc>

0000102a <__fp_mpack_finite>:
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	20 f4       	brcc	.+8      	; 0x1036 <__fp_mpack_finite+0xc>
    102e:	87 95       	ror	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	88 0f       	add	r24, r24
    1038:	91 1d       	adc	r25, r1
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__fp_powser>:
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	1f 93       	push	r17
    1048:	0f 93       	push	r16
    104a:	ff 92       	push	r15
    104c:	ef 92       	push	r14
    104e:	df 92       	push	r13
    1050:	7b 01       	movw	r14, r22
    1052:	8c 01       	movw	r16, r24
    1054:	68 94       	set
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <__fp_powser+0x22>
    1058:	da 2e       	mov	r13, r26
    105a:	ef 01       	movw	r28, r30
    105c:	0e 94 b9 07 	call	0xf72	; 0xf72 <__mulsf3x>
    1060:	fe 01       	movw	r30, r28
    1062:	e8 94       	clt
    1064:	a5 91       	lpm	r26, Z+
    1066:	25 91       	lpm	r18, Z+
    1068:	35 91       	lpm	r19, Z+
    106a:	45 91       	lpm	r20, Z+
    106c:	55 91       	lpm	r21, Z+
    106e:	a6 f3       	brts	.-24     	; 0x1058 <__fp_powser+0x16>
    1070:	ef 01       	movw	r28, r30
    1072:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__addsf3x>
    1076:	fe 01       	movw	r30, r28
    1078:	97 01       	movw	r18, r14
    107a:	a8 01       	movw	r20, r16
    107c:	da 94       	dec	r13
    107e:	69 f7       	brne	.-38     	; 0x105a <__fp_powser+0x18>
    1080:	df 90       	pop	r13
    1082:	ef 90       	pop	r14
    1084:	ff 90       	pop	r15
    1086:	0f 91       	pop	r16
    1088:	1f 91       	pop	r17
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <atof>:
    1090:	66 27       	eor	r22, r22
    1092:	77 27       	eor	r23, r23
    1094:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <strtod>

00001098 <atoi>:
    1098:	fc 01       	movw	r30, r24
    109a:	88 27       	eor	r24, r24
    109c:	99 27       	eor	r25, r25
    109e:	e8 94       	clt
    10a0:	21 91       	ld	r18, Z+
    10a2:	20 32       	cpi	r18, 0x20	; 32
    10a4:	e9 f3       	breq	.-6      	; 0x10a0 <atoi+0x8>
    10a6:	29 30       	cpi	r18, 0x09	; 9
    10a8:	10 f0       	brcs	.+4      	; 0x10ae <atoi+0x16>
    10aa:	2e 30       	cpi	r18, 0x0E	; 14
    10ac:	c8 f3       	brcs	.-14     	; 0x10a0 <atoi+0x8>
    10ae:	2b 32       	cpi	r18, 0x2B	; 43
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <atoi+0x2a>
    10b2:	2d 32       	cpi	r18, 0x2D	; 45
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <atoi+0x2c>
    10b6:	68 94       	set
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <atoi+0x2a>
    10ba:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__mulhi_const_10>
    10be:	82 0f       	add	r24, r18
    10c0:	91 1d       	adc	r25, r1
    10c2:	21 91       	ld	r18, Z+
    10c4:	20 53       	subi	r18, 0x30	; 48
    10c6:	2a 30       	cpi	r18, 0x0A	; 10
    10c8:	c0 f3       	brcs	.-16     	; 0x10ba <atoi+0x22>
    10ca:	1e f4       	brtc	.+6      	; 0x10d2 <atoi+0x3a>
    10cc:	90 95       	com	r25
    10ce:	81 95       	neg	r24
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__mulhi_const_10>:
    10d4:	7a e0       	ldi	r23, 0x0A	; 10
    10d6:	97 9f       	mul	r25, r23
    10d8:	90 2d       	mov	r25, r0
    10da:	87 9f       	mul	r24, r23
    10dc:	80 2d       	mov	r24, r0
    10de:	91 0d       	add	r25, r1
    10e0:	11 24       	eor	r1, r1
    10e2:	08 95       	ret

000010e4 <strtod>:
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e7       	ldi	r30, 0x78	; 120
    10ea:	f8 e0       	ldi	r31, 0x08	; 8
    10ec:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__prologue_saves__+0xc>
    10f0:	ec 01       	movw	r28, r24
    10f2:	6b 01       	movw	r12, r22
    10f4:	61 15       	cp	r22, r1
    10f6:	71 05       	cpc	r23, r1
    10f8:	19 f0       	breq	.+6      	; 0x1100 <strtod+0x1c>
    10fa:	fb 01       	movw	r30, r22
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	7e 01       	movw	r14, r28
    1102:	ff ef       	ldi	r31, 0xFF	; 255
    1104:	ef 1a       	sub	r14, r31
    1106:	ff 0a       	sbc	r15, r31
    1108:	08 81       	ld	r16, Y
    110a:	80 2f       	mov	r24, r16
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 c0 09 	call	0x1380	; 0x1380 <isspace>
    1112:	89 2b       	or	r24, r25
    1114:	11 f0       	breq	.+4      	; 0x111a <strtod+0x36>
    1116:	e7 01       	movw	r28, r14
    1118:	f3 cf       	rjmp	.-26     	; 0x1100 <strtod+0x1c>
    111a:	0d 32       	cpi	r16, 0x2D	; 45
    111c:	39 f4       	brne	.+14     	; 0x112c <strtod+0x48>
    111e:	7e 01       	movw	r14, r28
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	e8 0e       	add	r14, r24
    1124:	f1 1c       	adc	r15, r1
    1126:	09 81       	ldd	r16, Y+1	; 0x01
    1128:	11 e0       	ldi	r17, 0x01	; 1
    112a:	08 c0       	rjmp	.+16     	; 0x113c <strtod+0x58>
    112c:	0b 32       	cpi	r16, 0x2B	; 43
    112e:	29 f4       	brne	.+10     	; 0x113a <strtod+0x56>
    1130:	7e 01       	movw	r14, r28
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	e9 0e       	add	r14, r25
    1136:	f1 1c       	adc	r15, r1
    1138:	09 81       	ldd	r16, Y+1	; 0x01
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	e7 01       	movw	r28, r14
    113e:	21 97       	sbiw	r28, 0x01	; 1
    1140:	43 e0       	ldi	r20, 0x03	; 3
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	66 eb       	ldi	r22, 0xB6	; 182
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 c9 09 	call	0x1392	; 0x1392 <strncasecmp_P>
    114e:	89 2b       	or	r24, r25
    1150:	c1 f4       	brne	.+48     	; 0x1182 <strtod+0x9e>
    1152:	23 96       	adiw	r28, 0x03	; 3
    1154:	45 e0       	ldi	r20, 0x05	; 5
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	61 eb       	ldi	r22, 0xB1	; 177
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	ce 01       	movw	r24, r28
    115e:	0e 94 c9 09 	call	0x1392	; 0x1392 <strncasecmp_P>
    1162:	89 2b       	or	r24, r25
    1164:	09 f4       	brne	.+2      	; 0x1168 <strtod+0x84>
    1166:	25 96       	adiw	r28, 0x05	; 5
    1168:	c1 14       	cp	r12, r1
    116a:	d1 04       	cpc	r13, r1
    116c:	19 f0       	breq	.+6      	; 0x1174 <strtod+0x90>
    116e:	f6 01       	movw	r30, r12
    1170:	d1 83       	std	Z+1, r29	; 0x01
    1172:	c0 83       	st	Z, r28
    1174:	11 11       	cpse	r17, r1
    1176:	f6 c0       	rjmp	.+492    	; 0x1364 <strtod+0x280>
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e8       	ldi	r24, 0x80	; 128
    117e:	9f e7       	ldi	r25, 0x7F	; 127
    1180:	fa c0       	rjmp	.+500    	; 0x1376 <strtod+0x292>
    1182:	43 e0       	ldi	r20, 0x03	; 3
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	6e ea       	ldi	r22, 0xAE	; 174
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 c9 09 	call	0x1392	; 0x1392 <strncasecmp_P>
    1190:	89 2b       	or	r24, r25
    1192:	59 f4       	brne	.+22     	; 0x11aa <strtod+0xc6>
    1194:	c1 14       	cp	r12, r1
    1196:	d1 04       	cpc	r13, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <strtod+0xb8>
    119a:	e9 c0       	rjmp	.+466    	; 0x136e <strtod+0x28a>
    119c:	f2 e0       	ldi	r31, 0x02	; 2
    119e:	ef 0e       	add	r14, r31
    11a0:	f1 1c       	adc	r15, r1
    11a2:	f6 01       	movw	r30, r12
    11a4:	f1 82       	std	Z+1, r15	; 0x01
    11a6:	e0 82       	st	Z, r14
    11a8:	e2 c0       	rjmp	.+452    	; 0x136e <strtod+0x28a>
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	f7 01       	movw	r30, r14
    11b6:	80 ed       	ldi	r24, 0xD0	; 208
    11b8:	a8 2e       	mov	r10, r24
    11ba:	a0 0e       	add	r10, r16
    11bc:	89 e0       	ldi	r24, 0x09	; 9
    11be:	8a 15       	cp	r24, r10
    11c0:	30 f1       	brcs	.+76     	; 0x120e <strtod+0x12a>
    11c2:	91 2f       	mov	r25, r17
    11c4:	92 60       	ori	r25, 0x02	; 2
    11c6:	b9 2e       	mov	r11, r25
    11c8:	81 2f       	mov	r24, r17
    11ca:	88 70       	andi	r24, 0x08	; 8
    11cc:	12 ff       	sbrs	r17, 2
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <strtod+0xf4>
    11d0:	81 11       	cpse	r24, r1
    11d2:	24 c0       	rjmp	.+72     	; 0x121c <strtod+0x138>
    11d4:	21 96       	adiw	r28, 0x01	; 1
    11d6:	22 c0       	rjmp	.+68     	; 0x121c <strtod+0x138>
    11d8:	81 11       	cpse	r24, r1
    11da:	21 97       	sbiw	r28, 0x01	; 1
    11dc:	a5 e0       	ldi	r26, 0x05	; 5
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__muluhisi3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	aa 1f       	adc	r26, r26
    11ee:	bb 1f       	adc	r27, r27
    11f0:	9c 01       	movw	r18, r24
    11f2:	ad 01       	movw	r20, r26
    11f4:	2a 0d       	add	r18, r10
    11f6:	31 1d       	adc	r19, r1
    11f8:	41 1d       	adc	r20, r1
    11fa:	51 1d       	adc	r21, r1
    11fc:	28 39       	cpi	r18, 0x98	; 152
    11fe:	89 e9       	ldi	r24, 0x99	; 153
    1200:	38 07       	cpc	r19, r24
    1202:	48 07       	cpc	r20, r24
    1204:	89 e1       	ldi	r24, 0x19	; 25
    1206:	58 07       	cpc	r21, r24
    1208:	48 f0       	brcs	.+18     	; 0x121c <strtod+0x138>
    120a:	16 60       	ori	r17, 0x06	; 6
    120c:	06 c0       	rjmp	.+12     	; 0x121a <strtod+0x136>
    120e:	9e ef       	ldi	r25, 0xFE	; 254
    1210:	a9 12       	cpse	r10, r25
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <strtod+0x144>
    1214:	13 fd       	sbrc	r17, 3
    1216:	40 c0       	rjmp	.+128    	; 0x1298 <strtod+0x1b4>
    1218:	18 60       	ori	r17, 0x08	; 8
    121a:	b1 2e       	mov	r11, r17
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	e8 1a       	sub	r14, r24
    1220:	f8 0a       	sbc	r15, r24
    1222:	00 81       	ld	r16, Z
    1224:	1b 2d       	mov	r17, r11
    1226:	c6 cf       	rjmp	.-116    	; 0x11b4 <strtod+0xd0>
    1228:	80 2f       	mov	r24, r16
    122a:	8f 7d       	andi	r24, 0xDF	; 223
    122c:	85 34       	cpi	r24, 0x45	; 69
    122e:	a1 f5       	brne	.+104    	; 0x1298 <strtod+0x1b4>
    1230:	80 81       	ld	r24, Z
    1232:	8d 32       	cpi	r24, 0x2D	; 45
    1234:	11 f4       	brne	.+4      	; 0x123a <strtod+0x156>
    1236:	10 61       	ori	r17, 0x10	; 16
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <strtod+0x162>
    123a:	8b 32       	cpi	r24, 0x2B	; 43
    123c:	21 f0       	breq	.+8      	; 0x1246 <strtod+0x162>
    123e:	31 96       	adiw	r30, 0x01	; 1
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <strtod+0x16a>
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	32 96       	adiw	r30, 0x02	; 2
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 53       	subi	r24, 0x30	; 48
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	18 f0       	brcs	.+6      	; 0x125a <strtod+0x176>
    1254:	e6 1b       	sub	r30, r22
    1256:	f7 0b       	sbc	r31, r23
    1258:	1f c0       	rjmp	.+62     	; 0x1298 <strtod+0x1b4>
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	60 38       	cpi	r22, 0x80	; 128
    1260:	9c e0       	ldi	r25, 0x0C	; 12
    1262:	79 07       	cpc	r23, r25
    1264:	5c f4       	brge	.+22     	; 0x127c <strtod+0x198>
    1266:	db 01       	movw	r26, r22
    1268:	aa 0f       	add	r26, r26
    126a:	bb 1f       	adc	r27, r27
    126c:	aa 0f       	add	r26, r26
    126e:	bb 1f       	adc	r27, r27
    1270:	6a 0f       	add	r22, r26
    1272:	7b 1f       	adc	r23, r27
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	68 0f       	add	r22, r24
    127a:	71 1d       	adc	r23, r1
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	df 01       	movw	r26, r30
    1280:	11 97       	sbiw	r26, 0x01	; 1
    1282:	8c 91       	ld	r24, X
    1284:	80 53       	subi	r24, 0x30	; 48
    1286:	8a 30       	cpi	r24, 0x0A	; 10
    1288:	50 f3       	brcs	.-44     	; 0x125e <strtod+0x17a>
    128a:	14 ff       	sbrs	r17, 4
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <strtod+0x1b0>
    128e:	71 95       	neg	r23
    1290:	61 95       	neg	r22
    1292:	71 09       	sbc	r23, r1
    1294:	c6 0f       	add	r28, r22
    1296:	d7 1f       	adc	r29, r23
    1298:	11 ff       	sbrs	r17, 1
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <strtod+0x1c8>
    129c:	c1 14       	cp	r12, r1
    129e:	d1 04       	cpc	r13, r1
    12a0:	29 f0       	breq	.+10     	; 0x12ac <strtod+0x1c8>
    12a2:	cf 01       	movw	r24, r30
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f6 01       	movw	r30, r12
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
    12ac:	ca 01       	movw	r24, r20
    12ae:	b9 01       	movw	r22, r18
    12b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
    12b4:	21 2f       	mov	r18, r17
    12b6:	23 70       	andi	r18, 0x03	; 3
    12b8:	23 30       	cpi	r18, 0x03	; 3
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <strtod+0x1de>
    12bc:	4b 01       	movw	r8, r22
    12be:	5c 01       	movw	r10, r24
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <strtod+0x1ea>
    12c2:	4b 01       	movw	r8, r22
    12c4:	5c 01       	movw	r10, r24
    12c6:	b7 fa       	bst	r11, 7
    12c8:	b0 94       	com	r11
    12ca:	b7 f8       	bld	r11, 7
    12cc:	b0 94       	com	r11
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
    12dc:	88 23       	and	r24, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <strtod+0x1fe>
    12e0:	3e c0       	rjmp	.+124    	; 0x135e <strtod+0x27a>
    12e2:	d7 ff       	sbrs	r29, 7
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <strtod+0x20e>
    12e6:	d1 95       	neg	r29
    12e8:	c1 95       	neg	r28
    12ea:	d1 09       	sbc	r29, r1
    12ec:	0d ec       	ldi	r16, 0xCD	; 205
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <strtod+0x212>
    12f2:	05 ee       	ldi	r16, 0xE5	; 229
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	68 01       	movw	r12, r16
    12f8:	f8 e1       	ldi	r31, 0x18	; 24
    12fa:	cf 1a       	sub	r12, r31
    12fc:	d1 08       	sbc	r13, r1
    12fe:	90 e2       	ldi	r25, 0x20	; 32
    1300:	e9 2e       	mov	r14, r25
    1302:	f1 2c       	mov	r15, r1
    1304:	ce 15       	cp	r28, r14
    1306:	df 05       	cpc	r29, r15
    1308:	74 f0       	brlt	.+28     	; 0x1326 <strtod+0x242>
    130a:	f8 01       	movw	r30, r16
    130c:	25 91       	lpm	r18, Z+
    130e:	35 91       	lpm	r19, Z+
    1310:	45 91       	lpm	r20, Z+
    1312:	54 91       	lpm	r21, Z
    1314:	c5 01       	movw	r24, r10
    1316:	b4 01       	movw	r22, r8
    1318:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
    131c:	4b 01       	movw	r8, r22
    131e:	5c 01       	movw	r10, r24
    1320:	ce 19       	sub	r28, r14
    1322:	df 09       	sbc	r29, r15
    1324:	ef cf       	rjmp	.-34     	; 0x1304 <strtod+0x220>
    1326:	04 50       	subi	r16, 0x04	; 4
    1328:	11 09       	sbc	r17, r1
    132a:	f5 94       	asr	r15
    132c:	e7 94       	ror	r14
    132e:	0c 15       	cp	r16, r12
    1330:	1d 05       	cpc	r17, r13
    1332:	41 f7       	brne	.-48     	; 0x1304 <strtod+0x220>
    1334:	8a 2d       	mov	r24, r10
    1336:	88 0f       	add	r24, r24
    1338:	8b 2d       	mov	r24, r11
    133a:	88 1f       	adc	r24, r24
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	49 f0       	breq	.+18     	; 0x1352 <strtod+0x26e>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	c5 01       	movw	r24, r10
    1348:	b4 01       	movw	r22, r8
    134a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__cmpsf2>
    134e:	81 11       	cpse	r24, r1
    1350:	06 c0       	rjmp	.+12     	; 0x135e <strtod+0x27a>
    1352:	82 e2       	ldi	r24, 0x22	; 34
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <errno+0x1>
    135a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <errno>
    135e:	c5 01       	movw	r24, r10
    1360:	b4 01       	movw	r22, r8
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <strtod+0x292>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	80 e8       	ldi	r24, 0x80	; 128
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <strtod+0x292>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	80 ec       	ldi	r24, 0xC0	; 192
    1374:	9f e7       	ldi	r25, 0x7F	; 127
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	ec e0       	ldi	r30, 0x0C	; 12
    137c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__epilogue_restores__+0xc>

00001380 <isspace>:
    1380:	91 11       	cpse	r25, r1
    1382:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__ctype_isfalse>
    1386:	80 32       	cpi	r24, 0x20	; 32
    1388:	19 f0       	breq	.+6      	; 0x1390 <isspace+0x10>
    138a:	89 50       	subi	r24, 0x09	; 9
    138c:	85 50       	subi	r24, 0x05	; 5
    138e:	c8 f7       	brcc	.-14     	; 0x1382 <isspace+0x2>
    1390:	08 95       	ret

00001392 <strncasecmp_P>:
    1392:	fb 01       	movw	r30, r22
    1394:	dc 01       	movw	r26, r24
    1396:	41 50       	subi	r20, 0x01	; 1
    1398:	50 40       	sbci	r21, 0x00	; 0
    139a:	88 f0       	brcs	.+34     	; 0x13be <strncasecmp_P+0x2c>
    139c:	8d 91       	ld	r24, X+
    139e:	81 34       	cpi	r24, 0x41	; 65
    13a0:	1c f0       	brlt	.+6      	; 0x13a8 <strncasecmp_P+0x16>
    13a2:	8b 35       	cpi	r24, 0x5B	; 91
    13a4:	0c f4       	brge	.+2      	; 0x13a8 <strncasecmp_P+0x16>
    13a6:	80 5e       	subi	r24, 0xE0	; 224
    13a8:	65 91       	lpm	r22, Z+
    13aa:	61 34       	cpi	r22, 0x41	; 65
    13ac:	1c f0       	brlt	.+6      	; 0x13b4 <strncasecmp_P+0x22>
    13ae:	6b 35       	cpi	r22, 0x5B	; 91
    13b0:	0c f4       	brge	.+2      	; 0x13b4 <strncasecmp_P+0x22>
    13b2:	60 5e       	subi	r22, 0xE0	; 224
    13b4:	86 1b       	sub	r24, r22
    13b6:	61 11       	cpse	r22, r1
    13b8:	71 f3       	breq	.-36     	; 0x1396 <strncasecmp_P+0x4>
    13ba:	99 0b       	sbc	r25, r25
    13bc:	08 95       	ret
    13be:	88 1b       	sub	r24, r24
    13c0:	fc cf       	rjmp	.-8      	; 0x13ba <strncasecmp_P+0x28>

000013c2 <__ctype_isfalse>:
    13c2:	99 27       	eor	r25, r25
    13c4:	88 27       	eor	r24, r24

000013c6 <__ctype_istrue>:
    13c6:	08 95       	ret

000013c8 <__muluhisi3>:
    13c8:	0e 94 26 0a 	call	0x144c	; 0x144c <__umulhisi3>
    13cc:	a5 9f       	mul	r26, r21
    13ce:	90 0d       	add	r25, r0
    13d0:	b4 9f       	mul	r27, r20
    13d2:	90 0d       	add	r25, r0
    13d4:	a4 9f       	mul	r26, r20
    13d6:	80 0d       	add	r24, r0
    13d8:	91 1d       	adc	r25, r1
    13da:	11 24       	eor	r1, r1
    13dc:	08 95       	ret

000013de <__prologue_saves__>:
    13de:	2f 92       	push	r2
    13e0:	3f 92       	push	r3
    13e2:	4f 92       	push	r4
    13e4:	5f 92       	push	r5
    13e6:	6f 92       	push	r6
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	ca 1b       	sub	r28, r26
    1408:	db 0b       	sbc	r29, r27
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	09 94       	ijmp

00001416 <__epilogue_restores__>:
    1416:	2a 88       	ldd	r2, Y+18	; 0x12
    1418:	39 88       	ldd	r3, Y+17	; 0x11
    141a:	48 88       	ldd	r4, Y+16	; 0x10
    141c:	5f 84       	ldd	r5, Y+15	; 0x0f
    141e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1420:	7d 84       	ldd	r7, Y+13	; 0x0d
    1422:	8c 84       	ldd	r8, Y+12	; 0x0c
    1424:	9b 84       	ldd	r9, Y+11	; 0x0b
    1426:	aa 84       	ldd	r10, Y+10	; 0x0a
    1428:	b9 84       	ldd	r11, Y+9	; 0x09
    142a:	c8 84       	ldd	r12, Y+8	; 0x08
    142c:	df 80       	ldd	r13, Y+7	; 0x07
    142e:	ee 80       	ldd	r14, Y+6	; 0x06
    1430:	fd 80       	ldd	r15, Y+5	; 0x05
    1432:	0c 81       	ldd	r16, Y+4	; 0x04
    1434:	1b 81       	ldd	r17, Y+3	; 0x03
    1436:	aa 81       	ldd	r26, Y+2	; 0x02
    1438:	b9 81       	ldd	r27, Y+1	; 0x01
    143a:	ce 0f       	add	r28, r30
    143c:	d1 1d       	adc	r29, r1
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	ed 01       	movw	r28, r26
    144a:	08 95       	ret

0000144c <__umulhisi3>:
    144c:	a2 9f       	mul	r26, r18
    144e:	b0 01       	movw	r22, r0
    1450:	b3 9f       	mul	r27, r19
    1452:	c0 01       	movw	r24, r0
    1454:	a3 9f       	mul	r26, r19
    1456:	70 0d       	add	r23, r0
    1458:	81 1d       	adc	r24, r1
    145a:	11 24       	eor	r1, r1
    145c:	91 1d       	adc	r25, r1
    145e:	b2 9f       	mul	r27, r18
    1460:	70 0d       	add	r23, r0
    1462:	81 1d       	adc	r24, r1
    1464:	11 24       	eor	r1, r1
    1466:	91 1d       	adc	r25, r1
    1468:	08 95       	ret

0000146a <_exit>:
    146a:	f8 94       	cli

0000146c <__stop_program>:
    146c:	ff cf       	rjmp	.-2      	; 0x146c <__stop_program>


PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00003e5a  00003eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ed  00800144  00800144  00003fd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003503  00000000  00000000  00004254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7d  00000000  00000000  00007757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017cb  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  00009ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000862  00000000  00000000  0000a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d96  00000000  00000000  0000ad7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000cb14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_19>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x168>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x70>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ea e5       	ldi	r30, 0x5A	; 90
     216:	fe e3       	ldi	r31, 0x3E	; 62
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a4 34       	cpi	r26, 0x44	; 68
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	23 e0       	ldi	r18, 0x03	; 3
     226:	a4 e4       	ldi	r26, 0x44	; 68
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a1 33       	cpi	r26, 0x31	; 49
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 2b 04 	call	0x856	; 0x856 <main>
     238:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <Vo+0x1>
     2f4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     334:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <R2>
     338:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <R2+0x1>
     33c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <R2+0x2>
     340:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <logR2>
     350:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <logR2+0x1>
     354:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <logR2+0x2>
     358:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
     3cc:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <T>
     3d0:	70 93 8e 01 	sts	0x018E, r23	; 0x80018e <T+0x1>
     3d4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <T+0x2>
     3d8:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
     3e8:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <Tc>
     3ec:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <Tc+0x1>
     3f0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Tc+0x2>
     3f4:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	64 97       	sbiw	r28, 0x14	; 20
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	dc 01       	movw	r26, r24
     424:	fe 01       	movw	r30, r28
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     42c:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <get_value+0x22>
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	23 c0       	rjmp	.+70     	; 0x484 <__stack+0x25>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     43e:	fd 01       	movw	r30, r26
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	80 81       	ld	r24, Z
     446:	86 13       	cpse	r24, r22
     448:	1b c0       	rjmp	.+54     	; 0x480 <__stack+0x21>
			v [j] = String[j+i+1];
     44a:	f9 01       	movw	r30, r18
     44c:	e4 0f       	add	r30, r20
     44e:	f5 1f       	adc	r31, r21
     450:	8f 01       	movw	r16, r30
     452:	0a 0f       	add	r16, r26
     454:	1b 1f       	adc	r17, r27
     456:	f8 01       	movw	r30, r16
     458:	71 81       	ldd	r23, Z+1	; 0x01
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	8c 0f       	add	r24, r28
     460:	9d 1f       	adc	r25, r29
     462:	84 0f       	add	r24, r20
     464:	95 1f       	adc	r25, r21
     466:	fc 01       	movw	r30, r24
     468:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r')|| (String [j+i+2] == '\n'))
     46a:	f8 01       	movw	r30, r16
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	80 32       	cpi	r24, 0x20	; 32
     470:	99 f0       	breq	.+38     	; 0x498 <__stack+0x39>
     472:	8d 30       	cpi	r24, 0x0D	; 13
     474:	89 f0       	breq	.+34     	; 0x498 <__stack+0x39>
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	79 f0       	breq	.+30     	; 0x498 <__stack+0x39>
			break;
			j++;
     47a:	4f 5f       	subi	r20, 0xFF	; 255
     47c:	5f 4f       	sbci	r21, 0xFF	; 255
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
		}
		else
			i++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     484:	fd 01       	movw	r30, r26
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <__stack+0x27>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	ea 1b       	sub	r30, r26
     490:	fb 0b       	sbc	r31, r27
     492:	2e 17       	cp	r18, r30
     494:	3f 07       	cpc	r19, r31
     496:	98 f2       	brcs	.-90     	; 0x43e <get_value+0x34>
			j++;
		}
		else
			i++;
	}
	return (atof(v));
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
}
     4a0:	64 96       	adiw	r28, 0x14	; 20
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <get_SEvalue>:
void get_SEvalue (char* Str,char Sch,char Ech)
{
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	7c 01       	movw	r14, r24
		}
		else
			S++;
	}

}
     4d8:	cd b6       	in	r12, 0x3d	; 61
     4da:	de b6       	in	r13, 0x3e	; 62
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     4dc:	fc 01       	movw	r30, r24
     4de:	01 90       	ld	r0, Z+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <get_SEvalue+0x28>
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	8f 01       	movw	r16, r30
     4e8:	08 1b       	sub	r16, r24
     4ea:	19 0b       	sbc	r17, r25
	char RXStr[lens];
     4ec:	58 01       	movw	r10, r16
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	a8 1a       	sub	r10, r24
     4f2:	b1 08       	sbc	r11, r1
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	a0 1b       	sub	r26, r16
     4fa:	b1 0b       	sbc	r27, r17
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	be bf       	out	0x3e, r27	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	ad bf       	out	0x3d, r26	; 61
     506:	2d b7       	in	r18, 0x3d	; 61
     508:	3e b7       	in	r19, 0x3e	; 62
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
     50e:	f7 01       	movw	r30, r14
     510:	80 81       	ld	r24, Z
     512:	68 13       	cpse	r22, r24
     514:	42 c0       	rjmp	.+132    	; 0x59a <get_SEvalue+0xe4>
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f0 e0       	ldi	r31, 0x00	; 0
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     51a:	d7 01       	movw	r26, r14
     51c:	ae 0f       	add	r26, r30
     51e:	bf 1f       	adc	r27, r31
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	8c 91       	ld	r24, X
     524:	d9 01       	movw	r26, r18
     526:	8c 93       	st	X, r24
 				Str[j] = RXStr[j];
     528:	d7 01       	movw	r26, r14
     52a:	8c 93       	st	X, r24
				if ((Str [j+S+2] == Ech))
     52c:	32 96       	adiw	r30, 0x02	; 2
     52e:	ee 0d       	add	r30, r14
     530:	ff 1d       	adc	r31, r15
     532:	80 81       	ld	r24, Z
     534:	48 13       	cpse	r20, r24
     536:	1a c0       	rjmp	.+52     	; 0x56c <get_SEvalue+0xb6>
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
     538:	81 2c       	mov	r8, r1
     53a:	91 2c       	mov	r9, r1
				if ((Str [j+S+2] == Ech))
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
					{
						Str[j+1] = ' ';
     540:	f7 01       	movw	r30, r14
     542:	e8 0d       	add	r30, r8
     544:	f9 1d       	adc	r31, r9
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	81 83       	std	Z+1, r24	; 0x01
						int i = j+2;
     54a:	2e 5f       	subi	r18, 0xFE	; 254
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
						while(i < lens-1)
     54e:	2a 15       	cp	r18, r10
     550:	3b 05       	cpc	r19, r11
     552:	64 f5       	brge	.+88     	; 0x5ac <get_SEvalue+0xf6>
     554:	f7 01       	movw	r30, r14
     556:	e2 0f       	add	r30, r18
     558:	f3 1f       	adc	r31, r19
     55a:	01 50       	subi	r16, 0x01	; 1
     55c:	11 09       	sbc	r17, r1
     55e:	e0 0e       	add	r14, r16
     560:	f1 1e       	adc	r15, r17
						{
							Str[i] = 0;
     562:	11 92       	st	Z+, r1
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
					{
						Str[j+1] = ' ';
						int i = j+2;
						while(i < lens-1)
     564:	ee 16       	cp	r14, r30
     566:	ff 06       	cpc	r15, r31
     568:	e1 f7       	brne	.-8      	; 0x562 <get_SEvalue+0xac>
     56a:	20 c0       	rjmp	.+64     	; 0x5ac <get_SEvalue+0xf6>
     56c:	39 01       	movw	r6, r18
     56e:	bf ef       	ldi	r27, 0xFF	; 255
     570:	6b 1a       	sub	r6, r27
     572:	7b 0a       	sbc	r7, r27
     574:	b7 01       	movw	r22, r14
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
							i++;
						}
						break;
					}
				else
					j++;
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     582:	91 91       	ld	r25, Z+
     584:	d3 01       	movw	r26, r6
     586:	9d 93       	st	X+, r25
     588:	3d 01       	movw	r6, r26
 				Str[j] = RXStr[j];
     58a:	49 01       	movw	r8, r18
     58c:	db 01       	movw	r26, r22
     58e:	9d 93       	st	X+, r25
     590:	bd 01       	movw	r22, r26
				if ((Str [j+S+2] == Ech))
     592:	80 81       	ld	r24, Z
     594:	84 13       	cpse	r24, r20
     596:	f3 cf       	rjmp	.-26     	; 0x57e <get_SEvalue+0xc8>
     598:	d3 cf       	rjmp	.-90     	; 0x540 <get_SEvalue+0x8a>
     59a:	d7 01       	movw	r26, r14
     59c:	11 96       	adiw	r26, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
					j++;
			}
			break;
		}
		else
			S++;
     5a2:	31 96       	adiw	r30, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     5a4:	8d 91       	ld	r24, X+
     5a6:	86 13       	cpse	r24, r22
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <get_SEvalue+0xec>
     5aa:	b7 cf       	rjmp	.-146    	; 0x51a <get_SEvalue+0x64>
		}
		else
			S++;
	}

}
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de be       	out	0x3e, r13	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd be       	out	0x3d, r12	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	08 95       	ret

000005d4 <get_int>:
int get_int (char* String,char ch)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	2a 97       	sbiw	r28, 0x0a	; 10
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	dc 01       	movw	r26, r24
     5ee:	fe 01       	movw	r30, r28
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	ce 01       	movw	r24, r28
     5f4:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     5f6:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     5f8:	e8 17       	cp	r30, r24
     5fa:	f9 07       	cpc	r31, r25
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <get_int+0x22>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	23 c0       	rjmp	.+70     	; 0x64e <get_int+0x7a>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     608:	fd 01       	movw	r30, r26
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	80 81       	ld	r24, Z
     610:	86 13       	cpse	r24, r22
     612:	1b c0       	rjmp	.+54     	; 0x64a <get_int+0x76>
			v [j] = String[j+i+1];
     614:	f9 01       	movw	r30, r18
     616:	e4 0f       	add	r30, r20
     618:	f5 1f       	adc	r31, r21
     61a:	8f 01       	movw	r16, r30
     61c:	0a 0f       	add	r16, r26
     61e:	1b 1f       	adc	r17, r27
     620:	f8 01       	movw	r30, r16
     622:	71 81       	ldd	r23, Z+1	; 0x01
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c 0f       	add	r24, r28
     62a:	9d 1f       	adc	r25, r29
     62c:	84 0f       	add	r24, r20
     62e:	95 1f       	adc	r25, r21
     630:	fc 01       	movw	r30, r24
     632:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r') || (String [j+i+2] == '\n'))
     634:	f8 01       	movw	r30, r16
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	99 f0       	breq	.+38     	; 0x662 <get_int+0x8e>
     63c:	8d 30       	cpi	r24, 0x0D	; 13
     63e:	89 f0       	breq	.+34     	; 0x662 <get_int+0x8e>
     640:	8a 30       	cpi	r24, 0x0A	; 10
     642:	79 f0       	breq	.+30     	; 0x662 <get_int+0x8e>
			break;
			j++;
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	02 c0       	rjmp	.+4      	; 0x64e <get_int+0x7a>
		}
		else
			i++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     64e:	fd 01       	movw	r30, r26
     650:	01 90       	ld	r0, Z+
     652:	00 20       	and	r0, r0
     654:	e9 f7       	brne	.-6      	; 0x650 <get_int+0x7c>
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	ea 1b       	sub	r30, r26
     65a:	fb 0b       	sbc	r31, r27
     65c:	2e 17       	cp	r18, r30
     65e:	3f 07       	cpc	r19, r31
     660:	98 f2       	brcs	.-90     	; 0x608 <get_int+0x34>
			j++;
		}
		else
			i++;
	}
	return (atoi(v));
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	0e 94 5d 18 	call	0x30ba	; 0x30ba <atoi>
}
     66a:	2a 96       	adiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <find>:
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     680:	dc 01       	movw	r26, r24
     682:	0d 90       	ld	r0, X+
     684:	00 20       	and	r0, r0
     686:	e9 f7       	brne	.-6      	; 0x682 <find+0x2>
     688:	fc 01       	movw	r30, r24
     68a:	9d 01       	movw	r18, r26
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	31 09       	sbc	r19, r1
     690:	07 c0       	rjmp	.+14     	; 0x6a0 <find+0x20>
	{
		if (String [i] == ch){
     692:	91 91       	ld	r25, Z+
     694:	96 17       	cp	r25, r22
     696:	49 f0       	breq	.+18     	; 0x6aa <find+0x2a>
			f = 1;
			break;
		}
		else if ((String [i] == '\r')|| (String [i] == '\n'))
     698:	9d 30       	cpi	r25, 0x0D	; 13
     69a:	49 f0       	breq	.+18     	; 0x6ae <find+0x2e>
     69c:	9a 30       	cpi	r25, 0x0A	; 10
     69e:	49 f0       	breq	.+18     	; 0x6b2 <find+0x32>
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     6a0:	e2 17       	cp	r30, r18
     6a2:	f3 07       	cpc	r31, r19
     6a4:	b1 f7       	brne	.-20     	; 0x692 <find+0x12>
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
	while(i < strlen(String))
	{
		if (String [i] == ch){
			f = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
     6b2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     6b4:	08 95       	ret

000006b6 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	6a 01       	movw	r12, r20
     6c6:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     6c8:	28 81       	ld	r18, Y
     6ca:	39 81       	ldd	r19, Y+1	; 0x01
     6cc:	4a 81       	ldd	r20, Y+2	; 0x02
     6ce:	5b 81       	ldd	r21, Y+3	; 0x03
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
    *current_pos = new_pos;
     6d8:	c8 82       	st	Y, r12
     6da:	d9 82       	std	Y+1, r13	; 0x01
     6dc:	ea 82       	std	Y+2, r14	; 0x02
     6de:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <pin_direction>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     6ee:	41 11       	cpse	r20, r1
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <pin_direction+0x1e>
     6f2:	e8 2f       	mov	r30, r24
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	21 81       	ldd	r18, Z+1	; 0x01
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <pin_direction+0x14>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	6a 95       	dec	r22
     704:	e2 f7       	brpl	.-8      	; 0x6fe <pin_direction+0x10>
     706:	82 2b       	or	r24, r18
     708:	81 83       	std	Z+1, r24	; 0x01
     70a:	08 95       	ret
     70c:	e8 2f       	mov	r30, r24
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	21 81       	ldd	r18, Z+1	; 0x01
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <pin_direction+0x2e>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	6a 95       	dec	r22
     71e:	e2 f7       	brpl	.-8      	; 0x718 <pin_direction+0x2a>
     720:	80 95       	com	r24
     722:	82 23       	and	r24, r18
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	08 95       	ret

00000728 <pin_write>:
     728:	44 23       	and	r20, r20
     72a:	69 f0       	breq	.+26     	; 0x746 <pin_write+0x1e>
     72c:	e8 2f       	mov	r30, r24
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	22 81       	ldd	r18, Z+2	; 0x02
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	02 c0       	rjmp	.+4      	; 0x73c <pin_write+0x14>
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	6a 95       	dec	r22
     73e:	e2 f7       	brpl	.-8      	; 0x738 <pin_write+0x10>
     740:	82 2b       	or	r24, r18
     742:	82 83       	std	Z+2, r24	; 0x02
     744:	08 95       	ret
     746:	e8 2f       	mov	r30, r24
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	22 81       	ldd	r18, Z+2	; 0x02
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <pin_write+0x2e>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	6a 95       	dec	r22
     758:	e2 f7       	brpl	.-8      	; 0x752 <pin_write+0x2a>
     75a:	80 95       	com	r24
     75c:	82 23       	and	r24, r18
     75e:	82 83       	std	Z+2, r24	; 0x02
     760:	08 95       	ret

00000762 <port_direction>:
     762:	61 11       	cpse	r22, r1
     764:	05 c0       	rjmp	.+10     	; 0x770 <port_direction+0xe>
     766:	e8 2f       	mov	r30, r24
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	81 83       	std	Z+1, r24	; 0x01
     76e:	08 95       	ret
     770:	e8 2f       	mov	r30, r24
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	11 82       	std	Z+1, r1	; 0x01
     776:	08 95       	ret

00000778 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     778:	e8 2f       	mov	r30, r24
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	62 83       	std	Z+2, r22	; 0x02
     77e:	08 95       	ret

00000780 <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     780:	e8 2f       	mov	r30, r24
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	02 c0       	rjmp	.+4      	; 0x790 <pin_XOR+0x10>
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <pin_XOR+0xc>
     794:	28 27       	eor	r18, r24
     796:	22 83       	std	Z+2, r18	; 0x02
     798:	08 95       	ret

0000079a <Init>:
				RXString [i] = 0;
			}
		}
	}
}
void Init(void){
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     7a6:	81 b3       	in	r24, 0x11	; 17
     7a8:	80 6b       	ori	r24, 0xB0	; 176
     7aa:	81 bb       	out	0x11, r24	; 17
	pin_direction (D, 2, input );
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	80 e3       	ldi	r24, 0x30	; 48
     7b2:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	DDRC = 0XFF;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     7ba:	8a b3       	in	r24, 0x1a	; 26
     7bc:	80 6f       	ori	r24, 0xF0	; 240
     7be:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     7c0:	87 b3       	in	r24, 0x17	; 23
     7c2:	83 60       	ori	r24, 0x03	; 3
     7c4:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     7c6:	87 e8       	ldi	r24, 0x87	; 135
     7c8:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     7ca:	3e 9a       	sbi	0x07, 6	; 7
	GICR |= 0x40;
     7cc:	8b b7       	in	r24, 0x3b	; 59
     7ce:	80 64       	ori	r24, 0x40	; 64
     7d0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0x11;
     7d2:	85 b7       	in	r24, 0x35	; 53
     7d4:	81 61       	ori	r24, 0x11	; 17
     7d6:	85 bf       	out	0x35, r24	; 53
	UART_INIT();
     7d8:	0e 94 8f 14 	call	0x291e	; 0x291e <UART_INIT>
	init_Stack();
	motor_init();
     7dc:	0e 94 0e 13 	call	0x261c	; 0x261c <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f7 ee       	ldi	r31, 0xE7	; 231
     7e4:	cf 2e       	mov	r12, r31
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	df 2e       	mov	r13, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	17 e6       	ldi	r17, 0x67	; 103
     7ee:	e1 2e       	mov	r14, r17
     7f0:	16 e6       	ldi	r17, 0x66	; 102
     7f2:	f1 2e       	mov	r15, r17
     7f4:	06 ec       	ldi	r16, 0xC6	; 198
     7f6:	10 e4       	ldi	r17, 0x40	; 64
     7f8:	a8 01       	movw	r20, r16
     7fa:	97 01       	movw	r18, r14
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	88 e7       	ldi	r24, 0x78	; 120
     802:	93 e4       	ldi	r25, 0x43	; 67
     804:	0e 94 3b 13 	call	0x2676	; 0x2676 <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     808:	0f 2e       	mov	r0, r31
     80a:	fb ec       	ldi	r31, 0xCB	; 203
     80c:	cf 2e       	mov	r12, r31
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	df 2e       	mov	r13, r31
     812:	f0 2d       	mov	r31, r0
     814:	a8 01       	movw	r20, r16
     816:	97 01       	movw	r18, r14
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	88 e7       	ldi	r24, 0x78	; 120
     81e:	93 e4       	ldi	r25, 0x43	; 67
     820:	0e 94 3b 13 	call	0x2676	; 0x2676 <Pid_init>
	cli();
     824:	f8 94       	cli
	/*set fast PWM mode with non-inverted output*/
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     826:	8f b5       	in	r24, 0x2f	; 47
     828:	81 6a       	ori	r24, 0xA1	; 161
     82a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     82c:	8e b5       	in	r24, 0x2e	; 46
     82e:	81 64       	ori	r24, 0x41	; 65
     830:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     832:	85 b5       	in	r24, 0x25	; 37
     834:	8e 66       	ori	r24, 0x6E	; 110
     836:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     838:	83 b7       	in	r24, 0x33	; 51
     83a:	81 68       	ori	r24, 0x81	; 129
     83c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0) |(1<<OCIE0);
     83e:	89 b7       	in	r24, 0x39	; 57
     840:	83 60       	ori	r24, 0x03	; 3
     842:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     844:	12 be       	out	0x32, r1	; 50
	sei();
     846:	78 94       	sei
}
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	08 95       	ret

00000856 <main>:
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	29 97       	sbiw	r28, 0x09	; 9
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
    Init();
     86a:	0e 94 cd 03 	call	0x79a	; 0x79a <Init>
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     86e:	45 e0       	ldi	r20, 0x05	; 5
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	69 e6       	ldi	r22, 0x69	; 105
     874:	72 e0       	ldi	r23, 0x02	; 2
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     87e:	45 e0       	ldi	r20, 0x05	; 5
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	6b e5       	ldi	r22, 0x5B	; 91
     884:	72 e0       	ldi	r23, 0x02	; 2
     886:	85 e0       	ldi	r24, 0x05	; 5
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     88e:	45 e0       	ldi	r20, 0x05	; 5
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	6b ec       	ldi	r22, 0xCB	; 203
     894:	72 e0       	ldi	r23, 0x02	; 2
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     89e:	45 e0       	ldi	r20, 0x05	; 5
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	6d eb       	ldi	r22, 0xBD	; 189
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	8f e0       	ldi	r24, 0x0F	; 15
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     8ae:	89 e6       	ldi	r24, 0x69	; 105
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
     8b6:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <Xspm>
     8ba:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <Xspm+0x1>
     8be:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Xspm+0x2>
     8c2:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <Xspm+0x3>
	Yspm = atof(Y_pos);
     8c6:	8b e5       	ldi	r24, 0x5B	; 91
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
     8ce:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <Yspm>
     8d2:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <Yspm+0x1>
     8d6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Yspm+0x2>
     8da:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Yspm+0x3>
	Zspm = atof(Z_pos);
     8de:	8b ec       	ldi	r24, 0xCB	; 203
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
     8e6:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <Zspm>
     8ea:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <Zspm+0x1>
     8ee:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <Zspm+0x2>
     8f2:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <Zspm+0x3>
	Espm = atof(E_pos);
     8f6:	8d eb       	ldi	r24, 0xBD	; 189
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
     8fe:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <Espm>
     902:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <Espm+0x1>
     906:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <Espm+0x2>
     90a:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <Espm+0x3>
				RXString [i] = 0;
			}
		}
		else if (RXString[0] == 'G')
		{
			status = 1;
     90e:	44 24       	eor	r4, r4
     910:	43 94       	inc	r4
					}
					Transmit_Data("ok\n");
				break;
			}
			status = 0;
			STEP[0] = 0;
     912:	0f 2e       	mov	r0, r31
     914:	ff e9       	ldi	r31, 0x9F	; 159
     916:	6f 2e       	mov	r6, r31
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	7f 2e       	mov	r7, r31
     91c:	f0 2d       	mov	r31, r0
     91e:	0f 2e       	mov	r0, r31
     920:	f5 e2       	ldi	r31, 0x25	; 37
     922:	2f 2e       	mov	r2, r31
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	3f 2e       	mov	r3, r31
     928:	f0 2d       	mov	r31, r0
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
     92a:	56 2c       	mov	r5, r6
     92c:	7f 82       	std	Y+7, r7	; 0x07
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	/****************************************************/
	while (1)
	{
		if (RXString[0] == 'M')
     92e:	e5 ed       	ldi	r30, 0xD5	; 213
     930:	f2 e0       	ldi	r31, 0x02	; 2
     932:	80 81       	ld	r24, Z
     934:	8d 34       	cpi	r24, 0x4D	; 77
     936:	09 f0       	breq	.+2      	; 0x93a <main+0xe4>
     938:	df c0       	rjmp	.+446    	; 0xaf8 <main+0x2a2>
		{
			SUBval2 = get_int(RXString,'M');
     93a:	6d e4       	ldi	r22, 0x4D	; 77
     93c:	cf 01       	movw	r24, r30
     93e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     942:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <SUBval2+0x1>
     946:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <SUBval2>
			switch(SUBval2)
     94a:	84 35       	cpi	r24, 0x54	; 84
     94c:	91 05       	cpc	r25, r1
     94e:	69 f0       	breq	.+26     	; 0x96a <main+0x114>
     950:	1c f4       	brge	.+6      	; 0x958 <main+0x102>
     952:	42 97       	sbiw	r24, 0x12	; 18
     954:	51 f0       	breq	.+20     	; 0x96a <main+0x114>
     956:	c7 c0       	rjmp	.+398    	; 0xae6 <main+0x290>
     958:	8d 36       	cpi	r24, 0x6D	; 109
     95a:	91 05       	cpc	r25, r1
     95c:	09 f4       	brne	.+2      	; 0x960 <main+0x10a>
     95e:	82 c0       	rjmp	.+260    	; 0xa64 <main+0x20e>
     960:	8e 3b       	cpi	r24, 0xBE	; 190
     962:	91 05       	cpc	r25, r1
     964:	09 f4       	brne	.+2      	; 0x968 <main+0x112>
     966:	9f c0       	rjmp	.+318    	; 0xaa6 <main+0x250>
     968:	be c0       	rjmp	.+380    	; 0xae6 <main+0x290>
			{
				case 18: case 84:
					wait = (get_int(RXString ,'S')*1000);
     96a:	63 e5       	ldi	r22, 0x53	; 83
     96c:	85 ed       	ldi	r24, 0xD5	; 213
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     974:	9c 01       	movw	r18, r24
     976:	48 ee       	ldi	r20, 0xE8	; 232
     978:	53 e0       	ldi	r21, 0x03	; 3
     97a:	24 9f       	mul	r18, r20
     97c:	c0 01       	movw	r24, r0
     97e:	25 9f       	mul	r18, r21
     980:	90 0d       	add	r25, r0
     982:	34 9f       	mul	r19, r20
     984:	90 0d       	add	r25, r0
     986:	11 24       	eor	r1, r1
     988:	09 2e       	mov	r0, r25
     98a:	00 0c       	add	r0, r0
     98c:	aa 0b       	sbc	r26, r26
     98e:	bb 0b       	sbc	r27, r27
     990:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <wait>
     994:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <wait+0x1>
     998:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <wait+0x2>
     99c:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <wait+0x3>
					XEN_DES = find(RXString ,'X');
     9a0:	68 e5       	ldi	r22, 0x58	; 88
     9a2:	85 ed       	ldi	r24, 0xD5	; 213
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 40 03 	call	0x680	; 0x680 <find>
     9aa:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <XEN_DES>
					YEN_DES = find(RXString ,'Y');
     9ae:	69 e5       	ldi	r22, 0x59	; 89
     9b0:	85 ed       	ldi	r24, 0xD5	; 213
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 40 03 	call	0x680	; 0x680 <find>
     9b8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <YEN_DES>
					ZEN_DES = find(RXString ,'Z');
     9bc:	6a e5       	ldi	r22, 0x5A	; 90
     9be:	85 ed       	ldi	r24, 0xD5	; 213
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 40 03 	call	0x680	; 0x680 <find>
     9c6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <ZEN_DES>
					EEN_DES = find(RXString ,'E');
     9ca:	65 e4       	ldi	r22, 0x45	; 69
     9cc:	85 ed       	ldi	r24, 0xD5	; 213
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 40 03 	call	0x680	; 0x680 <find>
     9d4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     9d8:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <XEN_DES>
     9dc:	88 e5       	ldi	r24, 0x58	; 88
     9de:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     9e2:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <YEN_DES>
     9e6:	89 e5       	ldi	r24, 0x59	; 89
     9e8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     9ec:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <YEN_DES>
     9f0:	8a e5       	ldi	r24, 0x5A	; 90
     9f2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     9f6:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <EEN_DES>
     9fa:	85 e4       	ldi	r24, 0x45	; 69
     9fc:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
					if(wait != 0)
     a00:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <wait>
     a04:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <wait+0x1>
     a08:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <wait+0x2>
     a0c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <wait+0x3>
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	a1 05       	cpc	r26, r1
     a14:	b1 05       	cpc	r27, r1
     a16:	09 f1       	breq	.+66     	; 0xa5a <main+0x204>
					{
						while(wait > 0)
     a18:	f4 f0       	brlt	.+60     	; 0xa56 <main+0x200>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1a:	8f e9       	ldi	r24, 0x9F	; 159
     a1c:	9f e0       	ldi	r25, 0x0F	; 15
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <main+0x1c8>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x1ce>
     a24:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     a26:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <wait>
     a2a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <wait+0x1>
     a2e:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <wait+0x2>
     a32:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <wait+0x3>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	a1 09       	sbc	r26, r1
     a3a:	b1 09       	sbc	r27, r1
     a3c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <wait>
     a40:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <wait+0x1>
     a44:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <wait+0x2>
     a48:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     a4c:	18 16       	cp	r1, r24
     a4e:	19 06       	cpc	r1, r25
     a50:	1a 06       	cpc	r1, r26
     a52:	1b 06       	cpc	r1, r27
     a54:	14 f3       	brlt	.-60     	; 0xa1a <main+0x1c4>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     a56:	0e 94 0e 13 	call	0x261c	; 0x261c <motor_init>
					}
					Transmit_Data("ok\n");
     a5a:	81 e1       	ldi	r24, 0x11	; 17
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				break;
     a62:	41 c0       	rjmp	.+130    	; 0xae6 <main+0x290>
				case 109:
					SE0 = get_value(RXString,'S');
     a64:	63 e5       	ldi	r22, 0x53	; 83
     a66:	85 ed       	ldi	r24, 0xD5	; 213
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     a6e:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <SE0>
     a72:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <SE0+0x1>
     a76:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <SE0+0x2>
     a7a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <SE0+0x3>
					while(getTemp(T0) < SE0);
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     a84:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <SE0>
     a88:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <SE0+0x1>
     a8c:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <SE0+0x2>
     a90:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <SE0+0x3>
     a94:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     a98:	88 23       	and	r24, r24
     a9a:	8c f3       	brlt	.-30     	; 0xa7e <main+0x228>
					Transmit_Data("ok\n");
     a9c:	81 e1       	ldi	r24, 0x11	; 17
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				break;
     aa4:	20 c0       	rjmp	.+64     	; 0xae6 <main+0x290>
				case 190:
					SB = get_value(RXString,'S');
     aa6:	63 e5       	ldi	r22, 0x53	; 83
     aa8:	85 ed       	ldi	r24, 0xD5	; 213
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ab0:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <SB>
     ab4:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <SB+0x1>
     ab8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <SB+0x2>
     abc:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <SB+0x3>
					while(getTemp(T2) < SB);
     ac0:	82 e4       	ldi	r24, 0x42	; 66
     ac2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     ac6:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <SB>
     aca:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <SB+0x1>
     ace:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <SB+0x2>
     ad2:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <SB+0x3>
     ad6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     ada:	88 23       	and	r24, r24
     adc:	8c f3       	brlt	.-30     	; 0xac0 <main+0x26a>
					Transmit_Data("ok\n");
     ade:	81 e1       	ldi	r24, 0x11	; 17
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				break;
			}
			status = 0;
     ae6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <status>
     aea:	e5 ed       	ldi	r30, 0xD5	; 213
     aec:	f2 e0       	ldi	r31, 0x02	; 2
			for (int i = 0 ; i < 80 ;i++)
			{
				RXString [i] = 0;
     aee:	11 92       	st	Z+, r1
					while(getTemp(T2) < SB);
					Transmit_Data("ok\n");
				break;
			}
			status = 0;
			for (int i = 0 ; i < 80 ;i++)
     af0:	e2 15       	cp	r30, r2
     af2:	f3 05       	cpc	r31, r3
     af4:	e1 f7       	brne	.-8      	; 0xaee <main+0x298>
     af6:	1b cf       	rjmp	.-458    	; 0x92e <main+0xd8>
			{
				RXString [i] = 0;
			}
		}
		else if (RXString[0] == 'G')
     af8:	87 34       	cpi	r24, 0x47	; 71
     afa:	09 f0       	breq	.+2      	; 0xafe <main+0x2a8>
     afc:	18 cf       	rjmp	.-464    	; 0x92e <main+0xd8>
		{
			status = 1;
     afe:	40 92 89 01 	sts	0x0189, r4	; 0x800189 <status>
			SUBval2 = get_int (RXString,'G');
     b02:	67 e4       	ldi	r22, 0x47	; 71
     b04:	85 ed       	ldi	r24, 0xD5	; 213
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     b0c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <SUBval2+0x1>
     b10:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <SUBval2>
			switch (SUBval2)
     b14:	99 23       	and	r25, r25
     b16:	0c f4       	brge	.+2      	; 0xb1a <main+0x2c4>
     b18:	43 c4       	rjmp	.+2182   	; 0x13a0 <main+0xb4a>
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	91 05       	cpc	r25, r1
     b1e:	24 f0       	brlt	.+8      	; 0xb28 <main+0x2d2>
     b20:	04 97       	sbiw	r24, 0x04	; 4
     b22:	0c f4       	brge	.+2      	; 0xb26 <main+0x2d0>
     b24:	a1 c1       	rjmp	.+834    	; 0xe68 <main+0x612>
     b26:	3c c4       	rjmp	.+2168   	; 0x13a0 <main+0xb4a>
			{
				case 0:case 1:
					motor_init();
     b28:	0e 94 0e 13 	call	0x261c	; 0x261c <motor_init>
					STEP[0] = find(RXString,'X');
     b2c:	68 e5       	ldi	r22, 0x58	; 88
     b2e:	85 ed       	ldi	r24, 0xD5	; 213
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 40 03 	call	0x680	; 0x680 <find>
     b36:	68 2f       	mov	r22, r24
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__floatunsisf>
     b42:	f3 01       	movw	r30, r6
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
					STEP[1] = find(RXString,'Y');
     b4c:	69 e5       	ldi	r22, 0x59	; 89
     b4e:	85 ed       	ldi	r24, 0xD5	; 213
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 40 03 	call	0x680	; 0x680 <find>
     b56:	68 2f       	mov	r22, r24
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__floatunsisf>
     b62:	f3 01       	movw	r30, r6
     b64:	64 83       	std	Z+4, r22	; 0x04
     b66:	75 83       	std	Z+5, r23	; 0x05
     b68:	86 83       	std	Z+6, r24	; 0x06
     b6a:	97 83       	std	Z+7, r25	; 0x07
					STEP[2] = find(RXString,'Z');
     b6c:	6a e5       	ldi	r22, 0x5A	; 90
     b6e:	85 ed       	ldi	r24, 0xD5	; 213
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 40 03 	call	0x680	; 0x680 <find>
     b76:	68 2f       	mov	r22, r24
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__floatunsisf>
     b82:	f3 01       	movw	r30, r6
     b84:	60 87       	std	Z+8, r22	; 0x08
     b86:	71 87       	std	Z+9, r23	; 0x09
     b88:	82 87       	std	Z+10, r24	; 0x0a
     b8a:	93 87       	std	Z+11, r25	; 0x0b
					value_1 = get_value(RXString,'X');           //extract first value
     b8c:	68 e5       	ldi	r22, 0x58	; 88
     b8e:	85 ed       	ldi	r24, 0xD5	; 213
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b96:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <value_1>
     b9a:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <value_1+0x1>
     b9e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <value_1+0x2>
     ba2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <value_1+0x3>
					value_2 = get_value(RXString,'Y'); //call function to extract second value
     ba6:	69 e5       	ldi	r22, 0x59	; 89
     ba8:	85 ed       	ldi	r24, 0xD5	; 213
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     bb0:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <value_2>
     bb4:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <value_2+0x1>
     bb8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <value_2+0x2>
     bbc:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <value_2+0x3>
					value_3 = get_value(RXString,'Z'); //call function to extract third value
     bc0:	6a e5       	ldi	r22, 0x5A	; 90
     bc2:	85 ed       	ldi	r24, 0xD5	; 213
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     bca:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <value_3>
     bce:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <value_3+0x1>
     bd2:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <value_3+0x2>
     bd6:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <value_3+0x3>
					STEP[3] = get_value(RXString,'E')*Espm;
     bda:	65 e4       	ldi	r22, 0x45	; 69
     bdc:	85 ed       	ldi	r24, 0xD5	; 213
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <Espm>
     bec:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <Espm+0x1>
     bf0:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <Espm+0x2>
     bf4:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <Espm+0x3>
     bf8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     bfc:	f3 01       	movw	r30, r6
     bfe:	64 87       	std	Z+12, r22	; 0x0c
     c00:	75 87       	std	Z+13, r23	; 0x0d
     c02:	86 87       	std	Z+14, r24	; 0x0e
     c04:	97 87       	std	Z+15, r25	; 0x0f
					if ((value_1 && value_2 && value_3) == 0)
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	a9 01       	movw	r20, r18
     c0c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <value_1>
     c10:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <value_1+0x1>
     c14:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <value_1+0x2>
     c18:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <value_1+0x3>
     c1c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <main+0x3d0>
     c24:	ee c3       	rjmp	.+2012   	; 0x1402 <main+0xbac>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	a9 01       	movw	r20, r18
     c2c:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <value_2>
     c30:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <value_2+0x1>
     c34:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <value_2+0x2>
     c38:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <value_2+0x3>
     c3c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <main+0x3f0>
     c44:	de c3       	rjmp	.+1980   	; 0x1402 <main+0xbac>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	a9 01       	movw	r20, r18
     c4c:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <value_3>
     c50:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <value_3+0x1>
     c54:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <value_3+0x2>
     c58:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <value_3+0x3>
     c5c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     c60:	81 11       	cpse	r24, r1
     c62:	b8 c3       	rjmp	.+1904   	; 0x13d4 <main+0xb7e>
     c64:	ce c3       	rjmp	.+1948   	; 0x1402 <main+0xbac>
					{
						FN = get_value(RXString,'F');
						if (FN != 0)
						{
							Fe = FN;
     c66:	c0 92 70 01 	sts	0x0170, r12	; 0x800170 <Fe>
     c6a:	d0 92 71 01 	sts	0x0171, r13	; 0x800171 <Fe+0x1>
     c6e:	e0 92 72 01 	sts	0x0172, r14	; 0x800172 <Fe+0x2>
     c72:	f0 92 73 01 	sts	0x0173, r15	; 0x800173 <Fe+0x3>
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <main+0x432>
					else
					{
						FN = get_value(RXString,'F');
						if (FN != 0)
						{
							F = FN;
     c78:	c0 92 78 01 	sts	0x0178, r12	; 0x800178 <F>
     c7c:	d0 92 79 01 	sts	0x0179, r13	; 0x800179 <F+0x1>
     c80:	e0 92 7a 01 	sts	0x017A, r14	; 0x80017a <F+0x2>
     c84:	f0 92 7b 01 	sts	0x017B, r15	; 0x80017b <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
     c88:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <value_1>
     c8c:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <value_1+0x1>
     c90:	e0 90 09 02 	lds	r14, 0x0209	; 0x800209 <value_1+0x2>
     c94:	f0 90 0a 02 	lds	r15, 0x020A	; 0x80020a <value_1+0x3>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	48 e4       	ldi	r20, 0x48	; 72
     c9e:	53 e4       	ldi	r21, 0x43	; 67
     ca0:	c7 01       	movw	r24, r14
     ca2:	b6 01       	movw	r22, r12
     ca4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
     ca8:	18 16       	cp	r1, r24
     caa:	0c f4       	brge	.+2      	; 0xcae <main+0x458>
     cac:	d8 c0       	rjmp	.+432    	; 0xe5e <main+0x608>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	48 e4       	ldi	r20, 0x48	; 72
     cb4:	53 e4       	ldi	r21, 0x43	; 67
     cb6:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <value_2>
     cba:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <value_2+0x1>
     cbe:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <value_2+0x2>
     cc2:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <value_2+0x3>
     cc6:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
     cca:	18 16       	cp	r1, r24
     ccc:	0c f4       	brge	.+2      	; 0xcd0 <main+0x47a>
     cce:	c7 c0       	rjmp	.+398    	; 0xe5e <main+0x608>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	4a ef       	ldi	r20, 0xFA	; 250
     cd6:	53 e4       	ldi	r21, 0x43	; 67
     cd8:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <value_3>
     cdc:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <value_3+0x1>
     ce0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <value_3+0x2>
     ce4:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <value_3+0x3>
     ce8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
     cec:	18 16       	cp	r1, r24
     cee:	0c f4       	brge	.+2      	; 0xcf2 <main+0x49c>
     cf0:	b6 c0       	rjmp	.+364    	; 0xe5e <main+0x608>
					{
						status = 1;
     cf2:	40 92 89 01 	sts	0x0189, r4	; 0x800189 <status>
						if (STEP[0] == 1)
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	f3 01       	movw	r30, r6
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     d0c:	81 11       	cpse	r24, r1
     d0e:	17 c0       	rjmp	.+46     	; 0xd3e <main+0x4e8>
						{
							STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
     d10:	b7 01       	movw	r22, r14
     d12:	a6 01       	movw	r20, r12
     d14:	8c e4       	ldi	r24, 0x4C	; 76
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <Xspm>
     d24:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <Xspm+0x1>
     d28:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Xspm+0x2>
     d2c:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <Xspm+0x3>
     d30:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     d34:	f3 01       	movw	r30, r6
     d36:	60 83       	st	Z, r22
     d38:	71 83       	std	Z+1, r23	; 0x01
     d3a:	82 83       	std	Z+2, r24	; 0x02
     d3c:	93 83       	std	Z+3, r25	; 0x03
						}
						if (STEP[1] == 1)
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	f3 01       	movw	r30, r6
     d48:	64 81       	ldd	r22, Z+4	; 0x04
     d4a:	75 81       	ldd	r23, Z+5	; 0x05
     d4c:	86 81       	ldd	r24, Z+6	; 0x06
     d4e:	97 81       	ldd	r25, Z+7	; 0x07
     d50:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     d54:	81 11       	cpse	r24, r1
     d56:	1d c0       	rjmp	.+58     	; 0xd92 <main+0x53c>
						{
							STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
     d58:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <value_2>
     d5c:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <value_2+0x1>
     d60:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <value_2+0x2>
     d64:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <value_2+0x3>
     d68:	88 e4       	ldi	r24, 0x48	; 72
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Yspm>
     d78:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <Yspm+0x1>
     d7c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Yspm+0x2>
     d80:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Yspm+0x3>
     d84:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     d88:	f3 01       	movw	r30, r6
     d8a:	64 83       	std	Z+4, r22	; 0x04
     d8c:	75 83       	std	Z+5, r23	; 0x05
     d8e:	86 83       	std	Z+6, r24	; 0x06
     d90:	97 83       	std	Z+7, r25	; 0x07
						}
						if (STEP[2] == 1)
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	f3 01       	movw	r30, r6
     d9c:	60 85       	ldd	r22, Z+8	; 0x08
     d9e:	71 85       	ldd	r23, Z+9	; 0x09
     da0:	82 85       	ldd	r24, Z+10	; 0x0a
     da2:	93 85       	ldd	r25, Z+11	; 0x0b
     da4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     da8:	81 11       	cpse	r24, r1
     daa:	1d c0       	rjmp	.+58     	; 0xde6 <main+0x590>
						{
							STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
     dac:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <value_3>
     db0:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <value_3+0x1>
     db4:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <value_3+0x2>
     db8:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <value_3+0x3>
     dbc:	84 e4       	ldi	r24, 0x44	; 68
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <Zspm>
     dcc:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <Zspm+0x1>
     dd0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <Zspm+0x2>
     dd4:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <Zspm+0x3>
     dd8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     ddc:	f3 01       	movw	r30, r6
     dde:	60 87       	std	Z+8, r22	; 0x08
     de0:	71 87       	std	Z+9, r23	; 0x09
     de2:	82 87       	std	Z+10, r24	; 0x0a
     de4:	93 87       	std	Z+11, r25	; 0x0b
						}
						value_1 = 0;
     de6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <value_1>
     dea:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <value_1+0x1>
     dee:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <value_1+0x2>
     df2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <value_1+0x3>
						value_2 = 0;
     df6:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <value_2>
     dfa:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <value_2+0x1>
     dfe:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <value_2+0x2>
     e02:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <value_2+0x3>
						value_3 = 0;
     e06:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <value_3>
     e0a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <value_3+0x1>
     e0e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <value_3+0x2>
     e12:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <value_3+0x3>
						if ((extrud || Fextrud))
     e16:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <extrud>
     e1a:	81 11       	cpse	r24, r1
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <main+0x5d0>
     e1e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <Fextrud>
     e22:	88 23       	and	r24, r24
     e24:	a1 f0       	breq	.+40     	; 0xe4e <main+0x5f8>
						{
							motor_movement(STEP,F,Fe);
     e26:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <Fe>
     e2a:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <Fe+0x1>
     e2e:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <Fe+0x2>
     e32:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <Fe+0x3>
     e36:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <F>
     e3a:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <F+0x1>
     e3e:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <F+0x2>
     e42:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <F+0x3>
     e46:	c3 01       	movw	r24, r6
     e48:	0e 94 8e 11 	call	0x231c	; 0x231c <motor_movement>
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <main+0x608>
						}
						else
						{
							Transmit_Data("error extruder temp.");
     e4e:	85 e1       	ldi	r24, 0x15	; 21
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
							Transmit_Char('\r');
     e56:	8d e0       	ldi	r24, 0x0D	; 13
     e58:	0e 94 97 14 	call	0x292e	; 0x292e <Transmit_Char>
							break;
     e5c:	a1 c2       	rjmp	.+1346   	; 0x13a0 <main+0xb4a>
						}
					}
					Transmit_Data("ok\n");
     e5e:	81 e1       	ldi	r24, 0x11	; 17
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				break;
     e66:	9c c2       	rjmp	.+1336   	; 0x13a0 <main+0xb4a>
				case 2:case 3:
					value_1 = get_value(RXString,'X');  //extract first value
     e68:	68 e5       	ldi	r22, 0x58	; 88
     e6a:	85 ed       	ldi	r24, 0xD5	; 213
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     e72:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <value_1>
     e76:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <value_1+0x1>
     e7a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <value_1+0x2>
     e7e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <value_1+0x3>
					value_2 = get_value(RXString,'Y'); //call function to extract second value
     e82:	69 e5       	ldi	r22, 0x59	; 89
     e84:	85 ed       	ldi	r24, 0xD5	; 213
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     e8c:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <value_2>
     e90:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <value_2+0x1>
     e94:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <value_2+0x2>
     e98:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <value_2+0x3>
					I = get_value(RXString,'I');
     e9c:	69 e4       	ldi	r22, 0x49	; 73
     e9e:	85 ed       	ldi	r24, 0xD5	; 213
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ea6:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <I>
     eaa:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <I+0x1>
     eae:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <I+0x2>
     eb2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <I+0x3>
					J = get_value(RXString,'J');
     eb6:	6a e4       	ldi	r22, 0x4A	; 74
     eb8:	85 ed       	ldi	r24, 0xD5	; 213
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ec0:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <J>
     ec4:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <J+0x1>
     ec8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <J+0x2>
     ecc:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <J+0x3>
					FN = get_value(RXString,'F');
     ed0:	66 e4       	ldi	r22, 0x46	; 70
     ed2:	85 ed       	ldi	r24, 0xD5	; 213
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     eda:	6b 01       	movw	r12, r22
     edc:	7c 01       	movw	r14, r24
     ede:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <FN>
     ee2:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <FN+0x1>
     ee6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <FN+0x2>
     eea:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <FN+0x3>
					if (FN != 0)
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	a9 01       	movw	r20, r18
     ef4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     ef8:	88 23       	and	r24, r24
     efa:	41 f0       	breq	.+16     	; 0xf0c <main+0x6b6>
					{
						F = FN;
     efc:	c0 92 78 01 	sts	0x0178, r12	; 0x800178 <F>
     f00:	d0 92 79 01 	sts	0x0179, r13	; 0x800179 <F+0x1>
     f04:	e0 92 7a 01 	sts	0x017A, r14	; 0x80017a <F+0x2>
     f08:	f0 92 7b 01 	sts	0x017B, r15	; 0x80017b <F+0x3>
					}
					R = get_value(RXString,'R');
     f0c:	62 e5       	ldi	r22, 0x52	; 82
     f0e:	85 ed       	ldi	r24, 0xD5	; 213
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     f16:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <R>
     f1a:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <R+0x1>
     f1e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <R+0x2>
     f22:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <R+0x3>
					if (R == 0)
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
     f30:	81 11       	cpse	r24, r1
     f32:	7e c2       	rjmp	.+1276   	; 0x1430 <main+0xbda>
					{
						R = sqrt(pow(I,2)+pow(J,2));
     f34:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <I>
     f38:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <I+0x1>
     f3c:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <I+0x2>
     f40:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <I+0x3>
     f44:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <J>
     f48:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <J+0x1>
     f4c:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <J+0x2>
     f50:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <J+0x3>
     f54:	a7 01       	movw	r20, r14
     f56:	96 01       	movw	r18, r12
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     f60:	69 83       	std	Y+1, r22	; 0x01
     f62:	7a 83       	std	Y+2, r23	; 0x02
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	a7 01       	movw	r20, r14
     f6a:	96 01       	movw	r18, r12
     f6c:	c7 01       	movw	r24, r14
     f6e:	b6 01       	movw	r22, r12
     f70:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	a5 01       	movw	r20, r10
     f7a:	94 01       	movw	r18, r8
     f7c:	c5 01       	movw	r24, r10
     f7e:	b4 01       	movw	r22, r8
     f80:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
     f90:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <sqrt>
     f94:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <R>
     f98:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <R+0x1>
     f9c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <R+0x2>
     fa0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <R+0x3>
     fa4:	45 c2       	rjmp	.+1162   	; 0x1430 <main+0xbda>
					}
					for (int th = 0 ; th <= 360 ; th++)
					{
						double xc = R*cos(th)*cos(th);
     fa6:	28 85       	ldd	r18, Y+8	; 0x08
     fa8:	39 85       	ldd	r19, Y+9	; 0x09
     faa:	b9 01       	movw	r22, r18
     fac:	33 0f       	add	r19, r19
     fae:	88 0b       	sbc	r24, r24
     fb0:	99 0b       	sbc	r25, r25
     fb2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__floatsisf>
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
     fba:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <cos>
     fbe:	69 83       	std	Y+1, r22	; 0x01
     fc0:	7a 83       	std	Y+2, r23	; 0x02
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	80 90 60 01 	lds	r8, 0x0160	; 0x800160 <R>
     fca:	90 90 61 01 	lds	r9, 0x0161	; 0x800161 <R+0x1>
     fce:	a0 90 62 01 	lds	r10, 0x0162	; 0x800162 <R+0x2>
     fd2:	b0 90 63 01 	lds	r11, 0x0163	; 0x800163 <R+0x3>
     fd6:	a5 01       	movw	r20, r10
     fd8:	94 01       	movw	r18, r8
     fda:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	4b 81       	ldd	r20, Y+3	; 0x03
     fe4:	5c 81       	ldd	r21, Y+4	; 0x04
     fe6:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
						double yc = R*sin(th)*sin(th);
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <sin>
     ffa:	6b 01       	movw	r12, r22
     ffc:	7c 01       	movw	r14, r24
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c5 01       	movw	r24, r10
    1004:	b4 01       	movw	r22, r8
    1006:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    100a:	a7 01       	movw	r20, r14
    100c:	96 01       	movw	r18, r12
    100e:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    1012:	6b 01       	movw	r12, r22
    1014:	7c 01       	movw	r14, r24
						if ((xc >= value_1) && (yc >= value_2))
    1016:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <value_1>
    101a:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <value_1+0x1>
    101e:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <value_1+0x2>
    1022:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <value_1+0x3>
    1026:	69 81       	ldd	r22, Y+1	; 0x01
    1028:	7a 81       	ldd	r23, Y+2	; 0x02
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    1032:	88 23       	and	r24, r24
    1034:	7c f0       	brlt	.+30     	; 0x1054 <main+0x7fe>
    1036:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <value_2>
    103a:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <value_2+0x1>
    103e:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <value_2+0x2>
    1042:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <value_2+0x3>
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    104e:	88 23       	and	r24, r24
    1050:	0c f0       	brlt	.+2      	; 0x1054 <main+0x7fe>
    1052:	a0 c1       	rjmp	.+832    	; 0x1394 <main+0xb3e>
						break;
						if ((extrud || Fextrud))
    1054:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <extrud>
    1058:	81 11       	cpse	r24, r1
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <main+0x810>
    105c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <Fextrud>
    1060:	88 23       	and	r24, r24
    1062:	09 f4       	brne	.+2      	; 0x1066 <main+0x810>
    1064:	8d c1       	rjmp	.+794    	; 0x1380 <main+0xb2a>
						{
							if (val == 2)
    1066:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <val>
    106a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <val+0x1>
    106e:	02 97       	sbiw	r24, 0x02	; 2
    1070:	09 f0       	breq	.+2      	; 0x1074 <main+0x81e>
    1072:	ae c0       	rjmp	.+348    	; 0x11d0 <main+0x97a>
							{
								if ((I == 0) && (J == 0))
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a9 01       	movw	r20, r18
    107a:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <I>
    107e:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <I+0x1>
    1082:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <I+0x2>
    1086:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <I+0x3>
    108a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    108e:	81 11       	cpse	r24, r1
    1090:	40 c0       	rjmp	.+128    	; 0x1112 <main+0x8bc>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <J>
    109c:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <J+0x1>
    10a0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <J+0x2>
    10a4:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <J+0x3>
    10a8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    10ac:	81 11       	cpse	r24, r1
    10ae:	31 c0       	rjmp	.+98     	; 0x1112 <main+0x8bc>
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm;     //call function to extract first step
    10b0:	49 81       	ldd	r20, Y+1	; 0x01
    10b2:	5a 81       	ldd	r21, Y+2	; 0x02
    10b4:	6b 81       	ldd	r22, Y+3	; 0x03
    10b6:	7c 81       	ldd	r23, Y+4	; 0x04
    10b8:	8c e4       	ldi	r24, 0x4C	; 76
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <Xspm>
    10c8:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <Xspm+0x1>
    10cc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Xspm+0x2>
    10d0:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <Xspm+0x3>
    10d4:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    10d8:	f3 01       	movw	r30, r6
    10da:	60 83       	st	Z, r22
    10dc:	71 83       	std	Z+1, r23	; 0x01
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm;    //call function to extract second step
    10e2:	b7 01       	movw	r22, r14
    10e4:	a6 01       	movw	r20, r12
    10e6:	88 e4       	ldi	r24, 0x48	; 72
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Yspm>
    10f6:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <Yspm+0x1>
    10fa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Yspm+0x2>
    10fe:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Yspm+0x3>
    1102:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    1106:	f3 01       	movw	r30, r6
    1108:	64 83       	std	Z+4, r22	; 0x04
    110a:	75 83       	std	Z+5, r23	; 0x05
    110c:	86 83       	std	Z+6, r24	; 0x06
    110e:	97 83       	std	Z+7, r25	; 0x07
    1110:	10 c1       	rjmp	.+544    	; 0x1332 <main+0xadc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(-I/I);     //call function to extract first step
    1112:	49 81       	ldd	r20, Y+1	; 0x01
    1114:	5a 81       	ldd	r21, Y+2	; 0x02
    1116:	6b 81       	ldd	r22, Y+3	; 0x03
    1118:	7c 81       	ldd	r23, Y+4	; 0x04
    111a:	8c e4       	ldi	r24, 0x4C	; 76
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1122:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <I>
    1126:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <I+0x1>
    112a:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <I+0x2>
    112e:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <I+0x3>
    1132:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <Xspm>
    1136:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <Xspm+0x1>
    113a:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <Xspm+0x2>
    113e:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <Xspm+0x3>
    1142:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    1146:	69 83       	std	Y+1, r22	; 0x01
    1148:	7a 83       	std	Y+2, r23	; 0x02
    114a:	8b 83       	std	Y+3, r24	; 0x03
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	c5 01       	movw	r24, r10
    1150:	b4 01       	movw	r22, r8
    1152:	90 58       	subi	r25, 0x80	; 128
    1154:	a5 01       	movw	r20, r10
    1156:	94 01       	movw	r18, r8
    1158:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	69 81       	ldd	r22, Y+1	; 0x01
    1162:	7a 81       	ldd	r23, Y+2	; 0x02
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    116c:	f3 01       	movw	r30, r6
    116e:	60 83       	st	Z, r22
    1170:	71 83       	std	Z+1, r23	; 0x01
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(-J/J);    //call function to extract second step
    1176:	b7 01       	movw	r22, r14
    1178:	a6 01       	movw	r20, r12
    117a:	88 e4       	ldi	r24, 0x48	; 72
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1182:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <J>
    1186:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <J+0x1>
    118a:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <J+0x2>
    118e:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <J+0x3>
    1192:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <Yspm>
    1196:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <Yspm+0x1>
    119a:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <Yspm+0x2>
    119e:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <Yspm+0x3>
    11a2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    11a6:	4b 01       	movw	r8, r22
    11a8:	5c 01       	movw	r10, r24
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	90 58       	subi	r25, 0x80	; 128
    11b0:	a7 01       	movw	r20, r14
    11b2:	96 01       	movw	r18, r12
    11b4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	c5 01       	movw	r24, r10
    11be:	b4 01       	movw	r22, r8
    11c0:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    11c4:	f3 01       	movw	r30, r6
    11c6:	64 83       	std	Z+4, r22	; 0x04
    11c8:	75 83       	std	Z+5, r23	; 0x05
    11ca:	86 83       	std	Z+6, r24	; 0x06
    11cc:	97 83       	std	Z+7, r25	; 0x07
    11ce:	b1 c0       	rjmp	.+354    	; 0x1332 <main+0xadc>
								}
							}
							else
							{
								if ((I == 0) && (J == 0))
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <I>
    11da:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <I+0x1>
    11de:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <I+0x2>
    11e2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <I+0x3>
    11e6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    11ea:	81 11       	cpse	r24, r1
    11ec:	46 c0       	rjmp	.+140    	; 0x127a <main+0xa24>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <J>
    11f8:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <J+0x1>
    11fc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <J+0x2>
    1200:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <J+0x3>
    1204:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    1208:	81 11       	cpse	r24, r1
    120a:	37 c0       	rjmp	.+110    	; 0x127a <main+0xa24>
								{
									STEP[0] = sub_function (&old_val_1, xc)*-Xspm;     //call function to extract first step
    120c:	49 81       	ldd	r20, Y+1	; 0x01
    120e:	5a 81       	ldd	r21, Y+2	; 0x02
    1210:	6b 81       	ldd	r22, Y+3	; 0x03
    1212:	7c 81       	ldd	r23, Y+4	; 0x04
    1214:	8c e4       	ldi	r24, 0x4C	; 76
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <Xspm>
    1224:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <Xspm+0x1>
    1228:	a0 91 c9 02 	lds	r26, 0x02C9	; 0x8002c9 <Xspm+0x2>
    122c:	b0 91 ca 02 	lds	r27, 0x02CA	; 0x8002ca <Xspm+0x3>
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	90 58       	subi	r25, 0x80	; 128
    1236:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    123a:	f3 01       	movw	r30, r6
    123c:	60 83       	st	Z, r22
    123e:	71 83       	std	Z+1, r23	; 0x01
    1240:	82 83       	std	Z+2, r24	; 0x02
    1242:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*-Yspm;    //call function to extract second step
    1244:	b7 01       	movw	r22, r14
    1246:	a6 01       	movw	r20, r12
    1248:	88 e4       	ldi	r24, 0x48	; 72
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Yspm>
    1258:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <Yspm+0x1>
    125c:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <Yspm+0x2>
    1260:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <Yspm+0x3>
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	90 58       	subi	r25, 0x80	; 128
    126a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    126e:	f3 01       	movw	r30, r6
    1270:	64 83       	std	Z+4, r22	; 0x04
    1272:	75 83       	std	Z+5, r23	; 0x05
    1274:	86 83       	std	Z+6, r24	; 0x06
    1276:	97 83       	std	Z+7, r25	; 0x07
    1278:	5c c0       	rjmp	.+184    	; 0x1332 <main+0xadc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
    127a:	49 81       	ldd	r20, Y+1	; 0x01
    127c:	5a 81       	ldd	r21, Y+2	; 0x02
    127e:	6b 81       	ldd	r22, Y+3	; 0x03
    1280:	7c 81       	ldd	r23, Y+4	; 0x04
    1282:	8c e4       	ldi	r24, 0x4C	; 76
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    128a:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <I>
    128e:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <I+0x1>
    1292:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <I+0x2>
    1296:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <I+0x3>
    129a:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <Xspm>
    129e:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <Xspm+0x1>
    12a2:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <Xspm+0x2>
    12a6:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <Xspm+0x3>
    12aa:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    12ae:	69 83       	std	Y+1, r22	; 0x01
    12b0:	7a 83       	std	Y+2, r23	; 0x02
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	a5 01       	movw	r20, r10
    12b8:	94 01       	movw	r18, r8
    12ba:	c5 01       	movw	r24, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	69 81       	ldd	r22, Y+1	; 0x01
    12c8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    12d2:	f3 01       	movw	r30, r6
    12d4:	60 83       	st	Z, r22
    12d6:	71 83       	std	Z+1, r23	; 0x01
    12d8:	82 83       	std	Z+2, r24	; 0x02
    12da:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
    12dc:	b7 01       	movw	r22, r14
    12de:	a6 01       	movw	r20, r12
    12e0:	88 e4       	ldi	r24, 0x48	; 72
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    12e8:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <J>
    12ec:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <J+0x1>
    12f0:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <J+0x2>
    12f4:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <J+0x3>
    12f8:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <Yspm>
    12fc:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <Yspm+0x1>
    1300:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <Yspm+0x2>
    1304:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <Yspm+0x3>
    1308:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    130c:	4b 01       	movw	r8, r22
    130e:	5c 01       	movw	r10, r24
    1310:	a7 01       	movw	r20, r14
    1312:	96 01       	movw	r18, r12
    1314:	c7 01       	movw	r24, r14
    1316:	b6 01       	movw	r22, r12
    1318:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	c5 01       	movw	r24, r10
    1322:	b4 01       	movw	r22, r8
    1324:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    1328:	f3 01       	movw	r30, r6
    132a:	64 83       	std	Z+4, r22	; 0x04
    132c:	75 83       	std	Z+5, r23	; 0x05
    132e:	86 83       	std	Z+6, r24	; 0x06
    1330:	97 83       	std	Z+7, r25	; 0x07
								}
							}
							STEP[2] = 0;
    1332:	f3 01       	movw	r30, r6
    1334:	10 86       	std	Z+8, r1	; 0x08
    1336:	11 86       	std	Z+9, r1	; 0x09
    1338:	12 86       	std	Z+10, r1	; 0x0a
    133a:	13 86       	std	Z+11, r1	; 0x0b
							STEP[3] = Espm;
    133c:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <Espm>
    1340:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <Espm+0x1>
    1344:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <Espm+0x2>
    1348:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <Espm+0x3>
    134c:	84 87       	std	Z+12, r24	; 0x0c
    134e:	95 87       	std	Z+13, r25	; 0x0d
    1350:	a6 87       	std	Z+14, r26	; 0x0e
    1352:	b7 87       	std	Z+15, r27	; 0x0f
							status = 1;
    1354:	40 92 89 01 	sts	0x0189, r4	; 0x800189 <status>
							motor_movement(STEP,F,Fe);
    1358:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <Fe>
    135c:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <Fe+0x1>
    1360:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <Fe+0x2>
    1364:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <Fe+0x3>
    1368:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <F>
    136c:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <F+0x1>
    1370:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <F+0x2>
    1374:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <F+0x3>
    1378:	85 2d       	mov	r24, r5
    137a:	93 2d       	mov	r25, r3
    137c:	0e 94 8e 11 	call	0x231c	; 0x231c <motor_movement>
					R = get_value(RXString,'R');
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					}
					for (int th = 0 ; th <= 360 ; th++)
    1380:	28 85       	ldd	r18, Y+8	; 0x08
    1382:	39 85       	ldd	r19, Y+9	; 0x09
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	39 87       	std	Y+9, r19	; 0x09
    138a:	28 87       	std	Y+8, r18	; 0x08
    138c:	29 36       	cpi	r18, 0x69	; 105
    138e:	31 40       	sbci	r19, 0x01	; 1
    1390:	09 f0       	breq	.+2      	; 0x1394 <main+0xb3e>
    1392:	09 ce       	rjmp	.-1006   	; 0xfa6 <main+0x750>
    1394:	2d 80       	ldd	r2, Y+5	; 0x05
    1396:	3e 80       	ldd	r3, Y+6	; 0x06
							STEP[3] = Espm;
							status = 1;
							motor_movement(STEP,F,Fe);
						}
					}
					Transmit_Data("ok\n");
    1398:	81 e1       	ldi	r24, 0x11	; 17
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				break;
			}
			status = 0;
    13a0:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <status>
			STEP[0] = 0;
    13a4:	f3 01       	movw	r30, r6
    13a6:	10 82       	st	Z, r1
    13a8:	11 82       	std	Z+1, r1	; 0x01
    13aa:	12 82       	std	Z+2, r1	; 0x02
    13ac:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    13ae:	14 82       	std	Z+4, r1	; 0x04
    13b0:	15 82       	std	Z+5, r1	; 0x05
    13b2:	16 82       	std	Z+6, r1	; 0x06
    13b4:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    13b6:	10 86       	std	Z+8, r1	; 0x08
    13b8:	11 86       	std	Z+9, r1	; 0x09
    13ba:	12 86       	std	Z+10, r1	; 0x0a
    13bc:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    13be:	14 86       	std	Z+12, r1	; 0x0c
    13c0:	15 86       	std	Z+13, r1	; 0x0d
    13c2:	16 86       	std	Z+14, r1	; 0x0e
    13c4:	17 86       	std	Z+15, r1	; 0x0f
    13c6:	e5 ed       	ldi	r30, 0xD5	; 213
    13c8:	f2 e0       	ldi	r31, 0x02	; 2
			for (int i = 0 ; i < 80 ;i++)
			{
				RXString [i] = 0;
    13ca:	11 92       	st	Z+, r1
			status = 0;
			STEP[0] = 0;
			STEP[1] = 0;
			STEP[2] = 0;
			STEP[3] = 0;
			for (int i = 0 ; i < 80 ;i++)
    13cc:	2e 16       	cp	r2, r30
    13ce:	3f 06       	cpc	r3, r31
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <main+0xb74>
    13d2:	ad ca       	rjmp	.-2726   	; 0x92e <main+0xd8>
							Fe = FN;
						}
					}
					else
					{
						FN = get_value(RXString,'F');
    13d4:	66 e4       	ldi	r22, 0x46	; 70
    13d6:	85 ed       	ldi	r24, 0xD5	; 213
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    13de:	6b 01       	movw	r12, r22
    13e0:	7c 01       	movw	r14, r24
    13e2:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <FN>
    13e6:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <FN+0x1>
    13ea:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <FN+0x2>
    13ee:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <FN+0x3>
						if (FN != 0)
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    13fc:	81 11       	cpse	r24, r1
    13fe:	3c cc       	rjmp	.-1928   	; 0xc78 <main+0x422>
    1400:	43 cc       	rjmp	.-1914   	; 0xc88 <main+0x432>
					value_2 = get_value(RXString,'Y'); //call function to extract second value
					value_3 = get_value(RXString,'Z'); //call function to extract third value
					STEP[3] = get_value(RXString,'E')*Espm;
					if ((value_1 && value_2 && value_3) == 0)
					{
						FN = get_value(RXString,'F');
    1402:	66 e4       	ldi	r22, 0x46	; 70
    1404:	85 ed       	ldi	r24, 0xD5	; 213
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    140c:	6b 01       	movw	r12, r22
    140e:	7c 01       	movw	r14, r24
    1410:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <FN>
    1414:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <FN+0x1>
    1418:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <FN+0x2>
    141c:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <FN+0x3>
						if (FN != 0)
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    142a:	81 11       	cpse	r24, r1
    142c:	1c cc       	rjmp	.-1992   	; 0xc66 <main+0x410>
    142e:	2c cc       	rjmp	.-1960   	; 0xc88 <main+0x432>
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	39 87       	std	Y+9, r19	; 0x09
    1436:	28 87       	std	Y+8, r18	; 0x08
    1438:	3e 82       	std	Y+6, r3	; 0x06
    143a:	2d 82       	std	Y+5, r2	; 0x05
    143c:	3f 80       	ldd	r3, Y+7	; 0x07
    143e:	b3 cd       	rjmp	.-1178   	; 0xfa6 <main+0x750>

00001440 <__vector_9>:
	TIMSK |= (1 << TOIE0) |(1<<OCIE0);
	TCNT0  = 0;
	sei();
}
ISR(TIMER0_OVF_vect)
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	64 97       	sbiw	r28, 0x14	; 20
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	cd bf       	out	0x3d, r28	; 61
	if (gFlags.pidTimer == 1)
    1478:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gFlags>
    147c:	80 ff       	sbrs	r24, 0
    147e:	33 c0       	rjmp	.+102    	; 0x14e6 <__vector_9+0xa6>
	{
		OCR1A =	255 - pid_Controller(SE0	,getTemp(T0), &SpidData); //out the pid value to control the temperature of extruder
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <SE0>
    148e:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <SE0+0x1>
    1492:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <SE0+0x2>
    1496:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <SE0+0x3>
    149a:	0b ec       	ldi	r16, 0xCB	; 203
    149c:	11 e0       	ldi	r17, 0x01	; 1
    149e:	0e 94 95 13 	call	0x272a	; 0x272a <pid_Controller>
    14a2:	ee 24       	eor	r14, r14
    14a4:	ea 94       	dec	r14
    14a6:	f1 2c       	mov	r15, r1
    14a8:	97 01       	movw	r18, r14
    14aa:	28 1b       	sub	r18, r24
    14ac:	39 0b       	sbc	r19, r25
    14ae:	3b bd       	out	0x2b, r19	; 43
    14b0:	2a bd       	out	0x2a, r18	; 42
		OCR1B = 255 - pid_Controller(SB	,getTemp(T2), &BpidData); //out the pid value to control the temperature of heat bed
    14b2:	82 e4       	ldi	r24, 0x42	; 66
    14b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <SB>
    14c0:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <SB+0x1>
    14c4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SB+0x2>
    14c8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SB+0x3>
    14cc:	07 ee       	ldi	r16, 0xE7	; 231
    14ce:	11 e0       	ldi	r17, 0x01	; 1
    14d0:	0e 94 95 13 	call	0x272a	; 0x272a <pid_Controller>
    14d4:	e8 1a       	sub	r14, r24
    14d6:	f9 0a       	sbc	r15, r25
    14d8:	f9 bc       	out	0x29, r15	; 41
    14da:	e8 bc       	out	0x28, r14	; 40
		gFlags.pidTimer = 0;
    14dc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gFlags>
    14e0:	8e 7f       	andi	r24, 0xFE	; 254
    14e2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gFlags>
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
    14e6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <status>
    14ea:	88 23       	and	r24, r24
    14ec:	31 f0       	breq	.+12     	; 0x14fa <__vector_9+0xba>
    14ee:	5f 9b       	sbis	0x0b, 7	; 11
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__vector_9+0xba>
	{
		Recive_Data(String2);
    14f2:	8b e0       	ldi	r24, 0x0B	; 11
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 ae 14 	call	0x295c	; 0x295c <Recive_Data>
	}
	if (String2[0] == 'M' )
    14fa:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <String2>
    14fe:	8d 34       	cpi	r24, 0x4D	; 77
    1500:	09 f0       	breq	.+2      	; 0x1504 <__vector_9+0xc4>
    1502:	6e c1       	rjmp	.+732    	; 0x17e0 <__vector_9+0x3a0>
	{
		SUBval = get_int(String2,'M');
    1504:	6d e4       	ldi	r22, 0x4D	; 77
    1506:	8b e0       	ldi	r24, 0x0B	; 11
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    150e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <SUBval+0x1>
    1512:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <SUBval>
		if (SUBval == 112)
    1516:	80 37       	cpi	r24, 0x70	; 112
    1518:	91 05       	cpc	r25, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <__vector_9+0xde>
    151c:	b6 c0       	rjmp	.+364    	; 0x168a <__vector_9+0x24a>
		{
			value_1 = 0;  //extract first value
    151e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <value_1>
    1522:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <value_1+0x1>
    1526:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <value_1+0x2>
    152a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <value_1+0x3>
			value_2 = 0; //call function to extract second value
    152e:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <value_2>
    1532:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <value_2+0x1>
    1536:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <value_2+0x2>
    153a:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <value_2+0x3>
			value_3 = 0; //call function to extract third value
    153e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <value_3>
    1542:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <value_3+0x1>
    1546:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <value_3+0x2>
    154a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <value_3+0x3>
			STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ba 01       	movw	r22, r20
    1554:	8c e4       	ldi	r24, 0x4C	; 76
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	0f 2e       	mov	r0, r31
    1562:	ff e9       	ldi	r31, 0x9F	; 159
    1564:	ef 2e       	mov	r14, r31
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	ff 2e       	mov	r15, r31
    156a:	f0 2d       	mov	r31, r0
    156c:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <Xspm>
    1570:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <Xspm+0x1>
    1574:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Xspm+0x2>
    1578:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <Xspm+0x3>
    157c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    1580:	f7 01       	movw	r30, r14
    1582:	60 83       	st	Z, r22
    1584:	71 83       	std	Z+1, r23	; 0x01
    1586:	82 83       	std	Z+2, r24	; 0x02
    1588:	93 83       	std	Z+3, r25	; 0x03
			STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    158a:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <value_2>
    158e:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <value_2+0x1>
    1592:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <value_2+0x2>
    1596:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <value_2+0x3>
    159a:	88 e4       	ldi	r24, 0x48	; 72
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    15a2:	9b 01       	movw	r18, r22
    15a4:	ac 01       	movw	r20, r24
    15a6:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Yspm>
    15aa:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <Yspm+0x1>
    15ae:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Yspm+0x2>
    15b2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Yspm+0x3>
    15b6:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    15ba:	f7 01       	movw	r30, r14
    15bc:	64 83       	std	Z+4, r22	; 0x04
    15be:	75 83       	std	Z+5, r23	; 0x05
    15c0:	86 83       	std	Z+6, r24	; 0x06
    15c2:	97 83       	std	Z+7, r25	; 0x07
			STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    15c4:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <value_3>
    15c8:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <value_3+0x1>
    15cc:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <value_3+0x2>
    15d0:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <value_3+0x3>
    15d4:	84 e4       	ldi	r24, 0x44	; 68
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sub_function>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <Zspm>
    15e4:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <Zspm+0x1>
    15e8:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <Zspm+0x2>
    15ec:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <Zspm+0x3>
    15f0:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    15f4:	f7 01       	movw	r30, r14
    15f6:	60 87       	std	Z+8, r22	; 0x08
    15f8:	71 87       	std	Z+9, r23	; 0x09
    15fa:	82 87       	std	Z+10, r24	; 0x0a
    15fc:	93 87       	std	Z+11, r25	; 0x0b
			STEP[3] = 0;
    15fe:	14 86       	std	Z+12, r1	; 0x0c
    1600:	15 86       	std	Z+13, r1	; 0x0d
    1602:	16 86       	std	Z+14, r1	; 0x0e
    1604:	17 86       	std	Z+15, r1	; 0x0f
			F = 0;
    1606:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <F>
    160a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <F+0x1>
    160e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <F+0x2>
    1612:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <F+0x3>
			Fe = 0;
    1616:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <Fe>
    161a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <Fe+0x1>
    161e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Fe+0x2>
    1622:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Fe+0x3>
			SE0 = 0;
    1626:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <SE0>
    162a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <SE0+0x1>
    162e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <SE0+0x2>
    1632:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <SE0+0x3>
			SB = 0;
    1636:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <SB>
    163a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <SB+0x1>
    163e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <SB+0x2>
    1642:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <SB+0x3>
			status = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <status>
			motor_movement(STEP,F,Fe);
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	10 e0       	ldi	r17, 0x00	; 0
    1650:	98 01       	movw	r18, r16
    1652:	b9 01       	movw	r22, r18
    1654:	a8 01       	movw	r20, r16
    1656:	c7 01       	movw	r24, r14
    1658:	0e 94 8e 11 	call	0x231c	; 0x231c <motor_movement>
			STEP[0] = 0;
    165c:	f7 01       	movw	r30, r14
    165e:	10 82       	st	Z, r1
    1660:	11 82       	std	Z+1, r1	; 0x01
    1662:	12 82       	std	Z+2, r1	; 0x02
    1664:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1666:	14 82       	std	Z+4, r1	; 0x04
    1668:	15 82       	std	Z+5, r1	; 0x05
    166a:	16 82       	std	Z+6, r1	; 0x06
    166c:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    166e:	10 86       	std	Z+8, r1	; 0x08
    1670:	11 86       	std	Z+9, r1	; 0x09
    1672:	12 86       	std	Z+10, r1	; 0x0a
    1674:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1676:	14 86       	std	Z+12, r1	; 0x0c
    1678:	15 86       	std	Z+13, r1	; 0x0d
    167a:	16 86       	std	Z+14, r1	; 0x0e
    167c:	17 86       	std	Z+15, r1	; 0x0f
			status = 0;
    167e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <status>
			Transmit_Data("ok\n");
    1682:	81 e1       	ldi	r24, 0x11	; 17
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
		}
		if (SUBval == 105)
    168a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <SUBval>
    168e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <SUBval+0x1>
    1692:	89 36       	cpi	r24, 0x69	; 105
    1694:	91 05       	cpc	r25, r1
    1696:	09 f0       	breq	.+2      	; 0x169a <__vector_9+0x25a>
    1698:	9e c0       	rjmp	.+316    	; 0x17d6 <__vector_9+0x396>
		{
			if (START)
    169a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <START>
    169e:	88 23       	and	r24, r24
    16a0:	51 f0       	breq	.+20     	; 0x16b6 <__vector_9+0x276>
			{
				Transmit_Data("welcome we are PRISCA");
    16a2:	8a e2       	ldi	r24, 0x2A	; 42
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
				Transmit_Char('\r');
    16aa:	8d e0       	ldi	r24, 0x0D	; 13
    16ac:	0e 94 97 14 	call	0x292e	; 0x292e <Transmit_Char>
				START = 0;
    16b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <START>
    16b4:	90 c0       	rjmp	.+288    	; 0x17d6 <__vector_9+0x396>
			}
			else
			{
				if (STARTP)
    16b6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <STARTP>
    16ba:	88 23       	and	r24, r24
    16bc:	39 f0       	breq	.+14     	; 0x16cc <__vector_9+0x28c>
				{
					Transmit_Data("ok\n");
    16be:	81 e1       	ldi	r24, 0x11	; 17
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					STARTP = 0;
    16c6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <STARTP>
    16ca:	85 c0       	rjmp	.+266    	; 0x17d6 <__vector_9+0x396>
    16cc:	e5 e2       	ldi	r30, 0x25	; 37
    16ce:	f3 e0       	ldi	r31, 0x03	; 3
    16d0:	af ea       	ldi	r26, 0xAF	; 175
    16d2:	b1 e0       	ldi	r27, 0x01	; 1
    16d4:	8f e2       	ldi	r24, 0x2F	; 47
    16d6:	93 e0       	ldi	r25, 0x03	; 3
				}
				else
				{
					for (int x = 0 ; x < 10 ; x ++)
					{
						TE[x] = 0;
    16d8:	11 92       	st	Z+, r1
						TB[x] = 0;
    16da:	1d 92       	st	X+, r1
					Transmit_Data("ok\n");
					STARTP = 0;
				}
				else
				{
					for (int x = 0 ; x < 10 ; x ++)
    16dc:	e8 17       	cp	r30, r24
    16de:	f9 07       	cpc	r31, r25
    16e0:	d9 f7       	brne	.-10     	; 0x16d8 <__vector_9+0x298>
					{
						TE[x] = 0;
						TB[x] = 0;
					}
					sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
    16e2:	80 e4       	ldi	r24, 0x40	; 64
    16e4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    16e8:	00 e4       	ldi	r16, 0x40	; 64
    16ea:	11 e0       	ldi	r17, 0x01	; 1
    16ec:	23 e0       	ldi	r18, 0x03	; 3
    16ee:	42 e0       	ldi	r20, 0x02	; 2
    16f0:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    16f4:	9f 93       	push	r25
    16f6:	8f 93       	push	r24
    16f8:	85 e2       	ldi	r24, 0x25	; 37
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	9f 93       	push	r25
    16fe:	8f 93       	push	r24
    1700:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
    1704:	82 e4       	ldi	r24, 0x42	; 66
    1706:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    170a:	23 e0       	ldi	r18, 0x03	; 3
    170c:	42 e0       	ldi	r20, 0x02	; 2
    170e:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1712:	9f 93       	push	r25
    1714:	8f 93       	push	r24
    1716:	8f ea       	ldi	r24, 0xAF	; 175
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	9f 93       	push	r25
    171c:	8f 93       	push	r24
    171e:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					if ((BED_Activ == 1))
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <BED_Activ>
    1730:	88 23       	and	r24, r24
    1732:	71 f1       	breq	.+92     	; 0x1790 <__vector_9+0x350>
					{
						char TEMP[20]={'T',':',
    1734:	84 e5       	ldi	r24, 0x54	; 84
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	8a e3       	ldi	r24, 0x3A	; 58
    173a:	8a 83       	std	Y+2, r24	; 0x02
							TE[0],TE[1],TE[2],TE[3],TE[4],
    173c:	e5 e2       	ldi	r30, 0x25	; 37
    173e:	f3 e0       	ldi	r31, 0x03	; 3
					}
					sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
					sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
					if ((BED_Activ == 1))
					{
						char TEMP[20]={'T',':',
    1740:	90 81       	ld	r25, Z
    1742:	9b 83       	std	Y+3, r25	; 0x03
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	92 81       	ldd	r25, Z+2	; 0x02
    174a:	9d 83       	std	Y+5, r25	; 0x05
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	94 81       	ldd	r25, Z+4	; 0x04
    1752:	9f 83       	std	Y+7, r25	; 0x07
    1754:	90 e2       	ldi	r25, 0x20	; 32
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	25 e4       	ldi	r18, 0x45	; 69
    175a:	29 87       	std	Y+9, r18	; 0x09
    175c:	8a 87       	std	Y+10, r24	; 0x0a
    175e:	20 e3       	ldi	r18, 0x30	; 48
    1760:	2b 87       	std	Y+11, r18	; 0x0b
    1762:	9c 87       	std	Y+12, r25	; 0x0c
    1764:	92 e4       	ldi	r25, 0x42	; 66
    1766:	9d 87       	std	Y+13, r25	; 0x0d
    1768:	8e 87       	std	Y+14, r24	; 0x0e
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0',' ',
						'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
    176a:	ef ea       	ldi	r30, 0xAF	; 175
    176c:	f1 e0       	ldi	r31, 0x01	; 1
					}
					sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
					sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
					if ((BED_Activ == 1))
					{
						char TEMP[20]={'T',':',
    176e:	80 81       	ld	r24, Z
    1770:	8f 87       	std	Y+15, r24	; 0x0f
    1772:	81 81       	ldd	r24, Z+1	; 0x01
    1774:	88 8b       	std	Y+16, r24	; 0x10
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	89 8b       	std	Y+17, r24	; 0x11
    177a:	83 81       	ldd	r24, Z+3	; 0x03
    177c:	8a 8b       	std	Y+18, r24	; 0x12
    177e:	84 81       	ldd	r24, Z+4	; 0x04
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	8d e0       	ldi	r24, 0x0D	; 13
    1784:	8c 8b       	std	Y+20, r24	; 0x14
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0',' ',
						'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
						Transmit_Data(TEMP);
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
    178e:	23 c0       	rjmp	.+70     	; 0x17d6 <__vector_9+0x396>
					}
					else
					{
						char TEMP[12]={'T',':',
    1790:	84 e5       	ldi	r24, 0x54	; 84
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	8a e3       	ldi	r24, 0x3A	; 58
    1796:	8a 83       	std	Y+2, r24	; 0x02
							TE[0],TE[1],TE[2],TE[3],TE[4],
    1798:	e5 e2       	ldi	r30, 0x25	; 37
    179a:	f3 e0       	ldi	r31, 0x03	; 3
						'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
						Transmit_Data(TEMP);
					}
					else
					{
						char TEMP[12]={'T',':',
    179c:	90 81       	ld	r25, Z
    179e:	9b 83       	std	Y+3, r25	; 0x03
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	92 81       	ldd	r25, Z+2	; 0x02
    17a6:	9d 83       	std	Y+5, r25	; 0x05
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	94 81       	ldd	r25, Z+4	; 0x04
    17ae:	9f 83       	std	Y+7, r25	; 0x07
    17b0:	90 e2       	ldi	r25, 0x20	; 32
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	95 e4       	ldi	r25, 0x45	; 69
    17b6:	99 87       	std	Y+9, r25	; 0x09
    17b8:	8a 87       	std	Y+10, r24	; 0x0a
    17ba:	80 e3       	ldi	r24, 0x30	; 48
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	8c 87       	std	Y+12, r24	; 0x0c
							TE[0],TE[1],TE[2],TE[3],TE[4],
						' ','E',':','0','\r'};
						Transmit_Data(TEMP);
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__vector_9+0x396>
			}
			
		}
		for (int i = 0;i<80;i++)
		{
			String2[i] = 0;
    17cc:	11 92       	st	Z+, r1
					}
				}
			}
			
		}
		for (int i = 0;i<80;i++)
    17ce:	8e 17       	cp	r24, r30
    17d0:	9f 07       	cpc	r25, r31
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <__vector_9+0x38c>
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <__vector_9+0x3a0>
    17d6:	eb e0       	ldi	r30, 0x0B	; 11
    17d8:	f2 e0       	ldi	r31, 0x02	; 2
    17da:	8b e5       	ldi	r24, 0x5B	; 91
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	f6 cf       	rjmp	.-20     	; 0x17cc <__vector_9+0x38c>
		{
			String2[i] = 0;
		}
	}
	
}
    17e0:	64 96       	adiw	r28, 0x14	; 20
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	ff 91       	pop	r31
    17f2:	ef 91       	pop	r30
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	8f 92       	push	r8
    1826:	9f 92       	push	r9
    1828:	af 92       	push	r10
    182a:	bf 92       	push	r11
    182c:	cf 92       	push	r12
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	2f 93       	push	r18
    183a:	3f 93       	push	r19
    183c:	4f 93       	push	r20
    183e:	5f 93       	push	r21
    1840:	6f 93       	push	r22
    1842:	7f 93       	push	r23
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	af 93       	push	r26
    184a:	bf 93       	push	r27
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	ac 97       	sbiw	r28, 0x2c	; 44
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	cd bf       	out	0x3d, r28	; 61
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    185e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tcon>
    1862:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <tcon+0x1>
    1866:	86 39       	cpi	r24, 0x96	; 150
    1868:	91 05       	cpc	r25, r1
    186a:	30 f4       	brcc	.+12     	; 0x1878 <__vector_19+0x5e>
	{
		tcon++;
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <tcon+0x1>
    1872:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tcon>
    1876:	09 c0       	rjmp	.+18     	; 0x188a <__vector_19+0x70>
		} else {
		gFlags.pidTimer = 1;
    1878:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gFlags>
    187c:	81 60       	ori	r24, 0x01	; 1
    187e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gFlags>
		tcon            = 0;
    1882:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <tcon+0x1>
    1886:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <tcon>
	}
	if (status)
    188a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <status>
    188e:	88 23       	and	r24, r24
    1890:	09 f4       	brne	.+2      	; 0x1894 <__vector_19+0x7a>
    1892:	60 c0       	rjmp	.+192    	; 0x1954 <__vector_19+0x13a>
	{
		if (BED_Activ)
    1894:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <BED_Activ>
    1898:	88 23       	and	r24, r24
    189a:	d9 f1       	breq	.+118    	; 0x1912 <__vector_19+0xf8>
		{
			if (getTemp(T0) > SE0 +3)
    189c:	80 e4       	ldi	r24, 0x40	; 64
    189e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    18a2:	6b 01       	movw	r12, r22
    18a4:	7c 01       	movw	r14, r24
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e4       	ldi	r20, 0x40	; 64
    18ac:	50 e4       	ldi	r21, 0x40	; 64
    18ae:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <SE0>
    18b2:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <SE0+0x1>
    18b6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <SE0+0x2>
    18ba:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <SE0+0x3>
    18be:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    18c2:	9b 01       	movw	r18, r22
    18c4:	ac 01       	movw	r20, r24
    18c6:	c7 01       	movw	r24, r14
    18c8:	b6 01       	movw	r22, r12
    18ca:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	14 f4       	brge	.+4      	; 0x18d6 <__vector_19+0xbc>
			{
				OCR1A = 0;
    18d2:	1b bc       	out	0x2b, r1	; 43
    18d4:	1a bc       	out	0x2a, r1	; 42
			}
			if (getTemp(T2) > SB +3)
    18d6:	82 e4       	ldi	r24, 0x42	; 66
    18d8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    18dc:	6b 01       	movw	r12, r22
    18de:	7c 01       	movw	r14, r24
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e4       	ldi	r20, 0x40	; 64
    18e6:	50 e4       	ldi	r21, 0x40	; 64
    18e8:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <SB>
    18ec:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <SB+0x1>
    18f0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SB+0x2>
    18f4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SB+0x3>
    18f8:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	c7 01       	movw	r24, r14
    1902:	b6 01       	movw	r22, r12
    1904:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    1908:	18 16       	cp	r1, r24
    190a:	04 f5       	brge	.+64     	; 0x194c <__vector_19+0x132>
			{
				OCR1B = 0;
    190c:	19 bc       	out	0x29, r1	; 41
    190e:	18 bc       	out	0x28, r1	; 40
    1910:	1d c0       	rjmp	.+58     	; 0x194c <__vector_19+0x132>
			}
		} 
		else
		{
			if (getTemp(T0) > SE0+3)
    1912:	80 e4       	ldi	r24, 0x40	; 64
    1914:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1918:	6b 01       	movw	r12, r22
    191a:	7c 01       	movw	r14, r24
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e4       	ldi	r20, 0x40	; 64
    1922:	50 e4       	ldi	r21, 0x40	; 64
    1924:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <SE0>
    1928:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <SE0+0x1>
    192c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <SE0+0x2>
    1930:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <SE0+0x3>
    1934:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	c7 01       	movw	r24, r14
    193e:	b6 01       	movw	r22, r12
    1940:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    1944:	18 16       	cp	r1, r24
    1946:	14 f4       	brge	.+4      	; 0x194c <__vector_19+0x132>
			{
				OCR1A = 0;
    1948:	1b bc       	out	0x2b, r1	; 43
    194a:	1a bc       	out	0x2a, r1	; 42
			}
		}
	}
	if (status == 0 && (UCSRA & (1 << RXC)))
    194c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <status>
    1950:	81 11       	cpse	r24, r1
    1952:	0e c0       	rjmp	.+28     	; 0x1970 <__vector_19+0x156>
    1954:	5f 9b       	sbis	0x0b, 7	; 11
    1956:	0c c0       	rjmp	.+24     	; 0x1970 <__vector_19+0x156>
    1958:	e7 e7       	ldi	r30, 0x77	; 119
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	87 ec       	ldi	r24, 0xC7	; 199
    195e:	92 e0       	ldi	r25, 0x02	; 2
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    1960:	11 92       	st	Z+, r1
			}
		}
	}
	if (status == 0 && (UCSRA & (1 << RXC)))
	{
		for (int i = 0 ; i < 80 ;i++)
    1962:	e8 17       	cp	r30, r24
    1964:	f9 07       	cpc	r31, r25
    1966:	e1 f7       	brne	.-8      	; 0x1960 <__vector_19+0x146>
		{
			String [i] = 0;
		}
		Recive_Data(String); // receive uart data and store it in variable (string)
    1968:	87 e7       	ldi	r24, 0x77	; 119
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 ae 14 	call	0x295c	; 0x295c <Recive_Data>
	}
			if (String[0] == 'M')
    1970:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <String>
    1974:	8d 34       	cpi	r24, 0x4D	; 77
    1976:	09 f0       	breq	.+2      	; 0x197a <__vector_19+0x160>
    1978:	c9 c3       	rjmp	.+1938   	; 0x210c <__vector_19+0x8f2>
			{
				status = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <status>
				val = get_int (String,'M');
    1980:	6d e4       	ldi	r22, 0x4D	; 77
    1982:	87 e7       	ldi	r24, 0x77	; 119
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    198a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <val+0x1>
    198e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <val>
				switch (val)
    1992:	8b 36       	cpi	r24, 0x6B	; 107
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <__vector_19+0x180>
    1998:	09 c2       	rjmp	.+1042   	; 0x1dac <__vector_19+0x592>
    199a:	3c f5       	brge	.+78     	; 0x19ea <__vector_19+0x1d0>
    199c:	84 35       	cpi	r24, 0x54	; 84
    199e:	91 05       	cpc	r25, r1
    19a0:	8c f4       	brge	.+34     	; 0x19c4 <__vector_19+0x1aa>
    19a2:	82 35       	cpi	r24, 0x52	; 82
    19a4:	91 05       	cpc	r25, r1
    19a6:	0c f0       	brlt	.+2      	; 0x19aa <__vector_19+0x190>
    19a8:	9d c0       	rjmp	.+314    	; 0x1ae4 <__vector_19+0x2ca>
    19aa:	81 31       	cpi	r24, 0x11	; 17
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <__vector_19+0x198>
    19b0:	86 c0       	rjmp	.+268    	; 0x1abe <__vector_19+0x2a4>
    19b2:	24 f4       	brge	.+8      	; 0x19bc <__vector_19+0x1a2>
    19b4:	02 97       	sbiw	r24, 0x02	; 2
    19b6:	08 f4       	brcc	.+2      	; 0x19ba <__vector_19+0x1a0>
    19b8:	4b c0       	rjmp	.+150    	; 0x1a50 <__vector_19+0x236>
    19ba:	92 c3       	rjmp	.+1828   	; 0x20e0 <__vector_19+0x8c6>
    19bc:	42 97       	sbiw	r24, 0x12	; 18
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__vector_19+0x1a8>
    19c0:	85 c0       	rjmp	.+266    	; 0x1acc <__vector_19+0x2b2>
    19c2:	8e c3       	rjmp	.+1820   	; 0x20e0 <__vector_19+0x8c6>
    19c4:	8c 35       	cpi	r24, 0x5C	; 92
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <__vector_19+0x1b2>
    19ca:	bb c0       	rjmp	.+374    	; 0x1b42 <__vector_19+0x328>
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <__vector_19+0x1be>
    19ce:	84 35       	cpi	r24, 0x54	; 84
    19d0:	91 05       	cpc	r25, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <__vector_19+0x1bc>
    19d4:	7b c0       	rjmp	.+246    	; 0x1acc <__vector_19+0x2b2>
    19d6:	84 c3       	rjmp	.+1800   	; 0x20e0 <__vector_19+0x8c6>
    19d8:	88 36       	cpi	r24, 0x68	; 104
    19da:	91 05       	cpc	r25, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <__vector_19+0x1c6>
    19de:	c7 c1       	rjmp	.+910    	; 0x1d6e <__vector_19+0x554>
    19e0:	8a 36       	cpi	r24, 0x6A	; 106
    19e2:	91 05       	cpc	r25, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <__vector_19+0x1ce>
    19e6:	d5 c1       	rjmp	.+938    	; 0x1d92 <__vector_19+0x578>
    19e8:	7b c3       	rjmp	.+1782   	; 0x20e0 <__vector_19+0x8c6>
    19ea:	8e 3c       	cpi	r24, 0xCE	; 206
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_19+0x1d8>
    19f0:	0b c2       	rjmp	.+1046   	; 0x1e08 <__vector_19+0x5ee>
    19f2:	9c f4       	brge	.+38     	; 0x1a1a <__vector_19+0x200>
    19f4:	8e 36       	cpi	r24, 0x6E	; 110
    19f6:	91 05       	cpc	r25, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <__vector_19+0x1e2>
    19fa:	de c1       	rjmp	.+956    	; 0x1db8 <__vector_19+0x59e>
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <__vector_19+0x1ee>
    19fe:	8d 36       	cpi	r24, 0x6D	; 109
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__vector_19+0x1ec>
    1a04:	63 c0       	rjmp	.+198    	; 0x1acc <__vector_19+0x2b2>
    1a06:	6c c3       	rjmp	.+1752   	; 0x20e0 <__vector_19+0x8c6>
    1a08:	8c 38       	cpi	r24, 0x8C	; 140
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <__vector_19+0x1f6>
    1a0e:	dd c1       	rjmp	.+954    	; 0x1dca <__vector_19+0x5b0>
    1a10:	8e 3b       	cpi	r24, 0xBE	; 190
    1a12:	91 05       	cpc	r25, r1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <__vector_19+0x1fe>
    1a16:	5a c0       	rjmp	.+180    	; 0x1acc <__vector_19+0x2b2>
    1a18:	63 c3       	rjmp	.+1734   	; 0x20e0 <__vector_19+0x8c6>
    1a1a:	85 3f       	cpi	r24, 0xF5	; 245
    1a1c:	21 e0       	ldi	r18, 0x01	; 1
    1a1e:	92 07       	cpc	r25, r18
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__vector_19+0x20a>
    1a22:	2f c2       	rjmp	.+1118   	; 0x1e82 <__vector_19+0x668>
    1a24:	5c f4       	brge	.+22     	; 0x1a3c <__vector_19+0x222>
    1a26:	8e 32       	cpi	r24, 0x2E	; 46
    1a28:	b1 e0       	ldi	r27, 0x01	; 1
    1a2a:	9b 07       	cpc	r25, r27
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <__vector_19+0x216>
    1a2e:	0c c2       	rjmp	.+1048   	; 0x1e48 <__vector_19+0x62e>
    1a30:	84 3f       	cpi	r24, 0xF4	; 244
    1a32:	e1 e0       	ldi	r30, 0x01	; 1
    1a34:	9e 07       	cpc	r25, r30
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <__vector_19+0x220>
    1a38:	84 c0       	rjmp	.+264    	; 0x1b42 <__vector_19+0x328>
    1a3a:	52 c3       	rjmp	.+1700   	; 0x20e0 <__vector_19+0x8c6>
    1a3c:	86 3f       	cpi	r24, 0xF6	; 246
    1a3e:	f1 e0       	ldi	r31, 0x01	; 1
    1a40:	9f 07       	cpc	r25, r31
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <__vector_19+0x22c>
    1a44:	7e c0       	rjmp	.+252    	; 0x1b42 <__vector_19+0x328>
    1a46:	87 3f       	cpi	r24, 0xF7	; 247
    1a48:	91 40       	sbci	r25, 0x01	; 1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <__vector_19+0x234>
    1a4c:	6f c2       	rjmp	.+1246   	; 0x1f2c <__vector_19+0x712>
    1a4e:	48 c3       	rjmp	.+1680   	; 0x20e0 <__vector_19+0x8c6>
				{
					case 0: case 1:
					STEP[0] = 0;
    1a50:	ef e9       	ldi	r30, 0x9F	; 159
    1a52:	f1 e0       	ldi	r31, 0x01	; 1
    1a54:	10 82       	st	Z, r1
    1a56:	11 82       	std	Z+1, r1	; 0x01
    1a58:	12 82       	std	Z+2, r1	; 0x02
    1a5a:	13 82       	std	Z+3, r1	; 0x03
					STEP[1] = 0;
    1a5c:	14 82       	std	Z+4, r1	; 0x04
    1a5e:	15 82       	std	Z+5, r1	; 0x05
    1a60:	16 82       	std	Z+6, r1	; 0x06
    1a62:	17 82       	std	Z+7, r1	; 0x07
					STEP[2] = 0;
    1a64:	10 86       	std	Z+8, r1	; 0x08
    1a66:	11 86       	std	Z+9, r1	; 0x09
    1a68:	12 86       	std	Z+10, r1	; 0x0a
    1a6a:	13 86       	std	Z+11, r1	; 0x0b
					STEP[3] = 0;
    1a6c:	14 86       	std	Z+12, r1	; 0x0c
    1a6e:	15 86       	std	Z+13, r1	; 0x0d
    1a70:	16 86       	std	Z+14, r1	; 0x0e
    1a72:	17 86       	std	Z+15, r1	; 0x0f
					F = 0;
    1a74:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <F>
    1a78:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <F+0x1>
    1a7c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <F+0x2>
    1a80:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <F+0x3>
					Fe = 0;
    1a84:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <Fe>
    1a88:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <Fe+0x1>
    1a8c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Fe+0x2>
    1a90:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Fe+0x3>
					SE0 = 0.0;
    1a94:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <SE0>
    1a98:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <SE0+0x1>
    1a9c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <SE0+0x2>
    1aa0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <SE0+0x3>
					SB = 0.0;
    1aa4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <SB>
    1aa8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <SB+0x1>
    1aac:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <SB+0x2>
    1ab0:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <SB+0x3>
					Transmit_Data("ok\n");
    1ab4:	81 e1       	ldi	r24, 0x11	; 17
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1abc:	1c c3       	rjmp	.+1592   	; 0x20f6 <__vector_19+0x8dc>
					case 17:
					motor_init();
    1abe:	0e 94 0e 13 	call	0x261c	; 0x261c <motor_init>
					Transmit_Data("ok\n");
    1ac2:	81 e1       	ldi	r24, 0x11	; 17
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1aca:	15 c3       	rjmp	.+1578   	; 0x20f6 <__vector_19+0x8dc>
    1acc:	e7 e7       	ldi	r30, 0x77	; 119
    1ace:	f2 e0       	ldi	r31, 0x02	; 2
    1ad0:	a5 ed       	ldi	r26, 0xD5	; 213
    1ad2:	b2 e0       	ldi	r27, 0x02	; 2
    1ad4:	27 ec       	ldi	r18, 0xC7	; 199
    1ad6:	32 e0       	ldi	r19, 0x02	; 2
					case 18: case 84:case 109:case 190:
						for(int i = 0;i < 80; i++)
							RXString[i] = String[i];
    1ad8:	81 91       	ld	r24, Z+
    1ada:	8d 93       	st	X+, r24
					case 17:
					motor_init();
					Transmit_Data("ok\n");
					break;
					case 18: case 84:case 109:case 190:
						for(int i = 0;i < 80; i++)
    1adc:	2e 17       	cp	r18, r30
    1ade:	3f 07       	cpc	r19, r31
    1ae0:	d9 f7       	brne	.-10     	; 0x1ad8 <__vector_19+0x2be>
    1ae2:	09 c3       	rjmp	.+1554   	; 0x20f6 <__vector_19+0x8dc>
							RXString[i] = String[i];
					break;
					case 82:case 83:
					old_val_1 = 0;
    1ae4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <old_val_1>
    1ae8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <old_val_1+0x1>
    1aec:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <old_val_1+0x2>
    1af0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <old_val_1+0x3>
					old_val_2 = 0;
    1af4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_2>
    1af8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_2+0x1>
    1afc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_2+0x2>
    1b00:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_2+0x3>
					old_val_3 = 0;
    1b04:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
    1b08:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
    1b0c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end+0x2>
    1b10:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__data_end+0x3>
					STEP[0] = 0;
    1b14:	ef e9       	ldi	r30, 0x9F	; 159
    1b16:	f1 e0       	ldi	r31, 0x01	; 1
    1b18:	10 82       	st	Z, r1
    1b1a:	11 82       	std	Z+1, r1	; 0x01
    1b1c:	12 82       	std	Z+2, r1	; 0x02
    1b1e:	13 82       	std	Z+3, r1	; 0x03
					STEP[1] = 0;
    1b20:	14 82       	std	Z+4, r1	; 0x04
    1b22:	15 82       	std	Z+5, r1	; 0x05
    1b24:	16 82       	std	Z+6, r1	; 0x06
    1b26:	17 82       	std	Z+7, r1	; 0x07
					STEP[2] = 0;
    1b28:	10 86       	std	Z+8, r1	; 0x08
    1b2a:	11 86       	std	Z+9, r1	; 0x09
    1b2c:	12 86       	std	Z+10, r1	; 0x0a
    1b2e:	13 86       	std	Z+11, r1	; 0x0b
					STEP[3] = 0;
    1b30:	14 86       	std	Z+12, r1	; 0x0c
    1b32:	15 86       	std	Z+13, r1	; 0x0d
    1b34:	16 86       	std	Z+14, r1	; 0x0e
    1b36:	17 86       	std	Z+15, r1	; 0x0f
					Transmit_Data("ok\n");
    1b38:	81 e1       	ldi	r24, 0x11	; 17
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1b40:	da c2       	rjmp	.+1460   	; 0x20f6 <__vector_19+0x8dc>
    1b42:	e9 e6       	ldi	r30, 0x69	; 105
    1b44:	f2 e0       	ldi	r31, 0x02	; 2
    1b46:	4b e5       	ldi	r20, 0x5B	; 91
    1b48:	52 e0       	ldi	r21, 0x02	; 2
    1b4a:	2b ec       	ldi	r18, 0xCB	; 203
    1b4c:	32 e0       	ldi	r19, 0x02	; 2
    1b4e:	0f 2e       	mov	r0, r31
    1b50:	fd eb       	ldi	r31, 0xBD	; 189
    1b52:	ef 2e       	mov	r14, r31
    1b54:	f1 e0       	ldi	r31, 0x01	; 1
    1b56:	ff 2e       	mov	r15, r31
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	63 e7       	ldi	r22, 0x73	; 115
    1b5c:	72 e0       	ldi	r23, 0x02	; 2
					case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    1b5e:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    1b60:	da 01       	movw	r26, r20
    1b62:	1d 92       	st	X+, r1
    1b64:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
    1b66:	d9 01       	movw	r26, r18
    1b68:	1d 92       	st	X+, r1
    1b6a:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
    1b6c:	d7 01       	movw	r26, r14
    1b6e:	1d 92       	st	X+, r1
    1b70:	7d 01       	movw	r14, r26
					STEP[2] = 0;
					STEP[3] = 0;
					Transmit_Data("ok\n");
					break;
					case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
    1b72:	e6 17       	cp	r30, r22
    1b74:	f7 07       	cpc	r31, r23
    1b76:	99 f7       	brne	.-26     	; 0x1b5e <__vector_19+0x344>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
    1b78:	8c 35       	cpi	r24, 0x5C	; 92
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	a1 f5       	brne	.+104    	; 0x1be6 <__vector_19+0x3cc>
					{
						Xspm = get_value(String,'X');
    1b7e:	68 e5       	ldi	r22, 0x58	; 88
    1b80:	87 e7       	ldi	r24, 0x77	; 119
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1b88:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <Xspm>
    1b8c:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <Xspm+0x1>
    1b90:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Xspm+0x2>
    1b94:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <Xspm+0x3>
						Yspm = get_value(String,'Y');
    1b98:	69 e5       	ldi	r22, 0x59	; 89
    1b9a:	87 e7       	ldi	r24, 0x77	; 119
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
    1b9e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1ba2:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <Yspm>
    1ba6:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <Yspm+0x1>
    1baa:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Yspm+0x2>
    1bae:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Yspm+0x3>
						Zspm = get_value(String,'Z');
    1bb2:	6a e5       	ldi	r22, 0x5A	; 90
    1bb4:	87 e7       	ldi	r24, 0x77	; 119
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1bbc:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <Zspm>
    1bc0:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <Zspm+0x1>
    1bc4:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <Zspm+0x2>
    1bc8:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <Zspm+0x3>
						Espm = get_value(String,'E');
    1bcc:	65 e4       	ldi	r22, 0x45	; 69
    1bce:	87 e7       	ldi	r24, 0x77	; 119
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1bd6:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <Espm>
    1bda:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <Espm+0x1>
    1bde:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <Espm+0x2>
    1be2:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <Espm+0x3>
					}
					if (val == 502)
    1be6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <val>
    1bea:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <val+0x1>
    1bee:	86 3f       	cpi	r24, 0xF6	; 246
    1bf0:	91 40       	sbci	r25, 0x01	; 1
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <__vector_19+0x3dc>
    1bf4:	40 c0       	rjmp	.+128    	; 0x1c76 <__vector_19+0x45c>
					{
						Xspm = FXspm;
    1bf6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FXspm>
    1bfa:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FXspm+0x1>
    1bfe:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FXspm+0x2>
    1c02:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FXspm+0x3>
    1c06:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <Xspm>
    1c0a:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <Xspm+0x1>
    1c0e:	a0 93 c9 02 	sts	0x02C9, r26	; 0x8002c9 <Xspm+0x2>
    1c12:	b0 93 ca 02 	sts	0x02CA, r27	; 0x8002ca <Xspm+0x3>
						Yspm = FYspm;
    1c16:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FYspm>
    1c1a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FYspm+0x1>
    1c1e:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FYspm+0x2>
    1c22:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FYspm+0x3>
    1c26:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Yspm>
    1c2a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Yspm+0x1>
    1c2e:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <Yspm+0x2>
    1c32:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <Yspm+0x3>
						Zspm = FZspm;
    1c36:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FZspm>
    1c3a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FZspm+0x1>
    1c3e:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FZspm+0x2>
    1c42:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FZspm+0x3>
    1c46:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <Zspm>
    1c4a:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <Zspm+0x1>
    1c4e:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <Zspm+0x2>
    1c52:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <Zspm+0x3>
						Espm = FEspm;
    1c56:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <FEspm>
    1c5a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <FEspm+0x1>
    1c5e:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <FEspm+0x2>
    1c62:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <FEspm+0x3>
    1c66:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <Espm>
    1c6a:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <Espm+0x1>
    1c6e:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <Espm+0x2>
    1c72:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    1c76:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <Xspm>
    1c7a:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <Xspm+0x1>
    1c7e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Xspm+0x2>
    1c82:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <Xspm+0x3>
    1c86:	00 e4       	ldi	r16, 0x40	; 64
    1c88:	11 e0       	ldi	r17, 0x01	; 1
    1c8a:	23 e0       	ldi	r18, 0x03	; 3
    1c8c:	42 e0       	ldi	r20, 0x02	; 2
    1c8e:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1c92:	9f 93       	push	r25
    1c94:	8f 93       	push	r24
    1c96:	89 e6       	ldi	r24, 0x69	; 105
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    1ca2:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Yspm>
    1ca6:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <Yspm+0x1>
    1caa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Yspm+0x2>
    1cae:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Yspm+0x3>
    1cb2:	23 e0       	ldi	r18, 0x03	; 3
    1cb4:	42 e0       	ldi	r20, 0x02	; 2
    1cb6:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	8b e5       	ldi	r24, 0x5B	; 91
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
    1cc2:	9f 93       	push	r25
    1cc4:	8f 93       	push	r24
    1cc6:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    1cca:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <Zspm>
    1cce:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <Zspm+0x1>
    1cd2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <Zspm+0x2>
    1cd6:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <Zspm+0x3>
    1cda:	23 e0       	ldi	r18, 0x03	; 3
    1cdc:	42 e0       	ldi	r20, 0x02	; 2
    1cde:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1ce2:	9f 93       	push	r25
    1ce4:	8f 93       	push	r24
    1ce6:	8b ec       	ldi	r24, 0xCB	; 203
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1cf2:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <Espm>
    1cf6:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <Espm+0x1>
    1cfa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <Espm+0x2>
    1cfe:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <Espm+0x3>
    1d02:	23 e0       	ldi	r18, 0x03	; 3
    1d04:	42 e0       	ldi	r20, 0x02	; 2
    1d06:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1d0a:	9f 93       	push	r25
    1d0c:	8f 93       	push	r24
    1d0e:	8d eb       	ldi	r24, 0xBD	; 189
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	9f 93       	push	r25
    1d14:	8f 93       	push	r24
    1d16:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
    1d1a:	45 e0       	ldi	r20, 0x05	; 5
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	69 e6       	ldi	r22, 0x69	; 105
    1d20:	72 e0       	ldi	r23, 0x02	; 2
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
    1d2a:	45 e0       	ldi	r20, 0x05	; 5
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	6b e5       	ldi	r22, 0x5B	; 91
    1d30:	72 e0       	ldi	r23, 0x02	; 2
    1d32:	85 e0       	ldi	r24, 0x05	; 5
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
    1d3a:	45 e0       	ldi	r20, 0x05	; 5
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	6b ec       	ldi	r22, 0xCB	; 203
    1d40:	72 e0       	ldi	r23, 0x02	; 2
    1d42:	8a e0       	ldi	r24, 0x0A	; 10
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
    1d4a:	45 e0       	ldi	r20, 0x05	; 5
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	6d eb       	ldi	r22, 0xBD	; 189
    1d50:	71 e0       	ldi	r23, 0x01	; 1
    1d52:	8f e0       	ldi	r24, 0x0F	; 15
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok\n");
    1d5a:	81 e1       	ldi	r24, 0x11	; 17
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	c4 c1       	rjmp	.+904    	; 0x20f6 <__vector_19+0x8dc>
					case 104:
					SE0 = get_value(String,'S');
    1d6e:	63 e5       	ldi	r22, 0x53	; 83
    1d70:	87 e7       	ldi	r24, 0x77	; 119
    1d72:	92 e0       	ldi	r25, 0x02	; 2
    1d74:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1d78:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <SE0>
    1d7c:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <SE0+0x1>
    1d80:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <SE0+0x2>
    1d84:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <SE0+0x3>
					Transmit_Data("ok\n");
    1d88:	81 e1       	ldi	r24, 0x11	; 17
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1d90:	b2 c1       	rjmp	.+868    	; 0x20f6 <__vector_19+0x8dc>
					case 106:
					OCR2 = get_value(String,'S');
    1d92:	63 e5       	ldi	r22, 0x53	; 83
    1d94:	87 e7       	ldi	r24, 0x77	; 119
    1d96:	92 e0       	ldi	r25, 0x02	; 2
    1d98:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1d9c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1da0:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok\n");
    1da2:	81 e1       	ldi	r24, 0x11	; 17
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1daa:	a5 c1       	rjmp	.+842    	; 0x20f6 <__vector_19+0x8dc>
					case 107:
					OCR2 = 0;
    1dac:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok\n");
    1dae:	81 e1       	ldi	r24, 0x11	; 17
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1db6:	9f c1       	rjmp	.+830    	; 0x20f6 <__vector_19+0x8dc>
					
					case 110:
					NumberOfPLine = 0;
    1db8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <NumberOfPLine+0x1>
    1dbc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <NumberOfPLine>
					Transmit_Data("ok\n");
    1dc0:	81 e1       	ldi	r24, 0x11	; 17
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1dc8:	96 c1       	rjmp	.+812    	; 0x20f6 <__vector_19+0x8dc>
					// 						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					// 						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
					// 					Transmit_Data(pos);
					// 				break;
					case 140:
					SB = get_value(String,'S');
    1dca:	63 e5       	ldi	r22, 0x53	; 83
    1dcc:	87 e7       	ldi	r24, 0x77	; 119
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1dd4:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <SB>
    1dd8:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <SB+0x1>
    1ddc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <SB+0x2>
    1de0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <SB+0x3>
					if (SB == 0)
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	a9 01       	movw	r20, r18
    1dea:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    1dee:	81 11       	cpse	r24, r1
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <__vector_19+0x5de>
					{
						BED_Activ = 0;
    1df2:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <BED_Activ>
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <__vector_19+0x5e4>
					}
					else
					{
						BED_Activ = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <BED_Activ>
					}
					Transmit_Data("ok\n");
    1dfe:	81 e1       	ldi	r24, 0x11	; 17
    1e00:	91 e0       	ldi	r25, 0x01	; 1
    1e02:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1e06:	77 c1       	rjmp	.+750    	; 0x20f6 <__vector_19+0x8dc>
					
					case 206:
					old_val_1 = 0;
    1e08:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <old_val_1>
    1e0c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <old_val_1+0x1>
    1e10:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <old_val_1+0x2>
    1e14:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <old_val_1+0x3>
					old_val_2 = 0;
    1e18:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_2>
    1e1c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_2+0x1>
    1e20:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_2+0x2>
    1e24:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_2+0x3>
					old_val_3 = 0;
    1e28:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
    1e2c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
    1e30:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end+0x2>
    1e34:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__data_end+0x3>
					homeSet = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <homeSet>
					Transmit_Data("ok\n");
    1e3e:	81 e1       	ldi	r24, 0x11	; 17
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1e46:	57 c1       	rjmp	.+686    	; 0x20f6 <__vector_19+0x8dc>
					case 302:
					SE0 = get_value(String,'S');
    1e48:	63 e5       	ldi	r22, 0x53	; 83
    1e4a:	87 e7       	ldi	r24, 0x77	; 119
    1e4c:	92 e0       	ldi	r25, 0x02	; 2
    1e4e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1e52:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <SE0>
    1e56:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <SE0+0x1>
    1e5a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <SE0+0x2>
    1e5e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <SE0+0x3>
					if (SE0 <= 25 )
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	48 ec       	ldi	r20, 0xC8	; 200
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    1e6e:	18 16       	cp	r1, r24
    1e70:	1c f0       	brlt	.+6      	; 0x1e78 <__vector_19+0x65e>
					{
						Fextrud = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <Fextrud>
					}
					Transmit_Data("ok\n");
    1e78:	81 e1       	ldi	r24, 0x11	; 17
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1e80:	3a c1       	rjmp	.+628    	; 0x20f6 <__vector_19+0x8dc>
					case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    1e82:	45 e0       	ldi	r20, 0x05	; 5
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	69 e6       	ldi	r22, 0x69	; 105
    1e88:	72 e0       	ldi	r23, 0x02	; 2
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    1e92:	45 e0       	ldi	r20, 0x05	; 5
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	6b e5       	ldi	r22, 0x5B	; 91
    1e98:	72 e0       	ldi	r23, 0x02	; 2
    1e9a:	85 e0       	ldi	r24, 0x05	; 5
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    1ea2:	45 e0       	ldi	r20, 0x05	; 5
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	6b ec       	ldi	r22, 0xCB	; 203
    1ea8:	72 e0       	ldi	r23, 0x02	; 2
    1eaa:	8a e0       	ldi	r24, 0x0A	; 10
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    1eb2:	45 e0       	ldi	r20, 0x05	; 5
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	6d eb       	ldi	r22, 0xBD	; 189
    1eb8:	71 e0       	ldi	r23, 0x01	; 1
    1eba:	8f e0       	ldi	r24, 0x0F	; 15
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    1ec2:	89 e6       	ldi	r24, 0x69	; 105
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
    1ec6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
    1eca:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <Xspm>
    1ece:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <Xspm+0x1>
    1ed2:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Xspm+0x2>
    1ed6:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <Xspm+0x3>
					Yspm = atof(Y_pos);
    1eda:	8b e5       	ldi	r24, 0x5B	; 91
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
    1ee2:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <Yspm>
    1ee6:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <Yspm+0x1>
    1eea:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Yspm+0x2>
    1eee:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Yspm+0x3>
					Zspm = atof(Z_pos);
    1ef2:	8b ec       	ldi	r24, 0xCB	; 203
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
    1efa:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <Zspm>
    1efe:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <Zspm+0x1>
    1f02:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <Zspm+0x2>
    1f06:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <Zspm+0x3>
					Espm = atof(E_pos);
    1f0a:	8d eb       	ldi	r24, 0xBD	; 189
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atof>
    1f12:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <Espm>
    1f16:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <Espm+0x1>
    1f1a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <Espm+0x2>
    1f1e:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <Espm+0x3>
					Transmit_Data("ok\n");
    1f22:	81 e1       	ldi	r24, 0x11	; 17
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    1f2a:	e5 c0       	rjmp	.+458    	; 0x20f6 <__vector_19+0x8dc>
    1f2c:	e9 e6       	ldi	r30, 0x69	; 105
    1f2e:	f2 e0       	ldi	r31, 0x02	; 2
    1f30:	2b e5       	ldi	r18, 0x5B	; 91
    1f32:	32 e0       	ldi	r19, 0x02	; 2
    1f34:	8b ec       	ldi	r24, 0xCB	; 203
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	6d eb       	ldi	r22, 0xBD	; 189
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	43 e7       	ldi	r20, 0x73	; 115
    1f3e:	52 e0       	ldi	r21, 0x02	; 2
					case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    1f40:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    1f42:	d9 01       	movw	r26, r18
    1f44:	1d 92       	st	X+, r1
    1f46:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    1f48:	dc 01       	movw	r26, r24
    1f4a:	1d 92       	st	X+, r1
    1f4c:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    1f4e:	db 01       	movw	r26, r22
    1f50:	1d 92       	st	X+, r1
    1f52:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok\n");
					break;
					case 503:
					for (int i = 0 ; i < 10 ; i ++)
    1f54:	e4 17       	cp	r30, r20
    1f56:	f5 07       	cpc	r31, r21
    1f58:	99 f7       	brne	.-26     	; 0x1f40 <__vector_19+0x726>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    1f5a:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <Xspm>
    1f5e:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <Xspm+0x1>
    1f62:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Xspm+0x2>
    1f66:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <Xspm+0x3>
    1f6a:	00 e4       	ldi	r16, 0x40	; 64
    1f6c:	11 e0       	ldi	r17, 0x01	; 1
    1f6e:	23 e0       	ldi	r18, 0x03	; 3
    1f70:	42 e0       	ldi	r20, 0x02	; 2
    1f72:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1f76:	9f 93       	push	r25
    1f78:	8f 93       	push	r24
    1f7a:	0f 2e       	mov	r0, r31
    1f7c:	f9 e6       	ldi	r31, 0x69	; 105
    1f7e:	8f 2e       	mov	r8, r31
    1f80:	f2 e0       	ldi	r31, 0x02	; 2
    1f82:	9f 2e       	mov	r9, r31
    1f84:	f0 2d       	mov	r31, r0
    1f86:	9f 92       	push	r9
    1f88:	8f 92       	push	r8
    1f8a:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    1f8e:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Yspm>
    1f92:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <Yspm+0x1>
    1f96:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Yspm+0x2>
    1f9a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Yspm+0x3>
    1f9e:	23 e0       	ldi	r18, 0x03	; 3
    1fa0:	42 e0       	ldi	r20, 0x02	; 2
    1fa2:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1fa6:	9f 93       	push	r25
    1fa8:	8f 93       	push	r24
    1faa:	0f 2e       	mov	r0, r31
    1fac:	fb e5       	ldi	r31, 0x5B	; 91
    1fae:	af 2e       	mov	r10, r31
    1fb0:	f2 e0       	ldi	r31, 0x02	; 2
    1fb2:	bf 2e       	mov	r11, r31
    1fb4:	f0 2d       	mov	r31, r0
    1fb6:	bf 92       	push	r11
    1fb8:	af 92       	push	r10
    1fba:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    1fbe:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <Zspm>
    1fc2:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <Zspm+0x1>
    1fc6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <Zspm+0x2>
    1fca:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <Zspm+0x3>
    1fce:	23 e0       	ldi	r18, 0x03	; 3
    1fd0:	42 e0       	ldi	r20, 0x02	; 2
    1fd2:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    1fd6:	9f 93       	push	r25
    1fd8:	8f 93       	push	r24
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	fb ec       	ldi	r31, 0xCB	; 203
    1fde:	cf 2e       	mov	r12, r31
    1fe0:	f2 e0       	ldi	r31, 0x02	; 2
    1fe2:	df 2e       	mov	r13, r31
    1fe4:	f0 2d       	mov	r31, r0
    1fe6:	df 92       	push	r13
    1fe8:	cf 92       	push	r12
    1fea:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1fee:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <Espm>
    1ff2:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <Espm+0x1>
    1ff6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <Espm+0x2>
    1ffa:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <Espm+0x3>
    1ffe:	23 e0       	ldi	r18, 0x03	; 3
    2000:	42 e0       	ldi	r20, 0x02	; 2
    2002:	0e 94 39 18 	call	0x3072	; 0x3072 <dtostrf>
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	0d eb       	ldi	r16, 0xBD	; 189
    200c:	11 e0       	ldi	r17, 0x01	; 1
    200e:	1f 93       	push	r17
    2010:	0f 93       	push	r16
    2012:	0e 94 83 18 	call	0x3106	; 0x3106 <sprintf>
					char acc[44]={'X',
    2016:	88 e5       	ldi	r24, 0x58	; 88
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	f4 01       	movw	r30, r8
    201c:	80 81       	ld	r24, Z
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	83 81       	ldd	r24, Z+3	; 0x03
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	84 81       	ldd	r24, Z+4	; 0x04
    202e:	8e 83       	std	Y+6, r24	; 0x06
    2030:	23 e7       	ldi	r18, 0x73	; 115
    2032:	2f 83       	std	Y+7, r18	; 0x07
    2034:	9f e2       	ldi	r25, 0x2F	; 47
    2036:	98 87       	std	Y+8, r25	; 0x08
    2038:	8d e6       	ldi	r24, 0x6D	; 109
    203a:	89 87       	std	Y+9, r24	; 0x09
    203c:	8a 87       	std	Y+10, r24	; 0x0a
    203e:	30 e2       	ldi	r19, 0x20	; 32
    2040:	3b 87       	std	Y+11, r19	; 0x0b
    2042:	49 e5       	ldi	r20, 0x59	; 89
    2044:	4c 87       	std	Y+12, r20	; 0x0c
    2046:	d5 01       	movw	r26, r10
    2048:	4c 91       	ld	r20, X
    204a:	4d 87       	std	Y+13, r20	; 0x0d
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	4c 91       	ld	r20, X
    2050:	11 97       	sbiw	r26, 0x01	; 1
    2052:	4e 87       	std	Y+14, r20	; 0x0e
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	4c 91       	ld	r20, X
    2058:	12 97       	sbiw	r26, 0x02	; 2
    205a:	4f 87       	std	Y+15, r20	; 0x0f
    205c:	13 96       	adiw	r26, 0x03	; 3
    205e:	4c 91       	ld	r20, X
    2060:	13 97       	sbiw	r26, 0x03	; 3
    2062:	48 8b       	std	Y+16, r20	; 0x10
    2064:	14 96       	adiw	r26, 0x04	; 4
    2066:	4c 91       	ld	r20, X
    2068:	49 8b       	std	Y+17, r20	; 0x11
    206a:	2a 8b       	std	Y+18, r18	; 0x12
    206c:	9b 8b       	std	Y+19, r25	; 0x13
    206e:	8c 8b       	std	Y+20, r24	; 0x14
    2070:	8d 8b       	std	Y+21, r24	; 0x15
    2072:	3e 8b       	std	Y+22, r19	; 0x16
    2074:	4a e5       	ldi	r20, 0x5A	; 90
    2076:	4f 8b       	std	Y+23, r20	; 0x17
    2078:	f6 01       	movw	r30, r12
    207a:	40 81       	ld	r20, Z
    207c:	48 8f       	std	Y+24, r20	; 0x18
    207e:	41 81       	ldd	r20, Z+1	; 0x01
    2080:	49 8f       	std	Y+25, r20	; 0x19
    2082:	42 81       	ldd	r20, Z+2	; 0x02
    2084:	4a 8f       	std	Y+26, r20	; 0x1a
    2086:	43 81       	ldd	r20, Z+3	; 0x03
    2088:	4b 8f       	std	Y+27, r20	; 0x1b
    208a:	44 81       	ldd	r20, Z+4	; 0x04
    208c:	4c 8f       	std	Y+28, r20	; 0x1c
    208e:	2d 8f       	std	Y+29, r18	; 0x1d
    2090:	9e 8f       	std	Y+30, r25	; 0x1e
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
    2094:	88 a3       	std	Y+32, r24	; 0x20
    2096:	39 a3       	std	Y+33, r19	; 0x21
    2098:	35 e4       	ldi	r19, 0x45	; 69
    209a:	3a a3       	std	Y+34, r19	; 0x22
    209c:	d8 01       	movw	r26, r16
    209e:	3c 91       	ld	r19, X
    20a0:	3b a3       	std	Y+35, r19	; 0x23
    20a2:	11 96       	adiw	r26, 0x01	; 1
    20a4:	3c 91       	ld	r19, X
    20a6:	11 97       	sbiw	r26, 0x01	; 1
    20a8:	3c a3       	std	Y+36, r19	; 0x24
    20aa:	12 96       	adiw	r26, 0x02	; 2
    20ac:	3c 91       	ld	r19, X
    20ae:	12 97       	sbiw	r26, 0x02	; 2
    20b0:	3d a3       	std	Y+37, r19	; 0x25
    20b2:	13 96       	adiw	r26, 0x03	; 3
    20b4:	3c 91       	ld	r19, X
    20b6:	13 97       	sbiw	r26, 0x03	; 3
    20b8:	3e a3       	std	Y+38, r19	; 0x26
    20ba:	14 96       	adiw	r26, 0x04	; 4
    20bc:	3c 91       	ld	r19, X
    20be:	3f a3       	std	Y+39, r19	; 0x27
    20c0:	28 a7       	std	Y+40, r18	; 0x28
    20c2:	99 a7       	std	Y+41, r25	; 0x29
    20c4:	8a a7       	std	Y+42, r24	; 0x2a
    20c6:	8b a7       	std	Y+43, r24	; 0x2b
    20c8:	8d e0       	ldi	r24, 0x0D	; 13
    20ca:	8c a7       	std	Y+44, r24	; 0x2c
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
						's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    20cc:	ce 01       	movw	r24, r28
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	0b c0       	rjmp	.+22     	; 0x20f6 <__vector_19+0x8dc>
    20e0:	e7 e7       	ldi	r30, 0x77	; 119
    20e2:	f2 e0       	ldi	r31, 0x02	; 2
    20e4:	ab e0       	ldi	r26, 0x0B	; 11
    20e6:	b2 e0       	ldi	r27, 0x02	; 2
    20e8:	27 ec       	ldi	r18, 0xC7	; 199
    20ea:	32 e0       	ldi	r19, 0x02	; 2
					default:
					for(int i = 0;i < 80; i++)
					String2[i] = String[i];
    20ec:	81 91       	ld	r24, Z+
    20ee:	8d 93       	st	X+, r24
						's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
					break;
					default:
					for(int i = 0;i < 80; i++)
    20f0:	2e 17       	cp	r18, r30
    20f2:	3f 07       	cpc	r19, r31
    20f4:	d9 f7       	brne	.-10     	; 0x20ec <__vector_19+0x8d2>
					String2[i] = String[i];
					break;
				}
				status = 0;
    20f6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <status>
    20fa:	e7 e7       	ldi	r30, 0x77	; 119
    20fc:	f2 e0       	ldi	r31, 0x02	; 2
    20fe:	87 ec       	ldi	r24, 0xC7	; 199
    2100:	92 e0       	ldi	r25, 0x02	; 2
				for (int i = 0 ; i < 80 ;i++)
				{
					String [i] = 0;
    2102:	11 92       	st	Z+, r1
					for(int i = 0;i < 80; i++)
					String2[i] = String[i];
					break;
				}
				status = 0;
				for (int i = 0 ; i < 80 ;i++)
    2104:	e8 17       	cp	r30, r24
    2106:	f9 07       	cpc	r31, r25
    2108:	e1 f7       	brne	.-8      	; 0x2102 <__vector_19+0x8e8>
    210a:	a8 c0       	rjmp	.+336    	; 0x225c <__vector_19+0xa42>
				{
					String [i] = 0;
				}
			}
			else if (String[0] == 'G')
    210c:	87 34       	cpi	r24, 0x47	; 71
    210e:	09 f0       	breq	.+2      	; 0x2112 <__vector_19+0x8f8>
    2110:	7d c0       	rjmp	.+250    	; 0x220c <__vector_19+0x9f2>
			{
				status = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <status>
				val = get_int (String,'G');
    2118:	67 e4       	ldi	r22, 0x47	; 71
    211a:	87 e7       	ldi	r24, 0x77	; 119
    211c:	92 e0       	ldi	r25, 0x02	; 2
    211e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    2122:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <val+0x1>
    2126:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <val>
				switch (val)
    212a:	8c 31       	cpi	r24, 0x1C	; 28
    212c:	91 05       	cpc	r25, r1
    212e:	a1 f0       	breq	.+40     	; 0x2158 <__vector_19+0x93e>
    2130:	1c f4       	brge	.+6      	; 0x2138 <__vector_19+0x91e>
    2132:	04 97       	sbiw	r24, 0x04	; 4
    2134:	28 f0       	brcs	.+10     	; 0x2140 <__vector_19+0x926>
    2136:	4d c0       	rjmp	.+154    	; 0x21d2 <__vector_19+0x9b8>
    2138:	8c 35       	cpi	r24, 0x5C	; 92
    213a:	91 05       	cpc	r25, r1
    213c:	91 f0       	breq	.+36     	; 0x2162 <__vector_19+0x948>
    213e:	49 c0       	rjmp	.+146    	; 0x21d2 <__vector_19+0x9b8>
    2140:	e7 e7       	ldi	r30, 0x77	; 119
    2142:	f2 e0       	ldi	r31, 0x02	; 2
    2144:	a5 ed       	ldi	r26, 0xD5	; 213
    2146:	b2 e0       	ldi	r27, 0x02	; 2
    2148:	27 ec       	ldi	r18, 0xC7	; 199
    214a:	32 e0       	ldi	r19, 0x02	; 2
				{
					case 0:case 1:case 2:case 3:
						for(int i = 0;i < 80; i++)
							RXString[i] = String[i];
    214c:	81 91       	ld	r24, Z+
    214e:	8d 93       	st	X+, r24
				status = 1;
				val = get_int (String,'G');
				switch (val)
				{
					case 0:case 1:case 2:case 3:
						for(int i = 0;i < 80; i++)
    2150:	e2 17       	cp	r30, r18
    2152:	f3 07       	cpc	r31, r19
    2154:	d9 f7       	brne	.-10     	; 0x214c <__vector_19+0x932>
    2156:	3d c0       	rjmp	.+122    	; 0x21d2 <__vector_19+0x9b8>
					// 						STEP[0] = find(String,'X');
					// 						STEP[1] = find(String,'Y');
					// 						STEP[2] = find(String,'Z');
					// 						//make auto home
					// 					}
					Transmit_Data("ok\n");
    2158:	81 e1       	ldi	r24, 0x11	; 17
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
    2160:	38 c0       	rjmp	.+112    	; 0x21d2 <__vector_19+0x9b8>
					case 92:
					value_1 = get_value(String,'X');           //extract first value
    2162:	68 e5       	ldi	r22, 0x58	; 88
    2164:	87 e7       	ldi	r24, 0x77	; 119
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    216c:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <value_1>
    2170:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <value_1+0x1>
    2174:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <value_1+0x2>
    2178:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <value_1+0x3>
					value_2 = get_value(String,'Y'); //call function to extract second value
    217c:	69 e5       	ldi	r22, 0x59	; 89
    217e:	87 e7       	ldi	r24, 0x77	; 119
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    2186:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <value_2>
    218a:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <value_2+0x1>
    218e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <value_2+0x2>
    2192:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <value_2+0x3>
					value_3 = get_value(String,'Z'); //call function to extract third value
    2196:	6a e5       	ldi	r22, 0x5A	; 90
    2198:	87 e7       	ldi	r24, 0x77	; 119
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    21a0:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <value_3>
    21a4:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <value_3+0x1>
    21a8:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <value_3+0x2>
    21ac:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <value_3+0x3>
					STEP[3] = get_value(String,'E');
    21b0:	65 e4       	ldi	r22, 0x45	; 69
    21b2:	87 e7       	ldi	r24, 0x77	; 119
    21b4:	92 e0       	ldi	r25, 0x02	; 2
    21b6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    21ba:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <STEP+0xc>
    21be:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <STEP+0xd>
    21c2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <STEP+0xe>
    21c6:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <STEP+0xf>
					//set the middle of the bed to 0,0
					Transmit_Data("ok\n");
    21ca:	81 e1       	ldi	r24, 0x11	; 17
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	0e 94 9f 14 	call	0x293e	; 0x293e <Transmit_Data>
					break;
				}
				status = 0;
    21d2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <status>
				STEP[0] = 0;
    21d6:	ef e9       	ldi	r30, 0x9F	; 159
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	10 82       	st	Z, r1
    21dc:	11 82       	std	Z+1, r1	; 0x01
    21de:	12 82       	std	Z+2, r1	; 0x02
    21e0:	13 82       	std	Z+3, r1	; 0x03
				STEP[1] = 0;
    21e2:	14 82       	std	Z+4, r1	; 0x04
    21e4:	15 82       	std	Z+5, r1	; 0x05
    21e6:	16 82       	std	Z+6, r1	; 0x06
    21e8:	17 82       	std	Z+7, r1	; 0x07
				STEP[2] = 0;
    21ea:	10 86       	std	Z+8, r1	; 0x08
    21ec:	11 86       	std	Z+9, r1	; 0x09
    21ee:	12 86       	std	Z+10, r1	; 0x0a
    21f0:	13 86       	std	Z+11, r1	; 0x0b
				STEP[3] = 0;
    21f2:	14 86       	std	Z+12, r1	; 0x0c
    21f4:	15 86       	std	Z+13, r1	; 0x0d
    21f6:	16 86       	std	Z+14, r1	; 0x0e
    21f8:	17 86       	std	Z+15, r1	; 0x0f
    21fa:	e7 e7       	ldi	r30, 0x77	; 119
    21fc:	f2 e0       	ldi	r31, 0x02	; 2
    21fe:	87 ec       	ldi	r24, 0xC7	; 199
    2200:	92 e0       	ldi	r25, 0x02	; 2
				for (int i = 0 ; i < 80 ;i++)
				{
					String [i] = 0;
    2202:	11 92       	st	Z+, r1
				status = 0;
				STEP[0] = 0;
				STEP[1] = 0;
				STEP[2] = 0;
				STEP[3] = 0;
				for (int i = 0 ; i < 80 ;i++)
    2204:	e8 17       	cp	r30, r24
    2206:	f9 07       	cpc	r31, r25
    2208:	e1 f7       	brne	.-8      	; 0x2202 <__vector_19+0x9e8>
    220a:	28 c0       	rjmp	.+80     	; 0x225c <__vector_19+0xa42>
				{
					String [i] = 0;
				}
			}
			else if (String[0] == 'N')
    220c:	8e 34       	cpi	r24, 0x4E	; 78
    220e:	31 f5       	brne	.+76     	; 0x225c <__vector_19+0xa42>
			{
				status = 1;
    2210:	11 e0       	ldi	r17, 0x01	; 1
    2212:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <status>
				NumberOfPLine ++ ;
    2216:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <NumberOfPLine>
    221a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <NumberOfPLine+0x1>
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <NumberOfPLine+0x1>
    2224:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <NumberOfPLine>
				NumberOfLine = get_int(String,'N');
    2228:	6e e4       	ldi	r22, 0x4E	; 78
    222a:	87 e7       	ldi	r24, 0x77	; 119
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    2232:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <NumberOfLine+0x1>
    2236:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <NumberOfLine>
				CheckSum = get_int(String,'*');
    223a:	6a e2       	ldi	r22, 0x2A	; 42
    223c:	87 e7       	ldi	r24, 0x77	; 119
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    2244:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <CheckSum+0x1>
    2248:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <CheckSum>
				get_SEvalue(String,' ','*');
    224c:	4a e2       	ldi	r20, 0x2A	; 42
    224e:	60 e2       	ldi	r22, 0x20	; 32
    2250:	87 e7       	ldi	r24, 0x77	; 119
    2252:	92 e0       	ldi	r25, 0x02	; 2
    2254:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <get_SEvalue>
				STARTP  = 1;
    2258:	10 93 80 01 	sts	0x0180, r17	; 0x800180 <STARTP>
			}
}
    225c:	ac 96       	adiw	r28, 0x2c	; 44
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	ff 91       	pop	r31
    226e:	ef 91       	pop	r30
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <__vector_1>:

ISR (INT0_vect)
{
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	2f 93       	push	r18
    22ae:	3f 93       	push	r19
    22b0:	4f 93       	push	r20
    22b2:	5f 93       	push	r21
    22b4:	6f 93       	push	r22
    22b6:	7f 93       	push	r23
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	af 93       	push	r26
    22be:	bf 93       	push	r27
    22c0:	ef 93       	push	r30
    22c2:	ff 93       	push	r31
	pin_write (M_PORT, Z_DIR_PIN ,1 );
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	66 e0       	ldi	r22, 0x06	; 6
    22c8:	83 e3       	ldi	r24, 0x33	; 51
    22ca:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
	pin_write (M_PORT, Z ,0 );
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	83 e3       	ldi	r24, 0x33	; 51
    22d4:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22d8:	8f ea       	ldi	r24, 0xAF	; 175
    22da:	94 e0       	ldi	r25, 0x04	; 4
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <__vector_1+0x3a>
    22e0:	00 c0       	rjmp	.+0      	; 0x22e2 <__vector_1+0x40>
    22e2:	00 00       	nop
	_delay_us (300);
	pin_write (M_PORT, Z ,1 );
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	83 e3       	ldi	r24, 0x33	; 51
    22ea:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    22ee:	8f ea       	ldi	r24, 0xAF	; 175
    22f0:	94 e0       	ldi	r25, 0x04	; 4
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <__vector_1+0x50>
    22f6:	00 c0       	rjmp	.+0      	; 0x22f8 <__vector_1+0x56>
    22f8:	00 00       	nop
	_delay_us (300);
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],double speed,double exspeed)
{
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	c8 59       	subi	r28, 0x98	; 152
    2346:	d1 09       	sbc	r29, r1
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	6c 01       	movw	r12, r24
    2354:	2a 01       	movw	r4, r20
    2356:	3b 01       	movw	r6, r22
    2358:	48 01       	movw	r8, r16
    235a:	59 01       	movw	r10, r18
	long stepDuration = 1;
	long exstepDuration = 1;
	if (speed != 0.0)
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	a9 01       	movw	r20, r18
    2362:	c3 01       	movw	r24, r6
    2364:	b2 01       	movw	r22, r4
    2366:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    236a:	88 23       	and	r24, r24
    236c:	c9 f0       	breq	.+50     	; 0x23a0 <motor_movement+0x84>
	{
		stepDuration = (1/speed)*60*pow(10,6);
    236e:	a3 01       	movw	r20, r6
    2370:	92 01       	movw	r18, r4
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	80 e8       	ldi	r24, 0x80	; 128
    2378:	9f e3       	ldi	r25, 0x3F	; 63
    237a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e7       	ldi	r20, 0x70	; 112
    2384:	52 e4       	ldi	r21, 0x42	; 66
    2386:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	34 e2       	ldi	r19, 0x24	; 36
    238e:	44 e7       	ldi	r20, 0x74	; 116
    2390:	59 e4       	ldi	r21, 0x49	; 73
    2392:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    2396:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__fixsfsi>
    239a:	2b 01       	movw	r4, r22
    239c:	3c 01       	movw	r6, r24
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <motor_movement+0x8c>
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],double speed,double exspeed)
{
	long stepDuration = 1;
    23a0:	41 2c       	mov	r4, r1
    23a2:	51 2c       	mov	r5, r1
    23a4:	32 01       	movw	r6, r4
    23a6:	43 94       	inc	r4
	long exstepDuration = 1;
	if (speed != 0.0)
	{
		stepDuration = (1/speed)*60*pow(10,6);
	}
	if (exspeed !=0.0)
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	a9 01       	movw	r20, r18
    23ae:	c5 01       	movw	r24, r10
    23b0:	b4 01       	movw	r22, r8
    23b2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	c9 f0       	breq	.+50     	; 0x23ec <motor_movement+0xd0>
	{
		exstepDuration = (1/exspeed)*60*pow(10,6);
    23ba:	a5 01       	movw	r20, r10
    23bc:	94 01       	movw	r18, r8
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	80 e8       	ldi	r24, 0x80	; 128
    23c4:	9f e3       	ldi	r25, 0x3F	; 63
    23c6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e7       	ldi	r20, 0x70	; 112
    23d0:	52 e4       	ldi	r21, 0x42	; 66
    23d2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	34 e2       	ldi	r19, 0x24	; 36
    23da:	44 e7       	ldi	r20, 0x74	; 116
    23dc:	59 e4       	ldi	r21, 0x49	; 73
    23de:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    23e2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__fixsfsi>
    23e6:	4b 01       	movw	r8, r22
    23e8:	5c 01       	movw	r10, r24
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <motor_movement+0xd8>
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],double speed,double exspeed)
{
	long stepDuration = 1;
	long exstepDuration = 1;
    23ec:	81 2c       	mov	r8, r1
    23ee:	91 2c       	mov	r9, r1
    23f0:	54 01       	movw	r10, r8
    23f2:	83 94       	inc	r8
	}
	if (exspeed !=0.0)
	{
		exstepDuration = (1/exspeed)*60*pow(10,6);
	}
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    23f4:	88 e0       	ldi	r24, 0x08	; 8
    23f6:	e1 e8       	ldi	r30, 0x81	; 129
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	de 01       	movw	r26, r28
    23fc:	11 96       	adiw	r26, 0x01	; 1
    23fe:	01 90       	ld	r0, Z+
    2400:	0d 92       	st	X+, r0
    2402:	8a 95       	dec	r24
    2404:	e1 f7       	brne	.-8      	; 0x23fe <motor_movement+0xe2>
    2406:	76 01       	movw	r14, r12
    2408:	8e 01       	movw	r16, r28
    240a:	0f 5f       	subi	r16, 0xFF	; 255
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	1e 01       	movw	r2, r28
    2410:	29 e0       	ldi	r18, 0x09	; 9
    2412:	22 0e       	add	r2, r18
    2414:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a9 01       	movw	r20, r18
    241c:	f7 01       	movw	r30, r14
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    242a:	88 23       	and	r24, r24
    242c:	8c f4       	brge	.+34     	; 0x2450 <motor_movement+0x134>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	f8 01       	movw	r30, r16
    2432:	60 81       	ld	r22, Z
    2434:	83 e3       	ldi	r24, 0x33	; 51
    2436:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			step [i] = step [i] * -1;
    243a:	f7 01       	movw	r30, r14
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	a2 81       	ldd	r26, Z+2	; 0x02
    2442:	b3 81       	ldd	r27, Z+3	; 0x03
    2444:	b0 58       	subi	r27, 0x80	; 128
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
    244e:	06 c0       	rjmp	.+12     	; 0x245c <motor_movement+0x140>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	f8 01       	movw	r30, r16
    2454:	60 81       	ld	r22, Z
    2456:	83 e3       	ldi	r24, 0x33	; 51
    2458:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    245c:	f4 e0       	ldi	r31, 0x04	; 4
    245e:	ef 0e       	add	r14, r31
    2460:	f1 1c       	adc	r15, r1
    2462:	0e 5f       	subi	r16, 0xFE	; 254
    2464:	1f 4f       	sbci	r17, 0xFF	; 255
	if (exspeed !=0.0)
	{
		exstepDuration = (1/exspeed)*60*pow(10,6);
	}
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    2466:	20 16       	cp	r2, r16
    2468:	31 06       	cpc	r3, r17
    246a:	a9 f6       	brne	.-86     	; 0x2416 <motor_movement+0xfa>
		int Out;     // make one step to one motor in one unit of time
		int Next[16];
	};
	typedef const struct State STyp; //define STYP from type of struct State
	/*{Current state,{next state}} */
	STyp FSM[4]=
    246c:	88 e8       	ldi	r24, 0x88	; 136
    246e:	e9 e8       	ldi	r30, 0x89	; 137
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	de 01       	movw	r26, r28
    2474:	51 96       	adiw	r26, 0x11	; 17
    2476:	01 90       	ld	r0, Z+
    2478:	0d 92       	st	X+, r0
    247a:	8a 95       	dec	r24
    247c:	e1 f7       	brne	.-8      	; 0x2476 <motor_movement+0x15a>
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
		j [0] = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9a 87       	std	Y+10, r25	; 0x0a
    2484:	89 87       	std	Y+9, r24	; 0x09
		j [1] = 1;
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	8b 87       	std	Y+11, r24	; 0x0b
		j [2] = 1;
    248a:	9e 87       	std	Y+14, r25	; 0x0e
    248c:	8d 87       	std	Y+13, r24	; 0x0d
		j [3] = 1;
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
		{Y,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
    2492:	00 e0       	ldi	r16, 0x00	; 0
    2494:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2496:	0f 2e       	mov	r0, r31
    2498:	f2 e2       	ldi	r31, 0x22	; 34
    249a:	2f 2e       	mov	r2, r31
    249c:	f0 2d       	mov	r31, r0
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
    249e:	0f 2e       	mov	r0, r31
    24a0:	f1 e1       	ldi	r31, 0x11	; 17
    24a2:	3f 2e       	mov	r3, r31
    24a4:	f0 2d       	mov	r31, r0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    24a6:	20 9e       	mul	r2, r16
    24a8:	f0 01       	movw	r30, r0
    24aa:	21 9e       	mul	r2, r17
    24ac:	f0 0d       	add	r31, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	21 e0       	ldi	r18, 0x01	; 1
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	2c 0f       	add	r18, r28
    24b6:	3d 1f       	adc	r19, r29
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	60 89       	ldd	r22, Z+16	; 0x10
    24be:	83 e3       	ldi	r24, 0x33	; 51
    24c0:	0e 94 c0 03 	call	0x780	; 0x780 <pin_XOR>
			 step[S] = step[S] - 1;
    24c4:	78 01       	movw	r14, r16
    24c6:	ee 0c       	add	r14, r14
    24c8:	ff 1c       	adc	r15, r15
    24ca:	ee 0c       	add	r14, r14
    24cc:	ff 1c       	adc	r15, r15
    24ce:	ec 0c       	add	r14, r12
    24d0:	fd 1c       	adc	r15, r13
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	f7 01       	movw	r30, r14
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
    24e8:	f7 01       	movw	r30, r14
    24ea:	60 83       	st	Z, r22
    24ec:	71 83       	std	Z+1, r23	; 0x01
    24ee:	82 83       	std	Z+2, r24	; 0x02
    24f0:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	a9 01       	movw	r20, r18
    24f8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	5c f0       	brlt	.+22     	; 0x2516 <motor_movement+0x1fa>
			  j[S] = 0;
    2500:	f8 01       	movw	r30, r16
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	21 e0       	ldi	r18, 0x01	; 1
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	2c 0f       	add	r18, r28
    250c:	3d 1f       	adc	r19, r29
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	11 86       	std	Z+9, r1	; 0x09
    2514:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    2516:	03 30       	cpi	r16, 0x03	; 3
    2518:	11 05       	cpc	r17, r1
    251a:	51 f4       	brne	.+20     	; 0x2530 <motor_movement+0x214>
			  {
				  for (int i = exstepDuration ; i>=0 ; i-- )
    251c:	c4 01       	movw	r24, r8
    251e:	99 23       	and	r25, r25
    2520:	84 f0       	brlt	.+32     	; 0x2542 <motor_movement+0x226>
    2522:	35 e0       	ldi	r19, 0x05	; 5
    2524:	3a 95       	dec	r19
    2526:	f1 f7       	brne	.-4      	; 0x2524 <motor_movement+0x208>
    2528:	00 00       	nop
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	d0 f7       	brcc	.-12     	; 0x2522 <motor_movement+0x206>
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <motor_movement+0x226>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>=0 ; i-- )
    2530:	c2 01       	movw	r24, r4
    2532:	99 23       	and	r25, r25
    2534:	34 f0       	brlt	.+12     	; 0x2542 <motor_movement+0x226>
    2536:	f5 e0       	ldi	r31, 0x05	; 5
    2538:	fa 95       	dec	r31
    253a:	f1 f7       	brne	.-4      	; 0x2538 <motor_movement+0x21c>
    253c:	00 00       	nop
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	d0 f7       	brcc	.-12     	; 0x2536 <motor_movement+0x21a>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	98 89       	ldd	r25, Y+16	; 0x10
    2546:	9c 01       	movw	r18, r24
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	22 0f       	add	r18, r18
    254e:	33 1f       	adc	r19, r19
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	8d 85       	ldd	r24, Y+13	; 0x0d
    2556:	9e 85       	ldd	r25, Y+14	; 0x0e
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	2b 85       	ldd	r18, Y+11	; 0x0b
    2566:	3c 85       	ldd	r19, Y+12	; 0x0c
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	29 85       	ldd	r18, Y+9	; 0x09
    2572:	3a 85       	ldd	r19, Y+10	; 0x0a
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    2578:	30 9e       	mul	r3, r16
    257a:	f0 01       	movw	r30, r0
    257c:	31 9e       	mul	r3, r17
    257e:	f0 0d       	add	r31, r0
    2580:	11 24       	eor	r1, r1
    2582:	e8 0f       	add	r30, r24
    2584:	f9 1f       	adc	r31, r25
    2586:	31 96       	adiw	r30, 0x01	; 1
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	2c 0f       	add	r18, r28
    2592:	3d 1f       	adc	r19, r29
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	00 89       	ldd	r16, Z+16	; 0x10
    259a:	11 89       	ldd	r17, Z+17	; 0x11
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    259c:	89 2b       	or	r24, r25
    259e:	09 f0       	breq	.+2      	; 0x25a2 <motor_movement+0x286>
    25a0:	82 cf       	rjmp	.-252    	; 0x24a6 <motor_movement+0x18a>
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    25a2:	c8 56       	subi	r28, 0x68	; 104
    25a4:	df 4f       	sbci	r29, 0xFF	; 255
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	df 90       	pop	r13
    25be:	cf 90       	pop	r12
    25c0:	bf 90       	pop	r11
    25c2:	af 90       	pop	r10
    25c4:	9f 90       	pop	r9
    25c6:	8f 90       	pop	r8
    25c8:	7f 90       	pop	r7
    25ca:	6f 90       	pop	r6
    25cc:	5f 90       	pop	r5
    25ce:	4f 90       	pop	r4
    25d0:	3f 90       	pop	r3
    25d2:	2f 90       	pop	r2
    25d4:	08 95       	ret

000025d6 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    25d6:	88 35       	cpi	r24, 0x58	; 88
    25d8:	49 f0       	breq	.+18     	; 0x25ec <motor_EN_DES+0x16>
    25da:	18 f4       	brcc	.+6      	; 0x25e2 <motor_EN_DES+0xc>
    25dc:	85 34       	cpi	r24, 0x45	; 69
    25de:	c1 f0       	breq	.+48     	; 0x2610 <motor_EN_DES+0x3a>
    25e0:	08 95       	ret
    25e2:	89 35       	cpi	r24, 0x59	; 89
    25e4:	49 f0       	breq	.+18     	; 0x25f8 <motor_EN_DES+0x22>
    25e6:	8a 35       	cpi	r24, 0x5A	; 90
    25e8:	69 f0       	breq	.+26     	; 0x2604 <motor_EN_DES+0x2e>
    25ea:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    25ec:	46 2f       	mov	r20, r22
    25ee:	64 e0       	ldi	r22, 0x04	; 4
    25f0:	86 e3       	ldi	r24, 0x36	; 54
    25f2:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    25f6:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    25f8:	46 2f       	mov	r20, r22
    25fa:	65 e0       	ldi	r22, 0x05	; 5
    25fc:	86 e3       	ldi	r24, 0x36	; 54
    25fe:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    2602:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    2604:	46 2f       	mov	r20, r22
    2606:	66 e0       	ldi	r22, 0x06	; 6
    2608:	86 e3       	ldi	r24, 0x36	; 54
    260a:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
			break;
    260e:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    2610:	46 2f       	mov	r20, r22
    2612:	67 e0       	ldi	r22, 0x07	; 7
    2614:	86 e3       	ldi	r24, 0x36	; 54
    2616:	0e 94 94 03 	call	0x728	; 0x728 <pin_write>
    261a:	08 95       	ret

0000261c <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	83 e3       	ldi	r24, 0x33	; 51
    2620:	0e 94 b1 03 	call	0x762	; 0x762 <port_direction>
	port_write(M_PORT,0);
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	83 e3       	ldi	r24, 0x33	; 51
    2628:	0e 94 bc 03 	call	0x778	; 0x778 <port_write>
	pin_direction(EN_DES_PORT,EN_DES_XPIN,output);
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	64 e0       	ldi	r22, 0x04	; 4
    2630:	86 e3       	ldi	r24, 0x36	; 54
    2632:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_YPIN,output);
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	65 e0       	ldi	r22, 0x05	; 5
    263a:	86 e3       	ldi	r24, 0x36	; 54
    263c:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_ZPIN,output);
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	66 e0       	ldi	r22, 0x06	; 6
    2644:	86 e3       	ldi	r24, 0x36	; 54
    2646:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_EPIN,output);
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	67 e0       	ldi	r22, 0x07	; 7
    264e:	86 e3       	ldi	r24, 0x36	; 54
    2650:	0e 94 77 03 	call	0x6ee	; 0x6ee <pin_direction>
	motor_EN_DES('X',0);
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	88 e5       	ldi	r24, 0x58	; 88
    2658:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
	motor_EN_DES('Y',0);
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	89 e5       	ldi	r24, 0x59	; 89
    2660:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
	motor_EN_DES('Z',0);
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	8a e5       	ldi	r24, 0x5A	; 90
    2668:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
	motor_EN_DES('E',0);
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	85 e4       	ldi	r24, 0x45	; 69
    2670:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <motor_EN_DES>
    2674:	08 95       	ret

00002676 <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    2676:	8f 92       	push	r8
    2678:	9f 92       	push	r9
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	49 01       	movw	r8, r18
    2690:	5a 01       	movw	r10, r20
    2692:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    2694:	6c 83       	std	Y+4, r22	; 0x04
    2696:	7d 83       	std	Y+5, r23	; 0x05
    2698:	8e 83       	std	Y+6, r24	; 0x06
    269a:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    269c:	28 87       	std	Y+8, r18	; 0x08
    269e:	39 87       	std	Y+9, r19	; 0x09
    26a0:	4a 87       	std	Y+10, r20	; 0x0a
    26a2:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    26a4:	ec 86       	std	Y+12, r14	; 0x0c
    26a6:	fd 86       	std	Y+13, r15	; 0x0d
    26a8:	0e 87       	std	Y+14, r16	; 0x0e
    26aa:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	7e ef       	ldi	r23, 0xFE	; 254
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	96 e4       	ldi	r25, 0x46	; 70
    26c4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    26c8:	6c 8b       	std	Y+20, r22	; 0x14
    26ca:	7d 8b       	std	Y+21, r23	; 0x15
    26cc:	8e 8b       	std	Y+22, r24	; 0x16
    26ce:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	c5 01       	movw	r24, r10
    26da:	b4 01       	movw	r22, r8
    26dc:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    26e0:	9b 01       	movw	r18, r22
    26e2:	ac 01       	movw	r20, r24
    26e4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	9f e4       	ldi	r25, 0x4F	; 79
    26f4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    26f8:	68 8f       	std	Y+24, r22	; 0x18
    26fa:	79 8f       	std	Y+25, r23	; 0x19
    26fc:	8a 8f       	std	Y+26, r24	; 0x1a
    26fe:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    2700:	18 82       	st	Y, r1
    2702:	19 82       	std	Y+1, r1	; 0x01
    2704:	1a 82       	std	Y+2, r1	; 0x02
    2706:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    2708:	18 8a       	std	Y+16, r1	; 0x10
    270a:	19 8a       	std	Y+17, r1	; 0x11
    270c:	1a 8a       	std	Y+18, r1	; 0x12
    270e:	1b 8a       	std	Y+19, r1	; 0x13
}
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
    2720:	bf 90       	pop	r11
    2722:	af 90       	pop	r10
    2724:	9f 90       	pop	r9
    2726:	8f 90       	pop	r8
    2728:	08 95       	ret

0000272a <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    272a:	4f 92       	push	r4
    272c:	5f 92       	push	r5
    272e:	6f 92       	push	r6
    2730:	7f 92       	push	r7
    2732:	8f 92       	push	r8
    2734:	9f 92       	push	r9
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	2a 97       	sbiw	r28, 0x0a	; 10
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	1a 87       	std	Y+10, r17	; 0x0a
    275c:	09 87       	std	Y+9, r16	; 0x09
	double P_value = 0.00,I_value = 0.00;
	double error = setPoint - processValue;										
    275e:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
    2762:	69 83       	std	Y+1, r22	; 0x01
    2764:	7a 83       	std	Y+2, r23	; 0x02
    2766:	8b 83       	std	Y+3, r24	; 0x03
    2768:	9c 83       	std	Y+4, r25	; 0x04
	pid_st ->SumError = pid_st ->SumError + error ;							
    276a:	f8 01       	movw	r30, r16
    276c:	20 89       	ldd	r18, Z+16	; 0x10
    276e:	31 89       	ldd	r19, Z+17	; 0x11
    2770:	42 89       	ldd	r20, Z+18	; 0x12
    2772:	53 89       	ldd	r21, Z+19	; 0x13
    2774:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    2778:	4b 01       	movw	r8, r22
    277a:	5c 01       	movw	r10, r24
    277c:	f8 01       	movw	r30, r16
    277e:	60 8b       	std	Z+16, r22	; 0x10
    2780:	71 8b       	std	Z+17, r23	; 0x11
    2782:	82 8b       	std	Z+18, r24	; 0x12
    2784:	93 8b       	std	Z+19, r25	; 0x13
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    2786:	c4 84       	ldd	r12, Z+12	; 0x0c
    2788:	d5 84       	ldd	r13, Z+13	; 0x0d
    278a:	e6 84       	ldd	r14, Z+14	; 0x0e
    278c:	f7 84       	ldd	r15, Z+15	; 0x0f
    278e:	20 81       	ld	r18, Z
    2790:	31 81       	ldd	r19, Z+1	; 0x01
    2792:	42 81       	ldd	r20, Z+2	; 0x02
    2794:	53 81       	ldd	r21, Z+3	; 0x03
    2796:	69 81       	ldd	r22, Y+1	; 0x01
    2798:	7a 81       	ldd	r23, Y+2	; 0x02
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	0e 94 c9 14 	call	0x2992	; 0x2992 <__subsf3>
    27a2:	a7 01       	movw	r20, r14
    27a4:	96 01       	movw	r18, r12
    27a6:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    27aa:	6d 83       	std	Y+5, r22	; 0x05
    27ac:	7e 83       	std	Y+6, r23	; 0x06
    27ae:	8f 83       	std	Y+7, r24	; 0x07
    27b0:	98 87       	std	Y+8, r25	; 0x08
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
    27b2:	f8 01       	movw	r30, r16
    27b4:	44 88       	ldd	r4, Z+20	; 0x14
    27b6:	55 88       	ldd	r5, Z+21	; 0x15
    27b8:	66 88       	ldd	r6, Z+22	; 0x16
    27ba:	77 88       	ldd	r7, Z+23	; 0x17
    27bc:	a3 01       	movw	r20, r6
    27be:	92 01       	movw	r18, r4
    27c0:	69 81       	ldd	r22, Y+1	; 0x01
    27c2:	7a 81       	ldd	r23, Y+2	; 0x02
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	b4 f0       	brlt	.+44     	; 0x27fc <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    27d0:	a3 01       	movw	r20, r6
    27d2:	92 01       	movw	r18, r4
    27d4:	50 58       	subi	r21, 0x80	; 128
    27d6:	69 81       	ldd	r22, Y+1	; 0x01
    27d8:	7a 81       	ldd	r23, Y+2	; 0x02
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	ac f0       	brlt	.+42     	; 0x2810 <pid_Controller+0xe6>
	{
		P_value = -INT16_MAX;
	}
	else
		P_value = error * (pid_st ->pid_D);
    27e6:	a7 01       	movw	r20, r14
    27e8:	96 01       	movw	r18, r12
    27ea:	69 81       	ldd	r22, Y+1	; 0x01
    27ec:	7a 81       	ldd	r23, Y+2	; 0x02
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    27f6:	2b 01       	movw	r4, r22
    27f8:	3c 01       	movw	r6, r24
    27fa:	13 c0       	rjmp	.+38     	; 0x2822 <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;							
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
	{
		P_value = INT16_MAX;
    27fc:	0f 2e       	mov	r0, r31
    27fe:	41 2c       	mov	r4, r1
    2800:	fe ef       	ldi	r31, 0xFE	; 254
    2802:	5f 2e       	mov	r5, r31
    2804:	66 24       	eor	r6, r6
    2806:	6a 94       	dec	r6
    2808:	f6 e4       	ldi	r31, 0x46	; 70
    280a:	7f 2e       	mov	r7, r31
    280c:	f0 2d       	mov	r31, r0
    280e:	09 c0       	rjmp	.+18     	; 0x2822 <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    2810:	0f 2e       	mov	r0, r31
    2812:	41 2c       	mov	r4, r1
    2814:	fe ef       	ldi	r31, 0xFE	; 254
    2816:	5f 2e       	mov	r5, r31
    2818:	66 24       	eor	r6, r6
    281a:	6a 94       	dec	r6
    281c:	f6 ec       	ldi	r31, 0xC6	; 198
    281e:	7f 2e       	mov	r7, r31
    2820:	f0 2d       	mov	r31, r0
	}
	else
		P_value = error * (pid_st ->pid_D);
	// Calculate Iterm and limit integral runaway
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    2822:	e9 85       	ldd	r30, Y+9	; 0x09
    2824:	fa 85       	ldd	r31, Y+10	; 0x0a
    2826:	c0 8c       	ldd	r12, Z+24	; 0x18
    2828:	d1 8c       	ldd	r13, Z+25	; 0x19
    282a:	e2 8c       	ldd	r14, Z+26	; 0x1a
    282c:	f3 8c       	ldd	r15, Z+27	; 0x1b
    282e:	a7 01       	movw	r20, r14
    2830:	96 01       	movw	r18, r12
    2832:	c5 01       	movw	r24, r10
    2834:	b4 01       	movw	r22, r8
    2836:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__gesf2>
    283a:	18 16       	cp	r1, r24
    283c:	5c f4       	brge	.+22     	; 0x2854 <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    283e:	e9 85       	ldd	r30, Y+9	; 0x09
    2840:	fa 85       	ldd	r31, Y+10	; 0x0a
    2842:	c0 8a       	std	Z+16, r12	; 0x10
    2844:	d1 8a       	std	Z+17, r13	; 0x11
    2846:	e2 8a       	std	Z+18, r14	; 0x12
    2848:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5e e4       	ldi	r21, 0x4E	; 78
    2852:	23 c0       	rjmp	.+70     	; 0x289a <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    2854:	f7 fa       	bst	r15, 7
    2856:	f0 94       	com	r15
    2858:	f7 f8       	bld	r15, 7
    285a:	f0 94       	com	r15
    285c:	a7 01       	movw	r20, r14
    285e:	96 01       	movw	r18, r12
    2860:	c5 01       	movw	r24, r10
    2862:	b4 01       	movw	r22, r8
    2864:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    2868:	88 23       	and	r24, r24
    286a:	5c f4       	brge	.+22     	; 0x2882 <pid_Controller+0x158>
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    286c:	e9 85       	ldd	r30, Y+9	; 0x09
    286e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2870:	c0 8a       	std	Z+16, r12	; 0x10
    2872:	d1 8a       	std	Z+17, r13	; 0x11
    2874:	e2 8a       	std	Z+18, r14	; 0x12
    2876:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5e ec       	ldi	r21, 0xCE	; 206
    2880:	0c c0       	rjmp	.+24     	; 0x289a <pid_Controller+0x170>
	}
	else
		I_value = pid_st ->SumError * pid_st->pid_I;	
    2882:	e9 85       	ldd	r30, Y+9	; 0x09
    2884:	fa 85       	ldd	r31, Y+10	; 0x0a
    2886:	20 85       	ldd	r18, Z+8	; 0x08
    2888:	31 85       	ldd	r19, Z+9	; 0x09
    288a:	42 85       	ldd	r20, Z+10	; 0x0a
    288c:	53 85       	ldd	r21, Z+11	; 0x0b
    288e:	c5 01       	movw	r24, r10
    2890:	b4 01       	movw	r22, r8
    2892:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    2896:	9b 01       	movw	r18, r22
    2898:	ac 01       	movw	r20, r24
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    289a:	c3 01       	movw	r24, r6
    289c:	b2 01       	movw	r22, r4
    289e:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    28a2:	2d 81       	ldd	r18, Y+5	; 0x05
    28a4:	3e 81       	ldd	r19, Y+6	; 0x06
    28a6:	4f 81       	ldd	r20, Y+7	; 0x07
    28a8:	58 85       	ldd	r21, Y+8	; 0x08
    28aa:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	48 ef       	ldi	r20, 0xF8	; 248
    28b4:	52 e4       	ldi	r21, 0x42	; 66
    28b6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__divsf3>
    28ba:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__fixsfsi>
    28be:	77 23       	and	r23, r23
    28c0:	14 f4       	brge	.+4      	; 0x28c6 <pid_Controller+0x19c>
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	8b 01       	movw	r16, r22
    28c8:	6f 3f       	cpi	r22, 0xFF	; 255
    28ca:	71 05       	cpc	r23, r1
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <pid_Controller+0x1aa>
    28ce:	14 f0       	brlt	.+4      	; 0x28d4 <pid_Controller+0x1aa>
    28d0:	0f ef       	ldi	r16, 0xFF	; 255
    28d2:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    28d4:	b8 01       	movw	r22, r16
    28d6:	01 2e       	mov	r0, r17
    28d8:	00 0c       	add	r0, r0
    28da:	88 0b       	sbc	r24, r24
    28dc:	99 0b       	sbc	r25, r25
    28de:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__floatsisf>
    28e2:	e9 85       	ldd	r30, Y+9	; 0x09
    28e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    28e6:	60 83       	st	Z, r22
    28e8:	71 83       	std	Z+1, r23	; 0x01
    28ea:	82 83       	std	Z+2, r24	; 0x02
    28ec:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    28ee:	c8 01       	movw	r24, r16
    28f0:	2a 96       	adiw	r28, 0x0a	; 10
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	cf 90       	pop	r12
    290c:	bf 90       	pop	r11
    290e:	af 90       	pop	r10
    2910:	9f 90       	pop	r9
    2912:	8f 90       	pop	r8
    2914:	7f 90       	pop	r7
    2916:	6f 90       	pop	r6
    2918:	5f 90       	pop	r5
    291a:	4f 90       	pop	r4
    291c:	08 95       	ret

0000291e <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    2922:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    2924:	88 e1       	ldi	r24, 0x18	; 24
    2926:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    2928:	86 e8       	ldi	r24, 0x86	; 134
    292a:	80 bd       	out	0x20, r24	; 32
    292c:	08 95       	ret

0000292e <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    292e:	5d 9b       	sbis	0x0b, 5	; 11
    2930:	fe cf       	rjmp	.-4      	; 0x292e <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    2932:	8c b9       	out	0x0c, r24	; 12
    2934:	08 95       	ret

00002936 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    2936:	5f 9b       	sbis	0x0b, 7	; 11
    2938:	fe cf       	rjmp	.-4      	; 0x2936 <Recive_Char>
	return(UDR); 
    293a:	8c b1       	in	r24, 0x0c	; 12
}
    293c:	08 95       	ret

0000293e <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	ec 01       	movw	r28, r24
	while(*ptr_string)
    2944:	88 81       	ld	r24, Y
    2946:	88 23       	and	r24, r24
    2948:	31 f0       	breq	.+12     	; 0x2956 <Transmit_Data+0x18>
    294a:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    294c:	0e 94 97 14 	call	0x292e	; 0x292e <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    2950:	89 91       	ld	r24, Y+
    2952:	81 11       	cpse	r24, r1
    2954:	fb cf       	rjmp	.-10     	; 0x294c <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	08 95       	ret

0000295c <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	cf 93       	push	r28
    2962:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    2964:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    2966:	0e 94 9b 14 	call	0x2936	; 0x2936 <Recive_Char>
	 		if((ch == '\n') || (ch == '\r')) //read till enter key is pressed
    296a:	8a 30       	cpi	r24, 0x0A	; 10
    296c:	11 f0       	breq	.+4      	; 0x2972 <Recive_Data+0x16>
    296e:	8d 30       	cpi	r24, 0x0D	; 13
    2970:	31 f4       	brne	.+12     	; 0x297e <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    2972:	f8 01       	movw	r30, r16
    2974:	ec 0f       	add	r30, r28
    2976:	f1 1d       	adc	r31, r1
    2978:	80 e2       	ldi	r24, 0x20	; 32
    297a:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    297c:	06 c0       	rjmp	.+12     	; 0x298a <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    297e:	f8 01       	movw	r30, r16
    2980:	ec 0f       	add	r30, r28
    2982:	f1 1d       	adc	r31, r1
    2984:	80 83       	st	Z, r24
    2986:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    2988:	ee cf       	rjmp	.-36     	; 0x2966 <Recive_Data+0xa>
}
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	08 95       	ret

00002992 <__subsf3>:
    2992:	50 58       	subi	r21, 0x80	; 128

00002994 <__addsf3>:
    2994:	bb 27       	eor	r27, r27
    2996:	aa 27       	eor	r26, r26
    2998:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__addsf3x>
    299c:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_round>
    29a0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fp_pscA>
    29a4:	38 f0       	brcs	.+14     	; 0x29b4 <__addsf3+0x20>
    29a6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__fp_pscB>
    29aa:	20 f0       	brcs	.+8      	; 0x29b4 <__addsf3+0x20>
    29ac:	39 f4       	brne	.+14     	; 0x29bc <__addsf3+0x28>
    29ae:	9f 3f       	cpi	r25, 0xFF	; 255
    29b0:	19 f4       	brne	.+6      	; 0x29b8 <__addsf3+0x24>
    29b2:	26 f4       	brtc	.+8      	; 0x29bc <__addsf3+0x28>
    29b4:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>
    29b8:	0e f4       	brtc	.+2      	; 0x29bc <__addsf3+0x28>
    29ba:	e0 95       	com	r30
    29bc:	e7 fb       	bst	r30, 7
    29be:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>

000029c2 <__addsf3x>:
    29c2:	e9 2f       	mov	r30, r25
    29c4:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__fp_split3>
    29c8:	58 f3       	brcs	.-42     	; 0x29a0 <__addsf3+0xc>
    29ca:	ba 17       	cp	r27, r26
    29cc:	62 07       	cpc	r22, r18
    29ce:	73 07       	cpc	r23, r19
    29d0:	84 07       	cpc	r24, r20
    29d2:	95 07       	cpc	r25, r21
    29d4:	20 f0       	brcs	.+8      	; 0x29de <__addsf3x+0x1c>
    29d6:	79 f4       	brne	.+30     	; 0x29f6 <__addsf3x+0x34>
    29d8:	a6 f5       	brtc	.+104    	; 0x2a42 <__addsf3x+0x80>
    29da:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__fp_zero>
    29de:	0e f4       	brtc	.+2      	; 0x29e2 <__addsf3x+0x20>
    29e0:	e0 95       	com	r30
    29e2:	0b 2e       	mov	r0, r27
    29e4:	ba 2f       	mov	r27, r26
    29e6:	a0 2d       	mov	r26, r0
    29e8:	0b 01       	movw	r0, r22
    29ea:	b9 01       	movw	r22, r18
    29ec:	90 01       	movw	r18, r0
    29ee:	0c 01       	movw	r0, r24
    29f0:	ca 01       	movw	r24, r20
    29f2:	a0 01       	movw	r20, r0
    29f4:	11 24       	eor	r1, r1
    29f6:	ff 27       	eor	r31, r31
    29f8:	59 1b       	sub	r21, r25
    29fa:	99 f0       	breq	.+38     	; 0x2a22 <__addsf3x+0x60>
    29fc:	59 3f       	cpi	r21, 0xF9	; 249
    29fe:	50 f4       	brcc	.+20     	; 0x2a14 <__addsf3x+0x52>
    2a00:	50 3e       	cpi	r21, 0xE0	; 224
    2a02:	68 f1       	brcs	.+90     	; 0x2a5e <__addsf3x+0x9c>
    2a04:	1a 16       	cp	r1, r26
    2a06:	f0 40       	sbci	r31, 0x00	; 0
    2a08:	a2 2f       	mov	r26, r18
    2a0a:	23 2f       	mov	r18, r19
    2a0c:	34 2f       	mov	r19, r20
    2a0e:	44 27       	eor	r20, r20
    2a10:	58 5f       	subi	r21, 0xF8	; 248
    2a12:	f3 cf       	rjmp	.-26     	; 0x29fa <__addsf3x+0x38>
    2a14:	46 95       	lsr	r20
    2a16:	37 95       	ror	r19
    2a18:	27 95       	ror	r18
    2a1a:	a7 95       	ror	r26
    2a1c:	f0 40       	sbci	r31, 0x00	; 0
    2a1e:	53 95       	inc	r21
    2a20:	c9 f7       	brne	.-14     	; 0x2a14 <__addsf3x+0x52>
    2a22:	7e f4       	brtc	.+30     	; 0x2a42 <__addsf3x+0x80>
    2a24:	1f 16       	cp	r1, r31
    2a26:	ba 0b       	sbc	r27, r26
    2a28:	62 0b       	sbc	r22, r18
    2a2a:	73 0b       	sbc	r23, r19
    2a2c:	84 0b       	sbc	r24, r20
    2a2e:	ba f0       	brmi	.+46     	; 0x2a5e <__addsf3x+0x9c>
    2a30:	91 50       	subi	r25, 0x01	; 1
    2a32:	a1 f0       	breq	.+40     	; 0x2a5c <__addsf3x+0x9a>
    2a34:	ff 0f       	add	r31, r31
    2a36:	bb 1f       	adc	r27, r27
    2a38:	66 1f       	adc	r22, r22
    2a3a:	77 1f       	adc	r23, r23
    2a3c:	88 1f       	adc	r24, r24
    2a3e:	c2 f7       	brpl	.-16     	; 0x2a30 <__addsf3x+0x6e>
    2a40:	0e c0       	rjmp	.+28     	; 0x2a5e <__addsf3x+0x9c>
    2a42:	ba 0f       	add	r27, r26
    2a44:	62 1f       	adc	r22, r18
    2a46:	73 1f       	adc	r23, r19
    2a48:	84 1f       	adc	r24, r20
    2a4a:	48 f4       	brcc	.+18     	; 0x2a5e <__addsf3x+0x9c>
    2a4c:	87 95       	ror	r24
    2a4e:	77 95       	ror	r23
    2a50:	67 95       	ror	r22
    2a52:	b7 95       	ror	r27
    2a54:	f7 95       	ror	r31
    2a56:	9e 3f       	cpi	r25, 0xFE	; 254
    2a58:	08 f0       	brcs	.+2      	; 0x2a5c <__addsf3x+0x9a>
    2a5a:	b0 cf       	rjmp	.-160    	; 0x29bc <__addsf3+0x28>
    2a5c:	93 95       	inc	r25
    2a5e:	88 0f       	add	r24, r24
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <__addsf3x+0xa2>
    2a62:	99 27       	eor	r25, r25
    2a64:	ee 0f       	add	r30, r30
    2a66:	97 95       	ror	r25
    2a68:	87 95       	ror	r24
    2a6a:	08 95       	ret

00002a6c <__cmpsf2>:
    2a6c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_cmp>
    2a70:	08 f4       	brcc	.+2      	; 0x2a74 <__cmpsf2+0x8>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	08 95       	ret

00002a76 <cos>:
    2a76:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__fp_rempio2>
    2a7a:	e3 95       	inc	r30
    2a7c:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__fp_sinus>

00002a80 <__divsf3>:
    2a80:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__divsf3x>
    2a84:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_round>
    2a88:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__fp_pscB>
    2a8c:	58 f0       	brcs	.+22     	; 0x2aa4 <__divsf3+0x24>
    2a8e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fp_pscA>
    2a92:	40 f0       	brcs	.+16     	; 0x2aa4 <__divsf3+0x24>
    2a94:	29 f4       	brne	.+10     	; 0x2aa0 <__divsf3+0x20>
    2a96:	5f 3f       	cpi	r21, 0xFF	; 255
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <__divsf3+0x24>
    2a9a:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>
    2a9e:	51 11       	cpse	r21, r1
    2aa0:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_szero>
    2aa4:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>

00002aa8 <__divsf3x>:
    2aa8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__fp_split3>
    2aac:	68 f3       	brcs	.-38     	; 0x2a88 <__divsf3+0x8>

00002aae <__divsf3_pse>:
    2aae:	99 23       	and	r25, r25
    2ab0:	b1 f3       	breq	.-20     	; 0x2a9e <__divsf3+0x1e>
    2ab2:	55 23       	and	r21, r21
    2ab4:	91 f3       	breq	.-28     	; 0x2a9a <__divsf3+0x1a>
    2ab6:	95 1b       	sub	r25, r21
    2ab8:	55 0b       	sbc	r21, r21
    2aba:	bb 27       	eor	r27, r27
    2abc:	aa 27       	eor	r26, r26
    2abe:	62 17       	cp	r22, r18
    2ac0:	73 07       	cpc	r23, r19
    2ac2:	84 07       	cpc	r24, r20
    2ac4:	38 f0       	brcs	.+14     	; 0x2ad4 <__divsf3_pse+0x26>
    2ac6:	9f 5f       	subi	r25, 0xFF	; 255
    2ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	44 1f       	adc	r20, r20
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	a9 f3       	breq	.-22     	; 0x2abe <__divsf3_pse+0x10>
    2ad4:	35 d0       	rcall	.+106    	; 0x2b40 <__divsf3_pse+0x92>
    2ad6:	0e 2e       	mov	r0, r30
    2ad8:	3a f0       	brmi	.+14     	; 0x2ae8 <__divsf3_pse+0x3a>
    2ada:	e0 e8       	ldi	r30, 0x80	; 128
    2adc:	32 d0       	rcall	.+100    	; 0x2b42 <__divsf3_pse+0x94>
    2ade:	91 50       	subi	r25, 0x01	; 1
    2ae0:	50 40       	sbci	r21, 0x00	; 0
    2ae2:	e6 95       	lsr	r30
    2ae4:	00 1c       	adc	r0, r0
    2ae6:	ca f7       	brpl	.-14     	; 0x2ada <__divsf3_pse+0x2c>
    2ae8:	2b d0       	rcall	.+86     	; 0x2b40 <__divsf3_pse+0x92>
    2aea:	fe 2f       	mov	r31, r30
    2aec:	29 d0       	rcall	.+82     	; 0x2b40 <__divsf3_pse+0x92>
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	bb 1f       	adc	r27, r27
    2af6:	26 17       	cp	r18, r22
    2af8:	37 07       	cpc	r19, r23
    2afa:	48 07       	cpc	r20, r24
    2afc:	ab 07       	cpc	r26, r27
    2afe:	b0 e8       	ldi	r27, 0x80	; 128
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <__divsf3_pse+0x56>
    2b02:	bb 0b       	sbc	r27, r27
    2b04:	80 2d       	mov	r24, r0
    2b06:	bf 01       	movw	r22, r30
    2b08:	ff 27       	eor	r31, r31
    2b0a:	93 58       	subi	r25, 0x83	; 131
    2b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0e:	3a f0       	brmi	.+14     	; 0x2b1e <__divsf3_pse+0x70>
    2b10:	9e 3f       	cpi	r25, 0xFE	; 254
    2b12:	51 05       	cpc	r21, r1
    2b14:	78 f0       	brcs	.+30     	; 0x2b34 <__divsf3_pse+0x86>
    2b16:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>
    2b1a:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_szero>
    2b1e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b20:	e4 f3       	brlt	.-8      	; 0x2b1a <__divsf3_pse+0x6c>
    2b22:	98 3e       	cpi	r25, 0xE8	; 232
    2b24:	d4 f3       	brlt	.-12     	; 0x2b1a <__divsf3_pse+0x6c>
    2b26:	86 95       	lsr	r24
    2b28:	77 95       	ror	r23
    2b2a:	67 95       	ror	r22
    2b2c:	b7 95       	ror	r27
    2b2e:	f7 95       	ror	r31
    2b30:	9f 5f       	subi	r25, 0xFF	; 255
    2b32:	c9 f7       	brne	.-14     	; 0x2b26 <__divsf3_pse+0x78>
    2b34:	88 0f       	add	r24, r24
    2b36:	91 1d       	adc	r25, r1
    2b38:	96 95       	lsr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	97 f9       	bld	r25, 7
    2b3e:	08 95       	ret
    2b40:	e1 e0       	ldi	r30, 0x01	; 1
    2b42:	66 0f       	add	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	88 1f       	adc	r24, r24
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	62 17       	cp	r22, r18
    2b4c:	73 07       	cpc	r23, r19
    2b4e:	84 07       	cpc	r24, r20
    2b50:	ba 07       	cpc	r27, r26
    2b52:	20 f0       	brcs	.+8      	; 0x2b5c <__divsf3_pse+0xae>
    2b54:	62 1b       	sub	r22, r18
    2b56:	73 0b       	sbc	r23, r19
    2b58:	84 0b       	sbc	r24, r20
    2b5a:	ba 0b       	sbc	r27, r26
    2b5c:	ee 1f       	adc	r30, r30
    2b5e:	88 f7       	brcc	.-30     	; 0x2b42 <__divsf3_pse+0x94>
    2b60:	e0 95       	com	r30
    2b62:	08 95       	ret

00002b64 <__fixsfsi>:
    2b64:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2b68:	68 94       	set
    2b6a:	b1 11       	cpse	r27, r1
    2b6c:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_szero>
    2b70:	08 95       	ret

00002b72 <__fixunssfsi>:
    2b72:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_splitA>
    2b76:	88 f0       	brcs	.+34     	; 0x2b9a <__fixunssfsi+0x28>
    2b78:	9f 57       	subi	r25, 0x7F	; 127
    2b7a:	98 f0       	brcs	.+38     	; 0x2ba2 <__fixunssfsi+0x30>
    2b7c:	b9 2f       	mov	r27, r25
    2b7e:	99 27       	eor	r25, r25
    2b80:	b7 51       	subi	r27, 0x17	; 23
    2b82:	b0 f0       	brcs	.+44     	; 0x2bb0 <__fixunssfsi+0x3e>
    2b84:	e1 f0       	breq	.+56     	; 0x2bbe <__fixunssfsi+0x4c>
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	1a f0       	brmi	.+6      	; 0x2b96 <__fixunssfsi+0x24>
    2b90:	ba 95       	dec	r27
    2b92:	c9 f7       	brne	.-14     	; 0x2b86 <__fixunssfsi+0x14>
    2b94:	14 c0       	rjmp	.+40     	; 0x2bbe <__fixunssfsi+0x4c>
    2b96:	b1 30       	cpi	r27, 0x01	; 1
    2b98:	91 f0       	breq	.+36     	; 0x2bbe <__fixunssfsi+0x4c>
    2b9a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__fp_zero>
    2b9e:	b1 e0       	ldi	r27, 0x01	; 1
    2ba0:	08 95       	ret
    2ba2:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__fp_zero>
    2ba6:	67 2f       	mov	r22, r23
    2ba8:	78 2f       	mov	r23, r24
    2baa:	88 27       	eor	r24, r24
    2bac:	b8 5f       	subi	r27, 0xF8	; 248
    2bae:	39 f0       	breq	.+14     	; 0x2bbe <__fixunssfsi+0x4c>
    2bb0:	b9 3f       	cpi	r27, 0xF9	; 249
    2bb2:	cc f3       	brlt	.-14     	; 0x2ba6 <__fixunssfsi+0x34>
    2bb4:	86 95       	lsr	r24
    2bb6:	77 95       	ror	r23
    2bb8:	67 95       	ror	r22
    2bba:	b3 95       	inc	r27
    2bbc:	d9 f7       	brne	.-10     	; 0x2bb4 <__fixunssfsi+0x42>
    2bbe:	3e f4       	brtc	.+14     	; 0x2bce <__fixunssfsi+0x5c>
    2bc0:	90 95       	com	r25
    2bc2:	80 95       	com	r24
    2bc4:	70 95       	com	r23
    2bc6:	61 95       	neg	r22
    2bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bca:	8f 4f       	sbci	r24, 0xFF	; 255
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	08 95       	ret

00002bd0 <__floatunsisf>:
    2bd0:	e8 94       	clt
    2bd2:	09 c0       	rjmp	.+18     	; 0x2be6 <__floatsisf+0x12>

00002bd4 <__floatsisf>:
    2bd4:	97 fb       	bst	r25, 7
    2bd6:	3e f4       	brtc	.+14     	; 0x2be6 <__floatsisf+0x12>
    2bd8:	90 95       	com	r25
    2bda:	80 95       	com	r24
    2bdc:	70 95       	com	r23
    2bde:	61 95       	neg	r22
    2be0:	7f 4f       	sbci	r23, 0xFF	; 255
    2be2:	8f 4f       	sbci	r24, 0xFF	; 255
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	99 23       	and	r25, r25
    2be8:	a9 f0       	breq	.+42     	; 0x2c14 <__floatsisf+0x40>
    2bea:	f9 2f       	mov	r31, r25
    2bec:	96 e9       	ldi	r25, 0x96	; 150
    2bee:	bb 27       	eor	r27, r27
    2bf0:	93 95       	inc	r25
    2bf2:	f6 95       	lsr	r31
    2bf4:	87 95       	ror	r24
    2bf6:	77 95       	ror	r23
    2bf8:	67 95       	ror	r22
    2bfa:	b7 95       	ror	r27
    2bfc:	f1 11       	cpse	r31, r1
    2bfe:	f8 cf       	rjmp	.-16     	; 0x2bf0 <__floatsisf+0x1c>
    2c00:	fa f4       	brpl	.+62     	; 0x2c40 <__floatsisf+0x6c>
    2c02:	bb 0f       	add	r27, r27
    2c04:	11 f4       	brne	.+4      	; 0x2c0a <__floatsisf+0x36>
    2c06:	60 ff       	sbrs	r22, 0
    2c08:	1b c0       	rjmp	.+54     	; 0x2c40 <__floatsisf+0x6c>
    2c0a:	6f 5f       	subi	r22, 0xFF	; 255
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	16 c0       	rjmp	.+44     	; 0x2c40 <__floatsisf+0x6c>
    2c14:	88 23       	and	r24, r24
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <__floatsisf+0x48>
    2c18:	96 e9       	ldi	r25, 0x96	; 150
    2c1a:	11 c0       	rjmp	.+34     	; 0x2c3e <__floatsisf+0x6a>
    2c1c:	77 23       	and	r23, r23
    2c1e:	21 f0       	breq	.+8      	; 0x2c28 <__floatsisf+0x54>
    2c20:	9e e8       	ldi	r25, 0x8E	; 142
    2c22:	87 2f       	mov	r24, r23
    2c24:	76 2f       	mov	r23, r22
    2c26:	05 c0       	rjmp	.+10     	; 0x2c32 <__floatsisf+0x5e>
    2c28:	66 23       	and	r22, r22
    2c2a:	71 f0       	breq	.+28     	; 0x2c48 <__floatsisf+0x74>
    2c2c:	96 e8       	ldi	r25, 0x86	; 134
    2c2e:	86 2f       	mov	r24, r22
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	2a f0       	brmi	.+10     	; 0x2c40 <__floatsisf+0x6c>
    2c36:	9a 95       	dec	r25
    2c38:	66 0f       	add	r22, r22
    2c3a:	77 1f       	adc	r23, r23
    2c3c:	88 1f       	adc	r24, r24
    2c3e:	da f7       	brpl	.-10     	; 0x2c36 <__floatsisf+0x62>
    2c40:	88 0f       	add	r24, r24
    2c42:	96 95       	lsr	r25
    2c44:	87 95       	ror	r24
    2c46:	97 f9       	bld	r25, 7
    2c48:	08 95       	ret

00002c4a <__fp_cmp>:
    2c4a:	99 0f       	add	r25, r25
    2c4c:	00 08       	sbc	r0, r0
    2c4e:	55 0f       	add	r21, r21
    2c50:	aa 0b       	sbc	r26, r26
    2c52:	e0 e8       	ldi	r30, 0x80	; 128
    2c54:	fe ef       	ldi	r31, 0xFE	; 254
    2c56:	16 16       	cp	r1, r22
    2c58:	17 06       	cpc	r1, r23
    2c5a:	e8 07       	cpc	r30, r24
    2c5c:	f9 07       	cpc	r31, r25
    2c5e:	c0 f0       	brcs	.+48     	; 0x2c90 <__fp_cmp+0x46>
    2c60:	12 16       	cp	r1, r18
    2c62:	13 06       	cpc	r1, r19
    2c64:	e4 07       	cpc	r30, r20
    2c66:	f5 07       	cpc	r31, r21
    2c68:	98 f0       	brcs	.+38     	; 0x2c90 <__fp_cmp+0x46>
    2c6a:	62 1b       	sub	r22, r18
    2c6c:	73 0b       	sbc	r23, r19
    2c6e:	84 0b       	sbc	r24, r20
    2c70:	95 0b       	sbc	r25, r21
    2c72:	39 f4       	brne	.+14     	; 0x2c82 <__fp_cmp+0x38>
    2c74:	0a 26       	eor	r0, r26
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <__fp_cmp+0x46>
    2c78:	23 2b       	or	r18, r19
    2c7a:	24 2b       	or	r18, r20
    2c7c:	25 2b       	or	r18, r21
    2c7e:	21 f4       	brne	.+8      	; 0x2c88 <__fp_cmp+0x3e>
    2c80:	08 95       	ret
    2c82:	0a 26       	eor	r0, r26
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <__fp_cmp+0x3e>
    2c86:	a1 40       	sbci	r26, 0x01	; 1
    2c88:	a6 95       	lsr	r26
    2c8a:	8f ef       	ldi	r24, 0xFF	; 255
    2c8c:	81 1d       	adc	r24, r1
    2c8e:	81 1d       	adc	r24, r1
    2c90:	08 95       	ret

00002c92 <__fp_inf>:
    2c92:	97 f9       	bld	r25, 7
    2c94:	9f 67       	ori	r25, 0x7F	; 127
    2c96:	80 e8       	ldi	r24, 0x80	; 128
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	08 95       	ret

00002c9e <__fp_nan>:
    2c9e:	9f ef       	ldi	r25, 0xFF	; 255
    2ca0:	80 ec       	ldi	r24, 0xC0	; 192
    2ca2:	08 95       	ret

00002ca4 <__fp_pscA>:
    2ca4:	00 24       	eor	r0, r0
    2ca6:	0a 94       	dec	r0
    2ca8:	16 16       	cp	r1, r22
    2caa:	17 06       	cpc	r1, r23
    2cac:	18 06       	cpc	r1, r24
    2cae:	09 06       	cpc	r0, r25
    2cb0:	08 95       	ret

00002cb2 <__fp_pscB>:
    2cb2:	00 24       	eor	r0, r0
    2cb4:	0a 94       	dec	r0
    2cb6:	12 16       	cp	r1, r18
    2cb8:	13 06       	cpc	r1, r19
    2cba:	14 06       	cpc	r1, r20
    2cbc:	05 06       	cpc	r0, r21
    2cbe:	08 95       	ret
    2cc0:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>

00002cc4 <__fp_rempio2>:
    2cc4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_splitA>
    2cc8:	d8 f3       	brcs	.-10     	; 0x2cc0 <__fp_pscB+0xe>
    2cca:	e8 94       	clt
    2ccc:	e0 e0       	ldi	r30, 0x00	; 0
    2cce:	bb 27       	eor	r27, r27
    2cd0:	9f 57       	subi	r25, 0x7F	; 127
    2cd2:	f0 f0       	brcs	.+60     	; 0x2d10 <__fp_rempio2+0x4c>
    2cd4:	2a ed       	ldi	r18, 0xDA	; 218
    2cd6:	3f e0       	ldi	r19, 0x0F	; 15
    2cd8:	49 ec       	ldi	r20, 0xC9	; 201
    2cda:	06 c0       	rjmp	.+12     	; 0x2ce8 <__fp_rempio2+0x24>
    2cdc:	ee 0f       	add	r30, r30
    2cde:	bb 0f       	add	r27, r27
    2ce0:	66 1f       	adc	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	28 f0       	brcs	.+10     	; 0x2cf2 <__fp_rempio2+0x2e>
    2ce8:	b2 3a       	cpi	r27, 0xA2	; 162
    2cea:	62 07       	cpc	r22, r18
    2cec:	73 07       	cpc	r23, r19
    2cee:	84 07       	cpc	r24, r20
    2cf0:	28 f0       	brcs	.+10     	; 0x2cfc <__fp_rempio2+0x38>
    2cf2:	b2 5a       	subi	r27, 0xA2	; 162
    2cf4:	62 0b       	sbc	r22, r18
    2cf6:	73 0b       	sbc	r23, r19
    2cf8:	84 0b       	sbc	r24, r20
    2cfa:	e3 95       	inc	r30
    2cfc:	9a 95       	dec	r25
    2cfe:	72 f7       	brpl	.-36     	; 0x2cdc <__fp_rempio2+0x18>
    2d00:	80 38       	cpi	r24, 0x80	; 128
    2d02:	30 f4       	brcc	.+12     	; 0x2d10 <__fp_rempio2+0x4c>
    2d04:	9a 95       	dec	r25
    2d06:	bb 0f       	add	r27, r27
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	d2 f7       	brpl	.-12     	; 0x2d04 <__fp_rempio2+0x40>
    2d10:	90 48       	sbci	r25, 0x80	; 128
    2d12:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_mpack_finite>

00002d16 <__fp_round>:
    2d16:	09 2e       	mov	r0, r25
    2d18:	03 94       	inc	r0
    2d1a:	00 0c       	add	r0, r0
    2d1c:	11 f4       	brne	.+4      	; 0x2d22 <__fp_round+0xc>
    2d1e:	88 23       	and	r24, r24
    2d20:	52 f0       	brmi	.+20     	; 0x2d36 <__fp_round+0x20>
    2d22:	bb 0f       	add	r27, r27
    2d24:	40 f4       	brcc	.+16     	; 0x2d36 <__fp_round+0x20>
    2d26:	bf 2b       	or	r27, r31
    2d28:	11 f4       	brne	.+4      	; 0x2d2e <__fp_round+0x18>
    2d2a:	60 ff       	sbrs	r22, 0
    2d2c:	04 c0       	rjmp	.+8      	; 0x2d36 <__fp_round+0x20>
    2d2e:	6f 5f       	subi	r22, 0xFF	; 255
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255
    2d32:	8f 4f       	sbci	r24, 0xFF	; 255
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	08 95       	ret

00002d38 <__fp_sinus>:
    2d38:	ef 93       	push	r30
    2d3a:	e0 ff       	sbrs	r30, 0
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <__fp_sinus+0x14>
    2d3e:	a2 ea       	ldi	r26, 0xA2	; 162
    2d40:	2a ed       	ldi	r18, 0xDA	; 218
    2d42:	3f e0       	ldi	r19, 0x0F	; 15
    2d44:	49 ec       	ldi	r20, 0xC9	; 201
    2d46:	5f eb       	ldi	r21, 0xBF	; 191
    2d48:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__addsf3x>
    2d4c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__fp_round>
    2d50:	0f 90       	pop	r0
    2d52:	03 94       	inc	r0
    2d54:	01 fc       	sbrc	r0, 1
    2d56:	90 58       	subi	r25, 0x80	; 128
    2d58:	e4 e5       	ldi	r30, 0x54	; 84
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	0c 94 25 18 	jmp	0x304a	; 0x304a <__fp_powsodd>

00002d60 <__fp_split3>:
    2d60:	57 fd       	sbrc	r21, 7
    2d62:	90 58       	subi	r25, 0x80	; 128
    2d64:	44 0f       	add	r20, r20
    2d66:	55 1f       	adc	r21, r21
    2d68:	59 f0       	breq	.+22     	; 0x2d80 <__fp_splitA+0x10>
    2d6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d6c:	71 f0       	breq	.+28     	; 0x2d8a <__fp_splitA+0x1a>
    2d6e:	47 95       	ror	r20

00002d70 <__fp_splitA>:
    2d70:	88 0f       	add	r24, r24
    2d72:	97 fb       	bst	r25, 7
    2d74:	99 1f       	adc	r25, r25
    2d76:	61 f0       	breq	.+24     	; 0x2d90 <__fp_splitA+0x20>
    2d78:	9f 3f       	cpi	r25, 0xFF	; 255
    2d7a:	79 f0       	breq	.+30     	; 0x2d9a <__fp_splitA+0x2a>
    2d7c:	87 95       	ror	r24
    2d7e:	08 95       	ret
    2d80:	12 16       	cp	r1, r18
    2d82:	13 06       	cpc	r1, r19
    2d84:	14 06       	cpc	r1, r20
    2d86:	55 1f       	adc	r21, r21
    2d88:	f2 cf       	rjmp	.-28     	; 0x2d6e <__fp_split3+0xe>
    2d8a:	46 95       	lsr	r20
    2d8c:	f1 df       	rcall	.-30     	; 0x2d70 <__fp_splitA>
    2d8e:	08 c0       	rjmp	.+16     	; 0x2da0 <__fp_splitA+0x30>
    2d90:	16 16       	cp	r1, r22
    2d92:	17 06       	cpc	r1, r23
    2d94:	18 06       	cpc	r1, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	f1 cf       	rjmp	.-30     	; 0x2d7c <__fp_splitA+0xc>
    2d9a:	86 95       	lsr	r24
    2d9c:	71 05       	cpc	r23, r1
    2d9e:	61 05       	cpc	r22, r1
    2da0:	08 94       	sec
    2da2:	08 95       	ret

00002da4 <__fp_zero>:
    2da4:	e8 94       	clt

00002da6 <__fp_szero>:
    2da6:	bb 27       	eor	r27, r27
    2da8:	66 27       	eor	r22, r22
    2daa:	77 27       	eor	r23, r23
    2dac:	cb 01       	movw	r24, r22
    2dae:	97 f9       	bld	r25, 7
    2db0:	08 95       	ret

00002db2 <__gesf2>:
    2db2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_cmp>
    2db6:	08 f4       	brcc	.+2      	; 0x2dba <__gesf2+0x8>
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	08 95       	ret
    2dbc:	16 f0       	brts	.+4      	; 0x2dc2 <__gesf2+0x10>
    2dbe:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_mpack>
    2dc2:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>
    2dc6:	68 94       	set
    2dc8:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>

00002dcc <log>:
    2dcc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_splitA>
    2dd0:	a8 f3       	brcs	.-22     	; 0x2dbc <__gesf2+0xa>
    2dd2:	99 23       	and	r25, r25
    2dd4:	c1 f3       	breq	.-16     	; 0x2dc6 <__gesf2+0x14>
    2dd6:	ae f3       	brts	.-22     	; 0x2dc2 <__gesf2+0x10>
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	1f 93       	push	r17
    2dde:	0f 93       	push	r16
    2de0:	ff 92       	push	r15
    2de2:	c9 2f       	mov	r28, r25
    2de4:	dd 27       	eor	r29, r29
    2de6:	88 23       	and	r24, r24
    2de8:	2a f0       	brmi	.+10     	; 0x2df4 <log+0x28>
    2dea:	21 97       	sbiw	r28, 0x01	; 1
    2dec:	66 0f       	add	r22, r22
    2dee:	77 1f       	adc	r23, r23
    2df0:	88 1f       	adc	r24, r24
    2df2:	da f7       	brpl	.-10     	; 0x2dea <log+0x1e>
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e8       	ldi	r20, 0x80	; 128
    2dfa:	5f eb       	ldi	r21, 0xBF	; 191
    2dfc:	9f e3       	ldi	r25, 0x3F	; 63
    2dfe:	88 39       	cpi	r24, 0x98	; 152
    2e00:	20 f0       	brcs	.+8      	; 0x2e0a <log+0x3e>
    2e02:	80 3e       	cpi	r24, 0xE0	; 224
    2e04:	38 f0       	brcs	.+14     	; 0x2e14 <log+0x48>
    2e06:	21 96       	adiw	r28, 0x01	; 1
    2e08:	8f 77       	andi	r24, 0x7F	; 127
    2e0a:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    2e0e:	e2 e7       	ldi	r30, 0x72	; 114
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	04 c0       	rjmp	.+8      	; 0x2e1c <log+0x50>
    2e14:	0e 94 ca 14 	call	0x2994	; 0x2994 <__addsf3>
    2e18:	ef e9       	ldi	r30, 0x9F	; 159
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__fp_powser>
    2e20:	8b 01       	movw	r16, r22
    2e22:	be 01       	movw	r22, r28
    2e24:	ec 01       	movw	r28, r24
    2e26:	fb 2e       	mov	r15, r27
    2e28:	6f 57       	subi	r22, 0x7F	; 127
    2e2a:	71 09       	sbc	r23, r1
    2e2c:	75 95       	asr	r23
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 0b       	sbc	r24, r24
    2e32:	99 0b       	sbc	r25, r25
    2e34:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__floatsisf>
    2e38:	28 e1       	ldi	r18, 0x18	; 24
    2e3a:	32 e7       	ldi	r19, 0x72	; 114
    2e3c:	41 e3       	ldi	r20, 0x31	; 49
    2e3e:	5f e3       	ldi	r21, 0x3F	; 63
    2e40:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__mulsf3x>
    2e44:	af 2d       	mov	r26, r15
    2e46:	98 01       	movw	r18, r16
    2e48:	ae 01       	movw	r20, r28
    2e4a:	ff 90       	pop	r15
    2e4c:	0f 91       	pop	r16
    2e4e:	1f 91       	pop	r17
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__addsf3x>
    2e58:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_round>

00002e5c <__mulsf3>:
    2e5c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__mulsf3x>
    2e60:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_round>
    2e64:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fp_pscA>
    2e68:	38 f0       	brcs	.+14     	; 0x2e78 <__mulsf3+0x1c>
    2e6a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__fp_pscB>
    2e6e:	20 f0       	brcs	.+8      	; 0x2e78 <__mulsf3+0x1c>
    2e70:	95 23       	and	r25, r21
    2e72:	11 f0       	breq	.+4      	; 0x2e78 <__mulsf3+0x1c>
    2e74:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>
    2e78:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>
    2e7c:	11 24       	eor	r1, r1
    2e7e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_szero>

00002e82 <__mulsf3x>:
    2e82:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__fp_split3>
    2e86:	70 f3       	brcs	.-36     	; 0x2e64 <__mulsf3+0x8>

00002e88 <__mulsf3_pse>:
    2e88:	95 9f       	mul	r25, r21
    2e8a:	c1 f3       	breq	.-16     	; 0x2e7c <__mulsf3+0x20>
    2e8c:	95 0f       	add	r25, r21
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	55 1f       	adc	r21, r21
    2e92:	62 9f       	mul	r22, r18
    2e94:	f0 01       	movw	r30, r0
    2e96:	72 9f       	mul	r23, r18
    2e98:	bb 27       	eor	r27, r27
    2e9a:	f0 0d       	add	r31, r0
    2e9c:	b1 1d       	adc	r27, r1
    2e9e:	63 9f       	mul	r22, r19
    2ea0:	aa 27       	eor	r26, r26
    2ea2:	f0 0d       	add	r31, r0
    2ea4:	b1 1d       	adc	r27, r1
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	64 9f       	mul	r22, r20
    2eaa:	66 27       	eor	r22, r22
    2eac:	b0 0d       	add	r27, r0
    2eae:	a1 1d       	adc	r26, r1
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	82 9f       	mul	r24, r18
    2eb4:	22 27       	eor	r18, r18
    2eb6:	b0 0d       	add	r27, r0
    2eb8:	a1 1d       	adc	r26, r1
    2eba:	62 1f       	adc	r22, r18
    2ebc:	73 9f       	mul	r23, r19
    2ebe:	b0 0d       	add	r27, r0
    2ec0:	a1 1d       	adc	r26, r1
    2ec2:	62 1f       	adc	r22, r18
    2ec4:	83 9f       	mul	r24, r19
    2ec6:	a0 0d       	add	r26, r0
    2ec8:	61 1d       	adc	r22, r1
    2eca:	22 1f       	adc	r18, r18
    2ecc:	74 9f       	mul	r23, r20
    2ece:	33 27       	eor	r19, r19
    2ed0:	a0 0d       	add	r26, r0
    2ed2:	61 1d       	adc	r22, r1
    2ed4:	23 1f       	adc	r18, r19
    2ed6:	84 9f       	mul	r24, r20
    2ed8:	60 0d       	add	r22, r0
    2eda:	21 1d       	adc	r18, r1
    2edc:	82 2f       	mov	r24, r18
    2ede:	76 2f       	mov	r23, r22
    2ee0:	6a 2f       	mov	r22, r26
    2ee2:	11 24       	eor	r1, r1
    2ee4:	9f 57       	subi	r25, 0x7F	; 127
    2ee6:	50 40       	sbci	r21, 0x00	; 0
    2ee8:	9a f0       	brmi	.+38     	; 0x2f10 <__mulsf3_pse+0x88>
    2eea:	f1 f0       	breq	.+60     	; 0x2f28 <__mulsf3_pse+0xa0>
    2eec:	88 23       	and	r24, r24
    2eee:	4a f0       	brmi	.+18     	; 0x2f02 <__mulsf3_pse+0x7a>
    2ef0:	ee 0f       	add	r30, r30
    2ef2:	ff 1f       	adc	r31, r31
    2ef4:	bb 1f       	adc	r27, r27
    2ef6:	66 1f       	adc	r22, r22
    2ef8:	77 1f       	adc	r23, r23
    2efa:	88 1f       	adc	r24, r24
    2efc:	91 50       	subi	r25, 0x01	; 1
    2efe:	50 40       	sbci	r21, 0x00	; 0
    2f00:	a9 f7       	brne	.-22     	; 0x2eec <__mulsf3_pse+0x64>
    2f02:	9e 3f       	cpi	r25, 0xFE	; 254
    2f04:	51 05       	cpc	r21, r1
    2f06:	80 f0       	brcs	.+32     	; 0x2f28 <__mulsf3_pse+0xa0>
    2f08:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__fp_inf>
    2f0c:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_szero>
    2f10:	5f 3f       	cpi	r21, 0xFF	; 255
    2f12:	e4 f3       	brlt	.-8      	; 0x2f0c <__mulsf3_pse+0x84>
    2f14:	98 3e       	cpi	r25, 0xE8	; 232
    2f16:	d4 f3       	brlt	.-12     	; 0x2f0c <__mulsf3_pse+0x84>
    2f18:	86 95       	lsr	r24
    2f1a:	77 95       	ror	r23
    2f1c:	67 95       	ror	r22
    2f1e:	b7 95       	ror	r27
    2f20:	f7 95       	ror	r31
    2f22:	e7 95       	ror	r30
    2f24:	9f 5f       	subi	r25, 0xFF	; 255
    2f26:	c1 f7       	brne	.-16     	; 0x2f18 <__mulsf3_pse+0x90>
    2f28:	fe 2b       	or	r31, r30
    2f2a:	88 0f       	add	r24, r24
    2f2c:	91 1d       	adc	r25, r1
    2f2e:	96 95       	lsr	r25
    2f30:	87 95       	ror	r24
    2f32:	97 f9       	bld	r25, 7
    2f34:	08 95       	ret

00002f36 <sin>:
    2f36:	9f 93       	push	r25
    2f38:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__fp_rempio2>
    2f3c:	0f 90       	pop	r0
    2f3e:	07 fc       	sbrc	r0, 7
    2f40:	ee 5f       	subi	r30, 0xFE	; 254
    2f42:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__fp_sinus>
    2f46:	19 f4       	brne	.+6      	; 0x2f4e <sin+0x18>
    2f48:	16 f4       	brtc	.+4      	; 0x2f4e <sin+0x18>
    2f4a:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__fp_nan>
    2f4e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_mpack>

00002f52 <sqrt>:
    2f52:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_splitA>
    2f56:	b8 f3       	brcs	.-18     	; 0x2f46 <sin+0x10>
    2f58:	99 23       	and	r25, r25
    2f5a:	c9 f3       	breq	.-14     	; 0x2f4e <sin+0x18>
    2f5c:	b6 f3       	brts	.-20     	; 0x2f4a <sin+0x14>
    2f5e:	9f 57       	subi	r25, 0x7F	; 127
    2f60:	55 0b       	sbc	r21, r21
    2f62:	87 ff       	sbrs	r24, 7
    2f64:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__fp_norm2>
    2f68:	00 24       	eor	r0, r0
    2f6a:	a0 e6       	ldi	r26, 0x60	; 96
    2f6c:	40 ea       	ldi	r20, 0xA0	; 160
    2f6e:	90 01       	movw	r18, r0
    2f70:	80 58       	subi	r24, 0x80	; 128
    2f72:	56 95       	lsr	r21
    2f74:	97 95       	ror	r25
    2f76:	28 f4       	brcc	.+10     	; 0x2f82 <sqrt+0x30>
    2f78:	80 5c       	subi	r24, 0xC0	; 192
    2f7a:	66 0f       	add	r22, r22
    2f7c:	77 1f       	adc	r23, r23
    2f7e:	88 1f       	adc	r24, r24
    2f80:	20 f0       	brcs	.+8      	; 0x2f8a <sqrt+0x38>
    2f82:	26 17       	cp	r18, r22
    2f84:	37 07       	cpc	r19, r23
    2f86:	48 07       	cpc	r20, r24
    2f88:	30 f4       	brcc	.+12     	; 0x2f96 <sqrt+0x44>
    2f8a:	62 1b       	sub	r22, r18
    2f8c:	73 0b       	sbc	r23, r19
    2f8e:	84 0b       	sbc	r24, r20
    2f90:	20 29       	or	r18, r0
    2f92:	31 29       	or	r19, r1
    2f94:	4a 2b       	or	r20, r26
    2f96:	a6 95       	lsr	r26
    2f98:	17 94       	ror	r1
    2f9a:	07 94       	ror	r0
    2f9c:	20 25       	eor	r18, r0
    2f9e:	31 25       	eor	r19, r1
    2fa0:	4a 27       	eor	r20, r26
    2fa2:	58 f7       	brcc	.-42     	; 0x2f7a <sqrt+0x28>
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	88 1f       	adc	r24, r24
    2faa:	20 f0       	brcs	.+8      	; 0x2fb4 <sqrt+0x62>
    2fac:	26 17       	cp	r18, r22
    2fae:	37 07       	cpc	r19, r23
    2fb0:	48 07       	cpc	r20, r24
    2fb2:	30 f4       	brcc	.+12     	; 0x2fc0 <sqrt+0x6e>
    2fb4:	62 0b       	sbc	r22, r18
    2fb6:	73 0b       	sbc	r23, r19
    2fb8:	84 0b       	sbc	r24, r20
    2fba:	20 0d       	add	r18, r0
    2fbc:	31 1d       	adc	r19, r1
    2fbe:	41 1d       	adc	r20, r1
    2fc0:	a0 95       	com	r26
    2fc2:	81 f7       	brne	.-32     	; 0x2fa4 <sqrt+0x52>
    2fc4:	b9 01       	movw	r22, r18
    2fc6:	84 2f       	mov	r24, r20
    2fc8:	91 58       	subi	r25, 0x81	; 129
    2fca:	88 0f       	add	r24, r24
    2fcc:	96 95       	lsr	r25
    2fce:	87 95       	ror	r24
    2fd0:	08 95       	ret

00002fd2 <__fp_mpack>:
    2fd2:	9f 3f       	cpi	r25, 0xFF	; 255
    2fd4:	31 f0       	breq	.+12     	; 0x2fe2 <__fp_mpack_finite+0xc>

00002fd6 <__fp_mpack_finite>:
    2fd6:	91 50       	subi	r25, 0x01	; 1
    2fd8:	20 f4       	brcc	.+8      	; 0x2fe2 <__fp_mpack_finite+0xc>
    2fda:	87 95       	ror	r24
    2fdc:	77 95       	ror	r23
    2fde:	67 95       	ror	r22
    2fe0:	b7 95       	ror	r27
    2fe2:	88 0f       	add	r24, r24
    2fe4:	91 1d       	adc	r25, r1
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	97 f9       	bld	r25, 7
    2fec:	08 95       	ret

00002fee <__fp_norm2>:
    2fee:	91 50       	subi	r25, 0x01	; 1
    2ff0:	50 40       	sbci	r21, 0x00	; 0
    2ff2:	66 0f       	add	r22, r22
    2ff4:	77 1f       	adc	r23, r23
    2ff6:	88 1f       	adc	r24, r24
    2ff8:	d2 f7       	brpl	.-12     	; 0x2fee <__fp_norm2>
    2ffa:	08 95       	ret

00002ffc <__fp_powser>:
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	1f 93       	push	r17
    3002:	0f 93       	push	r16
    3004:	ff 92       	push	r15
    3006:	ef 92       	push	r14
    3008:	df 92       	push	r13
    300a:	7b 01       	movw	r14, r22
    300c:	8c 01       	movw	r16, r24
    300e:	68 94       	set
    3010:	06 c0       	rjmp	.+12     	; 0x301e <__fp_powser+0x22>
    3012:	da 2e       	mov	r13, r26
    3014:	ef 01       	movw	r28, r30
    3016:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__mulsf3x>
    301a:	fe 01       	movw	r30, r28
    301c:	e8 94       	clt
    301e:	a5 91       	lpm	r26, Z+
    3020:	25 91       	lpm	r18, Z+
    3022:	35 91       	lpm	r19, Z+
    3024:	45 91       	lpm	r20, Z+
    3026:	55 91       	lpm	r21, Z+
    3028:	a6 f3       	brts	.-24     	; 0x3012 <__fp_powser+0x16>
    302a:	ef 01       	movw	r28, r30
    302c:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__addsf3x>
    3030:	fe 01       	movw	r30, r28
    3032:	97 01       	movw	r18, r14
    3034:	a8 01       	movw	r20, r16
    3036:	da 94       	dec	r13
    3038:	69 f7       	brne	.-38     	; 0x3014 <__fp_powser+0x18>
    303a:	df 90       	pop	r13
    303c:	ef 90       	pop	r14
    303e:	ff 90       	pop	r15
    3040:	0f 91       	pop	r16
    3042:	1f 91       	pop	r17
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <__fp_powsodd>:
    304a:	9f 93       	push	r25
    304c:	8f 93       	push	r24
    304e:	7f 93       	push	r23
    3050:	6f 93       	push	r22
    3052:	ff 93       	push	r31
    3054:	ef 93       	push	r30
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
    305a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    305e:	ef 91       	pop	r30
    3060:	ff 91       	pop	r31
    3062:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__fp_powser>
    3066:	2f 91       	pop	r18
    3068:	3f 91       	pop	r19
    306a:	4f 91       	pop	r20
    306c:	5f 91       	pop	r21
    306e:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__mulsf3>

00003072 <dtostrf>:
    3072:	ef 92       	push	r14
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	e8 01       	movw	r28, r16
    307e:	47 fd       	sbrc	r20, 7
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <dtostrf+0x14>
    3082:	34 e0       	ldi	r19, 0x04	; 4
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <dtostrf+0x16>
    3086:	34 e1       	ldi	r19, 0x14	; 20
    3088:	04 2e       	mov	r0, r20
    308a:	00 0c       	add	r0, r0
    308c:	55 0b       	sbc	r21, r21
    308e:	57 ff       	sbrs	r21, 7
    3090:	03 c0       	rjmp	.+6      	; 0x3098 <dtostrf+0x26>
    3092:	51 95       	neg	r21
    3094:	41 95       	neg	r20
    3096:	51 09       	sbc	r21, r1
    3098:	e3 2e       	mov	r14, r19
    309a:	02 2f       	mov	r16, r18
    309c:	24 2f       	mov	r18, r20
    309e:	ae 01       	movw	r20, r28
    30a0:	0e 94 86 1a 	call	0x350c	; 0x350c <dtoa_prf>
    30a4:	ce 01       	movw	r24, r28
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	1f 91       	pop	r17
    30ac:	0f 91       	pop	r16
    30ae:	ef 90       	pop	r14
    30b0:	08 95       	ret

000030b2 <atof>:
    30b2:	66 27       	eor	r22, r22
    30b4:	77 27       	eor	r23, r23
    30b6:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <strtod>

000030ba <atoi>:
    30ba:	fc 01       	movw	r30, r24
    30bc:	88 27       	eor	r24, r24
    30be:	99 27       	eor	r25, r25
    30c0:	e8 94       	clt
    30c2:	21 91       	ld	r18, Z+
    30c4:	20 32       	cpi	r18, 0x20	; 32
    30c6:	e9 f3       	breq	.-6      	; 0x30c2 <atoi+0x8>
    30c8:	29 30       	cpi	r18, 0x09	; 9
    30ca:	10 f0       	brcs	.+4      	; 0x30d0 <atoi+0x16>
    30cc:	2e 30       	cpi	r18, 0x0E	; 14
    30ce:	c8 f3       	brcs	.-14     	; 0x30c2 <atoi+0x8>
    30d0:	2b 32       	cpi	r18, 0x2B	; 43
    30d2:	41 f0       	breq	.+16     	; 0x30e4 <atoi+0x2a>
    30d4:	2d 32       	cpi	r18, 0x2D	; 45
    30d6:	39 f4       	brne	.+14     	; 0x30e6 <atoi+0x2c>
    30d8:	68 94       	set
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <atoi+0x2a>
    30dc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__mulhi_const_10>
    30e0:	82 0f       	add	r24, r18
    30e2:	91 1d       	adc	r25, r1
    30e4:	21 91       	ld	r18, Z+
    30e6:	20 53       	subi	r18, 0x30	; 48
    30e8:	2a 30       	cpi	r18, 0x0A	; 10
    30ea:	c0 f3       	brcs	.-16     	; 0x30dc <atoi+0x22>
    30ec:	1e f4       	brtc	.+6      	; 0x30f4 <atoi+0x3a>
    30ee:	90 95       	com	r25
    30f0:	81 95       	neg	r24
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	08 95       	ret

000030f6 <__mulhi_const_10>:
    30f6:	7a e0       	ldi	r23, 0x0A	; 10
    30f8:	97 9f       	mul	r25, r23
    30fa:	90 2d       	mov	r25, r0
    30fc:	87 9f       	mul	r24, r23
    30fe:	80 2d       	mov	r24, r0
    3100:	91 0d       	add	r25, r1
    3102:	11 24       	eor	r1, r1
    3104:	08 95       	ret

00003106 <sprintf>:
    3106:	ae e0       	ldi	r26, 0x0E	; 14
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e9 e8       	ldi	r30, 0x89	; 137
    310c:	f8 e1       	ldi	r31, 0x18	; 24
    310e:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__prologue_saves__+0x1c>
    3112:	0d 89       	ldd	r16, Y+21	; 0x15
    3114:	1e 89       	ldd	r17, Y+22	; 0x16
    3116:	86 e0       	ldi	r24, 0x06	; 6
    3118:	8c 83       	std	Y+4, r24	; 0x04
    311a:	1a 83       	std	Y+2, r17	; 0x02
    311c:	09 83       	std	Y+1, r16	; 0x01
    311e:	8f ef       	ldi	r24, 0xFF	; 255
    3120:	9f e7       	ldi	r25, 0x7F	; 127
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	ae 01       	movw	r20, r28
    3128:	47 5e       	subi	r20, 0xE7	; 231
    312a:	5f 4f       	sbci	r21, 0xFF	; 255
    312c:	6f 89       	ldd	r22, Y+23	; 0x17
    312e:	78 8d       	ldd	r23, Y+24	; 0x18
    3130:	ce 01       	movw	r24, r28
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	0e 94 a5 18 	call	0x314a	; 0x314a <vfprintf>
    3138:	ef 81       	ldd	r30, Y+7	; 0x07
    313a:	f8 85       	ldd	r31, Y+8	; 0x08
    313c:	e0 0f       	add	r30, r16
    313e:	f1 1f       	adc	r31, r17
    3140:	10 82       	st	Z, r1
    3142:	2e 96       	adiw	r28, 0x0e	; 14
    3144:	e4 e0       	ldi	r30, 0x04	; 4
    3146:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__epilogue_restores__+0x1c>

0000314a <vfprintf>:
    314a:	ab e0       	ldi	r26, 0x0B	; 11
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	eb ea       	ldi	r30, 0xAB	; 171
    3150:	f8 e1       	ldi	r31, 0x18	; 24
    3152:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__>
    3156:	6c 01       	movw	r12, r24
    3158:	7b 01       	movw	r14, r22
    315a:	8a 01       	movw	r16, r20
    315c:	fc 01       	movw	r30, r24
    315e:	17 82       	std	Z+7, r1	; 0x07
    3160:	16 82       	std	Z+6, r1	; 0x06
    3162:	83 81       	ldd	r24, Z+3	; 0x03
    3164:	81 ff       	sbrs	r24, 1
    3166:	cc c1       	rjmp	.+920    	; 0x3500 <vfprintf+0x3b6>
    3168:	ce 01       	movw	r24, r28
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	3c 01       	movw	r6, r24
    316e:	f6 01       	movw	r30, r12
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	f7 01       	movw	r30, r14
    3174:	93 fd       	sbrc	r25, 3
    3176:	85 91       	lpm	r24, Z+
    3178:	93 ff       	sbrs	r25, 3
    317a:	81 91       	ld	r24, Z+
    317c:	7f 01       	movw	r14, r30
    317e:	88 23       	and	r24, r24
    3180:	09 f4       	brne	.+2      	; 0x3184 <vfprintf+0x3a>
    3182:	ba c1       	rjmp	.+884    	; 0x34f8 <vfprintf+0x3ae>
    3184:	85 32       	cpi	r24, 0x25	; 37
    3186:	39 f4       	brne	.+14     	; 0x3196 <vfprintf+0x4c>
    3188:	93 fd       	sbrc	r25, 3
    318a:	85 91       	lpm	r24, Z+
    318c:	93 ff       	sbrs	r25, 3
    318e:	81 91       	ld	r24, Z+
    3190:	7f 01       	movw	r14, r30
    3192:	85 32       	cpi	r24, 0x25	; 37
    3194:	29 f4       	brne	.+10     	; 0x31a0 <vfprintf+0x56>
    3196:	b6 01       	movw	r22, r12
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    319e:	e7 cf       	rjmp	.-50     	; 0x316e <vfprintf+0x24>
    31a0:	91 2c       	mov	r9, r1
    31a2:	21 2c       	mov	r2, r1
    31a4:	31 2c       	mov	r3, r1
    31a6:	ff e1       	ldi	r31, 0x1F	; 31
    31a8:	f3 15       	cp	r31, r3
    31aa:	d8 f0       	brcs	.+54     	; 0x31e2 <vfprintf+0x98>
    31ac:	8b 32       	cpi	r24, 0x2B	; 43
    31ae:	79 f0       	breq	.+30     	; 0x31ce <vfprintf+0x84>
    31b0:	38 f4       	brcc	.+14     	; 0x31c0 <vfprintf+0x76>
    31b2:	80 32       	cpi	r24, 0x20	; 32
    31b4:	79 f0       	breq	.+30     	; 0x31d4 <vfprintf+0x8a>
    31b6:	83 32       	cpi	r24, 0x23	; 35
    31b8:	a1 f4       	brne	.+40     	; 0x31e2 <vfprintf+0x98>
    31ba:	23 2d       	mov	r18, r3
    31bc:	20 61       	ori	r18, 0x10	; 16
    31be:	1d c0       	rjmp	.+58     	; 0x31fa <vfprintf+0xb0>
    31c0:	8d 32       	cpi	r24, 0x2D	; 45
    31c2:	61 f0       	breq	.+24     	; 0x31dc <vfprintf+0x92>
    31c4:	80 33       	cpi	r24, 0x30	; 48
    31c6:	69 f4       	brne	.+26     	; 0x31e2 <vfprintf+0x98>
    31c8:	23 2d       	mov	r18, r3
    31ca:	21 60       	ori	r18, 0x01	; 1
    31cc:	16 c0       	rjmp	.+44     	; 0x31fa <vfprintf+0xb0>
    31ce:	83 2d       	mov	r24, r3
    31d0:	82 60       	ori	r24, 0x02	; 2
    31d2:	38 2e       	mov	r3, r24
    31d4:	e3 2d       	mov	r30, r3
    31d6:	e4 60       	ori	r30, 0x04	; 4
    31d8:	3e 2e       	mov	r3, r30
    31da:	2a c0       	rjmp	.+84     	; 0x3230 <vfprintf+0xe6>
    31dc:	f3 2d       	mov	r31, r3
    31de:	f8 60       	ori	r31, 0x08	; 8
    31e0:	1d c0       	rjmp	.+58     	; 0x321c <vfprintf+0xd2>
    31e2:	37 fc       	sbrc	r3, 7
    31e4:	2d c0       	rjmp	.+90     	; 0x3240 <vfprintf+0xf6>
    31e6:	20 ed       	ldi	r18, 0xD0	; 208
    31e8:	28 0f       	add	r18, r24
    31ea:	2a 30       	cpi	r18, 0x0A	; 10
    31ec:	40 f0       	brcs	.+16     	; 0x31fe <vfprintf+0xb4>
    31ee:	8e 32       	cpi	r24, 0x2E	; 46
    31f0:	b9 f4       	brne	.+46     	; 0x3220 <vfprintf+0xd6>
    31f2:	36 fc       	sbrc	r3, 6
    31f4:	81 c1       	rjmp	.+770    	; 0x34f8 <vfprintf+0x3ae>
    31f6:	23 2d       	mov	r18, r3
    31f8:	20 64       	ori	r18, 0x40	; 64
    31fa:	32 2e       	mov	r3, r18
    31fc:	19 c0       	rjmp	.+50     	; 0x3230 <vfprintf+0xe6>
    31fe:	36 fe       	sbrs	r3, 6
    3200:	06 c0       	rjmp	.+12     	; 0x320e <vfprintf+0xc4>
    3202:	8a e0       	ldi	r24, 0x0A	; 10
    3204:	98 9e       	mul	r9, r24
    3206:	20 0d       	add	r18, r0
    3208:	11 24       	eor	r1, r1
    320a:	92 2e       	mov	r9, r18
    320c:	11 c0       	rjmp	.+34     	; 0x3230 <vfprintf+0xe6>
    320e:	ea e0       	ldi	r30, 0x0A	; 10
    3210:	2e 9e       	mul	r2, r30
    3212:	20 0d       	add	r18, r0
    3214:	11 24       	eor	r1, r1
    3216:	22 2e       	mov	r2, r18
    3218:	f3 2d       	mov	r31, r3
    321a:	f0 62       	ori	r31, 0x20	; 32
    321c:	3f 2e       	mov	r3, r31
    321e:	08 c0       	rjmp	.+16     	; 0x3230 <vfprintf+0xe6>
    3220:	8c 36       	cpi	r24, 0x6C	; 108
    3222:	21 f4       	brne	.+8      	; 0x322c <vfprintf+0xe2>
    3224:	83 2d       	mov	r24, r3
    3226:	80 68       	ori	r24, 0x80	; 128
    3228:	38 2e       	mov	r3, r24
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0xe6>
    322c:	88 36       	cpi	r24, 0x68	; 104
    322e:	41 f4       	brne	.+16     	; 0x3240 <vfprintf+0xf6>
    3230:	f7 01       	movw	r30, r14
    3232:	93 fd       	sbrc	r25, 3
    3234:	85 91       	lpm	r24, Z+
    3236:	93 ff       	sbrs	r25, 3
    3238:	81 91       	ld	r24, Z+
    323a:	7f 01       	movw	r14, r30
    323c:	81 11       	cpse	r24, r1
    323e:	b3 cf       	rjmp	.-154    	; 0x31a6 <vfprintf+0x5c>
    3240:	98 2f       	mov	r25, r24
    3242:	9f 7d       	andi	r25, 0xDF	; 223
    3244:	95 54       	subi	r25, 0x45	; 69
    3246:	93 30       	cpi	r25, 0x03	; 3
    3248:	28 f4       	brcc	.+10     	; 0x3254 <vfprintf+0x10a>
    324a:	0c 5f       	subi	r16, 0xFC	; 252
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	9f e3       	ldi	r25, 0x3F	; 63
    3250:	99 83       	std	Y+1, r25	; 0x01
    3252:	0d c0       	rjmp	.+26     	; 0x326e <vfprintf+0x124>
    3254:	83 36       	cpi	r24, 0x63	; 99
    3256:	31 f0       	breq	.+12     	; 0x3264 <vfprintf+0x11a>
    3258:	83 37       	cpi	r24, 0x73	; 115
    325a:	71 f0       	breq	.+28     	; 0x3278 <vfprintf+0x12e>
    325c:	83 35       	cpi	r24, 0x53	; 83
    325e:	09 f0       	breq	.+2      	; 0x3262 <vfprintf+0x118>
    3260:	59 c0       	rjmp	.+178    	; 0x3314 <vfprintf+0x1ca>
    3262:	21 c0       	rjmp	.+66     	; 0x32a6 <vfprintf+0x15c>
    3264:	f8 01       	movw	r30, r16
    3266:	80 81       	ld	r24, Z
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	0e 5f       	subi	r16, 0xFE	; 254
    326c:	1f 4f       	sbci	r17, 0xFF	; 255
    326e:	88 24       	eor	r8, r8
    3270:	83 94       	inc	r8
    3272:	91 2c       	mov	r9, r1
    3274:	53 01       	movw	r10, r6
    3276:	13 c0       	rjmp	.+38     	; 0x329e <vfprintf+0x154>
    3278:	28 01       	movw	r4, r16
    327a:	f2 e0       	ldi	r31, 0x02	; 2
    327c:	4f 0e       	add	r4, r31
    327e:	51 1c       	adc	r5, r1
    3280:	f8 01       	movw	r30, r16
    3282:	a0 80       	ld	r10, Z
    3284:	b1 80       	ldd	r11, Z+1	; 0x01
    3286:	36 fe       	sbrs	r3, 6
    3288:	03 c0       	rjmp	.+6      	; 0x3290 <vfprintf+0x146>
    328a:	69 2d       	mov	r22, r9
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <vfprintf+0x14a>
    3290:	6f ef       	ldi	r22, 0xFF	; 255
    3292:	7f ef       	ldi	r23, 0xFF	; 255
    3294:	c5 01       	movw	r24, r10
    3296:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <strnlen>
    329a:	4c 01       	movw	r8, r24
    329c:	82 01       	movw	r16, r4
    329e:	f3 2d       	mov	r31, r3
    32a0:	ff 77       	andi	r31, 0x7F	; 127
    32a2:	3f 2e       	mov	r3, r31
    32a4:	16 c0       	rjmp	.+44     	; 0x32d2 <vfprintf+0x188>
    32a6:	28 01       	movw	r4, r16
    32a8:	22 e0       	ldi	r18, 0x02	; 2
    32aa:	42 0e       	add	r4, r18
    32ac:	51 1c       	adc	r5, r1
    32ae:	f8 01       	movw	r30, r16
    32b0:	a0 80       	ld	r10, Z
    32b2:	b1 80       	ldd	r11, Z+1	; 0x01
    32b4:	36 fe       	sbrs	r3, 6
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <vfprintf+0x174>
    32b8:	69 2d       	mov	r22, r9
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <vfprintf+0x178>
    32be:	6f ef       	ldi	r22, 0xFF	; 255
    32c0:	7f ef       	ldi	r23, 0xFF	; 255
    32c2:	c5 01       	movw	r24, r10
    32c4:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <strnlen_P>
    32c8:	4c 01       	movw	r8, r24
    32ca:	f3 2d       	mov	r31, r3
    32cc:	f0 68       	ori	r31, 0x80	; 128
    32ce:	3f 2e       	mov	r3, r31
    32d0:	82 01       	movw	r16, r4
    32d2:	33 fc       	sbrc	r3, 3
    32d4:	1b c0       	rjmp	.+54     	; 0x330c <vfprintf+0x1c2>
    32d6:	82 2d       	mov	r24, r2
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	88 16       	cp	r8, r24
    32dc:	99 06       	cpc	r9, r25
    32de:	b0 f4       	brcc	.+44     	; 0x330c <vfprintf+0x1c2>
    32e0:	b6 01       	movw	r22, r12
    32e2:	80 e2       	ldi	r24, 0x20	; 32
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    32ea:	2a 94       	dec	r2
    32ec:	f4 cf       	rjmp	.-24     	; 0x32d6 <vfprintf+0x18c>
    32ee:	f5 01       	movw	r30, r10
    32f0:	37 fc       	sbrc	r3, 7
    32f2:	85 91       	lpm	r24, Z+
    32f4:	37 fe       	sbrs	r3, 7
    32f6:	81 91       	ld	r24, Z+
    32f8:	5f 01       	movw	r10, r30
    32fa:	b6 01       	movw	r22, r12
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    3302:	21 10       	cpse	r2, r1
    3304:	2a 94       	dec	r2
    3306:	21 e0       	ldi	r18, 0x01	; 1
    3308:	82 1a       	sub	r8, r18
    330a:	91 08       	sbc	r9, r1
    330c:	81 14       	cp	r8, r1
    330e:	91 04       	cpc	r9, r1
    3310:	71 f7       	brne	.-36     	; 0x32ee <vfprintf+0x1a4>
    3312:	e8 c0       	rjmp	.+464    	; 0x34e4 <vfprintf+0x39a>
    3314:	84 36       	cpi	r24, 0x64	; 100
    3316:	11 f0       	breq	.+4      	; 0x331c <vfprintf+0x1d2>
    3318:	89 36       	cpi	r24, 0x69	; 105
    331a:	41 f5       	brne	.+80     	; 0x336c <vfprintf+0x222>
    331c:	f8 01       	movw	r30, r16
    331e:	37 fe       	sbrs	r3, 7
    3320:	07 c0       	rjmp	.+14     	; 0x3330 <vfprintf+0x1e6>
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	0c 5f       	subi	r16, 0xFC	; 252
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	08 c0       	rjmp	.+16     	; 0x3340 <vfprintf+0x1f6>
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	07 2e       	mov	r0, r23
    3336:	00 0c       	add	r0, r0
    3338:	88 0b       	sbc	r24, r24
    333a:	99 0b       	sbc	r25, r25
    333c:	0e 5f       	subi	r16, 0xFE	; 254
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	f3 2d       	mov	r31, r3
    3342:	ff 76       	andi	r31, 0x6F	; 111
    3344:	3f 2e       	mov	r3, r31
    3346:	97 ff       	sbrs	r25, 7
    3348:	09 c0       	rjmp	.+18     	; 0x335c <vfprintf+0x212>
    334a:	90 95       	com	r25
    334c:	80 95       	com	r24
    334e:	70 95       	com	r23
    3350:	61 95       	neg	r22
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	8f 4f       	sbci	r24, 0xFF	; 255
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	f0 68       	ori	r31, 0x80	; 128
    335a:	3f 2e       	mov	r3, r31
    335c:	2a e0       	ldi	r18, 0x0A	; 10
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	a3 01       	movw	r20, r6
    3362:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__ultoa_invert>
    3366:	88 2e       	mov	r8, r24
    3368:	86 18       	sub	r8, r6
    336a:	45 c0       	rjmp	.+138    	; 0x33f6 <vfprintf+0x2ac>
    336c:	85 37       	cpi	r24, 0x75	; 117
    336e:	31 f4       	brne	.+12     	; 0x337c <vfprintf+0x232>
    3370:	23 2d       	mov	r18, r3
    3372:	2f 7e       	andi	r18, 0xEF	; 239
    3374:	b2 2e       	mov	r11, r18
    3376:	2a e0       	ldi	r18, 0x0A	; 10
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	25 c0       	rjmp	.+74     	; 0x33c6 <vfprintf+0x27c>
    337c:	93 2d       	mov	r25, r3
    337e:	99 7f       	andi	r25, 0xF9	; 249
    3380:	b9 2e       	mov	r11, r25
    3382:	8f 36       	cpi	r24, 0x6F	; 111
    3384:	c1 f0       	breq	.+48     	; 0x33b6 <vfprintf+0x26c>
    3386:	18 f4       	brcc	.+6      	; 0x338e <vfprintf+0x244>
    3388:	88 35       	cpi	r24, 0x58	; 88
    338a:	79 f0       	breq	.+30     	; 0x33aa <vfprintf+0x260>
    338c:	b5 c0       	rjmp	.+362    	; 0x34f8 <vfprintf+0x3ae>
    338e:	80 37       	cpi	r24, 0x70	; 112
    3390:	19 f0       	breq	.+6      	; 0x3398 <vfprintf+0x24e>
    3392:	88 37       	cpi	r24, 0x78	; 120
    3394:	21 f0       	breq	.+8      	; 0x339e <vfprintf+0x254>
    3396:	b0 c0       	rjmp	.+352    	; 0x34f8 <vfprintf+0x3ae>
    3398:	e9 2f       	mov	r30, r25
    339a:	e0 61       	ori	r30, 0x10	; 16
    339c:	be 2e       	mov	r11, r30
    339e:	b4 fe       	sbrs	r11, 4
    33a0:	0d c0       	rjmp	.+26     	; 0x33bc <vfprintf+0x272>
    33a2:	fb 2d       	mov	r31, r11
    33a4:	f4 60       	ori	r31, 0x04	; 4
    33a6:	bf 2e       	mov	r11, r31
    33a8:	09 c0       	rjmp	.+18     	; 0x33bc <vfprintf+0x272>
    33aa:	34 fe       	sbrs	r3, 4
    33ac:	0a c0       	rjmp	.+20     	; 0x33c2 <vfprintf+0x278>
    33ae:	29 2f       	mov	r18, r25
    33b0:	26 60       	ori	r18, 0x06	; 6
    33b2:	b2 2e       	mov	r11, r18
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <vfprintf+0x278>
    33b6:	28 e0       	ldi	r18, 0x08	; 8
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <vfprintf+0x27c>
    33bc:	20 e1       	ldi	r18, 0x10	; 16
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <vfprintf+0x27c>
    33c2:	20 e1       	ldi	r18, 0x10	; 16
    33c4:	32 e0       	ldi	r19, 0x02	; 2
    33c6:	f8 01       	movw	r30, r16
    33c8:	b7 fe       	sbrs	r11, 7
    33ca:	07 c0       	rjmp	.+14     	; 0x33da <vfprintf+0x290>
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	0c 5f       	subi	r16, 0xFC	; 252
    33d6:	1f 4f       	sbci	r17, 0xFF	; 255
    33d8:	06 c0       	rjmp	.+12     	; 0x33e6 <vfprintf+0x29c>
    33da:	60 81       	ld	r22, Z
    33dc:	71 81       	ldd	r23, Z+1	; 0x01
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e 5f       	subi	r16, 0xFE	; 254
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	a3 01       	movw	r20, r6
    33e8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__ultoa_invert>
    33ec:	88 2e       	mov	r8, r24
    33ee:	86 18       	sub	r8, r6
    33f0:	fb 2d       	mov	r31, r11
    33f2:	ff 77       	andi	r31, 0x7F	; 127
    33f4:	3f 2e       	mov	r3, r31
    33f6:	36 fe       	sbrs	r3, 6
    33f8:	0d c0       	rjmp	.+26     	; 0x3414 <vfprintf+0x2ca>
    33fa:	23 2d       	mov	r18, r3
    33fc:	2e 7f       	andi	r18, 0xFE	; 254
    33fe:	a2 2e       	mov	r10, r18
    3400:	89 14       	cp	r8, r9
    3402:	58 f4       	brcc	.+22     	; 0x341a <vfprintf+0x2d0>
    3404:	34 fe       	sbrs	r3, 4
    3406:	0b c0       	rjmp	.+22     	; 0x341e <vfprintf+0x2d4>
    3408:	32 fc       	sbrc	r3, 2
    340a:	09 c0       	rjmp	.+18     	; 0x341e <vfprintf+0x2d4>
    340c:	83 2d       	mov	r24, r3
    340e:	8e 7e       	andi	r24, 0xEE	; 238
    3410:	a8 2e       	mov	r10, r24
    3412:	05 c0       	rjmp	.+10     	; 0x341e <vfprintf+0x2d4>
    3414:	b8 2c       	mov	r11, r8
    3416:	a3 2c       	mov	r10, r3
    3418:	03 c0       	rjmp	.+6      	; 0x3420 <vfprintf+0x2d6>
    341a:	b8 2c       	mov	r11, r8
    341c:	01 c0       	rjmp	.+2      	; 0x3420 <vfprintf+0x2d6>
    341e:	b9 2c       	mov	r11, r9
    3420:	a4 fe       	sbrs	r10, 4
    3422:	0f c0       	rjmp	.+30     	; 0x3442 <vfprintf+0x2f8>
    3424:	fe 01       	movw	r30, r28
    3426:	e8 0d       	add	r30, r8
    3428:	f1 1d       	adc	r31, r1
    342a:	80 81       	ld	r24, Z
    342c:	80 33       	cpi	r24, 0x30	; 48
    342e:	21 f4       	brne	.+8      	; 0x3438 <vfprintf+0x2ee>
    3430:	9a 2d       	mov	r25, r10
    3432:	99 7e       	andi	r25, 0xE9	; 233
    3434:	a9 2e       	mov	r10, r25
    3436:	09 c0       	rjmp	.+18     	; 0x344a <vfprintf+0x300>
    3438:	a2 fe       	sbrs	r10, 2
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <vfprintf+0x2fe>
    343c:	b3 94       	inc	r11
    343e:	b3 94       	inc	r11
    3440:	04 c0       	rjmp	.+8      	; 0x344a <vfprintf+0x300>
    3442:	8a 2d       	mov	r24, r10
    3444:	86 78       	andi	r24, 0x86	; 134
    3446:	09 f0       	breq	.+2      	; 0x344a <vfprintf+0x300>
    3448:	b3 94       	inc	r11
    344a:	a3 fc       	sbrc	r10, 3
    344c:	11 c0       	rjmp	.+34     	; 0x3470 <vfprintf+0x326>
    344e:	a0 fe       	sbrs	r10, 0
    3450:	06 c0       	rjmp	.+12     	; 0x345e <vfprintf+0x314>
    3452:	b2 14       	cp	r11, r2
    3454:	88 f4       	brcc	.+34     	; 0x3478 <vfprintf+0x32e>
    3456:	28 0c       	add	r2, r8
    3458:	92 2c       	mov	r9, r2
    345a:	9b 18       	sub	r9, r11
    345c:	0e c0       	rjmp	.+28     	; 0x347a <vfprintf+0x330>
    345e:	b2 14       	cp	r11, r2
    3460:	60 f4       	brcc	.+24     	; 0x347a <vfprintf+0x330>
    3462:	b6 01       	movw	r22, r12
    3464:	80 e2       	ldi	r24, 0x20	; 32
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    346c:	b3 94       	inc	r11
    346e:	f7 cf       	rjmp	.-18     	; 0x345e <vfprintf+0x314>
    3470:	b2 14       	cp	r11, r2
    3472:	18 f4       	brcc	.+6      	; 0x347a <vfprintf+0x330>
    3474:	2b 18       	sub	r2, r11
    3476:	02 c0       	rjmp	.+4      	; 0x347c <vfprintf+0x332>
    3478:	98 2c       	mov	r9, r8
    347a:	21 2c       	mov	r2, r1
    347c:	a4 fe       	sbrs	r10, 4
    347e:	10 c0       	rjmp	.+32     	; 0x34a0 <vfprintf+0x356>
    3480:	b6 01       	movw	r22, r12
    3482:	80 e3       	ldi	r24, 0x30	; 48
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    348a:	a2 fe       	sbrs	r10, 2
    348c:	17 c0       	rjmp	.+46     	; 0x34bc <vfprintf+0x372>
    348e:	a1 fc       	sbrc	r10, 1
    3490:	03 c0       	rjmp	.+6      	; 0x3498 <vfprintf+0x34e>
    3492:	88 e7       	ldi	r24, 0x78	; 120
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	02 c0       	rjmp	.+4      	; 0x349c <vfprintf+0x352>
    3498:	88 e5       	ldi	r24, 0x58	; 88
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	b6 01       	movw	r22, r12
    349e:	0c c0       	rjmp	.+24     	; 0x34b8 <vfprintf+0x36e>
    34a0:	8a 2d       	mov	r24, r10
    34a2:	86 78       	andi	r24, 0x86	; 134
    34a4:	59 f0       	breq	.+22     	; 0x34bc <vfprintf+0x372>
    34a6:	a1 fe       	sbrs	r10, 1
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <vfprintf+0x364>
    34aa:	8b e2       	ldi	r24, 0x2B	; 43
    34ac:	01 c0       	rjmp	.+2      	; 0x34b0 <vfprintf+0x366>
    34ae:	80 e2       	ldi	r24, 0x20	; 32
    34b0:	a7 fc       	sbrc	r10, 7
    34b2:	8d e2       	ldi	r24, 0x2D	; 45
    34b4:	b6 01       	movw	r22, r12
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    34bc:	89 14       	cp	r8, r9
    34be:	38 f4       	brcc	.+14     	; 0x34ce <vfprintf+0x384>
    34c0:	b6 01       	movw	r22, r12
    34c2:	80 e3       	ldi	r24, 0x30	; 48
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    34ca:	9a 94       	dec	r9
    34cc:	f7 cf       	rjmp	.-18     	; 0x34bc <vfprintf+0x372>
    34ce:	8a 94       	dec	r8
    34d0:	f3 01       	movw	r30, r6
    34d2:	e8 0d       	add	r30, r8
    34d4:	f1 1d       	adc	r31, r1
    34d6:	80 81       	ld	r24, Z
    34d8:	b6 01       	movw	r22, r12
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    34e0:	81 10       	cpse	r8, r1
    34e2:	f5 cf       	rjmp	.-22     	; 0x34ce <vfprintf+0x384>
    34e4:	22 20       	and	r2, r2
    34e6:	09 f4       	brne	.+2      	; 0x34ea <vfprintf+0x3a0>
    34e8:	42 ce       	rjmp	.-892    	; 0x316e <vfprintf+0x24>
    34ea:	b6 01       	movw	r22, r12
    34ec:	80 e2       	ldi	r24, 0x20	; 32
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <fputc>
    34f4:	2a 94       	dec	r2
    34f6:	f6 cf       	rjmp	.-20     	; 0x34e4 <vfprintf+0x39a>
    34f8:	f6 01       	movw	r30, r12
    34fa:	86 81       	ldd	r24, Z+6	; 0x06
    34fc:	97 81       	ldd	r25, Z+7	; 0x07
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <vfprintf+0x3ba>
    3500:	8f ef       	ldi	r24, 0xFF	; 255
    3502:	9f ef       	ldi	r25, 0xFF	; 255
    3504:	2b 96       	adiw	r28, 0x0b	; 11
    3506:	e2 e1       	ldi	r30, 0x12	; 18
    3508:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__>

0000350c <dtoa_prf>:
    350c:	a9 e0       	ldi	r26, 0x09	; 9
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	ec e8       	ldi	r30, 0x8C	; 140
    3512:	fa e1       	ldi	r31, 0x1A	; 26
    3514:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0xc>
    3518:	6a 01       	movw	r12, r20
    351a:	12 2f       	mov	r17, r18
    351c:	b0 2e       	mov	r11, r16
    351e:	2b e3       	ldi	r18, 0x3B	; 59
    3520:	20 17       	cp	r18, r16
    3522:	20 f0       	brcs	.+8      	; 0x352c <dtoa_prf+0x20>
    3524:	ff 24       	eor	r15, r15
    3526:	f3 94       	inc	r15
    3528:	f0 0e       	add	r15, r16
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <dtoa_prf+0x24>
    352c:	2c e3       	ldi	r18, 0x3C	; 60
    352e:	f2 2e       	mov	r15, r18
    3530:	0f 2d       	mov	r16, r15
    3532:	27 e0       	ldi	r18, 0x07	; 7
    3534:	ae 01       	movw	r20, r28
    3536:	4f 5f       	subi	r20, 0xFF	; 255
    3538:	5f 4f       	sbci	r21, 0xFF	; 255
    353a:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__ftoa_engine>
    353e:	bc 01       	movw	r22, r24
    3540:	49 81       	ldd	r20, Y+1	; 0x01
    3542:	84 2f       	mov	r24, r20
    3544:	89 70       	andi	r24, 0x09	; 9
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	31 f0       	breq	.+12     	; 0x3556 <dtoa_prf+0x4a>
    354a:	e1 fc       	sbrc	r14, 1
    354c:	06 c0       	rjmp	.+12     	; 0x355a <dtoa_prf+0x4e>
    354e:	e0 fe       	sbrs	r14, 0
    3550:	06 c0       	rjmp	.+12     	; 0x355e <dtoa_prf+0x52>
    3552:	90 e2       	ldi	r25, 0x20	; 32
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <dtoa_prf+0x54>
    3556:	9d e2       	ldi	r25, 0x2D	; 45
    3558:	03 c0       	rjmp	.+6      	; 0x3560 <dtoa_prf+0x54>
    355a:	9b e2       	ldi	r25, 0x2B	; 43
    355c:	01 c0       	rjmp	.+2      	; 0x3560 <dtoa_prf+0x54>
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	5e 2d       	mov	r21, r14
    3562:	50 71       	andi	r21, 0x10	; 16
    3564:	43 ff       	sbrs	r20, 3
    3566:	3c c0       	rjmp	.+120    	; 0x35e0 <dtoa_prf+0xd4>
    3568:	91 11       	cpse	r25, r1
    356a:	02 c0       	rjmp	.+4      	; 0x3570 <dtoa_prf+0x64>
    356c:	83 e0       	ldi	r24, 0x03	; 3
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <dtoa_prf+0x66>
    3570:	84 e0       	ldi	r24, 0x04	; 4
    3572:	81 17       	cp	r24, r17
    3574:	18 f4       	brcc	.+6      	; 0x357c <dtoa_prf+0x70>
    3576:	21 2f       	mov	r18, r17
    3578:	28 1b       	sub	r18, r24
    357a:	01 c0       	rjmp	.+2      	; 0x357e <dtoa_prf+0x72>
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	51 11       	cpse	r21, r1
    3580:	0b c0       	rjmp	.+22     	; 0x3598 <dtoa_prf+0x8c>
    3582:	f6 01       	movw	r30, r12
    3584:	82 2f       	mov	r24, r18
    3586:	30 e2       	ldi	r19, 0x20	; 32
    3588:	88 23       	and	r24, r24
    358a:	19 f0       	breq	.+6      	; 0x3592 <dtoa_prf+0x86>
    358c:	31 93       	st	Z+, r19
    358e:	81 50       	subi	r24, 0x01	; 1
    3590:	fb cf       	rjmp	.-10     	; 0x3588 <dtoa_prf+0x7c>
    3592:	c2 0e       	add	r12, r18
    3594:	d1 1c       	adc	r13, r1
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	99 23       	and	r25, r25
    359a:	29 f0       	breq	.+10     	; 0x35a6 <dtoa_prf+0x9a>
    359c:	d6 01       	movw	r26, r12
    359e:	9c 93       	st	X, r25
    35a0:	f6 01       	movw	r30, r12
    35a2:	31 96       	adiw	r30, 0x01	; 1
    35a4:	6f 01       	movw	r12, r30
    35a6:	c6 01       	movw	r24, r12
    35a8:	03 96       	adiw	r24, 0x03	; 3
    35aa:	e2 fe       	sbrs	r14, 2
    35ac:	0a c0       	rjmp	.+20     	; 0x35c2 <dtoa_prf+0xb6>
    35ae:	3e e4       	ldi	r19, 0x4E	; 78
    35b0:	d6 01       	movw	r26, r12
    35b2:	3c 93       	st	X, r19
    35b4:	41 e4       	ldi	r20, 0x41	; 65
    35b6:	11 96       	adiw	r26, 0x01	; 1
    35b8:	4c 93       	st	X, r20
    35ba:	11 97       	sbiw	r26, 0x01	; 1
    35bc:	12 96       	adiw	r26, 0x02	; 2
    35be:	3c 93       	st	X, r19
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <dtoa_prf+0xc2>
    35c2:	3e e6       	ldi	r19, 0x6E	; 110
    35c4:	f6 01       	movw	r30, r12
    35c6:	30 83       	st	Z, r19
    35c8:	41 e6       	ldi	r20, 0x61	; 97
    35ca:	41 83       	std	Z+1, r20	; 0x01
    35cc:	32 83       	std	Z+2, r19	; 0x02
    35ce:	fc 01       	movw	r30, r24
    35d0:	32 2f       	mov	r19, r18
    35d2:	40 e2       	ldi	r20, 0x20	; 32
    35d4:	33 23       	and	r19, r19
    35d6:	09 f4       	brne	.+2      	; 0x35da <dtoa_prf+0xce>
    35d8:	42 c0       	rjmp	.+132    	; 0x365e <dtoa_prf+0x152>
    35da:	41 93       	st	Z+, r20
    35dc:	31 50       	subi	r19, 0x01	; 1
    35de:	fa cf       	rjmp	.-12     	; 0x35d4 <dtoa_prf+0xc8>
    35e0:	42 ff       	sbrs	r20, 2
    35e2:	44 c0       	rjmp	.+136    	; 0x366c <dtoa_prf+0x160>
    35e4:	91 11       	cpse	r25, r1
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <dtoa_prf+0xe0>
    35e8:	83 e0       	ldi	r24, 0x03	; 3
    35ea:	01 c0       	rjmp	.+2      	; 0x35ee <dtoa_prf+0xe2>
    35ec:	84 e0       	ldi	r24, 0x04	; 4
    35ee:	81 17       	cp	r24, r17
    35f0:	18 f4       	brcc	.+6      	; 0x35f8 <dtoa_prf+0xec>
    35f2:	21 2f       	mov	r18, r17
    35f4:	28 1b       	sub	r18, r24
    35f6:	01 c0       	rjmp	.+2      	; 0x35fa <dtoa_prf+0xee>
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	51 11       	cpse	r21, r1
    35fc:	0b c0       	rjmp	.+22     	; 0x3614 <dtoa_prf+0x108>
    35fe:	f6 01       	movw	r30, r12
    3600:	82 2f       	mov	r24, r18
    3602:	30 e2       	ldi	r19, 0x20	; 32
    3604:	88 23       	and	r24, r24
    3606:	19 f0       	breq	.+6      	; 0x360e <dtoa_prf+0x102>
    3608:	31 93       	st	Z+, r19
    360a:	81 50       	subi	r24, 0x01	; 1
    360c:	fb cf       	rjmp	.-10     	; 0x3604 <dtoa_prf+0xf8>
    360e:	c2 0e       	add	r12, r18
    3610:	d1 1c       	adc	r13, r1
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	99 23       	and	r25, r25
    3616:	29 f0       	breq	.+10     	; 0x3622 <dtoa_prf+0x116>
    3618:	d6 01       	movw	r26, r12
    361a:	9c 93       	st	X, r25
    361c:	f6 01       	movw	r30, r12
    361e:	31 96       	adiw	r30, 0x01	; 1
    3620:	6f 01       	movw	r12, r30
    3622:	c6 01       	movw	r24, r12
    3624:	03 96       	adiw	r24, 0x03	; 3
    3626:	e2 fe       	sbrs	r14, 2
    3628:	0b c0       	rjmp	.+22     	; 0x3640 <dtoa_prf+0x134>
    362a:	39 e4       	ldi	r19, 0x49	; 73
    362c:	d6 01       	movw	r26, r12
    362e:	3c 93       	st	X, r19
    3630:	3e e4       	ldi	r19, 0x4E	; 78
    3632:	11 96       	adiw	r26, 0x01	; 1
    3634:	3c 93       	st	X, r19
    3636:	11 97       	sbiw	r26, 0x01	; 1
    3638:	36 e4       	ldi	r19, 0x46	; 70
    363a:	12 96       	adiw	r26, 0x02	; 2
    363c:	3c 93       	st	X, r19
    363e:	07 c0       	rjmp	.+14     	; 0x364e <dtoa_prf+0x142>
    3640:	39 e6       	ldi	r19, 0x69	; 105
    3642:	f6 01       	movw	r30, r12
    3644:	30 83       	st	Z, r19
    3646:	3e e6       	ldi	r19, 0x6E	; 110
    3648:	31 83       	std	Z+1, r19	; 0x01
    364a:	36 e6       	ldi	r19, 0x66	; 102
    364c:	32 83       	std	Z+2, r19	; 0x02
    364e:	fc 01       	movw	r30, r24
    3650:	32 2f       	mov	r19, r18
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	33 23       	and	r19, r19
    3656:	19 f0       	breq	.+6      	; 0x365e <dtoa_prf+0x152>
    3658:	41 93       	st	Z+, r20
    365a:	31 50       	subi	r19, 0x01	; 1
    365c:	fb cf       	rjmp	.-10     	; 0x3654 <dtoa_prf+0x148>
    365e:	fc 01       	movw	r30, r24
    3660:	e2 0f       	add	r30, r18
    3662:	f1 1d       	adc	r31, r1
    3664:	10 82       	st	Z, r1
    3666:	8e ef       	ldi	r24, 0xFE	; 254
    3668:	9f ef       	ldi	r25, 0xFF	; 255
    366a:	a6 c0       	rjmp	.+332    	; 0x37b8 <dtoa_prf+0x2ac>
    366c:	21 e0       	ldi	r18, 0x01	; 1
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	91 11       	cpse	r25, r1
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <dtoa_prf+0x16c>
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	16 16       	cp	r1, r22
    367a:	17 06       	cpc	r1, r23
    367c:	1c f4       	brge	.+6      	; 0x3684 <dtoa_prf+0x178>
    367e:	fb 01       	movw	r30, r22
    3680:	31 96       	adiw	r30, 0x01	; 1
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <dtoa_prf+0x17c>
    3684:	e1 e0       	ldi	r30, 0x01	; 1
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	2e 0f       	add	r18, r30
    368a:	3f 1f       	adc	r19, r31
    368c:	bb 20       	and	r11, r11
    368e:	21 f0       	breq	.+8      	; 0x3698 <dtoa_prf+0x18c>
    3690:	eb 2d       	mov	r30, r11
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	31 96       	adiw	r30, 0x01	; 1
    3696:	02 c0       	rjmp	.+4      	; 0x369c <dtoa_prf+0x190>
    3698:	e0 e0       	ldi	r30, 0x00	; 0
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	2e 0f       	add	r18, r30
    369e:	3f 1f       	adc	r19, r31
    36a0:	e1 2f       	mov	r30, r17
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	2e 17       	cp	r18, r30
    36a6:	3f 07       	cpc	r19, r31
    36a8:	1c f4       	brge	.+6      	; 0x36b0 <dtoa_prf+0x1a4>
    36aa:	12 1b       	sub	r17, r18
    36ac:	21 2f       	mov	r18, r17
    36ae:	01 c0       	rjmp	.+2      	; 0x36b2 <dtoa_prf+0x1a6>
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	8e 2d       	mov	r24, r14
    36b4:	88 71       	andi	r24, 0x18	; 24
    36b6:	59 f4       	brne	.+22     	; 0x36ce <dtoa_prf+0x1c2>
    36b8:	f6 01       	movw	r30, r12
    36ba:	82 2f       	mov	r24, r18
    36bc:	30 e2       	ldi	r19, 0x20	; 32
    36be:	88 23       	and	r24, r24
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <dtoa_prf+0x1bc>
    36c2:	31 93       	st	Z+, r19
    36c4:	81 50       	subi	r24, 0x01	; 1
    36c6:	fb cf       	rjmp	.-10     	; 0x36be <dtoa_prf+0x1b2>
    36c8:	c2 0e       	add	r12, r18
    36ca:	d1 1c       	adc	r13, r1
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	99 23       	and	r25, r25
    36d0:	29 f0       	breq	.+10     	; 0x36dc <dtoa_prf+0x1d0>
    36d2:	d6 01       	movw	r26, r12
    36d4:	9c 93       	st	X, r25
    36d6:	f6 01       	movw	r30, r12
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	6f 01       	movw	r12, r30
    36dc:	51 11       	cpse	r21, r1
    36de:	0b c0       	rjmp	.+22     	; 0x36f6 <dtoa_prf+0x1ea>
    36e0:	f6 01       	movw	r30, r12
    36e2:	82 2f       	mov	r24, r18
    36e4:	90 e3       	ldi	r25, 0x30	; 48
    36e6:	88 23       	and	r24, r24
    36e8:	19 f0       	breq	.+6      	; 0x36f0 <dtoa_prf+0x1e4>
    36ea:	91 93       	st	Z+, r25
    36ec:	81 50       	subi	r24, 0x01	; 1
    36ee:	fb cf       	rjmp	.-10     	; 0x36e6 <dtoa_prf+0x1da>
    36f0:	c2 0e       	add	r12, r18
    36f2:	d1 1c       	adc	r13, r1
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	0f 2d       	mov	r16, r15
    36f8:	06 0f       	add	r16, r22
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	34 2f       	mov	r19, r20
    36fe:	30 71       	andi	r19, 0x10	; 16
    3700:	44 ff       	sbrs	r20, 4
    3702:	03 c0       	rjmp	.+6      	; 0x370a <dtoa_prf+0x1fe>
    3704:	91 33       	cpi	r25, 0x31	; 49
    3706:	09 f4       	brne	.+2      	; 0x370a <dtoa_prf+0x1fe>
    3708:	01 50       	subi	r16, 0x01	; 1
    370a:	10 16       	cp	r1, r16
    370c:	24 f4       	brge	.+8      	; 0x3716 <dtoa_prf+0x20a>
    370e:	09 30       	cpi	r16, 0x09	; 9
    3710:	18 f0       	brcs	.+6      	; 0x3718 <dtoa_prf+0x20c>
    3712:	08 e0       	ldi	r16, 0x08	; 8
    3714:	01 c0       	rjmp	.+2      	; 0x3718 <dtoa_prf+0x20c>
    3716:	01 e0       	ldi	r16, 0x01	; 1
    3718:	ab 01       	movw	r20, r22
    371a:	77 ff       	sbrs	r23, 7
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <dtoa_prf+0x216>
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	fb 01       	movw	r30, r22
    3724:	e4 1b       	sub	r30, r20
    3726:	f5 0b       	sbc	r31, r21
    3728:	a1 e0       	ldi	r26, 0x01	; 1
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	ac 0f       	add	r26, r28
    372e:	bd 1f       	adc	r27, r29
    3730:	ea 0f       	add	r30, r26
    3732:	fb 1f       	adc	r31, r27
    3734:	8e e2       	ldi	r24, 0x2E	; 46
    3736:	a8 2e       	mov	r10, r24
    3738:	4b 01       	movw	r8, r22
    373a:	80 1a       	sub	r8, r16
    373c:	91 08       	sbc	r9, r1
    373e:	0b 2d       	mov	r16, r11
    3740:	10 e0       	ldi	r17, 0x00	; 0
    3742:	11 95       	neg	r17
    3744:	01 95       	neg	r16
    3746:	11 09       	sbc	r17, r1
    3748:	4f 3f       	cpi	r20, 0xFF	; 255
    374a:	bf ef       	ldi	r27, 0xFF	; 255
    374c:	5b 07       	cpc	r21, r27
    374e:	21 f4       	brne	.+8      	; 0x3758 <dtoa_prf+0x24c>
    3750:	d6 01       	movw	r26, r12
    3752:	ac 92       	st	X, r10
    3754:	11 96       	adiw	r26, 0x01	; 1
    3756:	6d 01       	movw	r12, r26
    3758:	64 17       	cp	r22, r20
    375a:	75 07       	cpc	r23, r21
    375c:	2c f0       	brlt	.+10     	; 0x3768 <dtoa_prf+0x25c>
    375e:	84 16       	cp	r8, r20
    3760:	95 06       	cpc	r9, r21
    3762:	14 f4       	brge	.+4      	; 0x3768 <dtoa_prf+0x25c>
    3764:	81 81       	ldd	r24, Z+1	; 0x01
    3766:	01 c0       	rjmp	.+2      	; 0x376a <dtoa_prf+0x25e>
    3768:	80 e3       	ldi	r24, 0x30	; 48
    376a:	41 50       	subi	r20, 0x01	; 1
    376c:	51 09       	sbc	r21, r1
    376e:	31 96       	adiw	r30, 0x01	; 1
    3770:	d6 01       	movw	r26, r12
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	7d 01       	movw	r14, r26
    3776:	40 17       	cp	r20, r16
    3778:	51 07       	cpc	r21, r17
    377a:	24 f0       	brlt	.+8      	; 0x3784 <dtoa_prf+0x278>
    377c:	d6 01       	movw	r26, r12
    377e:	8c 93       	st	X, r24
    3780:	67 01       	movw	r12, r14
    3782:	e2 cf       	rjmp	.-60     	; 0x3748 <dtoa_prf+0x23c>
    3784:	64 17       	cp	r22, r20
    3786:	75 07       	cpc	r23, r21
    3788:	39 f4       	brne	.+14     	; 0x3798 <dtoa_prf+0x28c>
    378a:	96 33       	cpi	r25, 0x36	; 54
    378c:	20 f4       	brcc	.+8      	; 0x3796 <dtoa_prf+0x28a>
    378e:	95 33       	cpi	r25, 0x35	; 53
    3790:	19 f4       	brne	.+6      	; 0x3798 <dtoa_prf+0x28c>
    3792:	31 11       	cpse	r19, r1
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <dtoa_prf+0x28c>
    3796:	81 e3       	ldi	r24, 0x31	; 49
    3798:	f6 01       	movw	r30, r12
    379a:	80 83       	st	Z, r24
    379c:	f7 01       	movw	r30, r14
    379e:	82 2f       	mov	r24, r18
    37a0:	90 e2       	ldi	r25, 0x20	; 32
    37a2:	88 23       	and	r24, r24
    37a4:	19 f0       	breq	.+6      	; 0x37ac <dtoa_prf+0x2a0>
    37a6:	91 93       	st	Z+, r25
    37a8:	81 50       	subi	r24, 0x01	; 1
    37aa:	fb cf       	rjmp	.-10     	; 0x37a2 <dtoa_prf+0x296>
    37ac:	f7 01       	movw	r30, r14
    37ae:	e2 0f       	add	r30, r18
    37b0:	f1 1d       	adc	r31, r1
    37b2:	10 82       	st	Z, r1
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	29 96       	adiw	r28, 0x09	; 9
    37ba:	ec e0       	ldi	r30, 0x0C	; 12
    37bc:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0xc>

000037c0 <strtod>:
    37c0:	a0 e0       	ldi	r26, 0x00	; 0
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e6 ee       	ldi	r30, 0xE6	; 230
    37c6:	fb e1       	ldi	r31, 0x1B	; 27
    37c8:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0xc>
    37cc:	ec 01       	movw	r28, r24
    37ce:	6b 01       	movw	r12, r22
    37d0:	61 15       	cp	r22, r1
    37d2:	71 05       	cpc	r23, r1
    37d4:	19 f0       	breq	.+6      	; 0x37dc <strtod+0x1c>
    37d6:	fb 01       	movw	r30, r22
    37d8:	91 83       	std	Z+1, r25	; 0x01
    37da:	80 83       	st	Z, r24
    37dc:	7e 01       	movw	r14, r28
    37de:	ff ef       	ldi	r31, 0xFF	; 255
    37e0:	ef 1a       	sub	r14, r31
    37e2:	ff 0a       	sbc	r15, r31
    37e4:	08 81       	ld	r16, Y
    37e6:	80 2f       	mov	r24, r16
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <isspace>
    37ee:	89 2b       	or	r24, r25
    37f0:	11 f0       	breq	.+4      	; 0x37f6 <strtod+0x36>
    37f2:	e7 01       	movw	r28, r14
    37f4:	f3 cf       	rjmp	.-26     	; 0x37dc <strtod+0x1c>
    37f6:	0d 32       	cpi	r16, 0x2D	; 45
    37f8:	39 f4       	brne	.+14     	; 0x3808 <strtod+0x48>
    37fa:	7e 01       	movw	r14, r28
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	e8 0e       	add	r14, r24
    3800:	f1 1c       	adc	r15, r1
    3802:	09 81       	ldd	r16, Y+1	; 0x01
    3804:	11 e0       	ldi	r17, 0x01	; 1
    3806:	08 c0       	rjmp	.+16     	; 0x3818 <strtod+0x58>
    3808:	0b 32       	cpi	r16, 0x2B	; 43
    380a:	29 f4       	brne	.+10     	; 0x3816 <strtod+0x56>
    380c:	7e 01       	movw	r14, r28
    380e:	92 e0       	ldi	r25, 0x02	; 2
    3810:	e9 0e       	add	r14, r25
    3812:	f1 1c       	adc	r15, r1
    3814:	09 81       	ldd	r16, Y+1	; 0x01
    3816:	10 e0       	ldi	r17, 0x00	; 0
    3818:	e7 01       	movw	r28, r14
    381a:	21 97       	sbiw	r28, 0x01	; 1
    381c:	43 e0       	ldi	r20, 0x03	; 3
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	64 ed       	ldi	r22, 0xD4	; 212
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	ce 01       	movw	r24, r28
    3826:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <strncasecmp_P>
    382a:	89 2b       	or	r24, r25
    382c:	c1 f4       	brne	.+48     	; 0x385e <strtod+0x9e>
    382e:	23 96       	adiw	r28, 0x03	; 3
    3830:	45 e0       	ldi	r20, 0x05	; 5
    3832:	50 e0       	ldi	r21, 0x00	; 0
    3834:	6f ec       	ldi	r22, 0xCF	; 207
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	ce 01       	movw	r24, r28
    383a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <strncasecmp_P>
    383e:	89 2b       	or	r24, r25
    3840:	09 f4       	brne	.+2      	; 0x3844 <strtod+0x84>
    3842:	25 96       	adiw	r28, 0x05	; 5
    3844:	c1 14       	cp	r12, r1
    3846:	d1 04       	cpc	r13, r1
    3848:	19 f0       	breq	.+6      	; 0x3850 <strtod+0x90>
    384a:	f6 01       	movw	r30, r12
    384c:	d1 83       	std	Z+1, r29	; 0x01
    384e:	c0 83       	st	Z, r28
    3850:	11 11       	cpse	r17, r1
    3852:	f6 c0       	rjmp	.+492    	; 0x3a40 <strtod+0x280>
    3854:	60 e0       	ldi	r22, 0x00	; 0
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	80 e8       	ldi	r24, 0x80	; 128
    385a:	9f e7       	ldi	r25, 0x7F	; 127
    385c:	fa c0       	rjmp	.+500    	; 0x3a52 <strtod+0x292>
    385e:	43 e0       	ldi	r20, 0x03	; 3
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	6c ec       	ldi	r22, 0xCC	; 204
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	ce 01       	movw	r24, r28
    3868:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <strncasecmp_P>
    386c:	89 2b       	or	r24, r25
    386e:	59 f4       	brne	.+22     	; 0x3886 <strtod+0xc6>
    3870:	c1 14       	cp	r12, r1
    3872:	d1 04       	cpc	r13, r1
    3874:	09 f4       	brne	.+2      	; 0x3878 <strtod+0xb8>
    3876:	e9 c0       	rjmp	.+466    	; 0x3a4a <strtod+0x28a>
    3878:	f2 e0       	ldi	r31, 0x02	; 2
    387a:	ef 0e       	add	r14, r31
    387c:	f1 1c       	adc	r15, r1
    387e:	f6 01       	movw	r30, r12
    3880:	f1 82       	std	Z+1, r15	; 0x01
    3882:	e0 82       	st	Z, r14
    3884:	e2 c0       	rjmp	.+452    	; 0x3a4a <strtod+0x28a>
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	a9 01       	movw	r20, r18
    388c:	c0 e0       	ldi	r28, 0x00	; 0
    388e:	d0 e0       	ldi	r29, 0x00	; 0
    3890:	f7 01       	movw	r30, r14
    3892:	80 ed       	ldi	r24, 0xD0	; 208
    3894:	a8 2e       	mov	r10, r24
    3896:	a0 0e       	add	r10, r16
    3898:	89 e0       	ldi	r24, 0x09	; 9
    389a:	8a 15       	cp	r24, r10
    389c:	30 f1       	brcs	.+76     	; 0x38ea <strtod+0x12a>
    389e:	91 2f       	mov	r25, r17
    38a0:	92 60       	ori	r25, 0x02	; 2
    38a2:	b9 2e       	mov	r11, r25
    38a4:	81 2f       	mov	r24, r17
    38a6:	88 70       	andi	r24, 0x08	; 8
    38a8:	12 ff       	sbrs	r17, 2
    38aa:	04 c0       	rjmp	.+8      	; 0x38b4 <strtod+0xf4>
    38ac:	81 11       	cpse	r24, r1
    38ae:	24 c0       	rjmp	.+72     	; 0x38f8 <strtod+0x138>
    38b0:	21 96       	adiw	r28, 0x01	; 1
    38b2:	22 c0       	rjmp	.+68     	; 0x38f8 <strtod+0x138>
    38b4:	81 11       	cpse	r24, r1
    38b6:	21 97       	sbiw	r28, 0x01	; 1
    38b8:	a5 e0       	ldi	r26, 0x05	; 5
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__muluhisi3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	aa 1f       	adc	r26, r26
    38ca:	bb 1f       	adc	r27, r27
    38cc:	9c 01       	movw	r18, r24
    38ce:	ad 01       	movw	r20, r26
    38d0:	2a 0d       	add	r18, r10
    38d2:	31 1d       	adc	r19, r1
    38d4:	41 1d       	adc	r20, r1
    38d6:	51 1d       	adc	r21, r1
    38d8:	28 39       	cpi	r18, 0x98	; 152
    38da:	89 e9       	ldi	r24, 0x99	; 153
    38dc:	38 07       	cpc	r19, r24
    38de:	48 07       	cpc	r20, r24
    38e0:	89 e1       	ldi	r24, 0x19	; 25
    38e2:	58 07       	cpc	r21, r24
    38e4:	48 f0       	brcs	.+18     	; 0x38f8 <strtod+0x138>
    38e6:	16 60       	ori	r17, 0x06	; 6
    38e8:	06 c0       	rjmp	.+12     	; 0x38f6 <strtod+0x136>
    38ea:	9e ef       	ldi	r25, 0xFE	; 254
    38ec:	a9 12       	cpse	r10, r25
    38ee:	0a c0       	rjmp	.+20     	; 0x3904 <strtod+0x144>
    38f0:	13 fd       	sbrc	r17, 3
    38f2:	40 c0       	rjmp	.+128    	; 0x3974 <strtod+0x1b4>
    38f4:	18 60       	ori	r17, 0x08	; 8
    38f6:	b1 2e       	mov	r11, r17
    38f8:	8f ef       	ldi	r24, 0xFF	; 255
    38fa:	e8 1a       	sub	r14, r24
    38fc:	f8 0a       	sbc	r15, r24
    38fe:	00 81       	ld	r16, Z
    3900:	1b 2d       	mov	r17, r11
    3902:	c6 cf       	rjmp	.-116    	; 0x3890 <strtod+0xd0>
    3904:	80 2f       	mov	r24, r16
    3906:	8f 7d       	andi	r24, 0xDF	; 223
    3908:	85 34       	cpi	r24, 0x45	; 69
    390a:	a1 f5       	brne	.+104    	; 0x3974 <strtod+0x1b4>
    390c:	80 81       	ld	r24, Z
    390e:	8d 32       	cpi	r24, 0x2D	; 45
    3910:	11 f4       	brne	.+4      	; 0x3916 <strtod+0x156>
    3912:	10 61       	ori	r17, 0x10	; 16
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <strtod+0x162>
    3916:	8b 32       	cpi	r24, 0x2B	; 43
    3918:	21 f0       	breq	.+8      	; 0x3922 <strtod+0x162>
    391a:	31 96       	adiw	r30, 0x01	; 1
    391c:	61 e0       	ldi	r22, 0x01	; 1
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	04 c0       	rjmp	.+8      	; 0x392a <strtod+0x16a>
    3922:	81 81       	ldd	r24, Z+1	; 0x01
    3924:	32 96       	adiw	r30, 0x02	; 2
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	80 53       	subi	r24, 0x30	; 48
    392c:	8a 30       	cpi	r24, 0x0A	; 10
    392e:	18 f0       	brcs	.+6      	; 0x3936 <strtod+0x176>
    3930:	e6 1b       	sub	r30, r22
    3932:	f7 0b       	sbc	r31, r23
    3934:	1f c0       	rjmp	.+62     	; 0x3974 <strtod+0x1b4>
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	60 38       	cpi	r22, 0x80	; 128
    393c:	9c e0       	ldi	r25, 0x0C	; 12
    393e:	79 07       	cpc	r23, r25
    3940:	5c f4       	brge	.+22     	; 0x3958 <strtod+0x198>
    3942:	db 01       	movw	r26, r22
    3944:	aa 0f       	add	r26, r26
    3946:	bb 1f       	adc	r27, r27
    3948:	aa 0f       	add	r26, r26
    394a:	bb 1f       	adc	r27, r27
    394c:	6a 0f       	add	r22, r26
    394e:	7b 1f       	adc	r23, r27
    3950:	66 0f       	add	r22, r22
    3952:	77 1f       	adc	r23, r23
    3954:	68 0f       	add	r22, r24
    3956:	71 1d       	adc	r23, r1
    3958:	31 96       	adiw	r30, 0x01	; 1
    395a:	df 01       	movw	r26, r30
    395c:	11 97       	sbiw	r26, 0x01	; 1
    395e:	8c 91       	ld	r24, X
    3960:	80 53       	subi	r24, 0x30	; 48
    3962:	8a 30       	cpi	r24, 0x0A	; 10
    3964:	50 f3       	brcs	.-44     	; 0x393a <strtod+0x17a>
    3966:	14 ff       	sbrs	r17, 4
    3968:	03 c0       	rjmp	.+6      	; 0x3970 <strtod+0x1b0>
    396a:	71 95       	neg	r23
    396c:	61 95       	neg	r22
    396e:	71 09       	sbc	r23, r1
    3970:	c6 0f       	add	r28, r22
    3972:	d7 1f       	adc	r29, r23
    3974:	11 ff       	sbrs	r17, 1
    3976:	08 c0       	rjmp	.+16     	; 0x3988 <strtod+0x1c8>
    3978:	c1 14       	cp	r12, r1
    397a:	d1 04       	cpc	r13, r1
    397c:	29 f0       	breq	.+10     	; 0x3988 <strtod+0x1c8>
    397e:	cf 01       	movw	r24, r30
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f6 01       	movw	r30, r12
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24
    3988:	ca 01       	movw	r24, r20
    398a:	b9 01       	movw	r22, r18
    398c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__floatunsisf>
    3990:	21 2f       	mov	r18, r17
    3992:	23 70       	andi	r18, 0x03	; 3
    3994:	23 30       	cpi	r18, 0x03	; 3
    3996:	19 f0       	breq	.+6      	; 0x399e <strtod+0x1de>
    3998:	4b 01       	movw	r8, r22
    399a:	5c 01       	movw	r10, r24
    399c:	06 c0       	rjmp	.+12     	; 0x39aa <strtod+0x1ea>
    399e:	4b 01       	movw	r8, r22
    39a0:	5c 01       	movw	r10, r24
    39a2:	b7 fa       	bst	r11, 7
    39a4:	b0 94       	com	r11
    39a6:	b7 f8       	bld	r11, 7
    39a8:	b0 94       	com	r11
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	a9 01       	movw	r20, r18
    39b0:	c5 01       	movw	r24, r10
    39b2:	b4 01       	movw	r22, r8
    39b4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    39b8:	88 23       	and	r24, r24
    39ba:	09 f4       	brne	.+2      	; 0x39be <strtod+0x1fe>
    39bc:	3e c0       	rjmp	.+124    	; 0x3a3a <strtod+0x27a>
    39be:	d7 ff       	sbrs	r29, 7
    39c0:	06 c0       	rjmp	.+12     	; 0x39ce <strtod+0x20e>
    39c2:	d1 95       	neg	r29
    39c4:	c1 95       	neg	r28
    39c6:	d1 09       	sbc	r29, r1
    39c8:	0b ee       	ldi	r16, 0xEB	; 235
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <strtod+0x212>
    39ce:	03 e0       	ldi	r16, 0x03	; 3
    39d0:	11 e0       	ldi	r17, 0x01	; 1
    39d2:	68 01       	movw	r12, r16
    39d4:	f8 e1       	ldi	r31, 0x18	; 24
    39d6:	cf 1a       	sub	r12, r31
    39d8:	d1 08       	sbc	r13, r1
    39da:	90 e2       	ldi	r25, 0x20	; 32
    39dc:	e9 2e       	mov	r14, r25
    39de:	f1 2c       	mov	r15, r1
    39e0:	ce 15       	cp	r28, r14
    39e2:	df 05       	cpc	r29, r15
    39e4:	74 f0       	brlt	.+28     	; 0x3a02 <strtod+0x242>
    39e6:	f8 01       	movw	r30, r16
    39e8:	25 91       	lpm	r18, Z+
    39ea:	35 91       	lpm	r19, Z+
    39ec:	45 91       	lpm	r20, Z+
    39ee:	54 91       	lpm	r21, Z
    39f0:	c5 01       	movw	r24, r10
    39f2:	b4 01       	movw	r22, r8
    39f4:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsf3>
    39f8:	4b 01       	movw	r8, r22
    39fa:	5c 01       	movw	r10, r24
    39fc:	ce 19       	sub	r28, r14
    39fe:	df 09       	sbc	r29, r15
    3a00:	ef cf       	rjmp	.-34     	; 0x39e0 <strtod+0x220>
    3a02:	04 50       	subi	r16, 0x04	; 4
    3a04:	11 09       	sbc	r17, r1
    3a06:	f5 94       	asr	r15
    3a08:	e7 94       	ror	r14
    3a0a:	0c 15       	cp	r16, r12
    3a0c:	1d 05       	cpc	r17, r13
    3a0e:	41 f7       	brne	.-48     	; 0x39e0 <strtod+0x220>
    3a10:	8a 2d       	mov	r24, r10
    3a12:	88 0f       	add	r24, r24
    3a14:	8b 2d       	mov	r24, r11
    3a16:	88 1f       	adc	r24, r24
    3a18:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1a:	49 f0       	breq	.+18     	; 0x3a2e <strtod+0x26e>
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	a9 01       	movw	r20, r18
    3a22:	c5 01       	movw	r24, r10
    3a24:	b4 01       	movw	r22, r8
    3a26:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__cmpsf2>
    3a2a:	81 11       	cpse	r24, r1
    3a2c:	06 c0       	rjmp	.+12     	; 0x3a3a <strtod+0x27a>
    3a2e:	82 e2       	ldi	r24, 0x22	; 34
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <errno+0x1>
    3a36:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <errno>
    3a3a:	c5 01       	movw	r24, r10
    3a3c:	b4 01       	movw	r22, r8
    3a3e:	09 c0       	rjmp	.+18     	; 0x3a52 <strtod+0x292>
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	80 e8       	ldi	r24, 0x80	; 128
    3a46:	9f ef       	ldi	r25, 0xFF	; 255
    3a48:	04 c0       	rjmp	.+8      	; 0x3a52 <strtod+0x292>
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	80 ec       	ldi	r24, 0xC0	; 192
    3a50:	9f e7       	ldi	r25, 0x7F	; 127
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	ec e0       	ldi	r30, 0x0C	; 12
    3a58:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0xc>

00003a5c <__ftoa_engine>:
    3a5c:	28 30       	cpi	r18, 0x08	; 8
    3a5e:	08 f0       	brcs	.+2      	; 0x3a62 <__ftoa_engine+0x6>
    3a60:	27 e0       	ldi	r18, 0x07	; 7
    3a62:	33 27       	eor	r19, r19
    3a64:	da 01       	movw	r26, r20
    3a66:	99 0f       	add	r25, r25
    3a68:	31 1d       	adc	r19, r1
    3a6a:	87 fd       	sbrc	r24, 7
    3a6c:	91 60       	ori	r25, 0x01	; 1
    3a6e:	00 96       	adiw	r24, 0x00	; 0
    3a70:	61 05       	cpc	r22, r1
    3a72:	71 05       	cpc	r23, r1
    3a74:	39 f4       	brne	.+14     	; 0x3a84 <__ftoa_engine+0x28>
    3a76:	32 60       	ori	r19, 0x02	; 2
    3a78:	2e 5f       	subi	r18, 0xFE	; 254
    3a7a:	3d 93       	st	X+, r19
    3a7c:	30 e3       	ldi	r19, 0x30	; 48
    3a7e:	2a 95       	dec	r18
    3a80:	e1 f7       	brne	.-8      	; 0x3a7a <__ftoa_engine+0x1e>
    3a82:	08 95       	ret
    3a84:	9f 3f       	cpi	r25, 0xFF	; 255
    3a86:	30 f0       	brcs	.+12     	; 0x3a94 <__ftoa_engine+0x38>
    3a88:	80 38       	cpi	r24, 0x80	; 128
    3a8a:	71 05       	cpc	r23, r1
    3a8c:	61 05       	cpc	r22, r1
    3a8e:	09 f0       	breq	.+2      	; 0x3a92 <__ftoa_engine+0x36>
    3a90:	3c 5f       	subi	r19, 0xFC	; 252
    3a92:	3c 5f       	subi	r19, 0xFC	; 252
    3a94:	3d 93       	st	X+, r19
    3a96:	91 30       	cpi	r25, 0x01	; 1
    3a98:	08 f0       	brcs	.+2      	; 0x3a9c <__ftoa_engine+0x40>
    3a9a:	80 68       	ori	r24, 0x80	; 128
    3a9c:	91 1d       	adc	r25, r1
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	1f 93       	push	r17
    3aa4:	0f 93       	push	r16
    3aa6:	ff 92       	push	r15
    3aa8:	ef 92       	push	r14
    3aaa:	19 2f       	mov	r17, r25
    3aac:	98 7f       	andi	r25, 0xF8	; 248
    3aae:	96 95       	lsr	r25
    3ab0:	e9 2f       	mov	r30, r25
    3ab2:	96 95       	lsr	r25
    3ab4:	96 95       	lsr	r25
    3ab6:	e9 0f       	add	r30, r25
    3ab8:	ff 27       	eor	r31, r31
    3aba:	ef 59       	subi	r30, 0x9F	; 159
    3abc:	fe 4f       	sbci	r31, 0xFE	; 254
    3abe:	99 27       	eor	r25, r25
    3ac0:	33 27       	eor	r19, r19
    3ac2:	ee 24       	eor	r14, r14
    3ac4:	ff 24       	eor	r15, r15
    3ac6:	a7 01       	movw	r20, r14
    3ac8:	e7 01       	movw	r28, r14
    3aca:	05 90       	lpm	r0, Z+
    3acc:	08 94       	sec
    3ace:	07 94       	ror	r0
    3ad0:	28 f4       	brcc	.+10     	; 0x3adc <__ftoa_engine+0x80>
    3ad2:	36 0f       	add	r19, r22
    3ad4:	e7 1e       	adc	r14, r23
    3ad6:	f8 1e       	adc	r15, r24
    3ad8:	49 1f       	adc	r20, r25
    3ada:	51 1d       	adc	r21, r1
    3adc:	66 0f       	add	r22, r22
    3ade:	77 1f       	adc	r23, r23
    3ae0:	88 1f       	adc	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	06 94       	lsr	r0
    3ae6:	a1 f7       	brne	.-24     	; 0x3ad0 <__ftoa_engine+0x74>
    3ae8:	05 90       	lpm	r0, Z+
    3aea:	07 94       	ror	r0
    3aec:	28 f4       	brcc	.+10     	; 0x3af8 <__ftoa_engine+0x9c>
    3aee:	e7 0e       	add	r14, r23
    3af0:	f8 1e       	adc	r15, r24
    3af2:	49 1f       	adc	r20, r25
    3af4:	56 1f       	adc	r21, r22
    3af6:	c1 1d       	adc	r28, r1
    3af8:	77 0f       	add	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	66 1f       	adc	r22, r22
    3b00:	06 94       	lsr	r0
    3b02:	a1 f7       	brne	.-24     	; 0x3aec <__ftoa_engine+0x90>
    3b04:	05 90       	lpm	r0, Z+
    3b06:	07 94       	ror	r0
    3b08:	28 f4       	brcc	.+10     	; 0x3b14 <__ftoa_engine+0xb8>
    3b0a:	f8 0e       	add	r15, r24
    3b0c:	49 1f       	adc	r20, r25
    3b0e:	56 1f       	adc	r21, r22
    3b10:	c7 1f       	adc	r28, r23
    3b12:	d1 1d       	adc	r29, r1
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	66 1f       	adc	r22, r22
    3b1a:	77 1f       	adc	r23, r23
    3b1c:	06 94       	lsr	r0
    3b1e:	a1 f7       	brne	.-24     	; 0x3b08 <__ftoa_engine+0xac>
    3b20:	05 90       	lpm	r0, Z+
    3b22:	07 94       	ror	r0
    3b24:	20 f4       	brcc	.+8      	; 0x3b2e <__ftoa_engine+0xd2>
    3b26:	49 0f       	add	r20, r25
    3b28:	56 1f       	adc	r21, r22
    3b2a:	c7 1f       	adc	r28, r23
    3b2c:	d8 1f       	adc	r29, r24
    3b2e:	99 0f       	add	r25, r25
    3b30:	66 1f       	adc	r22, r22
    3b32:	77 1f       	adc	r23, r23
    3b34:	88 1f       	adc	r24, r24
    3b36:	06 94       	lsr	r0
    3b38:	a9 f7       	brne	.-22     	; 0x3b24 <__ftoa_engine+0xc8>
    3b3a:	84 91       	lpm	r24, Z
    3b3c:	10 95       	com	r17
    3b3e:	17 70       	andi	r17, 0x07	; 7
    3b40:	41 f0       	breq	.+16     	; 0x3b52 <__ftoa_engine+0xf6>
    3b42:	d6 95       	lsr	r29
    3b44:	c7 95       	ror	r28
    3b46:	57 95       	ror	r21
    3b48:	47 95       	ror	r20
    3b4a:	f7 94       	ror	r15
    3b4c:	e7 94       	ror	r14
    3b4e:	1a 95       	dec	r17
    3b50:	c1 f7       	brne	.-16     	; 0x3b42 <__ftoa_engine+0xe6>
    3b52:	e7 e0       	ldi	r30, 0x07	; 7
    3b54:	f1 e0       	ldi	r31, 0x01	; 1
    3b56:	68 94       	set
    3b58:	15 90       	lpm	r1, Z+
    3b5a:	15 91       	lpm	r17, Z+
    3b5c:	35 91       	lpm	r19, Z+
    3b5e:	65 91       	lpm	r22, Z+
    3b60:	95 91       	lpm	r25, Z+
    3b62:	05 90       	lpm	r0, Z+
    3b64:	7f e2       	ldi	r23, 0x2F	; 47
    3b66:	73 95       	inc	r23
    3b68:	e1 18       	sub	r14, r1
    3b6a:	f1 0a       	sbc	r15, r17
    3b6c:	43 0b       	sbc	r20, r19
    3b6e:	56 0b       	sbc	r21, r22
    3b70:	c9 0b       	sbc	r28, r25
    3b72:	d0 09       	sbc	r29, r0
    3b74:	c0 f7       	brcc	.-16     	; 0x3b66 <__ftoa_engine+0x10a>
    3b76:	e1 0c       	add	r14, r1
    3b78:	f1 1e       	adc	r15, r17
    3b7a:	43 1f       	adc	r20, r19
    3b7c:	56 1f       	adc	r21, r22
    3b7e:	c9 1f       	adc	r28, r25
    3b80:	d0 1d       	adc	r29, r0
    3b82:	7e f4       	brtc	.+30     	; 0x3ba2 <__ftoa_engine+0x146>
    3b84:	70 33       	cpi	r23, 0x30	; 48
    3b86:	11 f4       	brne	.+4      	; 0x3b8c <__ftoa_engine+0x130>
    3b88:	8a 95       	dec	r24
    3b8a:	e6 cf       	rjmp	.-52     	; 0x3b58 <__ftoa_engine+0xfc>
    3b8c:	e8 94       	clt
    3b8e:	01 50       	subi	r16, 0x01	; 1
    3b90:	30 f0       	brcs	.+12     	; 0x3b9e <__ftoa_engine+0x142>
    3b92:	08 0f       	add	r16, r24
    3b94:	0a f4       	brpl	.+2      	; 0x3b98 <__ftoa_engine+0x13c>
    3b96:	00 27       	eor	r16, r16
    3b98:	02 17       	cp	r16, r18
    3b9a:	08 f4       	brcc	.+2      	; 0x3b9e <__ftoa_engine+0x142>
    3b9c:	20 2f       	mov	r18, r16
    3b9e:	23 95       	inc	r18
    3ba0:	02 2f       	mov	r16, r18
    3ba2:	7a 33       	cpi	r23, 0x3A	; 58
    3ba4:	28 f0       	brcs	.+10     	; 0x3bb0 <__ftoa_engine+0x154>
    3ba6:	79 e3       	ldi	r23, 0x39	; 57
    3ba8:	7d 93       	st	X+, r23
    3baa:	2a 95       	dec	r18
    3bac:	e9 f7       	brne	.-6      	; 0x3ba8 <__ftoa_engine+0x14c>
    3bae:	10 c0       	rjmp	.+32     	; 0x3bd0 <__ftoa_engine+0x174>
    3bb0:	7d 93       	st	X+, r23
    3bb2:	2a 95       	dec	r18
    3bb4:	89 f6       	brne	.-94     	; 0x3b58 <__ftoa_engine+0xfc>
    3bb6:	06 94       	lsr	r0
    3bb8:	97 95       	ror	r25
    3bba:	67 95       	ror	r22
    3bbc:	37 95       	ror	r19
    3bbe:	17 95       	ror	r17
    3bc0:	17 94       	ror	r1
    3bc2:	e1 18       	sub	r14, r1
    3bc4:	f1 0a       	sbc	r15, r17
    3bc6:	43 0b       	sbc	r20, r19
    3bc8:	56 0b       	sbc	r21, r22
    3bca:	c9 0b       	sbc	r28, r25
    3bcc:	d0 09       	sbc	r29, r0
    3bce:	98 f0       	brcs	.+38     	; 0x3bf6 <__ftoa_engine+0x19a>
    3bd0:	23 95       	inc	r18
    3bd2:	7e 91       	ld	r23, -X
    3bd4:	73 95       	inc	r23
    3bd6:	7a 33       	cpi	r23, 0x3A	; 58
    3bd8:	08 f0       	brcs	.+2      	; 0x3bdc <__ftoa_engine+0x180>
    3bda:	70 e3       	ldi	r23, 0x30	; 48
    3bdc:	7c 93       	st	X, r23
    3bde:	20 13       	cpse	r18, r16
    3be0:	b8 f7       	brcc	.-18     	; 0x3bd0 <__ftoa_engine+0x174>
    3be2:	7e 91       	ld	r23, -X
    3be4:	70 61       	ori	r23, 0x10	; 16
    3be6:	7d 93       	st	X+, r23
    3be8:	30 f0       	brcs	.+12     	; 0x3bf6 <__ftoa_engine+0x19a>
    3bea:	83 95       	inc	r24
    3bec:	71 e3       	ldi	r23, 0x31	; 49
    3bee:	7d 93       	st	X+, r23
    3bf0:	70 e3       	ldi	r23, 0x30	; 48
    3bf2:	2a 95       	dec	r18
    3bf4:	e1 f7       	brne	.-8      	; 0x3bee <__ftoa_engine+0x192>
    3bf6:	11 24       	eor	r1, r1
    3bf8:	ef 90       	pop	r14
    3bfa:	ff 90       	pop	r15
    3bfc:	0f 91       	pop	r16
    3bfe:	1f 91       	pop	r17
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	99 27       	eor	r25, r25
    3c06:	87 fd       	sbrc	r24, 7
    3c08:	90 95       	com	r25
    3c0a:	08 95       	ret

00003c0c <isspace>:
    3c0c:	91 11       	cpse	r25, r1
    3c0e:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__ctype_isfalse>
    3c12:	80 32       	cpi	r24, 0x20	; 32
    3c14:	19 f0       	breq	.+6      	; 0x3c1c <isspace+0x10>
    3c16:	89 50       	subi	r24, 0x09	; 9
    3c18:	85 50       	subi	r24, 0x05	; 5
    3c1a:	c8 f7       	brcc	.-14     	; 0x3c0e <isspace+0x2>
    3c1c:	08 95       	ret

00003c1e <strncasecmp_P>:
    3c1e:	fb 01       	movw	r30, r22
    3c20:	dc 01       	movw	r26, r24
    3c22:	41 50       	subi	r20, 0x01	; 1
    3c24:	50 40       	sbci	r21, 0x00	; 0
    3c26:	88 f0       	brcs	.+34     	; 0x3c4a <strncasecmp_P+0x2c>
    3c28:	8d 91       	ld	r24, X+
    3c2a:	81 34       	cpi	r24, 0x41	; 65
    3c2c:	1c f0       	brlt	.+6      	; 0x3c34 <strncasecmp_P+0x16>
    3c2e:	8b 35       	cpi	r24, 0x5B	; 91
    3c30:	0c f4       	brge	.+2      	; 0x3c34 <strncasecmp_P+0x16>
    3c32:	80 5e       	subi	r24, 0xE0	; 224
    3c34:	65 91       	lpm	r22, Z+
    3c36:	61 34       	cpi	r22, 0x41	; 65
    3c38:	1c f0       	brlt	.+6      	; 0x3c40 <strncasecmp_P+0x22>
    3c3a:	6b 35       	cpi	r22, 0x5B	; 91
    3c3c:	0c f4       	brge	.+2      	; 0x3c40 <strncasecmp_P+0x22>
    3c3e:	60 5e       	subi	r22, 0xE0	; 224
    3c40:	86 1b       	sub	r24, r22
    3c42:	61 11       	cpse	r22, r1
    3c44:	71 f3       	breq	.-36     	; 0x3c22 <strncasecmp_P+0x4>
    3c46:	99 0b       	sbc	r25, r25
    3c48:	08 95       	ret
    3c4a:	88 1b       	sub	r24, r24
    3c4c:	fc cf       	rjmp	.-8      	; 0x3c46 <strncasecmp_P+0x28>

00003c4e <strnlen_P>:
    3c4e:	fc 01       	movw	r30, r24
    3c50:	05 90       	lpm	r0, Z+
    3c52:	61 50       	subi	r22, 0x01	; 1
    3c54:	70 40       	sbci	r23, 0x00	; 0
    3c56:	01 10       	cpse	r0, r1
    3c58:	d8 f7       	brcc	.-10     	; 0x3c50 <strnlen_P+0x2>
    3c5a:	80 95       	com	r24
    3c5c:	90 95       	com	r25
    3c5e:	8e 0f       	add	r24, r30
    3c60:	9f 1f       	adc	r25, r31
    3c62:	08 95       	ret

00003c64 <strnlen>:
    3c64:	fc 01       	movw	r30, r24
    3c66:	61 50       	subi	r22, 0x01	; 1
    3c68:	70 40       	sbci	r23, 0x00	; 0
    3c6a:	01 90       	ld	r0, Z+
    3c6c:	01 10       	cpse	r0, r1
    3c6e:	d8 f7       	brcc	.-10     	; 0x3c66 <strnlen+0x2>
    3c70:	80 95       	com	r24
    3c72:	90 95       	com	r25
    3c74:	8e 0f       	add	r24, r30
    3c76:	9f 1f       	adc	r25, r31
    3c78:	08 95       	ret

00003c7a <fputc>:
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	fb 01       	movw	r30, r22
    3c84:	23 81       	ldd	r18, Z+3	; 0x03
    3c86:	21 fd       	sbrc	r18, 1
    3c88:	03 c0       	rjmp	.+6      	; 0x3c90 <fputc+0x16>
    3c8a:	8f ef       	ldi	r24, 0xFF	; 255
    3c8c:	9f ef       	ldi	r25, 0xFF	; 255
    3c8e:	2c c0       	rjmp	.+88     	; 0x3ce8 <fputc+0x6e>
    3c90:	22 ff       	sbrs	r18, 2
    3c92:	16 c0       	rjmp	.+44     	; 0x3cc0 <fputc+0x46>
    3c94:	46 81       	ldd	r20, Z+6	; 0x06
    3c96:	57 81       	ldd	r21, Z+7	; 0x07
    3c98:	24 81       	ldd	r18, Z+4	; 0x04
    3c9a:	35 81       	ldd	r19, Z+5	; 0x05
    3c9c:	42 17       	cp	r20, r18
    3c9e:	53 07       	cpc	r21, r19
    3ca0:	44 f4       	brge	.+16     	; 0x3cb2 <fputc+0x38>
    3ca2:	a0 81       	ld	r26, Z
    3ca4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ca6:	9d 01       	movw	r18, r26
    3ca8:	2f 5f       	subi	r18, 0xFF	; 255
    3caa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cac:	31 83       	std	Z+1, r19	; 0x01
    3cae:	20 83       	st	Z, r18
    3cb0:	8c 93       	st	X, r24
    3cb2:	26 81       	ldd	r18, Z+6	; 0x06
    3cb4:	37 81       	ldd	r19, Z+7	; 0x07
    3cb6:	2f 5f       	subi	r18, 0xFF	; 255
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cba:	37 83       	std	Z+7, r19	; 0x07
    3cbc:	26 83       	std	Z+6, r18	; 0x06
    3cbe:	14 c0       	rjmp	.+40     	; 0x3ce8 <fputc+0x6e>
    3cc0:	8b 01       	movw	r16, r22
    3cc2:	ec 01       	movw	r28, r24
    3cc4:	fb 01       	movw	r30, r22
    3cc6:	00 84       	ldd	r0, Z+8	; 0x08
    3cc8:	f1 85       	ldd	r31, Z+9	; 0x09
    3cca:	e0 2d       	mov	r30, r0
    3ccc:	09 95       	icall
    3cce:	89 2b       	or	r24, r25
    3cd0:	e1 f6       	brne	.-72     	; 0x3c8a <fputc+0x10>
    3cd2:	d8 01       	movw	r26, r16
    3cd4:	16 96       	adiw	r26, 0x06	; 6
    3cd6:	8d 91       	ld	r24, X+
    3cd8:	9c 91       	ld	r25, X
    3cda:	17 97       	sbiw	r26, 0x07	; 7
    3cdc:	01 96       	adiw	r24, 0x01	; 1
    3cde:	17 96       	adiw	r26, 0x07	; 7
    3ce0:	9c 93       	st	X, r25
    3ce2:	8e 93       	st	-X, r24
    3ce4:	16 97       	sbiw	r26, 0x06	; 6
    3ce6:	ce 01       	movw	r24, r28
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	08 95       	ret

00003cf2 <__ultoa_invert>:
    3cf2:	fa 01       	movw	r30, r20
    3cf4:	aa 27       	eor	r26, r26
    3cf6:	28 30       	cpi	r18, 0x08	; 8
    3cf8:	51 f1       	breq	.+84     	; 0x3d4e <__ultoa_invert+0x5c>
    3cfa:	20 31       	cpi	r18, 0x10	; 16
    3cfc:	81 f1       	breq	.+96     	; 0x3d5e <__ultoa_invert+0x6c>
    3cfe:	e8 94       	clt
    3d00:	6f 93       	push	r22
    3d02:	6e 7f       	andi	r22, 0xFE	; 254
    3d04:	6e 5f       	subi	r22, 0xFE	; 254
    3d06:	7f 4f       	sbci	r23, 0xFF	; 255
    3d08:	8f 4f       	sbci	r24, 0xFF	; 255
    3d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0c:	af 4f       	sbci	r26, 0xFF	; 255
    3d0e:	b1 e0       	ldi	r27, 0x01	; 1
    3d10:	3e d0       	rcall	.+124    	; 0x3d8e <__ultoa_invert+0x9c>
    3d12:	b4 e0       	ldi	r27, 0x04	; 4
    3d14:	3c d0       	rcall	.+120    	; 0x3d8e <__ultoa_invert+0x9c>
    3d16:	67 0f       	add	r22, r23
    3d18:	78 1f       	adc	r23, r24
    3d1a:	89 1f       	adc	r24, r25
    3d1c:	9a 1f       	adc	r25, r26
    3d1e:	a1 1d       	adc	r26, r1
    3d20:	68 0f       	add	r22, r24
    3d22:	79 1f       	adc	r23, r25
    3d24:	8a 1f       	adc	r24, r26
    3d26:	91 1d       	adc	r25, r1
    3d28:	a1 1d       	adc	r26, r1
    3d2a:	6a 0f       	add	r22, r26
    3d2c:	71 1d       	adc	r23, r1
    3d2e:	81 1d       	adc	r24, r1
    3d30:	91 1d       	adc	r25, r1
    3d32:	a1 1d       	adc	r26, r1
    3d34:	20 d0       	rcall	.+64     	; 0x3d76 <__ultoa_invert+0x84>
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <__ultoa_invert+0x48>
    3d38:	68 94       	set
    3d3a:	3f 91       	pop	r19
    3d3c:	2a e0       	ldi	r18, 0x0A	; 10
    3d3e:	26 9f       	mul	r18, r22
    3d40:	11 24       	eor	r1, r1
    3d42:	30 19       	sub	r19, r0
    3d44:	30 5d       	subi	r19, 0xD0	; 208
    3d46:	31 93       	st	Z+, r19
    3d48:	de f6       	brtc	.-74     	; 0x3d00 <__ultoa_invert+0xe>
    3d4a:	cf 01       	movw	r24, r30
    3d4c:	08 95       	ret
    3d4e:	46 2f       	mov	r20, r22
    3d50:	47 70       	andi	r20, 0x07	; 7
    3d52:	40 5d       	subi	r20, 0xD0	; 208
    3d54:	41 93       	st	Z+, r20
    3d56:	b3 e0       	ldi	r27, 0x03	; 3
    3d58:	0f d0       	rcall	.+30     	; 0x3d78 <__ultoa_invert+0x86>
    3d5a:	c9 f7       	brne	.-14     	; 0x3d4e <__ultoa_invert+0x5c>
    3d5c:	f6 cf       	rjmp	.-20     	; 0x3d4a <__ultoa_invert+0x58>
    3d5e:	46 2f       	mov	r20, r22
    3d60:	4f 70       	andi	r20, 0x0F	; 15
    3d62:	40 5d       	subi	r20, 0xD0	; 208
    3d64:	4a 33       	cpi	r20, 0x3A	; 58
    3d66:	18 f0       	brcs	.+6      	; 0x3d6e <__ultoa_invert+0x7c>
    3d68:	49 5d       	subi	r20, 0xD9	; 217
    3d6a:	31 fd       	sbrc	r19, 1
    3d6c:	40 52       	subi	r20, 0x20	; 32
    3d6e:	41 93       	st	Z+, r20
    3d70:	02 d0       	rcall	.+4      	; 0x3d76 <__ultoa_invert+0x84>
    3d72:	a9 f7       	brne	.-22     	; 0x3d5e <__ultoa_invert+0x6c>
    3d74:	ea cf       	rjmp	.-44     	; 0x3d4a <__ultoa_invert+0x58>
    3d76:	b4 e0       	ldi	r27, 0x04	; 4
    3d78:	a6 95       	lsr	r26
    3d7a:	97 95       	ror	r25
    3d7c:	87 95       	ror	r24
    3d7e:	77 95       	ror	r23
    3d80:	67 95       	ror	r22
    3d82:	ba 95       	dec	r27
    3d84:	c9 f7       	brne	.-14     	; 0x3d78 <__ultoa_invert+0x86>
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	61 05       	cpc	r22, r1
    3d8a:	71 05       	cpc	r23, r1
    3d8c:	08 95       	ret
    3d8e:	9b 01       	movw	r18, r22
    3d90:	ac 01       	movw	r20, r24
    3d92:	0a 2e       	mov	r0, r26
    3d94:	06 94       	lsr	r0
    3d96:	57 95       	ror	r21
    3d98:	47 95       	ror	r20
    3d9a:	37 95       	ror	r19
    3d9c:	27 95       	ror	r18
    3d9e:	ba 95       	dec	r27
    3da0:	c9 f7       	brne	.-14     	; 0x3d94 <__ultoa_invert+0xa2>
    3da2:	62 0f       	add	r22, r18
    3da4:	73 1f       	adc	r23, r19
    3da6:	84 1f       	adc	r24, r20
    3da8:	95 1f       	adc	r25, r21
    3daa:	a0 1d       	adc	r26, r0
    3dac:	08 95       	ret

00003dae <__ctype_isfalse>:
    3dae:	99 27       	eor	r25, r25
    3db0:	88 27       	eor	r24, r24

00003db2 <__ctype_istrue>:
    3db2:	08 95       	ret

00003db4 <__muluhisi3>:
    3db4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__umulhisi3>
    3db8:	a5 9f       	mul	r26, r21
    3dba:	90 0d       	add	r25, r0
    3dbc:	b4 9f       	mul	r27, r20
    3dbe:	90 0d       	add	r25, r0
    3dc0:	a4 9f       	mul	r26, r20
    3dc2:	80 0d       	add	r24, r0
    3dc4:	91 1d       	adc	r25, r1
    3dc6:	11 24       	eor	r1, r1
    3dc8:	08 95       	ret

00003dca <__prologue_saves__>:
    3dca:	2f 92       	push	r2
    3dcc:	3f 92       	push	r3
    3dce:	4f 92       	push	r4
    3dd0:	5f 92       	push	r5
    3dd2:	6f 92       	push	r6
    3dd4:	7f 92       	push	r7
    3dd6:	8f 92       	push	r8
    3dd8:	9f 92       	push	r9
    3dda:	af 92       	push	r10
    3ddc:	bf 92       	push	r11
    3dde:	cf 92       	push	r12
    3de0:	df 92       	push	r13
    3de2:	ef 92       	push	r14
    3de4:	ff 92       	push	r15
    3de6:	0f 93       	push	r16
    3de8:	1f 93       	push	r17
    3dea:	cf 93       	push	r28
    3dec:	df 93       	push	r29
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	ca 1b       	sub	r28, r26
    3df4:	db 0b       	sbc	r29, r27
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	09 94       	ijmp

00003e02 <__epilogue_restores__>:
    3e02:	2a 88       	ldd	r2, Y+18	; 0x12
    3e04:	39 88       	ldd	r3, Y+17	; 0x11
    3e06:	48 88       	ldd	r4, Y+16	; 0x10
    3e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e14:	b9 84       	ldd	r11, Y+9	; 0x09
    3e16:	c8 84       	ldd	r12, Y+8	; 0x08
    3e18:	df 80       	ldd	r13, Y+7	; 0x07
    3e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e20:	1b 81       	ldd	r17, Y+3	; 0x03
    3e22:	aa 81       	ldd	r26, Y+2	; 0x02
    3e24:	b9 81       	ldd	r27, Y+1	; 0x01
    3e26:	ce 0f       	add	r28, r30
    3e28:	d1 1d       	adc	r29, r1
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	ed 01       	movw	r28, r26
    3e36:	08 95       	ret

00003e38 <__umulhisi3>:
    3e38:	a2 9f       	mul	r26, r18
    3e3a:	b0 01       	movw	r22, r0
    3e3c:	b3 9f       	mul	r27, r19
    3e3e:	c0 01       	movw	r24, r0
    3e40:	a3 9f       	mul	r26, r19
    3e42:	70 0d       	add	r23, r0
    3e44:	81 1d       	adc	r24, r1
    3e46:	11 24       	eor	r1, r1
    3e48:	91 1d       	adc	r25, r1
    3e4a:	b2 9f       	mul	r27, r18
    3e4c:	70 0d       	add	r23, r0
    3e4e:	81 1d       	adc	r24, r1
    3e50:	11 24       	eor	r1, r1
    3e52:	91 1d       	adc	r25, r1
    3e54:	08 95       	ret

00003e56 <_exit>:
    3e56:	f8 94       	cli

00003e58 <__stop_program>:
    3e58:	ff cf       	rjmp	.-2      	; 0x3e58 <__stop_program>


PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000017ac  00001840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b5  00800094  00800094  00001874  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e0  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b30  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001249  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bb  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001765  00000000  00000000  00006aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_9>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x449>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	4e 41       	sbci	r20, 0x1E	; 30
      b0:	4e 49       	Address 0x000000b0 is out of bounds.
.word	0xffff	; ????

000000b1 <pstr_inity>:
      b1:	49 4e 49 54 59                                      INITY

000000b6 <pstr_inf>:
      b6:	49 4e 46                                            INF

000000b9 <pwr_m10>:
      b9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000d1 <pwr_p10>:
      d1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf e5       	ldi	r28, 0x5F	; 95
      f0:	d4 e0       	ldi	r29, 0x04	; 4
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	a0 e6       	ldi	r26, 0x60	; 96
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	ec ea       	ldi	r30, 0xAC	; 172
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a4 39       	cpi	r26, 0x94	; 148
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a4 e9       	ldi	r26, 0x94	; 148
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a9 34       	cpi	r26, 0x49	; 73
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 07 02 	call	0x40e	; 0x40e <main>
     120:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	2a 97       	sbiw	r28, 0x0a	; 10
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	ac 01       	movw	r20, r24
     142:	fe 01       	movw	r30, r28
     144:	31 96       	adiw	r30, 0x01	; 1
     146:	ce 01       	movw	r24, r28
     148:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     14a:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     14c:	e8 17       	cp	r30, r24
     14e:	f9 07       	cpc	r31, r25
     150:	e1 f7       	brne	.-8      	; 0x14a <get_value+0x22>
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     15a:	fa 01       	movw	r30, r20
     15c:	e2 0f       	add	r30, r18
     15e:	f3 1f       	adc	r31, r19
     160:	90 81       	ld	r25, Z
     162:	96 13       	cpse	r25, r22
     164:	17 c0       	rjmp	.+46     	; 0x194 <get_value+0x6c>
			v [j] = String[j+i+1];
     166:	f9 01       	movw	r30, r18
     168:	e0 0f       	add	r30, r16
     16a:	f1 1f       	adc	r31, r17
     16c:	e4 0f       	add	r30, r20
     16e:	f5 1f       	adc	r31, r21
     170:	81 81       	ldd	r24, Z+1	; 0x01
     172:	a1 e0       	ldi	r26, 0x01	; 1
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	ac 0f       	add	r26, r28
     178:	bd 1f       	adc	r27, r29
     17a:	a0 0f       	add	r26, r16
     17c:	b1 1f       	adc	r27, r17
     17e:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r'))
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	80 32       	cpi	r24, 0x20	; 32
     184:	51 f0       	breq	.+20     	; 0x19a <get_value+0x72>
     186:	8a 30       	cpi	r24, 0x0A	; 10
     188:	41 f0       	breq	.+16     	; 0x19a <get_value+0x72>
     18a:	8d 30       	cpi	r24, 0x0D	; 13
     18c:	31 f0       	breq	.+12     	; 0x19a <get_value+0x72>
			break;
			j++;
     18e:	0f 5f       	subi	r16, 0xFF	; 255
     190:	1f 4f       	sbci	r17, 0xFF	; 255
     192:	e3 cf       	rjmp	.-58     	; 0x15a <get_value+0x32>
		}
		else
		i++;
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	e0 cf       	rjmp	.-64     	; 0x15a <get_value+0x32>
	}
	return (atof(v));
     19a:	ce 01       	movw	r24, r28
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	0e 94 01 0a 	call	0x1402	; 0x1402 <atof>
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	08 95       	ret

000001b8 <get_int>:
int get_int (char* String,char ch)
{
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	2a 97       	sbiw	r28, 0x0a	; 10
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	ac 01       	movw	r20, r24
     1d2:	fe 01       	movw	r30, r28
     1d4:	31 96       	adiw	r30, 0x01	; 1
     1d6:	ce 01       	movw	r24, r28
     1d8:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     1da:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     1dc:	e8 17       	cp	r30, r24
     1de:	f9 07       	cpc	r31, r25
     1e0:	e1 f7       	brne	.-8      	; 0x1da <get_int+0x22>
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     1ea:	fa 01       	movw	r30, r20
     1ec:	e2 0f       	add	r30, r18
     1ee:	f3 1f       	adc	r31, r19
     1f0:	90 81       	ld	r25, Z
     1f2:	96 13       	cpse	r25, r22
     1f4:	17 c0       	rjmp	.+46     	; 0x224 <get_int+0x6c>
			v [j] = String[j+i+1];
     1f6:	f9 01       	movw	r30, r18
     1f8:	e0 0f       	add	r30, r16
     1fa:	f1 1f       	adc	r31, r17
     1fc:	e4 0f       	add	r30, r20
     1fe:	f5 1f       	adc	r31, r21
     200:	81 81       	ldd	r24, Z+1	; 0x01
     202:	a1 e0       	ldi	r26, 0x01	; 1
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	ac 0f       	add	r26, r28
     208:	bd 1f       	adc	r27, r29
     20a:	a0 0f       	add	r26, r16
     20c:	b1 1f       	adc	r27, r17
     20e:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r') )
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	80 32       	cpi	r24, 0x20	; 32
     214:	51 f0       	breq	.+20     	; 0x22a <get_int+0x72>
     216:	8a 30       	cpi	r24, 0x0A	; 10
     218:	41 f0       	breq	.+16     	; 0x22a <get_int+0x72>
     21a:	8d 30       	cpi	r24, 0x0D	; 13
     21c:	31 f0       	breq	.+12     	; 0x22a <get_int+0x72>
			break;
			j++;
     21e:	0f 5f       	subi	r16, 0xFF	; 255
     220:	1f 4f       	sbci	r17, 0xFF	; 255
     222:	e3 cf       	rjmp	.-58     	; 0x1ea <get_int+0x32>
		}
		else
		i++;
     224:	2f 5f       	subi	r18, 0xFF	; 255
     226:	3f 4f       	sbci	r19, 0xFF	; 255
     228:	e0 cf       	rjmp	.-64     	; 0x1ea <get_int+0x32>
	}
	return (atoi(v));
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 05 0a 	call	0x140a	; 0x140a <atoi>
}
     232:	2a 96       	adiw	r28, 0x0a	; 10
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	6a 01       	movw	r12, r20
     258:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     25a:	28 81       	ld	r18, Y
     25c:	39 81       	ldd	r19, Y+1	; 0x01
     25e:	4a 81       	ldd	r20, Y+2	; 0x02
     260:	5b 81       	ldd	r21, Y+3	; 0x03
     262:	c7 01       	movw	r24, r14
     264:	b6 01       	movw	r22, r12
     266:	0e 94 b3 06 	call	0xd66	; 0xd66 <__subsf3>
    *current_pos = new_pos;
     26a:	c8 82       	st	Y, r12
     26c:	d9 82       	std	Y+1, r13	; 0x01
     26e:	ea 82       	std	Y+2, r14	; 0x02
     270:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	08 95       	ret

00000280 <Init>:
		}
	}
}
void Init(void){
	
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     280:	81 b3       	in	r24, 0x11	; 17
     282:	80 6b       	ori	r24, 0xB0	; 176
     284:	81 bb       	out	0x11, r24	; 17
	DDRC = 0XFF;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	84 bb       	out	0x14, r24	; 20
	ADCSRA = 0x87; //to active A/D pins
     28a:	87 e8       	ldi	r24, 0x87	; 135
     28c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     28e:	3e 9a       	sbi	0x07, 6	; 7
	UART_INIT();
     290:	0e 94 79 06 	call	0xcf2	; 0xcf2 <UART_INIT>
	pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);
     294:	27 e2       	ldi	r18, 0x27	; 39
     296:	31 e0       	ldi	r19, 0x01	; 1
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <pid_Init>
	TCNT0 = 0;
     2a8:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS02) | (1<<CS00); // PRESCALER 1024
     2aa:	83 b7       	in	r24, 0x33	; 51
     2ac:	85 60       	ori	r24, 0x05	; 5
     2ae:	83 bf       	out	0x33, r24	; 51
	/*set fast PWM mode with non-inverted output*/
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     2b0:	83 b7       	in	r24, 0x33	; 51
     2b2:	89 66       	ori	r24, 0x69	; 105
     2b4:	83 bf       	out	0x33, r24	; 51
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
     2b6:	8f b5       	in	r24, 0x2f	; 47
     2b8:	81 6a       	ori	r24, 0xA1	; 161
     2ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10);
     2bc:	8e b5       	in	r24, 0x2e	; 46
     2be:	81 60       	ori	r24, 0x01	; 1
     2c0:	8e bd       	out	0x2e, r24	; 46
	TCCR2 |= (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS20);
     2c2:	85 b5       	in	r24, 0x25	; 37
     2c4:	89 66       	ori	r24, 0x69	; 105
     2c6:	85 bd       	out	0x25, r24	; 37
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
     2c8:	bb 9a       	sbi	0x17, 3	; 23
	TIMSK = (1<<TOIE0);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	89 bf       	out	0x39, r24	; 57
	sei();
     2ce:	78 94       	sei
     2d0:	08 95       	ret

000002d2 <ADC_value>:
}
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2d2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d4:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d6:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d8:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2da:	84 b1       	in	r24, 0x04	; 4
     2dc:	95 b1       	in	r25, 0x05	; 5
}
     2de:	08 95       	ret

000002e0 <getTemp>:
double getTemp(uint8_t ADC_pin)
{
     2e0:	8f 92       	push	r8
     2e2:	9f 92       	push	r9
     2e4:	af 92       	push	r10
     2e6:	bf 92       	push	r11
     2e8:	cf 92       	push	r12
     2ea:	df 92       	push	r13
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2f0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ADC_value>
     2f4:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <Vo+0x1>
     2f8:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2fc:	bc 01       	movw	r22, r24
     2fe:	99 0f       	add	r25, r25
     300:	88 0b       	sbc	r24, r24
     302:	99 0b       	sbc	r25, r25
     304:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__floatsisf>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 ec       	ldi	r23, 0xC0	; 192
     310:	8f e7       	ldi	r24, 0x7F	; 127
     312:	94 e4       	ldi	r25, 0x44	; 68
     314:	0e 94 25 07 	call	0xe4a	; 0xe4a <__divsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e8       	ldi	r20, 0x80	; 128
     31e:	5f e3       	ldi	r21, 0x3F	; 63
     320:	0e 94 b3 06 	call	0xd66	; 0xd66 <__subsf3>
     324:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     328:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     32c:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     330:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     334:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     338:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <R2>
     33c:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <R2+0x1>
     340:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <R2+0x2>
     344:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <R2+0x3>
	logR2 = log(R2);
     348:	0e 94 8c 08 	call	0x1118	; 0x1118 <log>
     34c:	6b 01       	movw	r12, r22
     34e:	7c 01       	movw	r14, r24
     350:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <logR2>
     354:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <logR2+0x1>
     358:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <logR2+0x2>
     35c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
     360:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     364:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     368:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     36c:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     370:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     374:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     378:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     37c:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     380:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     384:	0e 94 b4 06 	call	0xd68	; 0xd68 <__addsf3>
     388:	4b 01       	movw	r8, r22
     38a:	5c 01       	movw	r10, r24
     38c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     390:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     394:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     398:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     3a4:	a7 01       	movw	r20, r14
     3a6:	96 01       	movw	r18, r12
     3a8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     3ac:	a7 01       	movw	r20, r14
     3ae:	96 01       	movw	r18, r12
     3b0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	c5 01       	movw	r24, r10
     3ba:	b4 01       	movw	r22, r8
     3bc:	0e 94 b4 06 	call	0xd68	; 0xd68 <__addsf3>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	9f e3       	ldi	r25, 0x3F	; 63
     3cc:	0e 94 25 07 	call	0xe4a	; 0xe4a <__divsf3>
     3d0:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <T>
     3d4:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <T+0x1>
     3d8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <T+0x2>
     3dc:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <T+0x3>
	Tc = T - 273.15;
     3e0:	23 e3       	ldi	r18, 0x33	; 51
     3e2:	33 e9       	ldi	r19, 0x93	; 147
     3e4:	48 e8       	ldi	r20, 0x88	; 136
     3e6:	53 e4       	ldi	r21, 0x43	; 67
     3e8:	0e 94 b3 06 	call	0xd66	; 0xd66 <__subsf3>
     3ec:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <Tc>
     3f0:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <Tc+0x1>
     3f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Tc+0x2>
     3f8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Tc+0x3>
	return (Tc);
}
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12
     404:	bf 90       	pop	r11
     406:	af 90       	pop	r10
     408:	9f 90       	pop	r9
     40a:	8f 90       	pop	r8
     40c:	08 95       	ret

0000040e <main>:
char output[10];
uint8_t d = 100; //no. of steps per 1mm
volatile int value; // to storage the instantaneous change in ADC converter
int main(void)
{
    Init();
     40e:	0e 94 40 01 	call	0x280	; 0x280 <Init>
     412:	cf e1       	ldi	r28, 0x1F	; 31
     414:	d1 e0       	ldi	r29, 0x01	; 1
     416:	ef ec       	ldi	r30, 0xCF	; 207
     418:	f0 e0       	ldi	r31, 0x00	; 0
	{
				 		

		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
     41a:	11 92       	st	Z+, r1
	int val = 0;
	while (1)
	{
				 		

		for (int i = 0 ; i < 80 ;i++)
     41c:	ec 17       	cp	r30, r28
     41e:	fd 07       	cpc	r31, r29
     420:	e1 f7       	brne	.-8      	; 0x41a <main+0xc>
		{
			String [i] = 0;
		}
		Recive_Data(String);
     422:	8f ec       	ldi	r24, 0xCF	; 207
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 98 06 	call	0xd30	; 0xd30 <Recive_Data>
		if (String[0] == 'M')
     42a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <String>
     42e:	8d 34       	cpi	r24, 0x4D	; 77
     430:	09 f0       	breq	.+2      	; 0x434 <main+0x26>
     432:	d2 c0       	rjmp	.+420    	; 0x5d8 <__stack+0x179>
		{
			val = get_int (String,'M');
     434:	6d e4       	ldi	r22, 0x4D	; 77
     436:	8f ec       	ldi	r24, 0xCF	; 207
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     43e:	7c 01       	movw	r14, r24
			if (val == 105)
     440:	89 e6       	ldi	r24, 0x69	; 105
     442:	e8 16       	cp	r14, r24
     444:	f1 04       	cpc	r15, r1
     446:	29 f4       	brne	.+10     	; 0x452 <main+0x44>
			{
				Transmit_Data("ok");
     448:	80 e7       	ldi	r24, 0x70	; 112
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     450:	78 c0       	rjmp	.+240    	; 0x542 <__stack+0xe3>
			}
			if (val == 104)
     452:	88 e6       	ldi	r24, 0x68	; 104
     454:	e8 16       	cp	r14, r24
     456:	f1 04       	cpc	r15, r1
     458:	b9 f5       	brne	.+110    	; 0x4c8 <__stack+0x69>
			{
				if (get_int (String,'T') == 0)
     45a:	64 e5       	ldi	r22, 0x54	; 84
     45c:	8f ec       	ldi	r24, 0xCF	; 207
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     464:	89 2b       	or	r24, r25
     466:	91 f4       	brne	.+36     	; 0x48c <__stack+0x2d>
				{
					SE1 = get_value(String,'S');
     468:	63 e5       	ldi	r22, 0x53	; 83
     46a:	8f ec       	ldi	r24, 0xCF	; 207
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     472:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <SE1>
     476:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <SE1+0x1>
     47a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <SE1+0x2>
     47e:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <SE1+0x3>
					Transmit_Data("ok");
     482:	80 e7       	ldi	r24, 0x70	; 112
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     48a:	71 c0       	rjmp	.+226    	; 0x56e <__stack+0x10f>
				}
				else if (get_int (String,'T') == 1)
     48c:	64 e5       	ldi	r22, 0x54	; 84
     48e:	8f ec       	ldi	r24, 0xCF	; 207
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	91 f4       	brne	.+36     	; 0x4be <__stack+0x5f>
				{
					SE2 = get_value(String,'S');
     49a:	63 e5       	ldi	r22, 0x53	; 83
     49c:	8f ec       	ldi	r24, 0xCF	; 207
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     4a4:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <SE2>
     4a8:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <SE2+0x1>
     4ac:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <SE2+0x2>
     4b0:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <SE2+0x3>
					Transmit_Data("ok");
     4b4:	80 e7       	ldi	r24, 0x70	; 112
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     4bc:	58 c0       	rjmp	.+176    	; 0x56e <__stack+0x10f>
				} 
				else
					Transmit_Data("error extruder temperature");
     4be:	83 e7       	ldi	r24, 0x73	; 115
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     4c6:	53 c0       	rjmp	.+166    	; 0x56e <__stack+0x10f>
			}
			if (val == 109)
     4c8:	8d e6       	ldi	r24, 0x6D	; 109
     4ca:	e8 16       	cp	r14, r24
     4cc:	f1 04       	cpc	r15, r1
     4ce:	c9 f5       	brne	.+114    	; 0x542 <__stack+0xe3>
			{
				while(pid_Controller(SE1,getTemp(T0), &pidData) >= 0 && pid_Controller(SE2,getTemp(T2), &pidData) >= 0 );
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     4d6:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     4da:	4b 01       	movw	r8, r22
     4dc:	5c 01       	movw	r10, r24
     4de:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <SE1>
     4e2:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <SE1+0x1>
     4e6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <SE1+0x2>
     4ea:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <SE1+0x3>
     4ee:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	47 e2       	ldi	r20, 0x27	; 39
     4f8:	51 e0       	ldi	r21, 0x01	; 1
     4fa:	b4 01       	movw	r22, r8
     4fc:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     500:	99 23       	and	r25, r25
     502:	d4 f0       	brlt	.+52     	; 0x538 <__stack+0xd9>
     504:	82 e5       	ldi	r24, 0x52	; 82
     506:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     50a:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     50e:	4b 01       	movw	r8, r22
     510:	5c 01       	movw	r10, r24
     512:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <SE2>
     516:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <SE2+0x1>
     51a:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <SE2+0x2>
     51e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <SE2+0x3>
     522:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	47 e2       	ldi	r20, 0x27	; 39
     52c:	51 e0       	ldi	r21, 0x01	; 1
     52e:	b4 01       	movw	r22, r8
     530:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     534:	99 23       	and	r25, r25
     536:	64 f6       	brge	.-104    	; 0x4d0 <__stack+0x71>
				Transmit_Data("ok");
     538:	80 e7       	ldi	r24, 0x70	; 112
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     540:	39 c0       	rjmp	.+114    	; 0x5b4 <__stack+0x155>
			}
			if (val == 140)
     542:	8c e8       	ldi	r24, 0x8C	; 140
     544:	e8 16       	cp	r14, r24
     546:	f1 04       	cpc	r15, r1
     548:	91 f4       	brne	.+36     	; 0x56e <__stack+0x10f>
			{
				SB = get_value(String,'S');
     54a:	63 e5       	ldi	r22, 0x53	; 83
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     554:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <SB>
     558:	70 93 c4 00 	sts	0x00C4, r23	; 0x8000c4 <SB+0x1>
     55c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <SB+0x2>
     560:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <SB+0x3>
				Transmit_Data("ok");
     564:	80 e7       	ldi	r24, 0x70	; 112
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     56c:	54 cf       	rjmp	.-344    	; 0x416 <main+0x8>
			}
			if (val == 190)
     56e:	8e eb       	ldi	r24, 0xBE	; 190
     570:	e8 16       	cp	r14, r24
     572:	f1 04       	cpc	r15, r1
     574:	f9 f4       	brne	.+62     	; 0x5b4 <__stack+0x155>
			{
				while(pid_Controller(SB,getTemp(T4), &pidData) >= 0 );
     576:	84 e5       	ldi	r24, 0x54	; 84
     578:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     57c:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     580:	6b 01       	movw	r12, r22
     582:	7c 01       	movw	r14, r24
     584:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <SB>
     588:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <SB+0x1>
     58c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <SB+0x2>
     590:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <SB+0x3>
     594:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	47 e2       	ldi	r20, 0x27	; 39
     59e:	51 e0       	ldi	r21, 0x01	; 1
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     5a6:	99 23       	and	r25, r25
     5a8:	34 f7       	brge	.-52     	; 0x576 <__stack+0x117>
				Transmit_Data("ok");
     5aa:	80 e7       	ldi	r24, 0x70	; 112
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     5b2:	31 cf       	rjmp	.-414    	; 0x416 <main+0x8>
			}
			if (val == 106)
     5b4:	8a e6       	ldi	r24, 0x6A	; 106
     5b6:	e8 16       	cp	r14, r24
     5b8:	f1 04       	cpc	r15, r1
     5ba:	09 f0       	breq	.+2      	; 0x5be <__stack+0x15f>
     5bc:	2c cf       	rjmp	.-424    	; 0x416 <main+0x8>
			{
				OCR2 = get_value(String,'S');
     5be:	63 e5       	ldi	r22, 0x53	; 83
     5c0:	8f ec       	ldi	r24, 0xCF	; 207
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     5c8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fixunssfsi>
     5cc:	63 bd       	out	0x23, r22	; 35
				Transmit_Data("ok");
     5ce:	80 e7       	ldi	r24, 0x70	; 112
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     5d6:	1f cf       	rjmp	.-450    	; 0x416 <main+0x8>
			}
		}
		else if (String[0] == 'G')
     5d8:	87 34       	cpi	r24, 0x47	; 71
     5da:	09 f0       	breq	.+2      	; 0x5de <__stack+0x17f>
     5dc:	1c cf       	rjmp	.-456    	; 0x416 <main+0x8>
		{
			val = get_int (String,'G');
     5de:	67 e4       	ldi	r22, 0x47	; 71
     5e0:	8f ec       	ldi	r24, 0xCF	; 207
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
			if (val == '1')
     5e8:	81 33       	cpi	r24, 0x31	; 49
     5ea:	91 05       	cpc	r25, r1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <__stack+0x191>
     5ee:	e0 c0       	rjmp	.+448    	; 0x7b0 <__stack+0x351>
			{
				value_1 = get_value(String,'X');           //extract first value
     5f0:	68 e5       	ldi	r22, 0x58	; 88
     5f2:	8f ec       	ldi	r24, 0xCF	; 207
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     5fa:	6b 01       	movw	r12, r22
     5fc:	7c 01       	movw	r14, r24
				value_2 = get_value(String,'Y'); //call function to extract second value
     5fe:	69 e5       	ldi	r22, 0x59	; 89
     600:	8f ec       	ldi	r24, 0xCF	; 207
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     608:	4b 01       	movw	r8, r22
     60a:	5c 01       	movw	r10, r24
				value_3 = get_value(String,'Z'); //call function to extract third value
     60c:	6a e5       	ldi	r22, 0x5A	; 90
     60e:	8f ec       	ldi	r24, 0xCF	; 207
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     616:	2b 01       	movw	r4, r22
     618:	3c 01       	movw	r6, r24
				E = get_value(String,'E');
     61a:	65 e4       	ldi	r22, 0x45	; 69
     61c:	8f ec       	ldi	r24, 0xCF	; 207
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     624:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <E>
     628:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <E+0x1>
     62c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <E+0x2>
     630:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <E+0x3>
				if ((E && value_1 && value_2 && value_3) == 0)
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     63e:	88 23       	and	r24, r24
     640:	09 f4       	brne	.+2      	; 0x644 <__stack+0x1e5>
     642:	b0 c1       	rjmp	.+864    	; 0x9a4 <__stack+0x545>
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	09 f4       	brne	.+2      	; 0x658 <__stack+0x1f9>
     656:	a6 c1       	rjmp	.+844    	; 0x9a4 <__stack+0x545>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	c5 01       	movw	r24, r10
     660:	b4 01       	movw	r22, r8
     662:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	09 f4       	brne	.+2      	; 0x66c <__stack+0x20d>
     66a:	9c c1       	rjmp	.+824    	; 0x9a4 <__stack+0x545>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	a9 01       	movw	r20, r18
     672:	c3 01       	movw	r24, r6
     674:	b2 01       	movw	r22, r4
     676:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     67a:	81 11       	cpse	r24, r1
     67c:	a1 c1       	rjmp	.+834    	; 0x9c0 <__stack+0x561>
     67e:	92 c1       	rjmp	.+804    	; 0x9a4 <__stack+0x545>
				{
					if (get_value(String,'F') != 0)
					{
						Fe = get_value(String,'F');
     680:	66 e4       	ldi	r22, 0x46	; 70
     682:	8f ec       	ldi	r24, 0xCF	; 207
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     68a:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <Fe>
     68e:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <Fe+0x1>
     692:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Fe+0x2>
     696:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <Fe+0x3>
     69a:	0d c0       	rjmp	.+26     	; 0x6b6 <__stack+0x257>
				} 
				else
				{
					if (get_value(String,'F') != 0)
					{
						F = get_value(String,'F');
     69c:	66 e4       	ldi	r22, 0x46	; 70
     69e:	8f ec       	ldi	r24, 0xCF	; 207
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6a6:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <F>
     6aa:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <F+0x1>
     6ae:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <F+0x2>
     6b2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <F+0x3>
					}
				}
				if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	48 e4       	ldi	r20, 0x48	; 72
     6bc:	53 e4       	ldi	r21, 0x43	; 67
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	0c f4       	brge	.+2      	; 0x6cc <__stack+0x26d>
     6ca:	a5 ce       	rjmp	.-694    	; 0x416 <main+0x8>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	48 e4       	ldi	r20, 0x48	; 72
     6d2:	53 e4       	ldi	r21, 0x43	; 67
     6d4:	c5 01       	movw	r24, r10
     6d6:	b4 01       	movw	r22, r8
     6d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     6dc:	18 16       	cp	r1, r24
     6de:	0c f4       	brge	.+2      	; 0x6e2 <__stack+0x283>
     6e0:	9a ce       	rjmp	.-716    	; 0x416 <main+0x8>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	4a ef       	ldi	r20, 0xFA	; 250
     6e8:	53 e4       	ldi	r21, 0x43	; 67
     6ea:	c3 01       	movw	r24, r6
     6ec:	b2 01       	movw	r22, r4
     6ee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f4       	brge	.+2      	; 0x6f8 <__stack+0x299>
     6f6:	8f ce       	rjmp	.-738    	; 0x416 <main+0x8>

				{
					x = sub_function (&old_val_1, value_1);     //call function to extract first step
     6f8:	b7 01       	movw	r22, r14
     6fa:	a6 01       	movw	r20, r12
     6fc:	8e e9       	ldi	r24, 0x9E	; 158
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     704:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <x>
     708:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <x+0x1>
     70c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <x+0x2>
     710:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <x+0x3>
					y = sub_function (&old_val_2, value_2);    //call function to extract second step
     714:	b5 01       	movw	r22, r10
     716:	a4 01       	movw	r20, r8
     718:	8a e9       	ldi	r24, 0x9A	; 154
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     720:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <y>
     724:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <y+0x1>
     728:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <y+0x2>
     72c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <y+0x3>
					z = sub_function (&old_val_3, value_3);    //call function to extract third step
     730:	b3 01       	movw	r22, r6
     732:	a2 01       	movw	r20, r4
     734:	86 e9       	ldi	r24, 0x96	; 150
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     73c:	2b 01       	movw	r4, r22
     73e:	3c 01       	movw	r6, r24
     740:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <z>
     744:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <z+0x1>
     748:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <z+0x2>
     74c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <z+0x3>
					value_1 = 0;
					value_2 = 0;
					value_3 = 0;
					while (!(x && y && z == 0));
     750:	c0 90 a3 00 	lds	r12, 0x00A3	; 0x8000a3 <x>
     754:	d0 90 a4 00 	lds	r13, 0x00A4	; 0x8000a4 <x+0x1>
     758:	e0 90 a5 00 	lds	r14, 0x00A5	; 0x8000a5 <x+0x2>
     75c:	f0 90 a6 00 	lds	r15, 0x00A6	; 0x8000a6 <x+0x3>
     760:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <y>
     764:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <y+0x1>
     768:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <y+0x2>
     76c:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <y+0x3>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	a9 01       	movw	r20, r18
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     77e:	88 23       	and	r24, r24
     780:	b9 f3       	breq	.-18     	; 0x770 <__stack+0x311>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	c5 01       	movw	r24, r10
     78a:	b4 01       	movw	r22, r8
     78c:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	71 f3       	breq	.-36     	; 0x770 <__stack+0x311>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	a9 01       	movw	r20, r18
     79a:	c3 01       	movw	r24, r6
     79c:	b2 01       	movw	r22, r4
     79e:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     7a2:	81 11       	cpse	r24, r1
     7a4:	e5 cf       	rjmp	.-54     	; 0x770 <__stack+0x311>
					Transmit_Data("ok");
     7a6:	80 e7       	ldi	r24, 0x70	; 112
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     7ae:	33 ce       	rjmp	.-922    	; 0x416 <main+0x8>
				}
				}
				if (val == '0')
     7b0:	c0 97       	sbiw	r24, 0x30	; 48
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <__stack+0x357>
     7b4:	30 ce       	rjmp	.-928    	; 0x416 <main+0x8>
				{
					value_1 = get_value(String,'X');           //extract first value
     7b6:	68 e5       	ldi	r22, 0x58	; 88
     7b8:	8f ec       	ldi	r24, 0xCF	; 207
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7c0:	6b 01       	movw	r12, r22
     7c2:	7c 01       	movw	r14, r24
					value_2 = get_value(String,'Y'); //call function to extract second value
     7c4:	69 e5       	ldi	r22, 0x59	; 89
     7c6:	8f ec       	ldi	r24, 0xCF	; 207
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7ce:	4b 01       	movw	r8, r22
     7d0:	5c 01       	movw	r10, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
     7d2:	6a e5       	ldi	r22, 0x5A	; 90
     7d4:	8f ec       	ldi	r24, 0xCF	; 207
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7dc:	2b 01       	movw	r4, r22
     7de:	3c 01       	movw	r6, r24
					E = get_value(String,'E');
     7e0:	65 e4       	ldi	r22, 0x45	; 69
     7e2:	8f ec       	ldi	r24, 0xCF	; 207
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7ea:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <E>
     7ee:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <E+0x1>
     7f2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <E+0x2>
     7f6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <E+0x3>
					if ((E && value_1 && value_2 && value_3) == 0)
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	a9 01       	movw	r20, r18
     800:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     804:	88 23       	and	r24, r24
     806:	09 f4       	brne	.+2      	; 0x80a <__stack+0x3ab>
     808:	e9 c0       	rjmp	.+466    	; 0x9dc <__stack+0x57d>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	a9 01       	movw	r20, r18
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <__stack+0x3bf>
     81c:	df c0       	rjmp	.+446    	; 0x9dc <__stack+0x57d>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	a9 01       	movw	r20, r18
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <__stack+0x3d3>
     830:	d5 c0       	rjmp	.+426    	; 0x9dc <__stack+0x57d>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	a9 01       	movw	r20, r18
     838:	c3 01       	movw	r24, r6
     83a:	b2 01       	movw	r22, r4
     83c:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     840:	81 11       	cpse	r24, r1
     842:	0e c0       	rjmp	.+28     	; 0x860 <__stack+0x401>
     844:	cb c0       	rjmp	.+406    	; 0x9dc <__stack+0x57d>
					{
						if (get_value(String,'F') != 0)
						{
							F = get_value(String,'F');
     846:	66 e4       	ldi	r22, 0x46	; 70
     848:	8f ec       	ldi	r24, 0xCF	; 207
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     850:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <F>
     854:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <F+0x1>
     858:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <F+0x2>
     85c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <F+0x3>
						}
					}
					if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	46 ed       	ldi	r20, 0xD6	; 214
     866:	52 e4       	ldi	r21, 0x42	; 66
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     870:	18 16       	cp	r1, r24
     872:	0c f4       	brge	.+2      	; 0x876 <__stack+0x417>
     874:	92 c0       	rjmp	.+292    	; 0x99a <__stack+0x53b>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	46 ed       	ldi	r20, 0xD6	; 214
     87c:	52 e4       	ldi	r21, 0x42	; 66
     87e:	c5 01       	movw	r24, r10
     880:	b4 01       	movw	r22, r8
     882:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     886:	18 16       	cp	r1, r24
     888:	0c f4       	brge	.+2      	; 0x88c <__stack+0x42d>
     88a:	87 c0       	rjmp	.+270    	; 0x99a <__stack+0x53b>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	4a ef       	ldi	r20, 0xFA	; 250
     892:	53 e4       	ldi	r21, 0x43	; 67
     894:	c3 01       	movw	r24, r6
     896:	b2 01       	movw	r22, r4
     898:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     89c:	18 16       	cp	r1, r24
     89e:	0c f4       	brge	.+2      	; 0x8a2 <__stack+0x443>
     8a0:	7c c0       	rjmp	.+248    	; 0x99a <__stack+0x53b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	46 ed       	ldi	r20, 0xD6	; 214
     8a8:	52 ec       	ldi	r21, 0xC2	; 194
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     8b2:	88 23       	and	r24, r24
     8b4:	0c f4       	brge	.+2      	; 0x8b8 <__stack+0x459>
     8b6:	71 c0       	rjmp	.+226    	; 0x99a <__stack+0x53b>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	46 ed       	ldi	r20, 0xD6	; 214
     8be:	52 ec       	ldi	r21, 0xC2	; 194
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	0c f4       	brge	.+2      	; 0x8ce <__stack+0x46f>
     8cc:	66 c0       	rjmp	.+204    	; 0x99a <__stack+0x53b>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	a9 01       	movw	r20, r18
     8d4:	c3 01       	movw	r24, r6
     8d6:	b2 01       	movw	r22, r4
     8d8:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     8dc:	88 23       	and	r24, r24
     8de:	0c f4       	brge	.+2      	; 0x8e2 <__stack+0x483>
     8e0:	5c c0       	rjmp	.+184    	; 0x99a <__stack+0x53b>

					{
						x = sub_function (&old_val_1, value_1);     //call function to extract first step
     8e2:	b7 01       	movw	r22, r14
     8e4:	a6 01       	movw	r20, r12
     8e6:	8e e9       	ldi	r24, 0x9E	; 158
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     8ee:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <x>
     8f2:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <x+0x1>
     8f6:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <x+0x2>
     8fa:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <x+0x3>
						y = sub_function (&old_val_2, value_2);    //call function to extract second step
     8fe:	b5 01       	movw	r22, r10
     900:	a4 01       	movw	r20, r8
     902:	8a e9       	ldi	r24, 0x9A	; 154
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     90a:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <y>
     90e:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <y+0x1>
     912:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <y+0x2>
     916:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <y+0x3>
						z = sub_function (&old_val_3, value_3);    //call function to extract third step
     91a:	b3 01       	movw	r22, r6
     91c:	a2 01       	movw	r20, r4
     91e:	86 e9       	ldi	r24, 0x96	; 150
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
     92a:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <z>
     92e:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <z+0x1>
     932:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <z+0x2>
     936:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <z+0x3>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						while (!(x && y && z == 0));
     93a:	c0 90 a3 00 	lds	r12, 0x00A3	; 0x8000a3 <x>
     93e:	d0 90 a4 00 	lds	r13, 0x00A4	; 0x8000a4 <x+0x1>
     942:	e0 90 a5 00 	lds	r14, 0x00A5	; 0x8000a5 <x+0x2>
     946:	f0 90 a6 00 	lds	r15, 0x00A6	; 0x8000a6 <x+0x3>
     94a:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <y>
     94e:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <y+0x1>
     952:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <y+0x2>
     956:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <y+0x3>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     968:	88 23       	and	r24, r24
     96a:	b9 f3       	breq	.-18     	; 0x95a <__stack+0x4fb>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	a9 01       	movw	r20, r18
     972:	c5 01       	movw	r24, r10
     974:	b4 01       	movw	r22, r8
     976:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	71 f3       	breq	.-36     	; 0x95a <__stack+0x4fb>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	a9 01       	movw	r20, r18
     984:	c3 01       	movw	r24, r6
     986:	b2 01       	movw	r22, r4
     988:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     98c:	81 11       	cpse	r24, r1
     98e:	e5 cf       	rjmp	.-54     	; 0x95a <__stack+0x4fb>
						Transmit_Data("ok");
     990:	80 e7       	ldi	r24, 0x70	; 112
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     998:	3e cd       	rjmp	.-1412   	; 0x416 <main+0x8>
					}
				else
				Transmit_Data("error");
     99a:	8e e8       	ldi	r24, 0x8E	; 142
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 89 06 	call	0xd12	; 0xd12 <Transmit_Data>
     9a2:	39 cd       	rjmp	.-1422   	; 0x416 <main+0x8>
				value_2 = get_value(String,'Y'); //call function to extract second value
				value_3 = get_value(String,'Z'); //call function to extract third value
				E = get_value(String,'E');
				if ((E && value_1 && value_2 && value_3) == 0)
				{
					if (get_value(String,'F') != 0)
     9a4:	66 e4       	ldi	r22, 0x46	; 70
     9a6:	8f ec       	ldi	r24, 0xCF	; 207
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	a9 01       	movw	r20, r18
     9b4:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0x55f>
     9bc:	7c ce       	rjmp	.-776    	; 0x6b6 <__stack+0x257>
     9be:	60 ce       	rjmp	.-832    	; 0x680 <__stack+0x221>
						Fe = get_value(String,'F');
					}
				} 
				else
				{
					if (get_value(String,'F') != 0)
     9c0:	66 e4       	ldi	r22, 0x46	; 70
     9c2:	8f ec       	ldi	r24, 0xCF	; 207
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	a9 01       	movw	r20, r18
     9d0:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <__stack+0x57b>
     9d8:	6e ce       	rjmp	.-804    	; 0x6b6 <__stack+0x257>
     9da:	60 ce       	rjmp	.-832    	; 0x69c <__stack+0x23d>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					E = get_value(String,'E');
					if ((E && value_1 && value_2 && value_3) == 0)
					{
						if (get_value(String,'F') != 0)
     9dc:	66 e4       	ldi	r22, 0x46	; 70
     9de:	8f ec       	ldi	r24, 0xCF	; 207
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	a9 01       	movw	r20, r18
     9ec:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0x597>
     9f4:	35 cf       	rjmp	.-406    	; 0x860 <__stack+0x401>
     9f6:	27 cf       	rjmp	.-434    	; 0x846 <__stack+0x3e7>

000009f8 <__vector_9>:
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	Tc = T - 273.15;
	return (Tc);
}
ISR(TIMER0_OVF_vect)
{
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
	static uint16_t i = 0;

	if (i < TIME_INTERVAL) 
     a26:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     a2a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     a2e:	8d 39       	cpi	r24, 0x9D	; 157
     a30:	91 05       	cpc	r25, r1
     a32:	30 f4       	brcc	.+12     	; 0xa40 <__vector_9+0x48>
	{
		i++;
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
     a3a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__vector_9+0x5a>
		} else {
		gFlags.pidTimer = 1;
     a40:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <gFlags>
		i               = 0;
     a4a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     a4e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
	}

	if (gFlags.pidTimer == 1) 
     a52:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     a56:	80 ff       	sbrs	r24, 0
     a58:	5a c0       	rjmp	.+180    	; 0xb0e <__vector_9+0x116>
	{
		OCR0 =	255 - pid_Controller(SE1,getTemp(T0), &pidData);
     a5a:	80 e5       	ldi	r24, 0x50	; 80
     a5c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     a60:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
     a68:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <SE1>
     a6c:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <SE1+0x1>
     a70:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <SE1+0x2>
     a74:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <SE1+0x3>
     a78:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	47 e2       	ldi	r20, 0x27	; 39
     a82:	51 e0       	ldi	r21, 0x01	; 1
     a84:	b6 01       	movw	r22, r12
     a86:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     a8a:	80 95       	com	r24
     a8c:	8c bf       	out	0x3c, r24	; 60
		OCR1A = 255 - pid_Controller(SE2,getTemp(T2), &pidData);
     a8e:	82 e5       	ldi	r24, 0x52	; 82
     a90:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     a94:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     a98:	6b 01       	movw	r12, r22
     a9a:	7c 01       	movw	r14, r24
     a9c:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <SE2>
     aa0:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <SE2+0x1>
     aa4:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <SE2+0x2>
     aa8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <SE2+0x3>
     aac:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	47 e2       	ldi	r20, 0x27	; 39
     ab6:	51 e0       	ldi	r21, 0x01	; 1
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     abe:	cf ef       	ldi	r28, 0xFF	; 255
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
     ac2:	9e 01       	movw	r18, r28
     ac4:	28 1b       	sub	r18, r24
     ac6:	39 0b       	sbc	r19, r25
     ac8:	3b bd       	out	0x2b, r19	; 43
     aca:	2a bd       	out	0x2a, r18	; 42
		OCR1B = 255 - pid_Controller(SB,getTemp(T3), &pidData);
     acc:	83 e5       	ldi	r24, 0x53	; 83
     ace:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     ad2:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     ad6:	6b 01       	movw	r12, r22
     ad8:	7c 01       	movw	r14, r24
     ada:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <SB>
     ade:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <SB+0x1>
     ae2:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <SB+0x2>
     ae6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <SB+0x3>
     aea:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	47 e2       	ldi	r20, 0x27	; 39
     af4:	51 e0       	ldi	r21, 0x01	; 1
     af6:	b6 01       	movw	r22, r12
     af8:	0e 94 cb 05 	call	0xb96	; 0xb96 <pid_Controller>
     afc:	c8 1b       	sub	r28, r24
     afe:	d9 0b       	sbc	r29, r25
     b00:	d9 bd       	out	0x29, r29	; 41
     b02:	c8 bd       	out	0x28, r28	; 40
		gFlags.pidTimer = FALSE;
     b04:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     b08:	8e 7f       	andi	r24, 0xFE	; 254
     b0a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <gFlags>
	}

	

     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <pid_Init>:
 *  \param i_factor  Integral term.
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	fb 01       	movw	r30, r22
     b42:	e9 01       	movw	r28, r18
	// Start values for PID controller
	pid->sumError         = 0;
     b44:	1a 82       	std	Y+2, r1	; 0x02
     b46:	1b 82       	std	Y+3, r1	; 0x03
     b48:	1c 82       	std	Y+4, r1	; 0x04
     b4a:	1d 82       	std	Y+5, r1	; 0x05
	pid->lastProcessValue = 0;
     b4c:	19 82       	std	Y+1, r1	; 0x01
     b4e:	18 82       	st	Y, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
     b50:	9f 83       	std	Y+7, r25	; 0x07
     b52:	8e 83       	std	Y+6, r24	; 0x06
	pid->I_Factor = i_factor;
     b54:	79 87       	std	Y+9, r23	; 0x09
     b56:	68 87       	std	Y+8, r22	; 0x08
	pid->D_Factor = d_factor;
     b58:	5b 87       	std	Y+11, r21	; 0x0b
     b5a:	4a 87       	std	Y+10, r20	; 0x0a
	// Limits to avoid overflow
	pid->maxError    = MAX_INT / (pid->P_Factor + 1);
     b5c:	bc 01       	movw	r22, r24
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f e7       	ldi	r25, 0x7F	; 127
     b66:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     b6a:	7d 87       	std	Y+13, r23	; 0x0d
     b6c:	6c 87       	std	Y+12, r22	; 0x0c
	pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
     b6e:	9f 01       	movw	r18, r30
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	03 2e       	mov	r0, r19
     b76:	00 0c       	add	r0, r0
     b78:	44 0b       	sbc	r20, r20
     b7a:	55 0b       	sbc	r21, r21
     b7c:	6f ef       	ldi	r22, 0xFF	; 255
     b7e:	7f ef       	ldi	r23, 0xFF	; 255
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	9f e3       	ldi	r25, 0x3F	; 63
     b84:	0e 94 8a 09 	call	0x1314	; 0x1314 <__divmodsi4>
     b88:	2e 87       	std	Y+14, r18	; 0x0e
     b8a:	3f 87       	std	Y+15, r19	; 0x0f
     b8c:	48 8b       	std	Y+16, r20	; 0x10
     b8e:	59 8b       	std	Y+17, r21	; 0x11
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	8b 01       	movw	r16, r22
     ba4:	fa 01       	movw	r30, r20
	int16_t errors, p_term, d_term;
	int32_t i_term, ret, temp;

	errors = setPoint - processValue;
     ba6:	86 1b       	sub	r24, r22
     ba8:	97 0b       	sbc	r25, r23

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
     baa:	24 85       	ldd	r18, Z+12	; 0x0c
     bac:	35 85       	ldd	r19, Z+13	; 0x0d
     bae:	28 17       	cp	r18, r24
     bb0:	39 07       	cpc	r19, r25
     bb2:	84 f0       	brlt	.+32     	; 0xbd4 <pid_Controller+0x3e>
		p_term = MAX_INT;
	} else if (errors < -pid_st->maxError) {
     bb4:	31 95       	neg	r19
     bb6:	21 95       	neg	r18
     bb8:	31 09       	sbc	r19, r1
     bba:	82 17       	cp	r24, r18
     bbc:	93 07       	cpc	r25, r19
     bbe:	6c f0       	brlt	.+26     	; 0xbda <pid_Controller+0x44>
		p_term = -MAX_INT;
	} else {
		p_term = pid_st->P_Factor * errors;
     bc0:	26 81       	ldd	r18, Z+6	; 0x06
     bc2:	37 81       	ldd	r19, Z+7	; 0x07
     bc4:	82 9f       	mul	r24, r18
     bc6:	e0 01       	movw	r28, r0
     bc8:	83 9f       	mul	r24, r19
     bca:	d0 0d       	add	r29, r0
     bcc:	92 9f       	mul	r25, r18
     bce:	d0 0d       	add	r29, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <pid_Controller+0x48>

	errors = setPoint - processValue;

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
		p_term = MAX_INT;
     bd4:	cf ef       	ldi	r28, 0xFF	; 255
     bd6:	df e7       	ldi	r29, 0x7F	; 127
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <pid_Controller+0x48>
	} else if (errors < -pid_st->maxError) {
		p_term = -MAX_INT;
     bda:	c1 e0       	ldi	r28, 0x01	; 1
     bdc:	d0 e8       	ldi	r29, 0x80	; 128
	} else {
		p_term = pid_st->P_Factor * errors;
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
     bde:	09 2e       	mov	r0, r25
     be0:	00 0c       	add	r0, r0
     be2:	aa 0b       	sbc	r26, r26
     be4:	bb 0b       	sbc	r27, r27
     be6:	42 81       	ldd	r20, Z+2	; 0x02
     be8:	53 81       	ldd	r21, Z+3	; 0x03
     bea:	64 81       	ldd	r22, Z+4	; 0x04
     bec:	75 81       	ldd	r23, Z+5	; 0x05
     bee:	9a 01       	movw	r18, r20
     bf0:	ab 01       	movw	r20, r22
     bf2:	28 0f       	add	r18, r24
     bf4:	39 1f       	adc	r19, r25
     bf6:	4a 1f       	adc	r20, r26
     bf8:	5b 1f       	adc	r21, r27
	if (temp > pid_st->maxSumError) {
     bfa:	86 85       	ldd	r24, Z+14	; 0x0e
     bfc:	97 85       	ldd	r25, Z+15	; 0x0f
     bfe:	a0 89       	ldd	r26, Z+16	; 0x10
     c00:	b1 89       	ldd	r27, Z+17	; 0x11
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
     c06:	a4 07       	cpc	r26, r20
     c08:	b5 07       	cpc	r27, r21
     c0a:	4c f4       	brge	.+18     	; 0xc1e <pid_Controller+0x88>
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
     c0c:	82 83       	std	Z+2, r24	; 0x02
     c0e:	93 83       	std	Z+3, r25	; 0x03
     c10:	a4 83       	std	Z+4, r26	; 0x04
     c12:	b5 83       	std	Z+5, r27	; 0x05
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
     c14:	6f ef       	ldi	r22, 0xFF	; 255
     c16:	7f ef       	ldi	r23, 0xFF	; 255
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	9f e3       	ldi	r25, 0x3F	; 63
     c1c:	1d c0       	rjmp	.+58     	; 0xc58 <pid_Controller+0xc2>
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
     c1e:	b0 95       	com	r27
     c20:	a0 95       	com	r26
     c22:	90 95       	com	r25
     c24:	81 95       	neg	r24
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	af 4f       	sbci	r26, 0xFF	; 255
     c2a:	bf 4f       	sbci	r27, 0xFF	; 255
     c2c:	28 17       	cp	r18, r24
     c2e:	39 07       	cpc	r19, r25
     c30:	4a 07       	cpc	r20, r26
     c32:	5b 07       	cpc	r21, r27
     c34:	4c f4       	brge	.+18     	; 0xc48 <pid_Controller+0xb2>
		i_term           = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
     c36:	82 83       	std	Z+2, r24	; 0x02
     c38:	93 83       	std	Z+3, r25	; 0x03
     c3a:	a4 83       	std	Z+4, r26	; 0x04
     c3c:	b5 83       	std	Z+5, r27	; 0x05
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
		i_term           = -MAX_I_TERM;
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 ec       	ldi	r25, 0xC0	; 192
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <pid_Controller+0xc2>
		pid_st->sumError = -pid_st->maxSumError;
	} else {
		pid_st->sumError = temp;
     c48:	22 83       	std	Z+2, r18	; 0x02
     c4a:	33 83       	std	Z+3, r19	; 0x03
     c4c:	44 83       	std	Z+4, r20	; 0x04
     c4e:	55 83       	std	Z+5, r21	; 0x05
		i_term           = pid_st->I_Factor * pid_st->sumError;
     c50:	a0 85       	ldd	r26, Z+8	; 0x08
     c52:	b1 85       	ldd	r27, Z+9	; 0x09
     c54:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulshisi3>
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	20 1b       	sub	r18, r16
     c5e:	31 0b       	sbc	r19, r17
     c60:	a2 85       	ldd	r26, Z+10	; 0x0a
     c62:	b3 85       	ldd	r27, Z+11	; 0x0b
     c64:	2a 9f       	mul	r18, r26
     c66:	70 01       	movw	r14, r0
     c68:	2b 9f       	mul	r18, r27
     c6a:	f0 0c       	add	r15, r0
     c6c:	3a 9f       	mul	r19, r26
     c6e:	f0 0c       	add	r15, r0
     c70:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
     c72:	11 83       	std	Z+1, r17	; 0x01
     c74:	00 83       	st	Z, r16

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     c76:	8e 01       	movw	r16, r28
     c78:	dd 0f       	add	r29, r29
     c7a:	22 0b       	sbc	r18, r18
     c7c:	33 0b       	sbc	r19, r19
     c7e:	ab 01       	movw	r20, r22
     c80:	bc 01       	movw	r22, r24
     c82:	40 0f       	add	r20, r16
     c84:	51 1f       	adc	r21, r17
     c86:	62 1f       	adc	r22, r18
     c88:	73 1f       	adc	r23, r19
     c8a:	c7 01       	movw	r24, r14
     c8c:	ff 0c       	add	r15, r15
     c8e:	aa 0b       	sbc	r26, r26
     c90:	bb 0b       	sbc	r27, r27
     c92:	48 0f       	add	r20, r24
     c94:	59 1f       	adc	r21, r25
     c96:	6a 1f       	adc	r22, r26
     c98:	7b 1f       	adc	r23, r27
     c9a:	db 01       	movw	r26, r22
     c9c:	ca 01       	movw	r24, r20
     c9e:	77 23       	and	r23, r23
     ca0:	24 f4       	brge	.+8      	; 0xcaa <pid_Controller+0x114>
     ca2:	81 58       	subi	r24, 0x81	; 129
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	af 4f       	sbci	r26, 0xFF	; 255
     ca8:	bf 4f       	sbci	r27, 0xFF	; 255
     caa:	68 94       	set
     cac:	16 f8       	bld	r1, 6
     cae:	b5 95       	asr	r27
     cb0:	a7 95       	ror	r26
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	16 94       	lsr	r1
     cb8:	d1 f7       	brne	.-12     	; 0xcae <pid_Controller+0x118>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	20 e8       	ldi	r18, 0x80	; 128
     cbe:	92 07       	cpc	r25, r18
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	a2 07       	cpc	r26, r18
     cc4:	b2 07       	cpc	r27, r18
     cc6:	24 f4       	brge	.+8      	; 0xcd0 <pid_Controller+0x13a>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e8       	ldi	r25, 0x80	; 128
     ccc:	af ef       	ldi	r26, 0xFF	; 255
     cce:	bf ef       	ldi	r27, 0xFF	; 255
		ret = MAX_INT;
	} else if (ret < -MAX_INT) {
		ret = -MAX_INT;
	}

	return ((int16_t)ret);
     cd0:	81 15       	cp	r24, r1
     cd2:	20 e8       	ldi	r18, 0x80	; 128
     cd4:	92 07       	cpc	r25, r18
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	24 f0       	brlt	.+8      	; 0xce4 <pid_Controller+0x14e>
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	9f e7       	ldi	r25, 0x7F	; 127
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <UART_INIT>:

void UART_INIT()
{
	long t;
	t =Crystal();
	UBRRL =  (uint8_t) (t);
     cf2:	87 e6       	ldi	r24, 0x67	; 103
     cf4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(t>>8);
     cf6:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
     cf8:	88 e1       	ldi	r24, 0x18	; 24
     cfa:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
     cfc:	86 e8       	ldi	r24, 0x86	; 134
     cfe:	80 bd       	out	0x20, r24	; 32
     d00:	08 95       	ret

00000d02 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (!(UCSRA & (1<<5)));    //waits until 'bin 5' equal to 1, becomes Empty.
     d02:	5d 9b       	sbis	0x0b, 5	; 11
     d04:	fe cf       	rjmp	.-4      	; 0xd02 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
     d06:	8c b9       	out	0x0c, r24	; 12
     d08:	08 95       	ret

00000d0a <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
     d0a:	5f 9b       	sbis	0x0b, 7	; 11
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <Recive_Char>
	return(UDR); 
     d0e:	8c b1       	in	r24, 0x0c	; 12
}
     d10:	08 95       	ret

00000d12 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ec 01       	movw	r28, r24
	while(*ptr_string)
     d18:	88 81       	ld	r24, Y
     d1a:	88 23       	and	r24, r24
     d1c:	31 f0       	breq	.+12     	; 0xd2a <Transmit_Data+0x18>
     d1e:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
     d20:	0e 94 81 06 	call	0xd02	; 0xd02 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
     d24:	89 91       	ld	r24, Y+
     d26:	81 11       	cpse	r24, r1
     d28:	fb cf       	rjmp	.-10     	; 0xd20 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
     d38:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
     d3a:	0e 94 85 06 	call	0xd0a	; 0xd0a <Recive_Char>
	 		if(( ch == '\n') || (ch == '\r')) //read till enter key is pressed
     d3e:	8a 30       	cpi	r24, 0x0A	; 10
     d40:	11 f0       	breq	.+4      	; 0xd46 <Recive_Data+0x16>
     d42:	8d 30       	cpi	r24, 0x0D	; 13
     d44:	31 f4       	brne	.+12     	; 0xd52 <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
     d46:	f8 01       	movw	r30, r16
     d48:	ec 0f       	add	r30, r28
     d4a:	f1 1d       	adc	r31, r1
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
     d52:	f8 01       	movw	r30, r16
     d54:	ec 0f       	add	r30, r28
     d56:	f1 1d       	adc	r31, r1
     d58:	80 83       	st	Z, r24
     d5a:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
     d5c:	ee cf       	rjmp	.-36     	; 0xd3a <Recive_Data+0xa>
}
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <__subsf3>:
     d66:	50 58       	subi	r21, 0x80	; 128

00000d68 <__addsf3>:
     d68:	bb 27       	eor	r27, r27
     d6a:	aa 27       	eor	r26, r26
     d6c:	0e 94 cb 06 	call	0xd96	; 0xd96 <__addsf3x>
     d70:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
     d74:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_pscA>
     d78:	38 f0       	brcs	.+14     	; 0xd88 <__addsf3+0x20>
     d7a:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_pscB>
     d7e:	20 f0       	brcs	.+8      	; 0xd88 <__addsf3+0x20>
     d80:	39 f4       	brne	.+14     	; 0xd90 <__addsf3+0x28>
     d82:	9f 3f       	cpi	r25, 0xFF	; 255
     d84:	19 f4       	brne	.+6      	; 0xd8c <__addsf3+0x24>
     d86:	26 f4       	brtc	.+8      	; 0xd90 <__addsf3+0x28>
     d88:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_nan>
     d8c:	0e f4       	brtc	.+2      	; 0xd90 <__addsf3+0x28>
     d8e:	e0 95       	com	r30
     d90:	e7 fb       	bst	r30, 7
     d92:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>

00000d96 <__addsf3x>:
     d96:	e9 2f       	mov	r30, r25
     d98:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_split3>
     d9c:	58 f3       	brcs	.-42     	; 0xd74 <__addsf3+0xc>
     d9e:	ba 17       	cp	r27, r26
     da0:	62 07       	cpc	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	95 07       	cpc	r25, r21
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__addsf3x+0x1c>
     daa:	79 f4       	brne	.+30     	; 0xdca <__addsf3x+0x34>
     dac:	a6 f5       	brtc	.+104    	; 0xe16 <__addsf3x+0x80>
     dae:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_zero>
     db2:	0e f4       	brtc	.+2      	; 0xdb6 <__addsf3x+0x20>
     db4:	e0 95       	com	r30
     db6:	0b 2e       	mov	r0, r27
     db8:	ba 2f       	mov	r27, r26
     dba:	a0 2d       	mov	r26, r0
     dbc:	0b 01       	movw	r0, r22
     dbe:	b9 01       	movw	r22, r18
     dc0:	90 01       	movw	r18, r0
     dc2:	0c 01       	movw	r0, r24
     dc4:	ca 01       	movw	r24, r20
     dc6:	a0 01       	movw	r20, r0
     dc8:	11 24       	eor	r1, r1
     dca:	ff 27       	eor	r31, r31
     dcc:	59 1b       	sub	r21, r25
     dce:	99 f0       	breq	.+38     	; 0xdf6 <__addsf3x+0x60>
     dd0:	59 3f       	cpi	r21, 0xF9	; 249
     dd2:	50 f4       	brcc	.+20     	; 0xde8 <__addsf3x+0x52>
     dd4:	50 3e       	cpi	r21, 0xE0	; 224
     dd6:	68 f1       	brcs	.+90     	; 0xe32 <__addsf3x+0x9c>
     dd8:	1a 16       	cp	r1, r26
     dda:	f0 40       	sbci	r31, 0x00	; 0
     ddc:	a2 2f       	mov	r26, r18
     dde:	23 2f       	mov	r18, r19
     de0:	34 2f       	mov	r19, r20
     de2:	44 27       	eor	r20, r20
     de4:	58 5f       	subi	r21, 0xF8	; 248
     de6:	f3 cf       	rjmp	.-26     	; 0xdce <__addsf3x+0x38>
     de8:	46 95       	lsr	r20
     dea:	37 95       	ror	r19
     dec:	27 95       	ror	r18
     dee:	a7 95       	ror	r26
     df0:	f0 40       	sbci	r31, 0x00	; 0
     df2:	53 95       	inc	r21
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__addsf3x+0x52>
     df6:	7e f4       	brtc	.+30     	; 0xe16 <__addsf3x+0x80>
     df8:	1f 16       	cp	r1, r31
     dfa:	ba 0b       	sbc	r27, r26
     dfc:	62 0b       	sbc	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba f0       	brmi	.+46     	; 0xe32 <__addsf3x+0x9c>
     e04:	91 50       	subi	r25, 0x01	; 1
     e06:	a1 f0       	breq	.+40     	; 0xe30 <__addsf3x+0x9a>
     e08:	ff 0f       	add	r31, r31
     e0a:	bb 1f       	adc	r27, r27
     e0c:	66 1f       	adc	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	88 1f       	adc	r24, r24
     e12:	c2 f7       	brpl	.-16     	; 0xe04 <__addsf3x+0x6e>
     e14:	0e c0       	rjmp	.+28     	; 0xe32 <__addsf3x+0x9c>
     e16:	ba 0f       	add	r27, r26
     e18:	62 1f       	adc	r22, r18
     e1a:	73 1f       	adc	r23, r19
     e1c:	84 1f       	adc	r24, r20
     e1e:	48 f4       	brcc	.+18     	; 0xe32 <__addsf3x+0x9c>
     e20:	87 95       	ror	r24
     e22:	77 95       	ror	r23
     e24:	67 95       	ror	r22
     e26:	b7 95       	ror	r27
     e28:	f7 95       	ror	r31
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <__addsf3x+0x9a>
     e2e:	b0 cf       	rjmp	.-160    	; 0xd90 <__addsf3+0x28>
     e30:	93 95       	inc	r25
     e32:	88 0f       	add	r24, r24
     e34:	08 f0       	brcs	.+2      	; 0xe38 <__addsf3x+0xa2>
     e36:	99 27       	eor	r25, r25
     e38:	ee 0f       	add	r30, r30
     e3a:	97 95       	ror	r25
     e3c:	87 95       	ror	r24
     e3e:	08 95       	ret

00000e40 <__cmpsf2>:
     e40:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_cmp>
     e44:	08 f4       	brcc	.+2      	; 0xe48 <__cmpsf2+0x8>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	08 95       	ret

00000e4a <__divsf3>:
     e4a:	0e 94 39 07 	call	0xe72	; 0xe72 <__divsf3x>
     e4e:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
     e52:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_pscB>
     e56:	58 f0       	brcs	.+22     	; 0xe6e <__divsf3+0x24>
     e58:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_pscA>
     e5c:	40 f0       	brcs	.+16     	; 0xe6e <__divsf3+0x24>
     e5e:	29 f4       	brne	.+10     	; 0xe6a <__divsf3+0x20>
     e60:	5f 3f       	cpi	r21, 0xFF	; 255
     e62:	29 f0       	breq	.+10     	; 0xe6e <__divsf3+0x24>
     e64:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>
     e68:	51 11       	cpse	r21, r1
     e6a:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_szero>
     e6e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_nan>

00000e72 <__divsf3x>:
     e72:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_split3>
     e76:	68 f3       	brcs	.-38     	; 0xe52 <__divsf3+0x8>

00000e78 <__divsf3_pse>:
     e78:	99 23       	and	r25, r25
     e7a:	b1 f3       	breq	.-20     	; 0xe68 <__divsf3+0x1e>
     e7c:	55 23       	and	r21, r21
     e7e:	91 f3       	breq	.-28     	; 0xe64 <__divsf3+0x1a>
     e80:	95 1b       	sub	r25, r21
     e82:	55 0b       	sbc	r21, r21
     e84:	bb 27       	eor	r27, r27
     e86:	aa 27       	eor	r26, r26
     e88:	62 17       	cp	r22, r18
     e8a:	73 07       	cpc	r23, r19
     e8c:	84 07       	cpc	r24, r20
     e8e:	38 f0       	brcs	.+14     	; 0xe9e <__divsf3_pse+0x26>
     e90:	9f 5f       	subi	r25, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	44 1f       	adc	r20, r20
     e9a:	aa 1f       	adc	r26, r26
     e9c:	a9 f3       	breq	.-22     	; 0xe88 <__divsf3_pse+0x10>
     e9e:	35 d0       	rcall	.+106    	; 0xf0a <__divsf3_pse+0x92>
     ea0:	0e 2e       	mov	r0, r30
     ea2:	3a f0       	brmi	.+14     	; 0xeb2 <__divsf3_pse+0x3a>
     ea4:	e0 e8       	ldi	r30, 0x80	; 128
     ea6:	32 d0       	rcall	.+100    	; 0xf0c <__divsf3_pse+0x94>
     ea8:	91 50       	subi	r25, 0x01	; 1
     eaa:	50 40       	sbci	r21, 0x00	; 0
     eac:	e6 95       	lsr	r30
     eae:	00 1c       	adc	r0, r0
     eb0:	ca f7       	brpl	.-14     	; 0xea4 <__divsf3_pse+0x2c>
     eb2:	2b d0       	rcall	.+86     	; 0xf0a <__divsf3_pse+0x92>
     eb4:	fe 2f       	mov	r31, r30
     eb6:	29 d0       	rcall	.+82     	; 0xf0a <__divsf3_pse+0x92>
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	88 1f       	adc	r24, r24
     ebe:	bb 1f       	adc	r27, r27
     ec0:	26 17       	cp	r18, r22
     ec2:	37 07       	cpc	r19, r23
     ec4:	48 07       	cpc	r20, r24
     ec6:	ab 07       	cpc	r26, r27
     ec8:	b0 e8       	ldi	r27, 0x80	; 128
     eca:	09 f0       	breq	.+2      	; 0xece <__divsf3_pse+0x56>
     ecc:	bb 0b       	sbc	r27, r27
     ece:	80 2d       	mov	r24, r0
     ed0:	bf 01       	movw	r22, r30
     ed2:	ff 27       	eor	r31, r31
     ed4:	93 58       	subi	r25, 0x83	; 131
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	3a f0       	brmi	.+14     	; 0xee8 <__divsf3_pse+0x70>
     eda:	9e 3f       	cpi	r25, 0xFE	; 254
     edc:	51 05       	cpc	r21, r1
     ede:	78 f0       	brcs	.+30     	; 0xefe <__divsf3_pse+0x86>
     ee0:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>
     ee4:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_szero>
     ee8:	5f 3f       	cpi	r21, 0xFF	; 255
     eea:	e4 f3       	brlt	.-8      	; 0xee4 <__divsf3_pse+0x6c>
     eec:	98 3e       	cpi	r25, 0xE8	; 232
     eee:	d4 f3       	brlt	.-12     	; 0xee4 <__divsf3_pse+0x6c>
     ef0:	86 95       	lsr	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b7 95       	ror	r27
     ef8:	f7 95       	ror	r31
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	c9 f7       	brne	.-14     	; 0xef0 <__divsf3_pse+0x78>
     efe:	88 0f       	add	r24, r24
     f00:	91 1d       	adc	r25, r1
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	97 f9       	bld	r25, 7
     f08:	08 95       	ret
     f0a:	e1 e0       	ldi	r30, 0x01	; 1
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	bb 1f       	adc	r27, r27
     f14:	62 17       	cp	r22, r18
     f16:	73 07       	cpc	r23, r19
     f18:	84 07       	cpc	r24, r20
     f1a:	ba 07       	cpc	r27, r26
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__divsf3_pse+0xae>
     f1e:	62 1b       	sub	r22, r18
     f20:	73 0b       	sbc	r23, r19
     f22:	84 0b       	sbc	r24, r20
     f24:	ba 0b       	sbc	r27, r26
     f26:	ee 1f       	adc	r30, r30
     f28:	88 f7       	brcc	.-30     	; 0xf0c <__divsf3_pse+0x94>
     f2a:	e0 95       	com	r30
     f2c:	08 95       	ret

00000f2e <__fixsfsi>:
     f2e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fixunssfsi>
     f32:	68 94       	set
     f34:	b1 11       	cpse	r27, r1
     f36:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_szero>
     f3a:	08 95       	ret

00000f3c <__fixunssfsi>:
     f3c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_splitA>
     f40:	88 f0       	brcs	.+34     	; 0xf64 <__fixunssfsi+0x28>
     f42:	9f 57       	subi	r25, 0x7F	; 127
     f44:	98 f0       	brcs	.+38     	; 0xf6c <__fixunssfsi+0x30>
     f46:	b9 2f       	mov	r27, r25
     f48:	99 27       	eor	r25, r25
     f4a:	b7 51       	subi	r27, 0x17	; 23
     f4c:	b0 f0       	brcs	.+44     	; 0xf7a <__fixunssfsi+0x3e>
     f4e:	e1 f0       	breq	.+56     	; 0xf88 <__fixunssfsi+0x4c>
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	1a f0       	brmi	.+6      	; 0xf60 <__fixunssfsi+0x24>
     f5a:	ba 95       	dec	r27
     f5c:	c9 f7       	brne	.-14     	; 0xf50 <__fixunssfsi+0x14>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <__fixunssfsi+0x4c>
     f60:	b1 30       	cpi	r27, 0x01	; 1
     f62:	91 f0       	breq	.+36     	; 0xf88 <__fixunssfsi+0x4c>
     f64:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__fp_zero>
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	08 95       	ret
     f6c:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_zero>
     f70:	67 2f       	mov	r22, r23
     f72:	78 2f       	mov	r23, r24
     f74:	88 27       	eor	r24, r24
     f76:	b8 5f       	subi	r27, 0xF8	; 248
     f78:	39 f0       	breq	.+14     	; 0xf88 <__fixunssfsi+0x4c>
     f7a:	b9 3f       	cpi	r27, 0xF9	; 249
     f7c:	cc f3       	brlt	.-14     	; 0xf70 <__fixunssfsi+0x34>
     f7e:	86 95       	lsr	r24
     f80:	77 95       	ror	r23
     f82:	67 95       	ror	r22
     f84:	b3 95       	inc	r27
     f86:	d9 f7       	brne	.-10     	; 0xf7e <__fixunssfsi+0x42>
     f88:	3e f4       	brtc	.+14     	; 0xf98 <__fixunssfsi+0x5c>
     f8a:	90 95       	com	r25
     f8c:	80 95       	com	r24
     f8e:	70 95       	com	r23
     f90:	61 95       	neg	r22
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__floatunsisf>:
     f9a:	e8 94       	clt
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <__floatsisf+0x12>

00000f9e <__floatsisf>:
     f9e:	97 fb       	bst	r25, 7
     fa0:	3e f4       	brtc	.+14     	; 0xfb0 <__floatsisf+0x12>
     fa2:	90 95       	com	r25
     fa4:	80 95       	com	r24
     fa6:	70 95       	com	r23
     fa8:	61 95       	neg	r22
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	99 23       	and	r25, r25
     fb2:	a9 f0       	breq	.+42     	; 0xfde <__floatsisf+0x40>
     fb4:	f9 2f       	mov	r31, r25
     fb6:	96 e9       	ldi	r25, 0x96	; 150
     fb8:	bb 27       	eor	r27, r27
     fba:	93 95       	inc	r25
     fbc:	f6 95       	lsr	r31
     fbe:	87 95       	ror	r24
     fc0:	77 95       	ror	r23
     fc2:	67 95       	ror	r22
     fc4:	b7 95       	ror	r27
     fc6:	f1 11       	cpse	r31, r1
     fc8:	f8 cf       	rjmp	.-16     	; 0xfba <__floatsisf+0x1c>
     fca:	fa f4       	brpl	.+62     	; 0x100a <__floatsisf+0x6c>
     fcc:	bb 0f       	add	r27, r27
     fce:	11 f4       	brne	.+4      	; 0xfd4 <__floatsisf+0x36>
     fd0:	60 ff       	sbrs	r22, 0
     fd2:	1b c0       	rjmp	.+54     	; 0x100a <__floatsisf+0x6c>
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	16 c0       	rjmp	.+44     	; 0x100a <__floatsisf+0x6c>
     fde:	88 23       	and	r24, r24
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <__floatsisf+0x48>
     fe2:	96 e9       	ldi	r25, 0x96	; 150
     fe4:	11 c0       	rjmp	.+34     	; 0x1008 <__floatsisf+0x6a>
     fe6:	77 23       	and	r23, r23
     fe8:	21 f0       	breq	.+8      	; 0xff2 <__floatsisf+0x54>
     fea:	9e e8       	ldi	r25, 0x8E	; 142
     fec:	87 2f       	mov	r24, r23
     fee:	76 2f       	mov	r23, r22
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <__floatsisf+0x5e>
     ff2:	66 23       	and	r22, r22
     ff4:	71 f0       	breq	.+28     	; 0x1012 <__floatsisf+0x74>
     ff6:	96 e8       	ldi	r25, 0x86	; 134
     ff8:	86 2f       	mov	r24, r22
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	2a f0       	brmi	.+10     	; 0x100a <__floatsisf+0x6c>
    1000:	9a 95       	dec	r25
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	da f7       	brpl	.-10     	; 0x1000 <__floatsisf+0x62>
    100a:	88 0f       	add	r24, r24
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__fp_cmp>:
    1014:	99 0f       	add	r25, r25
    1016:	00 08       	sbc	r0, r0
    1018:	55 0f       	add	r21, r21
    101a:	aa 0b       	sbc	r26, r26
    101c:	e0 e8       	ldi	r30, 0x80	; 128
    101e:	fe ef       	ldi	r31, 0xFE	; 254
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	e8 07       	cpc	r30, r24
    1026:	f9 07       	cpc	r31, r25
    1028:	c0 f0       	brcs	.+48     	; 0x105a <__fp_cmp+0x46>
    102a:	12 16       	cp	r1, r18
    102c:	13 06       	cpc	r1, r19
    102e:	e4 07       	cpc	r30, r20
    1030:	f5 07       	cpc	r31, r21
    1032:	98 f0       	brcs	.+38     	; 0x105a <__fp_cmp+0x46>
    1034:	62 1b       	sub	r22, r18
    1036:	73 0b       	sbc	r23, r19
    1038:	84 0b       	sbc	r24, r20
    103a:	95 0b       	sbc	r25, r21
    103c:	39 f4       	brne	.+14     	; 0x104c <__fp_cmp+0x38>
    103e:	0a 26       	eor	r0, r26
    1040:	61 f0       	breq	.+24     	; 0x105a <__fp_cmp+0x46>
    1042:	23 2b       	or	r18, r19
    1044:	24 2b       	or	r18, r20
    1046:	25 2b       	or	r18, r21
    1048:	21 f4       	brne	.+8      	; 0x1052 <__fp_cmp+0x3e>
    104a:	08 95       	ret
    104c:	0a 26       	eor	r0, r26
    104e:	09 f4       	brne	.+2      	; 0x1052 <__fp_cmp+0x3e>
    1050:	a1 40       	sbci	r26, 0x01	; 1
    1052:	a6 95       	lsr	r26
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	81 1d       	adc	r24, r1
    1058:	81 1d       	adc	r24, r1
    105a:	08 95       	ret

0000105c <__fp_inf>:
    105c:	97 f9       	bld	r25, 7
    105e:	9f 67       	ori	r25, 0x7F	; 127
    1060:	80 e8       	ldi	r24, 0x80	; 128
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	08 95       	ret

00001068 <__fp_nan>:
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	80 ec       	ldi	r24, 0xC0	; 192
    106c:	08 95       	ret

0000106e <__fp_pscA>:
    106e:	00 24       	eor	r0, r0
    1070:	0a 94       	dec	r0
    1072:	16 16       	cp	r1, r22
    1074:	17 06       	cpc	r1, r23
    1076:	18 06       	cpc	r1, r24
    1078:	09 06       	cpc	r0, r25
    107a:	08 95       	ret

0000107c <__fp_pscB>:
    107c:	00 24       	eor	r0, r0
    107e:	0a 94       	dec	r0
    1080:	12 16       	cp	r1, r18
    1082:	13 06       	cpc	r1, r19
    1084:	14 06       	cpc	r1, r20
    1086:	05 06       	cpc	r0, r21
    1088:	08 95       	ret

0000108a <__fp_round>:
    108a:	09 2e       	mov	r0, r25
    108c:	03 94       	inc	r0
    108e:	00 0c       	add	r0, r0
    1090:	11 f4       	brne	.+4      	; 0x1096 <__fp_round+0xc>
    1092:	88 23       	and	r24, r24
    1094:	52 f0       	brmi	.+20     	; 0x10aa <__fp_round+0x20>
    1096:	bb 0f       	add	r27, r27
    1098:	40 f4       	brcc	.+16     	; 0x10aa <__fp_round+0x20>
    109a:	bf 2b       	or	r27, r31
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__fp_round+0x18>
    109e:	60 ff       	sbrs	r22, 0
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__fp_round+0x20>
    10a2:	6f 5f       	subi	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	08 95       	ret

000010ac <__fp_split3>:
    10ac:	57 fd       	sbrc	r21, 7
    10ae:	90 58       	subi	r25, 0x80	; 128
    10b0:	44 0f       	add	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	59 f0       	breq	.+22     	; 0x10cc <__fp_splitA+0x10>
    10b6:	5f 3f       	cpi	r21, 0xFF	; 255
    10b8:	71 f0       	breq	.+28     	; 0x10d6 <__fp_splitA+0x1a>
    10ba:	47 95       	ror	r20

000010bc <__fp_splitA>:
    10bc:	88 0f       	add	r24, r24
    10be:	97 fb       	bst	r25, 7
    10c0:	99 1f       	adc	r25, r25
    10c2:	61 f0       	breq	.+24     	; 0x10dc <__fp_splitA+0x20>
    10c4:	9f 3f       	cpi	r25, 0xFF	; 255
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <__fp_splitA+0x2a>
    10c8:	87 95       	ror	r24
    10ca:	08 95       	ret
    10cc:	12 16       	cp	r1, r18
    10ce:	13 06       	cpc	r1, r19
    10d0:	14 06       	cpc	r1, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	f2 cf       	rjmp	.-28     	; 0x10ba <__fp_split3+0xe>
    10d6:	46 95       	lsr	r20
    10d8:	f1 df       	rcall	.-30     	; 0x10bc <__fp_splitA>
    10da:	08 c0       	rjmp	.+16     	; 0x10ec <__fp_splitA+0x30>
    10dc:	16 16       	cp	r1, r22
    10de:	17 06       	cpc	r1, r23
    10e0:	18 06       	cpc	r1, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	f1 cf       	rjmp	.-30     	; 0x10c8 <__fp_splitA+0xc>
    10e6:	86 95       	lsr	r24
    10e8:	71 05       	cpc	r23, r1
    10ea:	61 05       	cpc	r22, r1
    10ec:	08 94       	sec
    10ee:	08 95       	ret

000010f0 <__fp_zero>:
    10f0:	e8 94       	clt

000010f2 <__fp_szero>:
    10f2:	bb 27       	eor	r27, r27
    10f4:	66 27       	eor	r22, r22
    10f6:	77 27       	eor	r23, r23
    10f8:	cb 01       	movw	r24, r22
    10fa:	97 f9       	bld	r25, 7
    10fc:	08 95       	ret

000010fe <__gesf2>:
    10fe:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_cmp>
    1102:	08 f4       	brcc	.+2      	; 0x1106 <__gesf2+0x8>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	08 95       	ret
    1108:	16 f0       	brts	.+4      	; 0x110e <__gesf2+0x10>
    110a:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_mpack>
    110e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_nan>
    1112:	68 94       	set
    1114:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>

00001118 <log>:
    1118:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_splitA>
    111c:	a8 f3       	brcs	.-22     	; 0x1108 <__gesf2+0xa>
    111e:	99 23       	and	r25, r25
    1120:	c1 f3       	breq	.-16     	; 0x1112 <__gesf2+0x14>
    1122:	ae f3       	brts	.-22     	; 0x110e <__gesf2+0x10>
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	1f 93       	push	r17
    112a:	0f 93       	push	r16
    112c:	ff 92       	push	r15
    112e:	c9 2f       	mov	r28, r25
    1130:	dd 27       	eor	r29, r29
    1132:	88 23       	and	r24, r24
    1134:	2a f0       	brmi	.+10     	; 0x1140 <log+0x28>
    1136:	21 97       	sbiw	r28, 0x01	; 1
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	da f7       	brpl	.-10     	; 0x1136 <log+0x1e>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f eb       	ldi	r21, 0xBF	; 191
    1148:	9f e3       	ldi	r25, 0x3F	; 63
    114a:	88 39       	cpi	r24, 0x98	; 152
    114c:	20 f0       	brcs	.+8      	; 0x1156 <log+0x3e>
    114e:	80 3e       	cpi	r24, 0xE0	; 224
    1150:	38 f0       	brcs	.+14     	; 0x1160 <log+0x48>
    1152:	21 96       	adiw	r28, 0x01	; 1
    1154:	8f 77       	andi	r24, 0x7F	; 127
    1156:	0e 94 b4 06 	call	0xd68	; 0xd68 <__addsf3>
    115a:	e4 e5       	ldi	r30, 0x54	; 84
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <log+0x50>
    1160:	0e 94 b4 06 	call	0xd68	; 0xd68 <__addsf3>
    1164:	e1 e8       	ldi	r30, 0x81	; 129
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	0e 94 4f 09 	call	0x129e	; 0x129e <__fp_powser>
    116c:	8b 01       	movw	r16, r22
    116e:	be 01       	movw	r22, r28
    1170:	ec 01       	movw	r28, r24
    1172:	fb 2e       	mov	r15, r27
    1174:	6f 57       	subi	r22, 0x7F	; 127
    1176:	71 09       	sbc	r23, r1
    1178:	75 95       	asr	r23
    117a:	77 1f       	adc	r23, r23
    117c:	88 0b       	sbc	r24, r24
    117e:	99 0b       	sbc	r25, r25
    1180:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__floatsisf>
    1184:	28 e1       	ldi	r18, 0x18	; 24
    1186:	32 e7       	ldi	r19, 0x72	; 114
    1188:	41 e3       	ldi	r20, 0x31	; 49
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    1190:	af 2d       	mov	r26, r15
    1192:	98 01       	movw	r18, r16
    1194:	ae 01       	movw	r20, r28
    1196:	ff 90       	pop	r15
    1198:	0f 91       	pop	r16
    119a:	1f 91       	pop	r17
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	0e 94 cb 06 	call	0xd96	; 0xd96 <__addsf3x>
    11a4:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>

000011a8 <__mulsf3>:
    11a8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    11ac:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
    11b0:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_pscA>
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <__mulsf3+0x1c>
    11b6:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_pscB>
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__mulsf3+0x1c>
    11bc:	95 23       	and	r25, r21
    11be:	11 f0       	breq	.+4      	; 0x11c4 <__mulsf3+0x1c>
    11c0:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>
    11c4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_nan>
    11c8:	11 24       	eor	r1, r1
    11ca:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_szero>

000011ce <__mulsf3x>:
    11ce:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_split3>
    11d2:	70 f3       	brcs	.-36     	; 0x11b0 <__mulsf3+0x8>

000011d4 <__mulsf3_pse>:
    11d4:	95 9f       	mul	r25, r21
    11d6:	c1 f3       	breq	.-16     	; 0x11c8 <__mulsf3+0x20>
    11d8:	95 0f       	add	r25, r21
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	55 1f       	adc	r21, r21
    11de:	62 9f       	mul	r22, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	72 9f       	mul	r23, r18
    11e4:	bb 27       	eor	r27, r27
    11e6:	f0 0d       	add	r31, r0
    11e8:	b1 1d       	adc	r27, r1
    11ea:	63 9f       	mul	r22, r19
    11ec:	aa 27       	eor	r26, r26
    11ee:	f0 0d       	add	r31, r0
    11f0:	b1 1d       	adc	r27, r1
    11f2:	aa 1f       	adc	r26, r26
    11f4:	64 9f       	mul	r22, r20
    11f6:	66 27       	eor	r22, r22
    11f8:	b0 0d       	add	r27, r0
    11fa:	a1 1d       	adc	r26, r1
    11fc:	66 1f       	adc	r22, r22
    11fe:	82 9f       	mul	r24, r18
    1200:	22 27       	eor	r18, r18
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	62 1f       	adc	r22, r18
    1208:	73 9f       	mul	r23, r19
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	62 1f       	adc	r22, r18
    1210:	83 9f       	mul	r24, r19
    1212:	a0 0d       	add	r26, r0
    1214:	61 1d       	adc	r22, r1
    1216:	22 1f       	adc	r18, r18
    1218:	74 9f       	mul	r23, r20
    121a:	33 27       	eor	r19, r19
    121c:	a0 0d       	add	r26, r0
    121e:	61 1d       	adc	r22, r1
    1220:	23 1f       	adc	r18, r19
    1222:	84 9f       	mul	r24, r20
    1224:	60 0d       	add	r22, r0
    1226:	21 1d       	adc	r18, r1
    1228:	82 2f       	mov	r24, r18
    122a:	76 2f       	mov	r23, r22
    122c:	6a 2f       	mov	r22, r26
    122e:	11 24       	eor	r1, r1
    1230:	9f 57       	subi	r25, 0x7F	; 127
    1232:	50 40       	sbci	r21, 0x00	; 0
    1234:	9a f0       	brmi	.+38     	; 0x125c <__mulsf3_pse+0x88>
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__mulsf3_pse+0xa0>
    1238:	88 23       	and	r24, r24
    123a:	4a f0       	brmi	.+18     	; 0x124e <__mulsf3_pse+0x7a>
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	bb 1f       	adc	r27, r27
    1242:	66 1f       	adc	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	50 40       	sbci	r21, 0x00	; 0
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__mulsf3_pse+0x64>
    124e:	9e 3f       	cpi	r25, 0xFE	; 254
    1250:	51 05       	cpc	r21, r1
    1252:	80 f0       	brcs	.+32     	; 0x1274 <__mulsf3_pse+0xa0>
    1254:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_inf>
    1258:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_szero>
    125c:	5f 3f       	cpi	r21, 0xFF	; 255
    125e:	e4 f3       	brlt	.-8      	; 0x1258 <__mulsf3_pse+0x84>
    1260:	98 3e       	cpi	r25, 0xE8	; 232
    1262:	d4 f3       	brlt	.-12     	; 0x1258 <__mulsf3_pse+0x84>
    1264:	86 95       	lsr	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	b7 95       	ror	r27
    126c:	f7 95       	ror	r31
    126e:	e7 95       	ror	r30
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	c1 f7       	brne	.-16     	; 0x1264 <__mulsf3_pse+0x90>
    1274:	fe 2b       	or	r31, r30
    1276:	88 0f       	add	r24, r24
    1278:	91 1d       	adc	r25, r1
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <__fp_mpack>:
    1282:	9f 3f       	cpi	r25, 0xFF	; 255
    1284:	31 f0       	breq	.+12     	; 0x1292 <__fp_mpack_finite+0xc>

00001286 <__fp_mpack_finite>:
    1286:	91 50       	subi	r25, 0x01	; 1
    1288:	20 f4       	brcc	.+8      	; 0x1292 <__fp_mpack_finite+0xc>
    128a:	87 95       	ror	r24
    128c:	77 95       	ror	r23
    128e:	67 95       	ror	r22
    1290:	b7 95       	ror	r27
    1292:	88 0f       	add	r24, r24
    1294:	91 1d       	adc	r25, r1
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <__fp_powser>:
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	1f 93       	push	r17
    12a4:	0f 93       	push	r16
    12a6:	ff 92       	push	r15
    12a8:	ef 92       	push	r14
    12aa:	df 92       	push	r13
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	68 94       	set
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <__fp_powser+0x22>
    12b4:	da 2e       	mov	r13, r26
    12b6:	ef 01       	movw	r28, r30
    12b8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    12bc:	fe 01       	movw	r30, r28
    12be:	e8 94       	clt
    12c0:	a5 91       	lpm	r26, Z+
    12c2:	25 91       	lpm	r18, Z+
    12c4:	35 91       	lpm	r19, Z+
    12c6:	45 91       	lpm	r20, Z+
    12c8:	55 91       	lpm	r21, Z+
    12ca:	a6 f3       	brts	.-24     	; 0x12b4 <__fp_powser+0x16>
    12cc:	ef 01       	movw	r28, r30
    12ce:	0e 94 cb 06 	call	0xd96	; 0xd96 <__addsf3x>
    12d2:	fe 01       	movw	r30, r28
    12d4:	97 01       	movw	r18, r14
    12d6:	a8 01       	movw	r20, r16
    12d8:	da 94       	dec	r13
    12da:	69 f7       	brne	.-38     	; 0x12b6 <__fp_powser+0x18>
    12dc:	df 90       	pop	r13
    12de:	ef 90       	pop	r14
    12e0:	ff 90       	pop	r15
    12e2:	0f 91       	pop	r16
    12e4:	1f 91       	pop	r17
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <__divmodhi4>:
    12ec:	97 fb       	bst	r25, 7
    12ee:	07 2e       	mov	r0, r23
    12f0:	16 f4       	brtc	.+4      	; 0x12f6 <__divmodhi4+0xa>
    12f2:	00 94       	com	r0
    12f4:	07 d0       	rcall	.+14     	; 0x1304 <__divmodhi4_neg1>
    12f6:	77 fd       	sbrc	r23, 7
    12f8:	09 d0       	rcall	.+18     	; 0x130c <__divmodhi4_neg2>
    12fa:	0e 94 b1 09 	call	0x1362	; 0x1362 <__udivmodhi4>
    12fe:	07 fc       	sbrc	r0, 7
    1300:	05 d0       	rcall	.+10     	; 0x130c <__divmodhi4_neg2>
    1302:	3e f4       	brtc	.+14     	; 0x1312 <__divmodhi4_exit>

00001304 <__divmodhi4_neg1>:
    1304:	90 95       	com	r25
    1306:	81 95       	neg	r24
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__divmodhi4_neg2>:
    130c:	70 95       	com	r23
    130e:	61 95       	neg	r22
    1310:	7f 4f       	sbci	r23, 0xFF	; 255

00001312 <__divmodhi4_exit>:
    1312:	08 95       	ret

00001314 <__divmodsi4>:
    1314:	05 2e       	mov	r0, r21
    1316:	97 fb       	bst	r25, 7
    1318:	1e f4       	brtc	.+6      	; 0x1320 <__divmodsi4+0xc>
    131a:	00 94       	com	r0
    131c:	0e 94 a1 09 	call	0x1342	; 0x1342 <__negsi2>
    1320:	57 fd       	sbrc	r21, 7
    1322:	07 d0       	rcall	.+14     	; 0x1332 <__divmodsi4_neg2>
    1324:	0e 94 c5 09 	call	0x138a	; 0x138a <__udivmodsi4>
    1328:	07 fc       	sbrc	r0, 7
    132a:	03 d0       	rcall	.+6      	; 0x1332 <__divmodsi4_neg2>
    132c:	4e f4       	brtc	.+18     	; 0x1340 <__divmodsi4_exit>
    132e:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__negsi2>

00001332 <__divmodsi4_neg2>:
    1332:	50 95       	com	r21
    1334:	40 95       	com	r20
    1336:	30 95       	com	r19
    1338:	21 95       	neg	r18
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	4f 4f       	sbci	r20, 0xFF	; 255
    133e:	5f 4f       	sbci	r21, 0xFF	; 255

00001340 <__divmodsi4_exit>:
    1340:	08 95       	ret

00001342 <__negsi2>:
    1342:	90 95       	com	r25
    1344:	80 95       	com	r24
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__mulshisi3>:
    1352:	b7 ff       	sbrs	r27, 7
    1354:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__muluhisi3>

00001358 <__mulohisi3>:
    1358:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__muluhisi3>
    135c:	82 1b       	sub	r24, r18
    135e:	93 0b       	sbc	r25, r19
    1360:	08 95       	ret

00001362 <__udivmodhi4>:
    1362:	aa 1b       	sub	r26, r26
    1364:	bb 1b       	sub	r27, r27
    1366:	51 e1       	ldi	r21, 0x11	; 17
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <__udivmodhi4_ep>

0000136a <__udivmodhi4_loop>:
    136a:	aa 1f       	adc	r26, r26
    136c:	bb 1f       	adc	r27, r27
    136e:	a6 17       	cp	r26, r22
    1370:	b7 07       	cpc	r27, r23
    1372:	10 f0       	brcs	.+4      	; 0x1378 <__udivmodhi4_ep>
    1374:	a6 1b       	sub	r26, r22
    1376:	b7 0b       	sbc	r27, r23

00001378 <__udivmodhi4_ep>:
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	5a 95       	dec	r21
    137e:	a9 f7       	brne	.-22     	; 0x136a <__udivmodhi4_loop>
    1380:	80 95       	com	r24
    1382:	90 95       	com	r25
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	08 95       	ret

0000138a <__udivmodsi4>:
    138a:	a1 e2       	ldi	r26, 0x21	; 33
    138c:	1a 2e       	mov	r1, r26
    138e:	aa 1b       	sub	r26, r26
    1390:	bb 1b       	sub	r27, r27
    1392:	fd 01       	movw	r30, r26
    1394:	0d c0       	rjmp	.+26     	; 0x13b0 <__udivmodsi4_ep>

00001396 <__udivmodsi4_loop>:
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	ee 1f       	adc	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	a2 17       	cp	r26, r18
    13a0:	b3 07       	cpc	r27, r19
    13a2:	e4 07       	cpc	r30, r20
    13a4:	f5 07       	cpc	r31, r21
    13a6:	20 f0       	brcs	.+8      	; 0x13b0 <__udivmodsi4_ep>
    13a8:	a2 1b       	sub	r26, r18
    13aa:	b3 0b       	sbc	r27, r19
    13ac:	e4 0b       	sbc	r30, r20
    13ae:	f5 0b       	sbc	r31, r21

000013b0 <__udivmodsi4_ep>:
    13b0:	66 1f       	adc	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	1a 94       	dec	r1
    13ba:	69 f7       	brne	.-38     	; 0x1396 <__udivmodsi4_loop>
    13bc:	60 95       	com	r22
    13be:	70 95       	com	r23
    13c0:	80 95       	com	r24
    13c2:	90 95       	com	r25
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	bd 01       	movw	r22, r26
    13ca:	cf 01       	movw	r24, r30
    13cc:	08 95       	ret

000013ce <__muluhisi3>:
    13ce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__umulhisi3>
    13d2:	a5 9f       	mul	r26, r21
    13d4:	90 0d       	add	r25, r0
    13d6:	b4 9f       	mul	r27, r20
    13d8:	90 0d       	add	r25, r0
    13da:	a4 9f       	mul	r26, r20
    13dc:	80 0d       	add	r24, r0
    13de:	91 1d       	adc	r25, r1
    13e0:	11 24       	eor	r1, r1
    13e2:	08 95       	ret

000013e4 <__umulhisi3>:
    13e4:	a2 9f       	mul	r26, r18
    13e6:	b0 01       	movw	r22, r0
    13e8:	b3 9f       	mul	r27, r19
    13ea:	c0 01       	movw	r24, r0
    13ec:	a3 9f       	mul	r26, r19
    13ee:	70 0d       	add	r23, r0
    13f0:	81 1d       	adc	r24, r1
    13f2:	11 24       	eor	r1, r1
    13f4:	91 1d       	adc	r25, r1
    13f6:	b2 9f       	mul	r27, r18
    13f8:	70 0d       	add	r23, r0
    13fa:	81 1d       	adc	r24, r1
    13fc:	11 24       	eor	r1, r1
    13fe:	91 1d       	adc	r25, r1
    1400:	08 95       	ret

00001402 <atof>:
    1402:	66 27       	eor	r22, r22
    1404:	77 27       	eor	r23, r23
    1406:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <strtod>

0000140a <atoi>:
    140a:	fc 01       	movw	r30, r24
    140c:	88 27       	eor	r24, r24
    140e:	99 27       	eor	r25, r25
    1410:	e8 94       	clt
    1412:	21 91       	ld	r18, Z+
    1414:	20 32       	cpi	r18, 0x20	; 32
    1416:	e9 f3       	breq	.-6      	; 0x1412 <atoi+0x8>
    1418:	29 30       	cpi	r18, 0x09	; 9
    141a:	10 f0       	brcs	.+4      	; 0x1420 <atoi+0x16>
    141c:	2e 30       	cpi	r18, 0x0E	; 14
    141e:	c8 f3       	brcs	.-14     	; 0x1412 <atoi+0x8>
    1420:	2b 32       	cpi	r18, 0x2B	; 43
    1422:	41 f0       	breq	.+16     	; 0x1434 <atoi+0x2a>
    1424:	2d 32       	cpi	r18, 0x2D	; 45
    1426:	39 f4       	brne	.+14     	; 0x1436 <atoi+0x2c>
    1428:	68 94       	set
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <atoi+0x2a>
    142c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulhi_const_10>
    1430:	82 0f       	add	r24, r18
    1432:	91 1d       	adc	r25, r1
    1434:	21 91       	ld	r18, Z+
    1436:	20 53       	subi	r18, 0x30	; 48
    1438:	2a 30       	cpi	r18, 0x0A	; 10
    143a:	c0 f3       	brcs	.-16     	; 0x142c <atoi+0x22>
    143c:	1e f4       	brtc	.+6      	; 0x1444 <atoi+0x3a>
    143e:	90 95       	com	r25
    1440:	81 95       	neg	r24
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	08 95       	ret

00001446 <__mulhi_const_10>:
    1446:	7a e0       	ldi	r23, 0x0A	; 10
    1448:	97 9f       	mul	r25, r23
    144a:	90 2d       	mov	r25, r0
    144c:	87 9f       	mul	r24, r23
    144e:	80 2d       	mov	r24, r0
    1450:	91 0d       	add	r25, r1
    1452:	11 24       	eor	r1, r1
    1454:	08 95       	ret

00001456 <strtod>:
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e1 e3       	ldi	r30, 0x31	; 49
    145c:	fa e0       	ldi	r31, 0x0A	; 10
    145e:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0xc>
    1462:	ec 01       	movw	r28, r24
    1464:	6b 01       	movw	r12, r22
    1466:	61 15       	cp	r22, r1
    1468:	71 05       	cpc	r23, r1
    146a:	19 f0       	breq	.+6      	; 0x1472 <strtod+0x1c>
    146c:	fb 01       	movw	r30, r22
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	7e 01       	movw	r14, r28
    1474:	ff ef       	ldi	r31, 0xFF	; 255
    1476:	ef 1a       	sub	r14, r31
    1478:	ff 0a       	sbc	r15, r31
    147a:	08 81       	ld	r16, Y
    147c:	80 2f       	mov	r24, r16
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <isspace>
    1484:	89 2b       	or	r24, r25
    1486:	11 f0       	breq	.+4      	; 0x148c <strtod+0x36>
    1488:	e7 01       	movw	r28, r14
    148a:	f3 cf       	rjmp	.-26     	; 0x1472 <strtod+0x1c>
    148c:	0d 32       	cpi	r16, 0x2D	; 45
    148e:	39 f4       	brne	.+14     	; 0x149e <strtod+0x48>
    1490:	7e 01       	movw	r14, r28
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	e8 0e       	add	r14, r24
    1496:	f1 1c       	adc	r15, r1
    1498:	09 81       	ldd	r16, Y+1	; 0x01
    149a:	11 e0       	ldi	r17, 0x01	; 1
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <strtod+0x58>
    149e:	0b 32       	cpi	r16, 0x2B	; 43
    14a0:	29 f4       	brne	.+10     	; 0x14ac <strtod+0x56>
    14a2:	7e 01       	movw	r14, r28
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	e9 0e       	add	r14, r25
    14a8:	f1 1c       	adc	r15, r1
    14aa:	09 81       	ldd	r16, Y+1	; 0x01
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	e7 01       	movw	r28, r14
    14b0:	21 97       	sbiw	r28, 0x01	; 1
    14b2:	43 e0       	ldi	r20, 0x03	; 3
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	66 eb       	ldi	r22, 0xB6	; 182
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	0e 94 82 0b 	call	0x1704	; 0x1704 <strncasecmp_P>
    14c0:	89 2b       	or	r24, r25
    14c2:	c1 f4       	brne	.+48     	; 0x14f4 <strtod+0x9e>
    14c4:	23 96       	adiw	r28, 0x03	; 3
    14c6:	45 e0       	ldi	r20, 0x05	; 5
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	61 eb       	ldi	r22, 0xB1	; 177
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	ce 01       	movw	r24, r28
    14d0:	0e 94 82 0b 	call	0x1704	; 0x1704 <strncasecmp_P>
    14d4:	89 2b       	or	r24, r25
    14d6:	09 f4       	brne	.+2      	; 0x14da <strtod+0x84>
    14d8:	25 96       	adiw	r28, 0x05	; 5
    14da:	c1 14       	cp	r12, r1
    14dc:	d1 04       	cpc	r13, r1
    14de:	19 f0       	breq	.+6      	; 0x14e6 <strtod+0x90>
    14e0:	f6 01       	movw	r30, r12
    14e2:	d1 83       	std	Z+1, r29	; 0x01
    14e4:	c0 83       	st	Z, r28
    14e6:	11 11       	cpse	r17, r1
    14e8:	f6 c0       	rjmp	.+492    	; 0x16d6 <strtod+0x280>
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	80 e8       	ldi	r24, 0x80	; 128
    14f0:	9f e7       	ldi	r25, 0x7F	; 127
    14f2:	fa c0       	rjmp	.+500    	; 0x16e8 <strtod+0x292>
    14f4:	43 e0       	ldi	r20, 0x03	; 3
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	6e ea       	ldi	r22, 0xAE	; 174
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	ce 01       	movw	r24, r28
    14fe:	0e 94 82 0b 	call	0x1704	; 0x1704 <strncasecmp_P>
    1502:	89 2b       	or	r24, r25
    1504:	59 f4       	brne	.+22     	; 0x151c <strtod+0xc6>
    1506:	c1 14       	cp	r12, r1
    1508:	d1 04       	cpc	r13, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <strtod+0xb8>
    150c:	e9 c0       	rjmp	.+466    	; 0x16e0 <strtod+0x28a>
    150e:	f2 e0       	ldi	r31, 0x02	; 2
    1510:	ef 0e       	add	r14, r31
    1512:	f1 1c       	adc	r15, r1
    1514:	f6 01       	movw	r30, r12
    1516:	f1 82       	std	Z+1, r15	; 0x01
    1518:	e0 82       	st	Z, r14
    151a:	e2 c0       	rjmp	.+452    	; 0x16e0 <strtod+0x28a>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	c0 e0       	ldi	r28, 0x00	; 0
    1524:	d0 e0       	ldi	r29, 0x00	; 0
    1526:	f7 01       	movw	r30, r14
    1528:	80 ed       	ldi	r24, 0xD0	; 208
    152a:	a8 2e       	mov	r10, r24
    152c:	a0 0e       	add	r10, r16
    152e:	89 e0       	ldi	r24, 0x09	; 9
    1530:	8a 15       	cp	r24, r10
    1532:	30 f1       	brcs	.+76     	; 0x1580 <strtod+0x12a>
    1534:	91 2f       	mov	r25, r17
    1536:	92 60       	ori	r25, 0x02	; 2
    1538:	b9 2e       	mov	r11, r25
    153a:	81 2f       	mov	r24, r17
    153c:	88 70       	andi	r24, 0x08	; 8
    153e:	12 ff       	sbrs	r17, 2
    1540:	04 c0       	rjmp	.+8      	; 0x154a <strtod+0xf4>
    1542:	81 11       	cpse	r24, r1
    1544:	24 c0       	rjmp	.+72     	; 0x158e <strtod+0x138>
    1546:	21 96       	adiw	r28, 0x01	; 1
    1548:	22 c0       	rjmp	.+68     	; 0x158e <strtod+0x138>
    154a:	81 11       	cpse	r24, r1
    154c:	21 97       	sbiw	r28, 0x01	; 1
    154e:	a5 e0       	ldi	r26, 0x05	; 5
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__muluhisi3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	aa 1f       	adc	r26, r26
    1560:	bb 1f       	adc	r27, r27
    1562:	9c 01       	movw	r18, r24
    1564:	ad 01       	movw	r20, r26
    1566:	2a 0d       	add	r18, r10
    1568:	31 1d       	adc	r19, r1
    156a:	41 1d       	adc	r20, r1
    156c:	51 1d       	adc	r21, r1
    156e:	28 39       	cpi	r18, 0x98	; 152
    1570:	89 e9       	ldi	r24, 0x99	; 153
    1572:	38 07       	cpc	r19, r24
    1574:	48 07       	cpc	r20, r24
    1576:	89 e1       	ldi	r24, 0x19	; 25
    1578:	58 07       	cpc	r21, r24
    157a:	48 f0       	brcs	.+18     	; 0x158e <strtod+0x138>
    157c:	16 60       	ori	r17, 0x06	; 6
    157e:	06 c0       	rjmp	.+12     	; 0x158c <strtod+0x136>
    1580:	9e ef       	ldi	r25, 0xFE	; 254
    1582:	a9 12       	cpse	r10, r25
    1584:	0a c0       	rjmp	.+20     	; 0x159a <strtod+0x144>
    1586:	13 fd       	sbrc	r17, 3
    1588:	40 c0       	rjmp	.+128    	; 0x160a <strtod+0x1b4>
    158a:	18 60       	ori	r17, 0x08	; 8
    158c:	b1 2e       	mov	r11, r17
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	e8 1a       	sub	r14, r24
    1592:	f8 0a       	sbc	r15, r24
    1594:	00 81       	ld	r16, Z
    1596:	1b 2d       	mov	r17, r11
    1598:	c6 cf       	rjmp	.-116    	; 0x1526 <strtod+0xd0>
    159a:	80 2f       	mov	r24, r16
    159c:	8f 7d       	andi	r24, 0xDF	; 223
    159e:	85 34       	cpi	r24, 0x45	; 69
    15a0:	a1 f5       	brne	.+104    	; 0x160a <strtod+0x1b4>
    15a2:	80 81       	ld	r24, Z
    15a4:	8d 32       	cpi	r24, 0x2D	; 45
    15a6:	11 f4       	brne	.+4      	; 0x15ac <strtod+0x156>
    15a8:	10 61       	ori	r17, 0x10	; 16
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <strtod+0x162>
    15ac:	8b 32       	cpi	r24, 0x2B	; 43
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <strtod+0x162>
    15b0:	31 96       	adiw	r30, 0x01	; 1
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <strtod+0x16a>
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	32 96       	adiw	r30, 0x02	; 2
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 53       	subi	r24, 0x30	; 48
    15c2:	8a 30       	cpi	r24, 0x0A	; 10
    15c4:	18 f0       	brcs	.+6      	; 0x15cc <strtod+0x176>
    15c6:	e6 1b       	sub	r30, r22
    15c8:	f7 0b       	sbc	r31, r23
    15ca:	1f c0       	rjmp	.+62     	; 0x160a <strtod+0x1b4>
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	60 38       	cpi	r22, 0x80	; 128
    15d2:	9c e0       	ldi	r25, 0x0C	; 12
    15d4:	79 07       	cpc	r23, r25
    15d6:	5c f4       	brge	.+22     	; 0x15ee <strtod+0x198>
    15d8:	db 01       	movw	r26, r22
    15da:	aa 0f       	add	r26, r26
    15dc:	bb 1f       	adc	r27, r27
    15de:	aa 0f       	add	r26, r26
    15e0:	bb 1f       	adc	r27, r27
    15e2:	6a 0f       	add	r22, r26
    15e4:	7b 1f       	adc	r23, r27
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	68 0f       	add	r22, r24
    15ec:	71 1d       	adc	r23, r1
    15ee:	31 96       	adiw	r30, 0x01	; 1
    15f0:	df 01       	movw	r26, r30
    15f2:	11 97       	sbiw	r26, 0x01	; 1
    15f4:	8c 91       	ld	r24, X
    15f6:	80 53       	subi	r24, 0x30	; 48
    15f8:	8a 30       	cpi	r24, 0x0A	; 10
    15fa:	50 f3       	brcs	.-44     	; 0x15d0 <strtod+0x17a>
    15fc:	14 ff       	sbrs	r17, 4
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <strtod+0x1b0>
    1600:	71 95       	neg	r23
    1602:	61 95       	neg	r22
    1604:	71 09       	sbc	r23, r1
    1606:	c6 0f       	add	r28, r22
    1608:	d7 1f       	adc	r29, r23
    160a:	11 ff       	sbrs	r17, 1
    160c:	08 c0       	rjmp	.+16     	; 0x161e <strtod+0x1c8>
    160e:	c1 14       	cp	r12, r1
    1610:	d1 04       	cpc	r13, r1
    1612:	29 f0       	breq	.+10     	; 0x161e <strtod+0x1c8>
    1614:	cf 01       	movw	r24, r30
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f6 01       	movw	r30, r12
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
    161e:	ca 01       	movw	r24, r20
    1620:	b9 01       	movw	r22, r18
    1622:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__floatunsisf>
    1626:	21 2f       	mov	r18, r17
    1628:	23 70       	andi	r18, 0x03	; 3
    162a:	23 30       	cpi	r18, 0x03	; 3
    162c:	19 f0       	breq	.+6      	; 0x1634 <strtod+0x1de>
    162e:	4b 01       	movw	r8, r22
    1630:	5c 01       	movw	r10, r24
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <strtod+0x1ea>
    1634:	4b 01       	movw	r8, r22
    1636:	5c 01       	movw	r10, r24
    1638:	b7 fa       	bst	r11, 7
    163a:	b0 94       	com	r11
    163c:	b7 f8       	bld	r11, 7
    163e:	b0 94       	com	r11
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	c5 01       	movw	r24, r10
    1648:	b4 01       	movw	r22, r8
    164a:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
    164e:	88 23       	and	r24, r24
    1650:	09 f4       	brne	.+2      	; 0x1654 <strtod+0x1fe>
    1652:	3e c0       	rjmp	.+124    	; 0x16d0 <strtod+0x27a>
    1654:	d7 ff       	sbrs	r29, 7
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <strtod+0x20e>
    1658:	d1 95       	neg	r29
    165a:	c1 95       	neg	r28
    165c:	d1 09       	sbc	r29, r1
    165e:	0d ec       	ldi	r16, 0xCD	; 205
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <strtod+0x212>
    1664:	05 ee       	ldi	r16, 0xE5	; 229
    1666:	10 e0       	ldi	r17, 0x00	; 0
    1668:	68 01       	movw	r12, r16
    166a:	f8 e1       	ldi	r31, 0x18	; 24
    166c:	cf 1a       	sub	r12, r31
    166e:	d1 08       	sbc	r13, r1
    1670:	90 e2       	ldi	r25, 0x20	; 32
    1672:	e9 2e       	mov	r14, r25
    1674:	f1 2c       	mov	r15, r1
    1676:	ce 15       	cp	r28, r14
    1678:	df 05       	cpc	r29, r15
    167a:	74 f0       	brlt	.+28     	; 0x1698 <strtod+0x242>
    167c:	f8 01       	movw	r30, r16
    167e:	25 91       	lpm	r18, Z+
    1680:	35 91       	lpm	r19, Z+
    1682:	45 91       	lpm	r20, Z+
    1684:	54 91       	lpm	r21, Z
    1686:	c5 01       	movw	r24, r10
    1688:	b4 01       	movw	r22, r8
    168a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
    168e:	4b 01       	movw	r8, r22
    1690:	5c 01       	movw	r10, r24
    1692:	ce 19       	sub	r28, r14
    1694:	df 09       	sbc	r29, r15
    1696:	ef cf       	rjmp	.-34     	; 0x1676 <strtod+0x220>
    1698:	04 50       	subi	r16, 0x04	; 4
    169a:	11 09       	sbc	r17, r1
    169c:	f5 94       	asr	r15
    169e:	e7 94       	ror	r14
    16a0:	0c 15       	cp	r16, r12
    16a2:	1d 05       	cpc	r17, r13
    16a4:	41 f7       	brne	.-48     	; 0x1676 <strtod+0x220>
    16a6:	8a 2d       	mov	r24, r10
    16a8:	88 0f       	add	r24, r24
    16aa:	8b 2d       	mov	r24, r11
    16ac:	88 1f       	adc	r24, r24
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	49 f0       	breq	.+18     	; 0x16c4 <strtod+0x26e>
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	c5 01       	movw	r24, r10
    16ba:	b4 01       	movw	r22, r8
    16bc:	0e 94 20 07 	call	0xe40	; 0xe40 <__cmpsf2>
    16c0:	81 11       	cpse	r24, r1
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <strtod+0x27a>
    16c4:	82 e2       	ldi	r24, 0x22	; 34
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <errno+0x1>
    16cc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <errno>
    16d0:	c5 01       	movw	r24, r10
    16d2:	b4 01       	movw	r22, r8
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <strtod+0x292>
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	9f ef       	ldi	r25, 0xFF	; 255
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <strtod+0x292>
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	80 ec       	ldi	r24, 0xC0	; 192
    16e6:	9f e7       	ldi	r25, 0x7F	; 127
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ec e0       	ldi	r30, 0x0C	; 12
    16ee:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0xc>

000016f2 <isspace>:
    16f2:	91 11       	cpse	r25, r1
    16f4:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__ctype_isfalse>
    16f8:	80 32       	cpi	r24, 0x20	; 32
    16fa:	19 f0       	breq	.+6      	; 0x1702 <isspace+0x10>
    16fc:	89 50       	subi	r24, 0x09	; 9
    16fe:	85 50       	subi	r24, 0x05	; 5
    1700:	c8 f7       	brcc	.-14     	; 0x16f4 <isspace+0x2>
    1702:	08 95       	ret

00001704 <strncasecmp_P>:
    1704:	fb 01       	movw	r30, r22
    1706:	dc 01       	movw	r26, r24
    1708:	41 50       	subi	r20, 0x01	; 1
    170a:	50 40       	sbci	r21, 0x00	; 0
    170c:	88 f0       	brcs	.+34     	; 0x1730 <strncasecmp_P+0x2c>
    170e:	8d 91       	ld	r24, X+
    1710:	81 34       	cpi	r24, 0x41	; 65
    1712:	1c f0       	brlt	.+6      	; 0x171a <strncasecmp_P+0x16>
    1714:	8b 35       	cpi	r24, 0x5B	; 91
    1716:	0c f4       	brge	.+2      	; 0x171a <strncasecmp_P+0x16>
    1718:	80 5e       	subi	r24, 0xE0	; 224
    171a:	65 91       	lpm	r22, Z+
    171c:	61 34       	cpi	r22, 0x41	; 65
    171e:	1c f0       	brlt	.+6      	; 0x1726 <strncasecmp_P+0x22>
    1720:	6b 35       	cpi	r22, 0x5B	; 91
    1722:	0c f4       	brge	.+2      	; 0x1726 <strncasecmp_P+0x22>
    1724:	60 5e       	subi	r22, 0xE0	; 224
    1726:	86 1b       	sub	r24, r22
    1728:	61 11       	cpse	r22, r1
    172a:	71 f3       	breq	.-36     	; 0x1708 <strncasecmp_P+0x4>
    172c:	99 0b       	sbc	r25, r25
    172e:	08 95       	ret
    1730:	88 1b       	sub	r24, r24
    1732:	fc cf       	rjmp	.-8      	; 0x172c <strncasecmp_P+0x28>

00001734 <__ctype_isfalse>:
    1734:	99 27       	eor	r25, r25
    1736:	88 27       	eor	r24, r24

00001738 <__ctype_istrue>:
    1738:	08 95       	ret

0000173a <__prologue_saves__>:
    173a:	2f 92       	push	r2
    173c:	3f 92       	push	r3
    173e:	4f 92       	push	r4
    1740:	5f 92       	push	r5
    1742:	6f 92       	push	r6
    1744:	7f 92       	push	r7
    1746:	8f 92       	push	r8
    1748:	9f 92       	push	r9
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	ca 1b       	sub	r28, r26
    1764:	db 0b       	sbc	r29, r27
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	09 94       	ijmp

00001772 <__epilogue_restores__>:
    1772:	2a 88       	ldd	r2, Y+18	; 0x12
    1774:	39 88       	ldd	r3, Y+17	; 0x11
    1776:	48 88       	ldd	r4, Y+16	; 0x10
    1778:	5f 84       	ldd	r5, Y+15	; 0x0f
    177a:	6e 84       	ldd	r6, Y+14	; 0x0e
    177c:	7d 84       	ldd	r7, Y+13	; 0x0d
    177e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1780:	9b 84       	ldd	r9, Y+11	; 0x0b
    1782:	aa 84       	ldd	r10, Y+10	; 0x0a
    1784:	b9 84       	ldd	r11, Y+9	; 0x09
    1786:	c8 84       	ldd	r12, Y+8	; 0x08
    1788:	df 80       	ldd	r13, Y+7	; 0x07
    178a:	ee 80       	ldd	r14, Y+6	; 0x06
    178c:	fd 80       	ldd	r15, Y+5	; 0x05
    178e:	0c 81       	ldd	r16, Y+4	; 0x04
    1790:	1b 81       	ldd	r17, Y+3	; 0x03
    1792:	aa 81       	ldd	r26, Y+2	; 0x02
    1794:	b9 81       	ldd	r27, Y+1	; 0x01
    1796:	ce 0f       	add	r28, r30
    1798:	d1 1d       	adc	r29, r1
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	ed 01       	movw	r28, r26
    17a6:	08 95       	ret

000017a8 <_exit>:
    17a8:	f8 94       	cli

000017aa <__stop_program>:
    17aa:	ff cf       	rjmp	.-2      	; 0x17aa <__stop_program>

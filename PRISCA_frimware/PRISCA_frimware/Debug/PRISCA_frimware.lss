
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00003c14  00003ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000019a  00800142  00800142  00003d8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003304  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f65  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001668  00000000  00000000  00008265  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  000098d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000835  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001987  00000000  00000000  0000a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x170>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x78>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e4 e1       	ldi	r30, 0x14	; 20
     216:	fc e3       	ldi	r31, 0x3C	; 60
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a2 34       	cpi	r26, 0x42	; 66
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	a2 e4       	ldi	r26, 0x42	; 66
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ac 3d       	cpi	r26, 0xDC	; 220
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 27 04 	call	0x84e	; 0x84e <main>
     238:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <Vo+0x1>
     2f4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
     334:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <R2>
     338:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <R2+0x1>
     33c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <R2+0x2>
     340:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 82 15 	call	0x2b04	; 0x2b04 <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <logR2>
     350:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <logR2+0x1>
     354:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <logR2+0x2>
     358:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
     3cc:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <T>
     3d0:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <T+0x1>
     3d4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <T+0x2>
     3d8:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
     3e8:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <Tc>
     3ec:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <Tc+0x1>
     3f0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Tc+0x2>
     3f4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	64 97       	sbiw	r28, 0x14	; 20
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	dc 01       	movw	r26, r24
     424:	fe 01       	movw	r30, r28
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     42c:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <get_value+0x22>
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	23 c0       	rjmp	.+70     	; 0x484 <__stack+0x25>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     43e:	fd 01       	movw	r30, r26
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	80 81       	ld	r24, Z
     446:	86 13       	cpse	r24, r22
     448:	1b c0       	rjmp	.+54     	; 0x480 <__stack+0x21>
			v [j] = String[j+i+1];
     44a:	f9 01       	movw	r30, r18
     44c:	e4 0f       	add	r30, r20
     44e:	f5 1f       	adc	r31, r21
     450:	8f 01       	movw	r16, r30
     452:	0a 0f       	add	r16, r26
     454:	1b 1f       	adc	r17, r27
     456:	f8 01       	movw	r30, r16
     458:	71 81       	ldd	r23, Z+1	; 0x01
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	8c 0f       	add	r24, r28
     460:	9d 1f       	adc	r25, r29
     462:	84 0f       	add	r24, r20
     464:	95 1f       	adc	r25, r21
     466:	fc 01       	movw	r30, r24
     468:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r')|| (String [j+i+2] == '\n'))
     46a:	f8 01       	movw	r30, r16
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	80 32       	cpi	r24, 0x20	; 32
     470:	99 f0       	breq	.+38     	; 0x498 <__stack+0x39>
     472:	8d 30       	cpi	r24, 0x0D	; 13
     474:	89 f0       	breq	.+34     	; 0x498 <__stack+0x39>
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	79 f0       	breq	.+30     	; 0x498 <__stack+0x39>
			break;
			j++;
     47a:	4f 5f       	subi	r20, 0xFF	; 255
     47c:	5f 4f       	sbci	r21, 0xFF	; 255
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
		}
		else
			i++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[20];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     484:	fd 01       	movw	r30, r26
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <__stack+0x27>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	ea 1b       	sub	r30, r26
     490:	fb 0b       	sbc	r31, r27
     492:	2e 17       	cp	r18, r30
     494:	3f 07       	cpc	r19, r31
     496:	98 f2       	brcs	.-90     	; 0x43e <get_value+0x34>
			j++;
		}
		else
			i++;
	}
	return (atof(v));
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
}
     4a0:	64 96       	adiw	r28, 0x14	; 20
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <get_SEvalue>:
void get_SEvalue (char* Str,char Sch,char Ech)
{
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	7c 01       	movw	r14, r24
		}
		else
			S++;
	}

}
     4d8:	cd b6       	in	r12, 0x3d	; 61
     4da:	de b6       	in	r13, 0x3e	; 62
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     4dc:	fc 01       	movw	r30, r24
     4de:	01 90       	ld	r0, Z+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <get_SEvalue+0x28>
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	8f 01       	movw	r16, r30
     4e8:	08 1b       	sub	r16, r24
     4ea:	19 0b       	sbc	r17, r25
	char RXStr[lens];
     4ec:	58 01       	movw	r10, r16
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	a8 1a       	sub	r10, r24
     4f2:	b1 08       	sbc	r11, r1
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	a0 1b       	sub	r26, r16
     4fa:	b1 0b       	sbc	r27, r17
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	be bf       	out	0x3e, r27	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	ad bf       	out	0x3d, r26	; 61
     506:	2d b7       	in	r18, 0x3d	; 61
     508:	3e b7       	in	r19, 0x3e	; 62
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
     50e:	f7 01       	movw	r30, r14
     510:	80 81       	ld	r24, Z
     512:	68 13       	cpse	r22, r24
     514:	42 c0       	rjmp	.+132    	; 0x59a <get_SEvalue+0xe4>
	}
	return (atof(v));
}
void get_SEvalue (char* Str,char Sch,char Ech)
{
	int S = 0,j=0,lens = strlen(Str);
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f0 e0       	ldi	r31, 0x00	; 0
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     51a:	d7 01       	movw	r26, r14
     51c:	ae 0f       	add	r26, r30
     51e:	bf 1f       	adc	r27, r31
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	8c 91       	ld	r24, X
     524:	d9 01       	movw	r26, r18
     526:	8c 93       	st	X, r24
 				Str[j] = RXStr[j];
     528:	d7 01       	movw	r26, r14
     52a:	8c 93       	st	X, r24
				if ((Str [j+S+2] == Ech))
     52c:	32 96       	adiw	r30, 0x02	; 2
     52e:	ee 0d       	add	r30, r14
     530:	ff 1d       	adc	r31, r15
     532:	80 81       	ld	r24, Z
     534:	48 13       	cpse	r20, r24
     536:	1a c0       	rjmp	.+52     	; 0x56c <get_SEvalue+0xb6>
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
     538:	81 2c       	mov	r8, r1
     53a:	91 2c       	mov	r9, r1
				if ((Str [j+S+2] == Ech))
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
					{
						Str[j+1] = ' ';
     540:	f7 01       	movw	r30, r14
     542:	e8 0d       	add	r30, r8
     544:	f9 1d       	adc	r31, r9
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	81 83       	std	Z+1, r24	; 0x01
						int i = j+2;
     54a:	2e 5f       	subi	r18, 0xFE	; 254
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
						while(i < lens-1)
     54e:	2a 15       	cp	r18, r10
     550:	3b 05       	cpc	r19, r11
     552:	64 f5       	brge	.+88     	; 0x5ac <get_SEvalue+0xf6>
     554:	f7 01       	movw	r30, r14
     556:	e2 0f       	add	r30, r18
     558:	f3 1f       	adc	r31, r19
     55a:	01 50       	subi	r16, 0x01	; 1
     55c:	11 09       	sbc	r17, r1
     55e:	e0 0e       	add	r14, r16
     560:	f1 1e       	adc	r15, r17
						{
							Str[i] = 0;
     562:	11 92       	st	Z+, r1
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
					{
						Str[j+1] = ' ';
						int i = j+2;
						while(i < lens-1)
     564:	ee 16       	cp	r14, r30
     566:	ff 06       	cpc	r15, r31
     568:	e1 f7       	brne	.-8      	; 0x562 <get_SEvalue+0xac>
     56a:	20 c0       	rjmp	.+64     	; 0x5ac <get_SEvalue+0xf6>
     56c:	39 01       	movw	r6, r18
     56e:	bf ef       	ldi	r27, 0xFF	; 255
     570:	6b 1a       	sub	r6, r27
     572:	7b 0a       	sbc	r7, r27
     574:	b7 01       	movw	r22, r14
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
 				Str[j] = RXStr[j];
				if ((Str [j+S+2] == Ech))
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
							i++;
						}
						break;
					}
				else
					j++;
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		if (Str [S] == Sch){
			while(1)
			{
				RXStr[j] = Str[j+S+1];
     582:	91 91       	ld	r25, Z+
     584:	d3 01       	movw	r26, r6
     586:	9d 93       	st	X+, r25
     588:	3d 01       	movw	r6, r26
 				Str[j] = RXStr[j];
     58a:	49 01       	movw	r8, r18
     58c:	db 01       	movw	r26, r22
     58e:	9d 93       	st	X+, r25
     590:	bd 01       	movw	r22, r26
				if ((Str [j+S+2] == Ech))
     592:	80 81       	ld	r24, Z
     594:	84 13       	cpse	r24, r20
     596:	f3 cf       	rjmp	.-26     	; 0x57e <get_SEvalue+0xc8>
     598:	d3 cf       	rjmp	.-90     	; 0x540 <get_SEvalue+0x8a>
     59a:	d7 01       	movw	r26, r14
     59c:	11 96       	adiw	r26, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
					j++;
			}
			break;
		}
		else
			S++;
     5a2:	31 96       	adiw	r30, 0x01	; 1
{
	int S = 0,j=0,lens = strlen(Str);
	char RXStr[lens];
	while(1)
	{
		if (Str [S] == Sch){
     5a4:	8d 91       	ld	r24, X+
     5a6:	86 13       	cpse	r24, r22
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <get_SEvalue+0xec>
     5aa:	b7 cf       	rjmp	.-146    	; 0x51a <get_SEvalue+0x64>
		}
		else
			S++;
	}

}
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de be       	out	0x3e, r13	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd be       	out	0x3d, r12	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	08 95       	ret

000005d4 <get_int>:
int get_int (char* String,char ch)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	2a 97       	sbiw	r28, 0x0a	; 10
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	dc 01       	movw	r26, r24
     5ee:	fe 01       	movw	r30, r28
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	ce 01       	movw	r24, r28
     5f4:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     5f6:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     5f8:	e8 17       	cp	r30, r24
     5fa:	f9 07       	cpc	r31, r25
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <get_int+0x22>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	23 c0       	rjmp	.+70     	; 0x64e <get_int+0x7a>
	{
		v [i] = 0;
	}
	while(i < strlen(String))
	{
		if (String [i] == ch){
     608:	fd 01       	movw	r30, r26
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	80 81       	ld	r24, Z
     610:	86 13       	cpse	r24, r22
     612:	1b c0       	rjmp	.+54     	; 0x64a <get_int+0x76>
			v [j] = String[j+i+1];
     614:	f9 01       	movw	r30, r18
     616:	e4 0f       	add	r30, r20
     618:	f5 1f       	adc	r31, r21
     61a:	8f 01       	movw	r16, r30
     61c:	0a 0f       	add	r16, r26
     61e:	1b 1f       	adc	r17, r27
     620:	f8 01       	movw	r30, r16
     622:	71 81       	ldd	r23, Z+1	; 0x01
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c 0f       	add	r24, r28
     62a:	9d 1f       	adc	r25, r29
     62c:	84 0f       	add	r24, r20
     62e:	95 1f       	adc	r25, r21
     630:	fc 01       	movw	r30, r24
     632:	70 83       	st	Z, r23
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r') || (String [j+i+2] == '\n'))
     634:	f8 01       	movw	r30, r16
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	99 f0       	breq	.+38     	; 0x662 <get_int+0x8e>
     63c:	8d 30       	cpi	r24, 0x0D	; 13
     63e:	89 f0       	breq	.+34     	; 0x662 <get_int+0x8e>
     640:	8a 30       	cpi	r24, 0x0A	; 10
     642:	79 f0       	breq	.+30     	; 0x662 <get_int+0x8e>
			break;
			j++;
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	02 c0       	rjmp	.+4      	; 0x64e <get_int+0x7a>
		}
		else
			i++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
	}
	while(i < strlen(String))
     64e:	fd 01       	movw	r30, r26
     650:	01 90       	ld	r0, Z+
     652:	00 20       	and	r0, r0
     654:	e9 f7       	brne	.-6      	; 0x650 <get_int+0x7c>
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	ea 1b       	sub	r30, r26
     65a:	fb 0b       	sbc	r31, r27
     65c:	2e 17       	cp	r18, r30
     65e:	3f 07       	cpc	r19, r31
     660:	98 f2       	brcs	.-90     	; 0x608 <get_int+0x34>
			j++;
		}
		else
			i++;
	}
	return (atoi(v));
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <atoi>
}
     66a:	2a 96       	adiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <find>:
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     680:	dc 01       	movw	r26, r24
     682:	0d 90       	ld	r0, X+
     684:	00 20       	and	r0, r0
     686:	e9 f7       	brne	.-6      	; 0x682 <find+0x2>
     688:	fc 01       	movw	r30, r24
     68a:	9d 01       	movw	r18, r26
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	31 09       	sbc	r19, r1
     690:	05 c0       	rjmp	.+10     	; 0x69c <find+0x1c>
	{
		if (String [i] == ch){
     692:	81 91       	ld	r24, Z+
     694:	86 17       	cp	r24, r22
     696:	39 f0       	breq	.+14     	; 0x6a6 <find+0x26>
			f = 1;
			break;
		}
		else if (String [i] == '\r')
     698:	8d 30       	cpi	r24, 0x0D	; 13
     69a:	39 f0       	breq	.+14     	; 0x6aa <find+0x2a>
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
	while(i < strlen(String))
     69c:	e2 17       	cp	r30, r18
     69e:	f3 07       	cpc	r31, r19
     6a0:	c1 f7       	brne	.-16     	; 0x692 <find+0x12>
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret
	while(i < strlen(String))
	{
		if (String [i] == ch){
			f = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     6ac:	08 95       	ret

000006ae <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	6a 01       	movw	r12, r20
     6be:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     6c0:	28 81       	ld	r18, Y
     6c2:	39 81       	ldd	r19, Y+1	; 0x01
     6c4:	4a 81       	ldd	r20, Y+2	; 0x02
     6c6:	5b 81       	ldd	r21, Y+3	; 0x03
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
    *current_pos = new_pos;
     6d0:	c8 82       	st	Y, r12
     6d2:	d9 82       	std	Y+1, r13	; 0x01
     6d4:	ea 82       	std	Y+2, r14	; 0x02
     6d6:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	08 95       	ret

000006e6 <pin_direction>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     6e6:	41 11       	cpse	r20, r1
     6e8:	0d c0       	rjmp	.+26     	; 0x704 <pin_direction+0x1e>
     6ea:	e8 2f       	mov	r30, r24
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	21 81       	ldd	r18, Z+1	; 0x01
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <pin_direction+0x14>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	6a 95       	dec	r22
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <pin_direction+0x10>
     6fe:	82 2b       	or	r24, r18
     700:	81 83       	std	Z+1, r24	; 0x01
     702:	08 95       	ret
     704:	e8 2f       	mov	r30, r24
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	21 81       	ldd	r18, Z+1	; 0x01
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <pin_direction+0x2e>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	6a 95       	dec	r22
     716:	e2 f7       	brpl	.-8      	; 0x710 <pin_direction+0x2a>
     718:	80 95       	com	r24
     71a:	82 23       	and	r24, r18
     71c:	81 83       	std	Z+1, r24	; 0x01
     71e:	08 95       	ret

00000720 <pin_write>:
     720:	44 23       	and	r20, r20
     722:	69 f0       	breq	.+26     	; 0x73e <pin_write+0x1e>
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	22 81       	ldd	r18, Z+2	; 0x02
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	02 c0       	rjmp	.+4      	; 0x734 <pin_write+0x14>
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	6a 95       	dec	r22
     736:	e2 f7       	brpl	.-8      	; 0x730 <pin_write+0x10>
     738:	82 2b       	or	r24, r18
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	08 95       	ret
     73e:	e8 2f       	mov	r30, r24
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	22 81       	ldd	r18, Z+2	; 0x02
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <pin_write+0x2e>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	6a 95       	dec	r22
     750:	e2 f7       	brpl	.-8      	; 0x74a <pin_write+0x2a>
     752:	80 95       	com	r24
     754:	82 23       	and	r24, r18
     756:	82 83       	std	Z+2, r24	; 0x02
     758:	08 95       	ret

0000075a <port_direction>:
     75a:	61 11       	cpse	r22, r1
     75c:	05 c0       	rjmp	.+10     	; 0x768 <port_direction+0xe>
     75e:	e8 2f       	mov	r30, r24
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	81 83       	std	Z+1, r24	; 0x01
     766:	08 95       	ret
     768:	e8 2f       	mov	r30, r24
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	11 82       	std	Z+1, r1	; 0x01
     76e:	08 95       	ret

00000770 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     770:	e8 2f       	mov	r30, r24
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	62 83       	std	Z+2, r22	; 0x02
     776:	08 95       	ret

00000778 <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     778:	e8 2f       	mov	r30, r24
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	82 81       	ldd	r24, Z+2	; 0x02
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <pin_XOR+0x10>
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	6a 95       	dec	r22
     78a:	e2 f7       	brpl	.-8      	; 0x784 <pin_XOR+0xc>
     78c:	28 27       	eor	r18, r24
     78e:	22 83       	std	Z+2, r18	; 0x02
     790:	08 95       	ret

00000792 <Init>:
			CheckSum = get_int(String,'*');
			get_SEvalue(String,' ','*');
		}
	}
}
void Init(void){
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     79e:	81 b3       	in	r24, 0x11	; 17
     7a0:	80 6b       	ori	r24, 0xB0	; 176
     7a2:	81 bb       	out	0x11, r24	; 17
	pin_direction (D, 2, input );
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	80 e3       	ldi	r24, 0x30	; 48
     7aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pin_direction>
	DDRC = 0XFF;
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     7b2:	8a b3       	in	r24, 0x1a	; 26
     7b4:	80 6f       	ori	r24, 0xF0	; 240
     7b6:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     7b8:	87 b3       	in	r24, 0x17	; 23
     7ba:	83 60       	ori	r24, 0x03	; 3
     7bc:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     7be:	87 e8       	ldi	r24, 0x87	; 135
     7c0:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     7c2:	3e 9a       	sbi	0x07, 6	; 7
	GICR |= 0x40;
     7c4:	8b b7       	in	r24, 0x3b	; 59
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0x11;
     7ca:	85 b7       	in	r24, 0x35	; 53
     7cc:	81 61       	ori	r24, 0x11	; 17
     7ce:	85 bf       	out	0x35, r24	; 53
	UART_INIT();
     7d0:	0e 94 2b 13 	call	0x2656	; 0x2656 <UART_INIT>
	motor_init();
     7d4:	0e 94 aa 11 	call	0x2354	; 0x2354 <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     7d8:	0f 2e       	mov	r0, r31
     7da:	f2 ee       	ldi	r31, 0xE2	; 226
     7dc:	cf 2e       	mov	r12, r31
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	df 2e       	mov	r13, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	17 e6       	ldi	r17, 0x67	; 103
     7e6:	e1 2e       	mov	r14, r17
     7e8:	16 e6       	ldi	r17, 0x66	; 102
     7ea:	f1 2e       	mov	r15, r17
     7ec:	06 ec       	ldi	r16, 0xC6	; 198
     7ee:	10 e4       	ldi	r17, 0x40	; 64
     7f0:	a8 01       	movw	r20, r16
     7f2:	97 01       	movw	r18, r14
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	93 e4       	ldi	r25, 0x43	; 67
     7fc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     800:	0f 2e       	mov	r0, r31
     802:	f6 ec       	ldi	r31, 0xC6	; 198
     804:	cf 2e       	mov	r12, r31
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	df 2e       	mov	r13, r31
     80a:	f0 2d       	mov	r31, r0
     80c:	a8 01       	movw	r20, r16
     80e:	97 01       	movw	r18, r14
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	88 e7       	ldi	r24, 0x78	; 120
     816:	93 e4       	ldi	r25, 0x43	; 67
     818:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Pid_init>
	/*set fast PWM mode with non-inverted output*/
	cli();
     81c:	f8 94       	cli
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     81e:	8f b5       	in	r24, 0x2f	; 47
     820:	81 6a       	ori	r24, 0xA1	; 161
     822:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     824:	8e b5       	in	r24, 0x2e	; 46
     826:	81 64       	ori	r24, 0x41	; 65
     828:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     82a:	85 b5       	in	r24, 0x25	; 37
     82c:	8e 66       	ori	r24, 0x6E	; 110
     82e:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     830:	83 b7       	in	r24, 0x33	; 51
     832:	81 68       	ori	r24, 0x81	; 129
     834:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     836:	89 b7       	in	r24, 0x39	; 57
     838:	81 60       	ori	r24, 0x01	; 1
     83a:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     83c:	12 be       	out	0x32, r1	; 50
	sei();
     83e:	78 94       	sei

}
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	08 95       	ret

0000084e <main>:
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	e4 97       	sbiw	r28, 0x34	; 52
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
    Init();
     862:	0e 94 c9 03 	call	0x792	; 0x792 <Init>
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     866:	45 e0       	ldi	r20, 0x05	; 5
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	64 e6       	ldi	r22, 0x64	; 100
     86c:	72 e0       	ldi	r23, 0x02	; 2
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     876:	45 e0       	ldi	r20, 0x05	; 5
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	66 e5       	ldi	r22, 0x56	; 86
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     886:	45 e0       	ldi	r20, 0x05	; 5
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	66 ec       	ldi	r22, 0xC6	; 198
     88c:	72 e0       	ldi	r23, 0x02	; 2
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     896:	45 e0       	ldi	r20, 0x05	; 5
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	68 eb       	ldi	r22, 0xB8	; 184
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	8f e0       	ldi	r24, 0x0F	; 15
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     8a6:	84 e6       	ldi	r24, 0x64	; 100
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
     8ae:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <Xspm>
     8b2:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <Xspm+0x1>
     8b6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <Xspm+0x2>
     8ba:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <Xspm+0x3>
	Yspm = atof(Y_pos);
     8be:	86 e5       	ldi	r24, 0x56	; 86
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
     8c6:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <Yspm>
     8ca:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <Yspm+0x1>
     8ce:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Yspm+0x2>
     8d2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Yspm+0x3>
	Zspm = atof(Z_pos);
     8d6:	86 ec       	ldi	r24, 0xC6	; 198
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
     8de:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <Zspm>
     8e2:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <Zspm+0x1>
     8e6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <Zspm+0x2>
     8ea:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <Zspm+0x3>
	Espm = atof(E_pos);
     8ee:	88 eb       	ldi	r24, 0xB8	; 184
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
     8f6:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <Espm>
     8fa:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <Espm+0x1>
     8fe:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Espm+0x2>
     902:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Espm+0x3>
     906:	0f 2e       	mov	r0, r31
     908:	f2 ec       	ldi	r31, 0xC2	; 194
     90a:	cf 2e       	mov	r12, r31
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	df 2e       	mov	r13, r31
     910:	f0 2d       	mov	r31, r0
					//set the middle of the bed to 0,0
					Transmit_Data("ok");
				break;
			}
			status = 0;
			STEP[0] = 0;
     912:	0f 2e       	mov	r0, r31
     914:	fa e9       	ldi	r31, 0x9A	; 154
     916:	2f 2e       	mov	r2, r31
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	3f 2e       	mov	r3, r31
     91c:	f0 2d       	mov	r31, r0
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
     91e:	2a aa       	std	Y+50, r2	; 0x32
     920:	39 aa       	std	Y+49, r3	; 0x31
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	/****************************************************/
	while (1)
	{
		if (status == 0)
     922:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <status>
     926:	81 11       	cpse	r24, r1
     928:	0a c0       	rjmp	.+20     	; 0x93e <main+0xf0>
     92a:	e2 e7       	ldi	r30, 0x72	; 114
     92c:	f2 e0       	ldi	r31, 0x02	; 2
		{
			for (int i = 0 ; i < 80 ;i++)
			{
		 		String [i] = 0;
     92e:	11 92       	st	Z+, r1
	/****************************************************/
	while (1)
	{
		if (status == 0)
		{
			for (int i = 0 ; i < 80 ;i++)
     930:	ec 15       	cp	r30, r12
     932:	fd 05       	cpc	r31, r13
     934:	e1 f7       	brne	.-8      	; 0x92e <main+0xe0>
			{
		 		String [i] = 0;
			}
			Recive_Data(String); // receive uart data and store it in variable (string)
     936:	82 e7       	ldi	r24, 0x72	; 114
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 4a 13 	call	0x2694	; 0x2694 <Recive_Data>
		}
		// this code for run the Gcode depending on codes that in https://docs.google.com/document/d/1-IXL4SPSpeL7-teKqPJBG51-9jkx55wjBWgZDoANAug/edit?usp=sharing&fbclid=IwAR3pC85grjWT5KBqa4N7_nx4Ls8xZIw1vQixjXgDGBRfcvUnp72kgWrgpcQ
		if (String[0] == 'M')
     93e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <String>
     942:	8d 34       	cpi	r24, 0x4D	; 77
     944:	09 f0       	breq	.+2      	; 0x948 <main+0xfa>
     946:	78 c4       	rjmp	.+2288   	; 0x1238 <main+0x9ea>
		{
			//Transmit_Data(String);
			val = get_int (String,'M');
     948:	6d e4       	ldi	r22, 0x4D	; 77
     94a:	82 e7       	ldi	r24, 0x72	; 114
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     952:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <val+0x1>
     956:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <val>
			sei();
     95a:	78 94       	sei
			switch (val)
     95c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <val>
     960:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <val+0x1>
     964:	8b 36       	cpi	r24, 0x6B	; 107
     966:	91 05       	cpc	r25, r1
     968:	09 f4       	brne	.+2      	; 0x96c <main+0x11e>
     96a:	7d c2       	rjmp	.+1274   	; 0xe66 <main+0x618>
     96c:	3c f5       	brge	.+78     	; 0x9bc <main+0x16e>
     96e:	84 35       	cpi	r24, 0x54	; 84
     970:	91 05       	cpc	r25, r1
     972:	8c f4       	brge	.+34     	; 0x996 <main+0x148>
     974:	82 35       	cpi	r24, 0x52	; 82
     976:	91 05       	cpc	r25, r1
     978:	0c f0       	brlt	.+2      	; 0x97c <main+0x12e>
     97a:	11 c1       	rjmp	.+546    	; 0xb9e <main+0x350>
     97c:	81 31       	cpi	r24, 0x11	; 17
     97e:	91 05       	cpc	r25, r1
     980:	09 f4       	brne	.+2      	; 0x984 <main+0x136>
     982:	89 c0       	rjmp	.+274    	; 0xa96 <main+0x248>
     984:	24 f4       	brge	.+8      	; 0x98e <main+0x140>
     986:	02 97       	sbiw	r24, 0x02	; 2
     988:	08 f4       	brcc	.+2      	; 0x98c <main+0x13e>
     98a:	4b c0       	rjmp	.+150    	; 0xa22 <main+0x1d4>
     98c:	45 c4       	rjmp	.+2186   	; 0x1218 <main+0x9ca>
     98e:	42 97       	sbiw	r24, 0x12	; 18
     990:	09 f4       	brne	.+2      	; 0x994 <main+0x146>
     992:	88 c0       	rjmp	.+272    	; 0xaa4 <main+0x256>
     994:	41 c4       	rjmp	.+2178   	; 0x1218 <main+0x9ca>
     996:	8c 35       	cpi	r24, 0x5C	; 92
     998:	91 05       	cpc	r25, r1
     99a:	09 f4       	brne	.+2      	; 0x99e <main+0x150>
     99c:	32 c1       	rjmp	.+612    	; 0xc02 <main+0x3b4>
     99e:	2c f4       	brge	.+10     	; 0x9aa <main+0x15c>
     9a0:	84 35       	cpi	r24, 0x54	; 84
     9a2:	91 05       	cpc	r25, r1
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <main+0x15a>
     9a6:	7e c0       	rjmp	.+252    	; 0xaa4 <main+0x256>
     9a8:	37 c4       	rjmp	.+2158   	; 0x1218 <main+0x9ca>
     9aa:	88 36       	cpi	r24, 0x68	; 104
     9ac:	91 05       	cpc	r25, r1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <main+0x164>
     9b0:	3b c2       	rjmp	.+1142   	; 0xe28 <main+0x5da>
     9b2:	8a 36       	cpi	r24, 0x6A	; 106
     9b4:	91 05       	cpc	r25, r1
     9b6:	09 f4       	brne	.+2      	; 0x9ba <main+0x16c>
     9b8:	49 c2       	rjmp	.+1170   	; 0xe4c <main+0x5fe>
     9ba:	2e c4       	rjmp	.+2140   	; 0x1218 <main+0x9ca>
     9bc:	8e 3c       	cpi	r24, 0xCE	; 206
     9be:	91 05       	cpc	r25, r1
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <main+0x176>
     9c2:	c1 c2       	rjmp	.+1410   	; 0xf46 <main+0x6f8>
     9c4:	9c f4       	brge	.+38     	; 0x9ec <main+0x19e>
     9c6:	8e 36       	cpi	r24, 0x6E	; 110
     9c8:	91 05       	cpc	r25, r1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <main+0x180>
     9cc:	73 c2       	rjmp	.+1254   	; 0xeb4 <main+0x666>
     9ce:	2c f4       	brge	.+10     	; 0x9da <main+0x18c>
     9d0:	8d 36       	cpi	r24, 0x6D	; 109
     9d2:	91 05       	cpc	r25, r1
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <main+0x18a>
     9d6:	4d c2       	rjmp	.+1178   	; 0xe72 <main+0x624>
     9d8:	1f c4       	rjmp	.+2110   	; 0x1218 <main+0x9ca>
     9da:	8c 38       	cpi	r24, 0x8C	; 140
     9dc:	91 05       	cpc	r25, r1
     9de:	09 f4       	brne	.+2      	; 0x9e2 <main+0x194>
     9e0:	72 c2       	rjmp	.+1252   	; 0xec6 <main+0x678>
     9e2:	8e 3b       	cpi	r24, 0xBE	; 190
     9e4:	91 05       	cpc	r25, r1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <main+0x19c>
     9e8:	8d c2       	rjmp	.+1306   	; 0xf04 <main+0x6b6>
     9ea:	16 c4       	rjmp	.+2092   	; 0x1218 <main+0x9ca>
     9ec:	85 3f       	cpi	r24, 0xF5	; 245
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	92 07       	cpc	r25, r18
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <main+0x1a8>
     9f4:	e5 c2       	rjmp	.+1482   	; 0xfc0 <main+0x772>
     9f6:	5c f4       	brge	.+22     	; 0xa0e <main+0x1c0>
     9f8:	8e 32       	cpi	r24, 0x2E	; 46
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	94 07       	cpc	r25, r20
     9fe:	09 f4       	brne	.+2      	; 0xa02 <main+0x1b4>
     a00:	c2 c2       	rjmp	.+1412   	; 0xf86 <main+0x738>
     a02:	84 3f       	cpi	r24, 0xF4	; 244
     a04:	51 e0       	ldi	r21, 0x01	; 1
     a06:	95 07       	cpc	r25, r21
     a08:	09 f4       	brne	.+2      	; 0xa0c <main+0x1be>
     a0a:	fb c0       	rjmp	.+502    	; 0xc02 <main+0x3b4>
     a0c:	05 c4       	rjmp	.+2058   	; 0x1218 <main+0x9ca>
     a0e:	86 3f       	cpi	r24, 0xF6	; 246
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	96 07       	cpc	r25, r22
     a14:	09 f4       	brne	.+2      	; 0xa18 <main+0x1ca>
     a16:	f5 c0       	rjmp	.+490    	; 0xc02 <main+0x3b4>
     a18:	87 3f       	cpi	r24, 0xF7	; 247
     a1a:	91 40       	sbci	r25, 0x01	; 1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <main+0x1d2>
     a1e:	25 c3       	rjmp	.+1610   	; 0x106a <main+0x81c>
     a20:	fb c3       	rjmp	.+2038   	; 0x1218 <main+0x9ca>
			{
				case 0: case 1:
					STEP[0] = 0;
     a22:	d1 01       	movw	r26, r2
     a24:	1d 92       	st	X+, r1
     a26:	1d 92       	st	X+, r1
     a28:	1d 92       	st	X+, r1
     a2a:	1c 92       	st	X, r1
     a2c:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     a2e:	f1 01       	movw	r30, r2
     a30:	14 82       	std	Z+4, r1	; 0x04
     a32:	15 82       	std	Z+5, r1	; 0x05
     a34:	16 82       	std	Z+6, r1	; 0x06
     a36:	17 82       	std	Z+7, r1	; 0x07
					STEP[2] = 0;
     a38:	18 96       	adiw	r26, 0x08	; 8
     a3a:	1d 92       	st	X+, r1
     a3c:	1d 92       	st	X+, r1
     a3e:	1d 92       	st	X+, r1
     a40:	1c 92       	st	X, r1
     a42:	1b 97       	sbiw	r26, 0x0b	; 11
					STEP[3] = 0;
     a44:	14 86       	std	Z+12, r1	; 0x0c
     a46:	15 86       	std	Z+13, r1	; 0x0d
     a48:	16 86       	std	Z+14, r1	; 0x0e
     a4a:	17 86       	std	Z+15, r1	; 0x0f
					F = 0;
     a4c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <F>
     a50:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <F+0x1>
     a54:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <F+0x2>
     a58:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <F+0x3>
					Fe = 0;
     a5c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Fe>
     a60:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <Fe+0x1>
     a64:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <Fe+0x2>
     a68:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <Fe+0x3>
					SE0 = 0.0;
     a6c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <SE0>
     a70:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <SE0+0x1>
     a74:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <SE0+0x2>
     a78:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <SE0+0x3>
					SB = 0.0;
     a7c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <SB>
     a80:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <SB+0x1>
     a84:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <SB+0x2>
     a88:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <SB+0x3>
					Transmit_Data("ok");
     a8c:	81 e1       	ldi	r24, 0x11	; 17
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     a94:	ce c3       	rjmp	.+1948   	; 0x1232 <main+0x9e4>
				case 17:
					motor_init();
     a96:	0e 94 aa 11 	call	0x2354	; 0x2354 <motor_init>
					Transmit_Data("ok");
     a9a:	81 e1       	ldi	r24, 0x11	; 17
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     aa2:	c7 c3       	rjmp	.+1934   	; 0x1232 <main+0x9e4>
				case 18: case 84:
					wait = (get_int(String ,'S')*1000);
     aa4:	63 e5       	ldi	r22, 0x53	; 83
     aa6:	82 e7       	ldi	r24, 0x72	; 114
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
     aae:	9c 01       	movw	r18, r24
     ab0:	48 ee       	ldi	r20, 0xE8	; 232
     ab2:	53 e0       	ldi	r21, 0x03	; 3
     ab4:	24 9f       	mul	r18, r20
     ab6:	c0 01       	movw	r24, r0
     ab8:	25 9f       	mul	r18, r21
     aba:	90 0d       	add	r25, r0
     abc:	34 9f       	mul	r19, r20
     abe:	90 0d       	add	r25, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	09 2e       	mov	r0, r25
     ac4:	00 0c       	add	r0, r0
     ac6:	aa 0b       	sbc	r26, r26
     ac8:	bb 0b       	sbc	r27, r27
     aca:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <wait>
     ace:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <wait+0x1>
     ad2:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <wait+0x2>
     ad6:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <wait+0x3>
					XEN_DES = find(String ,'X');
     ada:	68 e5       	ldi	r22, 0x58	; 88
     adc:	82 e7       	ldi	r24, 0x72	; 114
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 40 03 	call	0x680	; 0x680 <find>
     ae4:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <XEN_DES>
					YEN_DES = find(String ,'Y');
     ae8:	69 e5       	ldi	r22, 0x59	; 89
     aea:	82 e7       	ldi	r24, 0x72	; 114
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 40 03 	call	0x680	; 0x680 <find>
     af2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <YEN_DES>
					ZEN_DES = find(String ,'Z');
     af6:	6a e5       	ldi	r22, 0x5A	; 90
     af8:	82 e7       	ldi	r24, 0x72	; 114
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	0e 94 40 03 	call	0x680	; 0x680 <find>
     b00:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ZEN_DES>
					EEN_DES = find(String ,'E');
     b04:	65 e4       	ldi	r22, 0x45	; 69
     b06:	82 e7       	ldi	r24, 0x72	; 114
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 40 03 	call	0x680	; 0x680 <find>
     b0e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     b12:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <XEN_DES>
     b16:	88 e5       	ldi	r24, 0x58	; 88
     b18:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     b1c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <YEN_DES>
     b20:	89 e5       	ldi	r24, 0x59	; 89
     b22:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     b26:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <YEN_DES>
     b2a:	8a e5       	ldi	r24, 0x5A	; 90
     b2c:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     b30:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <EEN_DES>
     b34:	85 e4       	ldi	r24, 0x45	; 69
     b36:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
					if(wait != 0)
     b3a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <wait>
     b3e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <wait+0x1>
     b42:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <wait+0x2>
     b46:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <wait+0x3>
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	09 f1       	breq	.+66     	; 0xb94 <main+0x346>
					{
						while(wait > 0)
     b52:	f4 f0       	brlt	.+60     	; 0xb90 <main+0x342>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b54:	8f e9       	ldi	r24, 0x9F	; 159
     b56:	9f e0       	ldi	r25, 0x0F	; 15
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <main+0x30a>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x310>
     b5e:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     b60:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <wait>
     b64:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <wait+0x1>
     b68:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <wait+0x2>
     b6c:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <wait+0x3>
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	a1 09       	sbc	r26, r1
     b74:	b1 09       	sbc	r27, r1
     b76:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <wait>
     b7a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <wait+0x1>
     b7e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <wait+0x2>
     b82:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     b86:	18 16       	cp	r1, r24
     b88:	19 06       	cpc	r1, r25
     b8a:	1a 06       	cpc	r1, r26
     b8c:	1b 06       	cpc	r1, r27
     b8e:	14 f3       	brlt	.-60     	; 0xb54 <main+0x306>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     b90:	0e 94 aa 11 	call	0x2354	; 0x2354 <motor_init>
					}
					Transmit_Data("ok");
     b94:	81 e1       	ldi	r24, 0x11	; 17
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     b9c:	4a c3       	rjmp	.+1684   	; 0x1232 <main+0x9e4>
				case 82:case 83:
					old_val_1 = 0;
     b9e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_1>
     ba2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_1+0x1>
     ba6:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <old_val_1+0x2>
     baa:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <old_val_1+0x3>
					old_val_2 = 0;
     bae:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <old_val_2>
     bb2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <old_val_2+0x1>
     bb6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_2+0x2>
     bba:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_2+0x3>
					old_val_3 = 0;
     bbe:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
     bc2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
     bc6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x2>
     bca:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x3>
					STEP[0] = 0;
     bce:	d1 01       	movw	r26, r2
     bd0:	1d 92       	st	X+, r1
     bd2:	1d 92       	st	X+, r1
     bd4:	1d 92       	st	X+, r1
     bd6:	1c 92       	st	X, r1
     bd8:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     bda:	f1 01       	movw	r30, r2
     bdc:	14 82       	std	Z+4, r1	; 0x04
     bde:	15 82       	std	Z+5, r1	; 0x05
     be0:	16 82       	std	Z+6, r1	; 0x06
     be2:	17 82       	std	Z+7, r1	; 0x07
					STEP[2] = 0;
     be4:	18 96       	adiw	r26, 0x08	; 8
     be6:	1d 92       	st	X+, r1
     be8:	1d 92       	st	X+, r1
     bea:	1d 92       	st	X+, r1
     bec:	1c 92       	st	X, r1
     bee:	1b 97       	sbiw	r26, 0x0b	; 11
					STEP[3] = 0;
     bf0:	14 86       	std	Z+12, r1	; 0x0c
     bf2:	15 86       	std	Z+13, r1	; 0x0d
     bf4:	16 86       	std	Z+14, r1	; 0x0e
     bf6:	17 86       	std	Z+15, r1	; 0x0f
					Transmit_Data("ok");
     bf8:	81 e1       	ldi	r24, 0x11	; 17
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     c00:	18 c3       	rjmp	.+1584   	; 0x1232 <main+0x9e4>
     c02:	e4 e6       	ldi	r30, 0x64	; 100
     c04:	f2 e0       	ldi	r31, 0x02	; 2
     c06:	46 e5       	ldi	r20, 0x56	; 86
     c08:	52 e0       	ldi	r21, 0x02	; 2
     c0a:	26 ec       	ldi	r18, 0xC6	; 198
     c0c:	32 e0       	ldi	r19, 0x02	; 2
     c0e:	a8 eb       	ldi	r26, 0xB8	; 184
     c10:	b1 e0       	ldi	r27, 0x01	; 1
     c12:	7d 01       	movw	r14, r26
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     c14:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     c16:	da 01       	movw	r26, r20
     c18:	1d 92       	st	X+, r1
     c1a:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
     c1c:	d9 01       	movw	r26, r18
     c1e:	1d 92       	st	X+, r1
     c20:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
     c22:	d7 01       	movw	r26, r14
     c24:	1d 92       	st	X+, r1
     c26:	7d 01       	movw	r14, r26
					STEP[2] = 0;
					STEP[3] = 0;
					Transmit_Data("ok");
				break;
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
     c28:	6e e6       	ldi	r22, 0x6E	; 110
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	6e 17       	cp	r22, r30
     c2e:	7f 07       	cpc	r23, r31
     c30:	89 f7       	brne	.-30     	; 0xc14 <main+0x3c6>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
     c32:	8c 35       	cpi	r24, 0x5C	; 92
     c34:	91 05       	cpc	r25, r1
     c36:	a1 f5       	brne	.+104    	; 0xca0 <main+0x452>
					{
						Xspm = get_value(String,'X');
     c38:	68 e5       	ldi	r22, 0x58	; 88
     c3a:	82 e7       	ldi	r24, 0x72	; 114
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     c42:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <Xspm>
     c46:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <Xspm+0x1>
     c4a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <Xspm+0x2>
     c4e:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <Xspm+0x3>
						Yspm = get_value(String,'Y');
     c52:	69 e5       	ldi	r22, 0x59	; 89
     c54:	82 e7       	ldi	r24, 0x72	; 114
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     c5c:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <Yspm>
     c60:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <Yspm+0x1>
     c64:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Yspm+0x2>
     c68:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Yspm+0x3>
						Zspm = get_value(String,'Z');
     c6c:	6a e5       	ldi	r22, 0x5A	; 90
     c6e:	82 e7       	ldi	r24, 0x72	; 114
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     c76:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <Zspm>
     c7a:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <Zspm+0x1>
     c7e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <Zspm+0x2>
     c82:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <Zspm+0x3>
						Espm = get_value(String,'E');
     c86:	65 e4       	ldi	r22, 0x45	; 69
     c88:	82 e7       	ldi	r24, 0x72	; 114
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     c90:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <Espm>
     c94:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <Espm+0x1>
     c98:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Espm+0x2>
     c9c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Espm+0x3>
					}
					if (val == 502)
     ca0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <val>
     ca4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <val+0x1>
     ca8:	86 3f       	cpi	r24, 0xF6	; 246
     caa:	91 40       	sbci	r25, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <main+0x462>
     cae:	40 c0       	rjmp	.+128    	; 0xd30 <main+0x4e2>
					{
						Xspm = FXspm;
     cb0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FXspm>
     cb4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FXspm+0x1>
     cb8:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FXspm+0x2>
     cbc:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FXspm+0x3>
     cc0:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <Xspm>
     cc4:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <Xspm+0x1>
     cc8:	a0 93 c4 02 	sts	0x02C4, r26	; 0x8002c4 <Xspm+0x2>
     ccc:	b0 93 c5 02 	sts	0x02C5, r27	; 0x8002c5 <Xspm+0x3>
						Yspm = FYspm;
     cd0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FYspm>
     cd4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FYspm+0x1>
     cd8:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FYspm+0x2>
     cdc:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FYspm+0x3>
     ce0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <Yspm>
     ce4:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <Yspm+0x1>
     ce8:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <Yspm+0x2>
     cec:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <Yspm+0x3>
						Zspm = FZspm;
     cf0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FZspm>
     cf4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FZspm+0x1>
     cf8:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FZspm+0x2>
     cfc:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FZspm+0x3>
     d00:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <Zspm>
     d04:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <Zspm+0x1>
     d08:	a0 93 62 02 	sts	0x0262, r26	; 0x800262 <Zspm+0x2>
     d0c:	b0 93 63 02 	sts	0x0263, r27	; 0x800263 <Zspm+0x3>
						Espm = FEspm;
     d10:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <FEspm>
     d14:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <FEspm+0x1>
     d18:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <FEspm+0x2>
     d1c:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <FEspm+0x3>
     d20:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <Espm>
     d24:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <Espm+0x1>
     d28:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <Espm+0x2>
     d2c:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
     d30:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <Xspm>
     d34:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <Xspm+0x1>
     d38:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <Xspm+0x2>
     d3c:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <Xspm+0x3>
     d40:	04 e1       	ldi	r16, 0x14	; 20
     d42:	11 e0       	ldi	r17, 0x01	; 1
     d44:	23 e0       	ldi	r18, 0x03	; 3
     d46:	42 e0       	ldi	r20, 0x02	; 2
     d48:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	84 e6       	ldi	r24, 0x64	; 100
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
     d5c:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <Yspm>
     d60:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <Yspm+0x1>
     d64:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Yspm+0x2>
     d68:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Yspm+0x3>
     d6c:	23 e0       	ldi	r18, 0x03	; 3
     d6e:	42 e0       	ldi	r20, 0x02	; 2
     d70:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
     d74:	9f 93       	push	r25
     d76:	8f 93       	push	r24
     d78:	e6 e5       	ldi	r30, 0x56	; 86
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	ff 93       	push	r31
     d7e:	ef 93       	push	r30
     d80:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
     d84:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Zspm>
     d88:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Zspm+0x1>
     d8c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <Zspm+0x2>
     d90:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <Zspm+0x3>
     d94:	23 e0       	ldi	r18, 0x03	; 3
     d96:	42 e0       	ldi	r20, 0x02	; 2
     d98:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	46 ec       	ldi	r20, 0xC6	; 198
     da2:	52 e0       	ldi	r21, 0x02	; 2
     da4:	5f 93       	push	r21
     da6:	4f 93       	push	r20
     da8:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
     dac:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <Espm>
     db0:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <Espm+0x1>
     db4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Espm+0x2>
     db8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <Espm+0x3>
     dbc:	23 e0       	ldi	r18, 0x03	; 3
     dbe:	42 e0       	ldi	r20, 0x02	; 2
     dc0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	88 eb       	ldi	r24, 0xB8	; 184
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9f 93       	push	r25
     dce:	8f 93       	push	r24
     dd0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     dd4:	45 e0       	ldi	r20, 0x05	; 5
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	64 e6       	ldi	r22, 0x64	; 100
     dda:	72 e0       	ldi	r23, 0x02	; 2
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     de4:	45 e0       	ldi	r20, 0x05	; 5
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	66 e5       	ldi	r22, 0x56	; 86
     dea:	72 e0       	ldi	r23, 0x02	; 2
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     df4:	45 e0       	ldi	r20, 0x05	; 5
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	66 ec       	ldi	r22, 0xC6	; 198
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	8a e0       	ldi	r24, 0x0A	; 10
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     e04:	45 e0       	ldi	r20, 0x05	; 5
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	68 eb       	ldi	r22, 0xB8	; 184
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	8f e0       	ldi	r24, 0x0F	; 15
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok");
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	05 c2       	rjmp	.+1034   	; 0x1232 <main+0x9e4>
				case 104:
					SE0 = get_value(String,'S');
     e28:	63 e5       	ldi	r22, 0x53	; 83
     e2a:	82 e7       	ldi	r24, 0x72	; 114
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     e32:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <SE0>
     e36:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <SE0+0x1>
     e3a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <SE0+0x2>
     e3e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <SE0+0x3>
					Transmit_Data("ok");
     e42:	81 e1       	ldi	r24, 0x11	; 17
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     e4a:	f3 c1       	rjmp	.+998    	; 0x1232 <main+0x9e4>
				case 106:
					OCR2 = get_value(String,'S');
     e4c:	63 e5       	ldi	r22, 0x53	; 83
     e4e:	82 e7       	ldi	r24, 0x72	; 114
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     e56:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixunssfsi>
     e5a:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok");
     e5c:	81 e1       	ldi	r24, 0x11	; 17
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     e64:	e6 c1       	rjmp	.+972    	; 0x1232 <main+0x9e4>
				case 107:
					OCR2 = 0;
     e66:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok");
     e68:	81 e1       	ldi	r24, 0x11	; 17
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     e70:	e0 c1       	rjmp	.+960    	; 0x1232 <main+0x9e4>
				case 109:
					SE0 = get_value(String,'S');
     e72:	63 e5       	ldi	r22, 0x53	; 83
     e74:	82 e7       	ldi	r24, 0x72	; 114
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     e7c:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <SE0>
     e80:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <SE0+0x1>
     e84:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <SE0+0x2>
     e88:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <SE0+0x3>
					while(getTemp(T0) < SE0);
     e8c:	80 e4       	ldi	r24, 0x40	; 64
     e8e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     e92:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <SE0>
     e96:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <SE0+0x1>
     e9a:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <SE0+0x2>
     e9e:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <SE0+0x3>
     ea2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	8c f3       	brlt	.-30     	; 0xe8c <main+0x63e>
					Transmit_Data("ok");
     eaa:	81 e1       	ldi	r24, 0x11	; 17
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     eb2:	bf c1       	rjmp	.+894    	; 0x1232 <main+0x9e4>
				case 110:
					NumberOfPLine = 0;
     eb4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <NumberOfPLine+0x1>
     eb8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <NumberOfPLine>
					Transmit_Data("ok");
     ebc:	81 e1       	ldi	r24, 0x11	; 17
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;					
     ec4:	b6 c1       	rjmp	.+876    	; 0x1232 <main+0x9e4>
// 						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
// 						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
// 					Transmit_Data(pos);
// 				break;
				case 140:
					SB = get_value(String,'S');
     ec6:	63 e5       	ldi	r22, 0x53	; 83
     ec8:	82 e7       	ldi	r24, 0x72	; 114
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ed0:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <SB>
     ed4:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <SB+0x1>
     ed8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <SB+0x2>
     edc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <SB+0x3>
					if (SB == 0)
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
     eea:	81 11       	cpse	r24, r1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <main+0x6a6>
					{
						BED_Activ = 0;
     eee:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <BED_Activ>
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <main+0x6ac>
					} 
					else
					{
						BED_Activ = 1;
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <BED_Activ>
					}
					Transmit_Data("ok");
     efa:	81 e1       	ldi	r24, 0x11	; 17
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     f02:	97 c1       	rjmp	.+814    	; 0x1232 <main+0x9e4>
				case 190:
					SB = get_value(String,'S');
     f04:	63 e5       	ldi	r22, 0x53	; 83
     f06:	82 e7       	ldi	r24, 0x72	; 114
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     f0e:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <SB>
     f12:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <SB+0x1>
     f16:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <SB+0x2>
     f1a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <SB+0x3>
					while(getTemp(T2) < SB);
     f1e:	82 e4       	ldi	r24, 0x42	; 66
     f20:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     f24:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <SB>
     f28:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <SB+0x1>
     f2c:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <SB+0x2>
     f30:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <SB+0x3>
     f34:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
     f38:	88 23       	and	r24, r24
     f3a:	8c f3       	brlt	.-30     	; 0xf1e <main+0x6d0>
					Transmit_Data("ok");
     f3c:	81 e1       	ldi	r24, 0x11	; 17
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     f44:	76 c1       	rjmp	.+748    	; 0x1232 <main+0x9e4>
				case 206:
					old_val_1 = 0;
     f46:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <old_val_1>
     f4a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <old_val_1+0x1>
     f4e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <old_val_1+0x2>
     f52:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <old_val_1+0x3>
					old_val_2 = 0;
     f56:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <old_val_2>
     f5a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <old_val_2+0x1>
     f5e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <old_val_2+0x2>
     f62:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <old_val_2+0x3>
					old_val_3 = 0;
     f66:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
     f6a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
     f6e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x2>
     f72:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x3>
					homeSet = 1;
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <homeSet>
					Transmit_Data("ok");
     f7c:	81 e1       	ldi	r24, 0x11	; 17
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     f84:	56 c1       	rjmp	.+684    	; 0x1232 <main+0x9e4>
				case 302:
					SE0 = get_value(String,'S');
     f86:	63 e5       	ldi	r22, 0x53	; 83
     f88:	82 e7       	ldi	r24, 0x72	; 114
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     f90:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <SE0>
     f94:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <SE0+0x1>
     f98:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <SE0+0x2>
     f9c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <SE0+0x3>
					if (SE0 <= 25 )
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	48 ec       	ldi	r20, 0xC8	; 200
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
     fac:	18 16       	cp	r1, r24
     fae:	1c f0       	brlt	.+6      	; 0xfb6 <main+0x768>
					{
						Fextrud = 1;
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <Fextrud>
					}
					Transmit_Data("ok");
     fb6:	81 e1       	ldi	r24, 0x11	; 17
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
     fbe:	39 c1       	rjmp	.+626    	; 0x1232 <main+0x9e4>
				case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     fc0:	45 e0       	ldi	r20, 0x05	; 5
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	64 e6       	ldi	r22, 0x64	; 100
     fc6:	72 e0       	ldi	r23, 0x02	; 2
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     fd0:	45 e0       	ldi	r20, 0x05	; 5
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	66 e5       	ldi	r22, 0x56	; 86
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     fe0:	45 e0       	ldi	r20, 0x05	; 5
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	66 ec       	ldi	r22, 0xC6	; 198
     fe6:	72 e0       	ldi	r23, 0x02	; 2
     fe8:	8a e0       	ldi	r24, 0x0A	; 10
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     ff0:	45 e0       	ldi	r20, 0x05	; 5
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	68 eb       	ldi	r22, 0xB8	; 184
     ff6:	71 e0       	ldi	r23, 0x01	; 1
     ff8:	8f e0       	ldi	r24, 0x0F	; 15
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    1000:	84 e6       	ldi	r24, 0x64	; 100
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
    1008:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <Xspm>
    100c:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <Xspm+0x1>
    1010:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <Xspm+0x2>
    1014:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <Xspm+0x3>
					Yspm = atof(Y_pos);
    1018:	86 e5       	ldi	r24, 0x56	; 86
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
    1020:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <Yspm>
    1024:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <Yspm+0x1>
    1028:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Yspm+0x2>
    102c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Yspm+0x3>
					Zspm = atof(Z_pos);
    1030:	86 ec       	ldi	r24, 0xC6	; 198
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
    1038:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <Zspm>
    103c:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <Zspm+0x1>
    1040:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <Zspm+0x2>
    1044:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <Zspm+0x3>
					Espm = atof(E_pos);
    1048:	88 eb       	ldi	r24, 0xB8	; 184
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <atof>
    1050:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <Espm>
    1054:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <Espm+0x1>
    1058:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Espm+0x2>
    105c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Espm+0x3>
					Transmit_Data("ok");
    1060:	81 e1       	ldi	r24, 0x11	; 17
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
    1068:	e4 c0       	rjmp	.+456    	; 0x1232 <main+0x9e4>
    106a:	e4 e6       	ldi	r30, 0x64	; 100
    106c:	f2 e0       	ldi	r31, 0x02	; 2
    106e:	26 e5       	ldi	r18, 0x56	; 86
    1070:	32 e0       	ldi	r19, 0x02	; 2
    1072:	86 ec       	ldi	r24, 0xC6	; 198
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	a8 eb       	ldi	r26, 0xB8	; 184
    1078:	b1 e0       	ldi	r27, 0x01	; 1
    107a:	bd 01       	movw	r22, r26
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    107c:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    107e:	d9 01       	movw	r26, r18
    1080:	1d 92       	st	X+, r1
    1082:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    1084:	dc 01       	movw	r26, r24
    1086:	1d 92       	st	X+, r1
    1088:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    108a:	db 01       	movw	r26, r22
    108c:	1d 92       	st	X+, r1
    108e:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok");
				break;
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
    1090:	b2 e0       	ldi	r27, 0x02	; 2
    1092:	ee 36       	cpi	r30, 0x6E	; 110
    1094:	fb 07       	cpc	r31, r27
    1096:	91 f7       	brne	.-28     	; 0x107c <main+0x82e>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    1098:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <Xspm>
    109c:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <Xspm+0x1>
    10a0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <Xspm+0x2>
    10a4:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <Xspm+0x3>
    10a8:	04 e1       	ldi	r16, 0x14	; 20
    10aa:	11 e0       	ldi	r17, 0x01	; 1
    10ac:	23 e0       	ldi	r18, 0x03	; 3
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	e4 e6       	ldi	r30, 0x64	; 100
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	ff 93       	push	r31
    10be:	ef 93       	push	r30
    10c0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    10c4:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <Yspm>
    10c8:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <Yspm+0x1>
    10cc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Yspm+0x2>
    10d0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Yspm+0x3>
    10d4:	23 e0       	ldi	r18, 0x03	; 3
    10d6:	42 e0       	ldi	r20, 0x02	; 2
    10d8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    10dc:	9f 93       	push	r25
    10de:	8f 93       	push	r24
    10e0:	46 e5       	ldi	r20, 0x56	; 86
    10e2:	52 e0       	ldi	r21, 0x02	; 2
    10e4:	5f 93       	push	r21
    10e6:	4f 93       	push	r20
    10e8:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    10ec:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Zspm>
    10f0:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Zspm+0x1>
    10f4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <Zspm+0x2>
    10f8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <Zspm+0x3>
    10fc:	23 e0       	ldi	r18, 0x03	; 3
    10fe:	42 e0       	ldi	r20, 0x02	; 2
    1100:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	86 ec       	ldi	r24, 0xC6	; 198
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1114:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <Espm>
    1118:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <Espm+0x1>
    111c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Espm+0x2>
    1120:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <Espm+0x3>
    1124:	23 e0       	ldi	r18, 0x03	; 3
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	e8 eb       	ldi	r30, 0xB8	; 184
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	ff 93       	push	r31
    1136:	ef 93       	push	r30
    1138:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
					char acc[44]={'X',
    113c:	88 e5       	ldi	r24, 0x58	; 88
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	a4 e6       	ldi	r26, 0x64	; 100
    1142:	b2 e0       	ldi	r27, 0x02	; 2
    1144:	8c 91       	ld	r24, X
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <X_pos+0x1>
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <X_pos+0x2>
    1152:	8c 83       	std	Y+4, r24	; 0x04
    1154:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <X_pos+0x3>
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <X_pos+0x4>
    115e:	8e 83       	std	Y+6, r24	; 0x06
    1160:	b3 e7       	ldi	r27, 0x73	; 115
    1162:	bf 83       	std	Y+7, r27	; 0x07
    1164:	ef e2       	ldi	r30, 0x2F	; 47
    1166:	e8 87       	std	Y+8, r30	; 0x08
    1168:	8d e6       	ldi	r24, 0x6D	; 109
    116a:	89 87       	std	Y+9, r24	; 0x09
    116c:	8a 87       	std	Y+10, r24	; 0x0a
    116e:	90 e2       	ldi	r25, 0x20	; 32
    1170:	9b 87       	std	Y+11, r25	; 0x0b
    1172:	29 e5       	ldi	r18, 0x59	; 89
    1174:	2c 87       	std	Y+12, r18	; 0x0c
    1176:	a6 e5       	ldi	r26, 0x56	; 86
    1178:	b2 e0       	ldi	r27, 0x02	; 2
    117a:	2c 91       	ld	r18, X
    117c:	2d 87       	std	Y+13, r18	; 0x0d
    117e:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <Y_pos+0x1>
    1182:	2e 87       	std	Y+14, r18	; 0x0e
    1184:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <Y_pos+0x2>
    1188:	2f 87       	std	Y+15, r18	; 0x0f
    118a:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <Y_pos+0x3>
    118e:	28 8b       	std	Y+16, r18	; 0x10
    1190:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <Y_pos+0x4>
    1194:	29 8b       	std	Y+17, r18	; 0x11
    1196:	b3 e7       	ldi	r27, 0x73	; 115
    1198:	ba 8b       	std	Y+18, r27	; 0x12
    119a:	eb 8b       	std	Y+19, r30	; 0x13
    119c:	8c 8b       	std	Y+20, r24	; 0x14
    119e:	8d 8b       	std	Y+21, r24	; 0x15
    11a0:	9e 8b       	std	Y+22, r25	; 0x16
    11a2:	2a e5       	ldi	r18, 0x5A	; 90
    11a4:	2f 8b       	std	Y+23, r18	; 0x17
    11a6:	e6 ec       	ldi	r30, 0xC6	; 198
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	20 81       	ld	r18, Z
    11ac:	28 8f       	std	Y+24, r18	; 0x18
    11ae:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <Z_pos+0x1>
    11b2:	29 8f       	std	Y+25, r18	; 0x19
    11b4:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <Z_pos+0x2>
    11b8:	2a 8f       	std	Y+26, r18	; 0x1a
    11ba:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <Z_pos+0x3>
    11be:	2b 8f       	std	Y+27, r18	; 0x1b
    11c0:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <Z_pos+0x4>
    11c4:	2c 8f       	std	Y+28, r18	; 0x1c
    11c6:	bd 8f       	std	Y+29, r27	; 0x1d
    11c8:	ff e2       	ldi	r31, 0x2F	; 47
    11ca:	fe 8f       	std	Y+30, r31	; 0x1e
    11cc:	8f 8f       	std	Y+31, r24	; 0x1f
    11ce:	88 a3       	std	Y+32, r24	; 0x20
    11d0:	99 a3       	std	Y+33, r25	; 0x21
    11d2:	95 e4       	ldi	r25, 0x45	; 69
    11d4:	9a a3       	std	Y+34, r25	; 0x22
    11d6:	a8 eb       	ldi	r26, 0xB8	; 184
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	9c 91       	ld	r25, X
    11dc:	9b a3       	std	Y+35, r25	; 0x23
    11de:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <E_pos+0x1>
    11e2:	9c a3       	std	Y+36, r25	; 0x24
    11e4:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <E_pos+0x2>
    11e8:	9d a3       	std	Y+37, r25	; 0x25
    11ea:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <E_pos+0x3>
    11ee:	9e a3       	std	Y+38, r25	; 0x26
    11f0:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <E_pos+0x4>
    11f4:	9f a3       	std	Y+39, r25	; 0x27
    11f6:	b3 e7       	ldi	r27, 0x73	; 115
    11f8:	b8 a7       	std	Y+40, r27	; 0x28
    11fa:	f9 a7       	std	Y+41, r31	; 0x29
    11fc:	8a a7       	std	Y+42, r24	; 0x2a
    11fe:	8b a7       	std	Y+43, r24	; 0x2b
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	8c a7       	std	Y+44, r24	; 0x2c
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	0d c0       	rjmp	.+26     	; 0x1232 <main+0x9e4>
    1218:	e2 e7       	ldi	r30, 0x72	; 114
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	a6 e0       	ldi	r26, 0x06	; 6
    121e:	b2 e0       	ldi	r27, 0x02	; 2
				default:
					for(int i = 0;i < 80; i++)
						String2[i] = String[i];
    1220:	81 91       	ld	r24, Z+
    1222:	8d 93       	st	X+, r24
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
				break;
				default:
					for(int i = 0;i < 80; i++)
    1224:	ce 16       	cp	r12, r30
    1226:	df 06       	cpc	r13, r31
    1228:	d9 f7       	brne	.-10     	; 0x1220 <main+0x9d2>
						String2[i] = String[i];
					 status = 1;
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	f0 93 84 01 	sts	0x0184, r31	; 0x800184 <status>
					 sei();
    1230:	78 94       	sei
				break;				
			}
			status = 0;	
    1232:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <status>
    1236:	75 cb       	rjmp	.-2326   	; 0x922 <main+0xd4>
		}
		else if (String[0] == 'G')
    1238:	87 34       	cpi	r24, 0x47	; 71
    123a:	09 f0       	breq	.+2      	; 0x123e <main+0x9f0>
    123c:	7d c4       	rjmp	.+2298   	; 0x1b38 <main+0x12ea>
		{
			val = get_int (String,'G');
    123e:	67 e4       	ldi	r22, 0x47	; 71
    1240:	82 e7       	ldi	r24, 0x72	; 114
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1248:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <val+0x1>
    124c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <val>
			sei();
    1250:	78 94       	sei
			switch (val)
    1252:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <val>
    1256:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <val+0x1>
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	91 05       	cpc	r25, r1
    125e:	3c f4       	brge	.+14     	; 0x126e <main+0xa20>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	91 05       	cpc	r25, r1
    1264:	0c f0       	brlt	.+2      	; 0x1268 <main+0xa1a>
    1266:	69 c1       	rjmp	.+722    	; 0x153a <main+0xcec>
    1268:	99 23       	and	r25, r25
    126a:	54 f4       	brge	.+20     	; 0x1280 <main+0xa32>
    126c:	50 c4       	rjmp	.+2208   	; 0x1b0e <main+0x12c0>
    126e:	8c 31       	cpi	r24, 0x1C	; 28
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <main+0xa28>
    1274:	10 c4       	rjmp	.+2080   	; 0x1a96 <main+0x1248>
    1276:	8c 35       	cpi	r24, 0x5C	; 92
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <main+0xa30>
    127c:	11 c4       	rjmp	.+2082   	; 0x1aa0 <main+0x1252>
    127e:	47 c4       	rjmp	.+2190   	; 0x1b0e <main+0x12c0>
			{
				case 0:case 1:
					motor_init();
    1280:	0e 94 aa 11 	call	0x2354	; 0x2354 <motor_init>
					value_1 = get_value(String,'X');           //extract first value
    1284:	68 e5       	ldi	r22, 0x58	; 88
    1286:	82 e7       	ldi	r24, 0x72	; 114
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    128e:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <value_1>
    1292:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <value_1+0x1>
    1296:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <value_1+0x2>
    129a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <value_1+0x3>
					value_2 = get_value(String,'Y'); //call function to extract second value
    129e:	69 e5       	ldi	r22, 0x59	; 89
    12a0:	82 e7       	ldi	r24, 0x72	; 114
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    12a8:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <value_2>
    12ac:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <value_2+0x1>
    12b0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <value_2+0x2>
    12b4:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <value_2+0x3>
					value_3 = get_value(String,'Z'); //call function to extract third value
    12b8:	6a e5       	ldi	r22, 0x5A	; 90
    12ba:	82 e7       	ldi	r24, 0x72	; 114
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    12c2:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <value_3>
    12c6:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <value_3+0x1>
    12ca:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <value_3+0x2>
    12ce:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <value_3+0x3>
					STEP[3] = get_value(String,'E')*Espm;
    12d2:	65 e4       	ldi	r22, 0x45	; 69
    12d4:	82 e7       	ldi	r24, 0x72	; 114
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <Espm>
    12e4:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <Espm+0x1>
    12e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Espm+0x2>
    12ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <Espm+0x3>
    12f0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    12f4:	d1 01       	movw	r26, r2
    12f6:	1c 96       	adiw	r26, 0x0c	; 12
    12f8:	6d 93       	st	X+, r22
    12fa:	7d 93       	st	X+, r23
    12fc:	8d 93       	st	X+, r24
    12fe:	9c 93       	st	X, r25
    1300:	1f 97       	sbiw	r26, 0x0f	; 15
					if ((value_1 && value_2 && value_3) == 0)
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <value_1>
    130c:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <value_1+0x1>
    1310:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <value_1+0x2>
    1314:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <value_1+0x3>
    1318:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    131c:	88 23       	and	r24, r24
    131e:	09 f4       	brne	.+2      	; 0x1322 <main+0xad4>
    1320:	36 c4       	rjmp	.+2156   	; 0x1b8e <main+0x1340>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <value_2>
    132c:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <value_2+0x1>
    1330:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <value_2+0x2>
    1334:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <value_2+0x3>
    1338:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <main+0xaf4>
    1340:	26 c4       	rjmp	.+2124   	; 0x1b8e <main+0x1340>
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <value_3>
    134c:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <value_3+0x1>
    1350:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <value_3+0x2>
    1354:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <value_3+0x3>
    1358:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    135c:	81 11       	cpse	r24, r1
    135e:	2e c4       	rjmp	.+2140   	; 0x1bbc <main+0x136e>
    1360:	16 c4       	rjmp	.+2092   	; 0x1b8e <main+0x1340>
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							Fe = FN;
    1362:	80 92 6c 01 	sts	0x016C, r8	; 0x80016c <Fe>
    1366:	90 92 6d 01 	sts	0x016D, r9	; 0x80016d <Fe+0x1>
    136a:	a0 92 6e 01 	sts	0x016E, r10	; 0x80016e <Fe+0x2>
    136e:	b0 92 6f 01 	sts	0x016F, r11	; 0x80016f <Fe+0x3>
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <main+0xb36>
					else
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							F = FN;
    1374:	80 92 74 01 	sts	0x0174, r8	; 0x800174 <F>
    1378:	90 92 75 01 	sts	0x0175, r9	; 0x800175 <F+0x1>
    137c:	a0 92 76 01 	sts	0x0176, r10	; 0x800176 <F+0x2>
    1380:	b0 92 77 01 	sts	0x0177, r11	; 0x800177 <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	48 e4       	ldi	r20, 0x48	; 72
    138a:	53 e4       	ldi	r21, 0x43	; 67
    138c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <value_1>
    1390:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <value_1+0x1>
    1394:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <value_1+0x2>
    1398:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <value_1+0x3>
    139c:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	0c f4       	brge	.+2      	; 0x13a6 <main+0xb58>
    13a4:	c5 c0       	rjmp	.+394    	; 0x1530 <main+0xce2>
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	48 e4       	ldi	r20, 0x48	; 72
    13ac:	53 e4       	ldi	r21, 0x43	; 67
    13ae:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <value_2>
    13b2:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <value_2+0x1>
    13b6:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <value_2+0x2>
    13ba:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <value_2+0x3>
    13be:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	0c f4       	brge	.+2      	; 0x13c8 <main+0xb7a>
    13c6:	b4 c0       	rjmp	.+360    	; 0x1530 <main+0xce2>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a ef       	ldi	r20, 0xFA	; 250
    13ce:	53 e4       	ldi	r21, 0x43	; 67
    13d0:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <value_3>
    13d4:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <value_3+0x1>
    13d8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <value_3+0x2>
    13dc:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <value_3+0x3>
    13e0:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	0c f4       	brge	.+2      	; 0x13ea <main+0xb9c>
    13e8:	a3 c0       	rjmp	.+326    	; 0x1530 <main+0xce2>

					{
						status = 1;
    13ea:	b1 e0       	ldi	r27, 0x01	; 1
    13ec:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <status>
						sei();
    13f0:	78 94       	sei
						STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    13f2:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <value_1>
    13f6:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <value_1+0x1>
    13fa:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <value_1+0x2>
    13fe:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <value_1+0x3>
    1402:	8a e4       	ldi	r24, 0x4A	; 74
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <Xspm>
    1412:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <Xspm+0x1>
    1416:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <Xspm+0x2>
    141a:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <Xspm+0x3>
    141e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1422:	f1 01       	movw	r30, r2
    1424:	60 83       	st	Z, r22
    1426:	71 83       	std	Z+1, r23	; 0x01
    1428:	82 83       	std	Z+2, r24	; 0x02
    142a:	93 83       	std	Z+3, r25	; 0x03
						STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    142c:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <value_2>
    1430:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <value_2+0x1>
    1434:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <value_2+0x2>
    1438:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <value_2+0x3>
    143c:	86 e4       	ldi	r24, 0x46	; 70
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
    1448:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <Yspm>
    144c:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <Yspm+0x1>
    1450:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Yspm+0x2>
    1454:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Yspm+0x3>
    1458:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    145c:	d1 01       	movw	r26, r2
    145e:	14 96       	adiw	r26, 0x04	; 4
    1460:	6d 93       	st	X+, r22
    1462:	7d 93       	st	X+, r23
    1464:	8d 93       	st	X+, r24
    1466:	9c 93       	st	X, r25
    1468:	17 97       	sbiw	r26, 0x07	; 7
						STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    146a:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <value_3>
    146e:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <value_3+0x1>
    1472:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <value_3+0x2>
    1476:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <value_3+0x3>
    147a:	82 e4       	ldi	r24, 0x42	; 66
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1482:	9b 01       	movw	r18, r22
    1484:	ac 01       	movw	r20, r24
    1486:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Zspm>
    148a:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Zspm+0x1>
    148e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <Zspm+0x2>
    1492:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <Zspm+0x3>
    1496:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    149a:	f1 01       	movw	r30, r2
    149c:	60 87       	std	Z+8, r22	; 0x08
    149e:	71 87       	std	Z+9, r23	; 0x09
    14a0:	82 87       	std	Z+10, r24	; 0x0a
    14a2:	93 87       	std	Z+11, r25	; 0x0b
						value_1 = 0;
    14a4:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <value_1>
    14a8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <value_1+0x1>
    14ac:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <value_1+0x2>
    14b0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <value_1+0x3>
						value_2 = 0;
    14b4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <value_2>
    14b8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <value_2+0x1>
    14bc:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <value_2+0x2>
    14c0:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <value_2+0x3>
						value_3 = 0;
    14c4:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <value_3>
    14c8:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <value_3+0x1>
    14cc:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <value_3+0x2>
    14d0:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <value_3+0x3>
						if ((extrud || Fextrud))
    14d4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <extrud>
    14d8:	81 11       	cpse	r24, r1
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <main+0xc96>
    14dc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <Fextrud>
    14e0:	88 23       	and	r24, r24
    14e2:	f1 f0       	breq	.+60     	; 0x1520 <main+0xcd2>
						{
							motor_movement(STEP,F,Fe);
    14e4:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <Fe>
    14e8:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <Fe+0x1>
    14ec:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Fe+0x2>
    14f0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Fe+0x3>
    14f4:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    14f8:	4b 01       	movw	r8, r22
    14fa:	5c 01       	movw	r10, r24
    14fc:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <F>
    1500:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <F+0x1>
    1504:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <F+0x2>
    1508:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <F+0x3>
    150c:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    1510:	ab 01       	movw	r20, r22
    1512:	bc 01       	movw	r22, r24
    1514:	95 01       	movw	r18, r10
    1516:	84 01       	movw	r16, r8
    1518:	c1 01       	movw	r24, r2
    151a:	0e 94 38 10 	call	0x2070	; 0x2070 <motor_movement>
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <main+0xce2>
						} 
						else
						{
							Transmit_Data("error extruder temp.");
    1520:	87 e1       	ldi	r24, 0x17	; 23
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
							Transmit_Char('\r');
    1528:	8d e0       	ldi	r24, 0x0D	; 13
    152a:	0e 94 33 13 	call	0x2666	; 0x2666 <Transmit_Char>
							break;
    152e:	ef c2       	rjmp	.+1502   	; 0x1b0e <main+0x12c0>
						}						
					}
					Transmit_Data("ok");
    1530:	81 e1       	ldi	r24, 0x11	; 17
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
    1538:	ea c2       	rjmp	.+1492   	; 0x1b0e <main+0x12c0>
				case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    153a:	68 e5       	ldi	r22, 0x58	; 88
    153c:	82 e7       	ldi	r24, 0x72	; 114
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1544:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <value_1>
    1548:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <value_1+0x1>
    154c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <value_1+0x2>
    1550:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <value_1+0x3>
					value_2 = get_value(String,'Y'); //call function to extract second value
    1554:	69 e5       	ldi	r22, 0x59	; 89
    1556:	82 e7       	ldi	r24, 0x72	; 114
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    155e:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <value_2>
    1562:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <value_2+0x1>
    1566:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <value_2+0x2>
    156a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <value_2+0x3>
					I = get_value(String,'I');
    156e:	69 e4       	ldi	r22, 0x49	; 73
    1570:	82 e7       	ldi	r24, 0x72	; 114
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1578:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <I>
    157c:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <I+0x1>
    1580:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <I+0x2>
    1584:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <I+0x3>
					J = get_value(String,'J');
    1588:	6a e4       	ldi	r22, 0x4A	; 74
    158a:	82 e7       	ldi	r24, 0x72	; 114
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1592:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <J>
    1596:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <J+0x1>
    159a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <J+0x2>
    159e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <J+0x3>
					FN = get_value(String,'F');
    15a2:	66 e4       	ldi	r22, 0x46	; 70
    15a4:	82 e7       	ldi	r24, 0x72	; 114
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15ac:	4b 01       	movw	r8, r22
    15ae:	5c 01       	movw	r10, r24
    15b0:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <FN>
    15b4:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <FN+0x1>
    15b8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <FN+0x2>
    15bc:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <FN+0x3>
					if (FN != 0)
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	41 f0       	breq	.+16     	; 0x15de <main+0xd90>
					{
						F = FN;
    15ce:	80 92 74 01 	sts	0x0174, r8	; 0x800174 <F>
    15d2:	90 92 75 01 	sts	0x0175, r9	; 0x800175 <F+0x1>
    15d6:	a0 92 76 01 	sts	0x0176, r10	; 0x800176 <F+0x2>
    15da:	b0 92 77 01 	sts	0x0177, r11	; 0x800177 <F+0x3>
					}
					R = get_value(String,'R');
    15de:	62 e5       	ldi	r22, 0x52	; 82
    15e0:	82 e7       	ldi	r24, 0x72	; 114
    15e2:	92 e0       	ldi	r25, 0x02	; 2
    15e4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15e8:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <R>
    15ec:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <R+0x1>
    15f0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <R+0x2>
    15f4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <R+0x3>
					if (R == 0)
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	a9 01       	movw	r20, r18
    15fe:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    1602:	81 11       	cpse	r24, r1
    1604:	f2 c2       	rjmp	.+1508   	; 0x1bea <main+0x139c>
					{
						R = sqrt(pow(I,2)+pow(J,2));
    1606:	80 90 64 01 	lds	r8, 0x0164	; 0x800164 <I>
    160a:	90 90 65 01 	lds	r9, 0x0165	; 0x800165 <I+0x1>
    160e:	a0 90 66 01 	lds	r10, 0x0166	; 0x800166 <I+0x2>
    1612:	b0 90 67 01 	lds	r11, 0x0167	; 0x800167 <I+0x3>
    1616:	40 90 60 01 	lds	r4, 0x0160	; 0x800160 <J>
    161a:	50 90 61 01 	lds	r5, 0x0161	; 0x800161 <J+0x1>
    161e:	60 90 62 01 	lds	r6, 0x0162	; 0x800162 <J+0x2>
    1622:	70 90 63 01 	lds	r7, 0x0163	; 0x800163 <J+0x3>
    1626:	a3 01       	movw	r20, r6
    1628:	92 01       	movw	r18, r4
    162a:	c3 01       	movw	r24, r6
    162c:	b2 01       	movw	r22, r4
    162e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1632:	6d a7       	std	Y+45, r22	; 0x2d
    1634:	7e a7       	std	Y+46, r23	; 0x2e
    1636:	8f a7       	std	Y+47, r24	; 0x2f
    1638:	98 ab       	std	Y+48, r25	; 0x30
    163a:	a3 01       	movw	r20, r6
    163c:	92 01       	movw	r18, r4
    163e:	c3 01       	movw	r24, r6
    1640:	b2 01       	movw	r22, r4
    1642:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1646:	2b 01       	movw	r4, r22
    1648:	3c 01       	movw	r6, r24
    164a:	a5 01       	movw	r20, r10
    164c:	94 01       	movw	r18, r8
    164e:	c5 01       	movw	r24, r10
    1650:	b4 01       	movw	r22, r8
    1652:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	c3 01       	movw	r24, r6
    165c:	b2 01       	movw	r22, r4
    165e:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    1662:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <sqrt>
    1666:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <R>
    166a:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <R+0x1>
    166e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <R+0x2>
    1672:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <R+0x3>
    1676:	b9 c2       	rjmp	.+1394   	; 0x1bea <main+0x139c>
					} 
					for (int th = 0 ; th <= 360 ; th++)
					{
						double xc = R*cos(th)*cos(th);
    1678:	b7 01       	movw	r22, r14
    167a:	0f 2c       	mov	r0, r15
    167c:	00 0c       	add	r0, r0
    167e:	88 0b       	sbc	r24, r24
    1680:	99 0b       	sbc	r25, r25
    1682:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
    1686:	4b 01       	movw	r8, r22
    1688:	5c 01       	movw	r10, r24
    168a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <cos>
    168e:	6d a7       	std	Y+45, r22	; 0x2d
    1690:	7e a7       	std	Y+46, r23	; 0x2e
    1692:	8f a7       	std	Y+47, r24	; 0x2f
    1694:	98 ab       	std	Y+48, r25	; 0x30
    1696:	40 90 5c 01 	lds	r4, 0x015C	; 0x80015c <R>
    169a:	50 90 5d 01 	lds	r5, 0x015D	; 0x80015d <R+0x1>
    169e:	60 90 5e 01 	lds	r6, 0x015E	; 0x80015e <R+0x2>
    16a2:	70 90 5f 01 	lds	r7, 0x015F	; 0x80015f <R+0x3>
    16a6:	a3 01       	movw	r20, r6
    16a8:	92 01       	movw	r18, r4
    16aa:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    16ae:	2d a5       	ldd	r18, Y+45	; 0x2d
    16b0:	3e a5       	ldd	r19, Y+46	; 0x2e
    16b2:	4f a5       	ldd	r20, Y+47	; 0x2f
    16b4:	58 a9       	ldd	r21, Y+48	; 0x30
    16b6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    16ba:	6d a7       	std	Y+45, r22	; 0x2d
    16bc:	7e a7       	std	Y+46, r23	; 0x2e
    16be:	8f a7       	std	Y+47, r24	; 0x2f
    16c0:	98 ab       	std	Y+48, r25	; 0x30
						double yc = R*sin(th)*sin(th);
    16c2:	c5 01       	movw	r24, r10
    16c4:	b4 01       	movw	r22, r8
    16c6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <sin>
    16ca:	4b 01       	movw	r8, r22
    16cc:	5c 01       	movw	r10, r24
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	c3 01       	movw	r24, r6
    16d4:	b2 01       	movw	r22, r4
    16d6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    16da:	a5 01       	movw	r20, r10
    16dc:	94 01       	movw	r18, r8
    16de:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    16e2:	4b 01       	movw	r8, r22
    16e4:	5c 01       	movw	r10, r24
						if ((xc >= value_1) && (yc >= value_2))
    16e6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <value_1>
    16ea:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <value_1+0x1>
    16ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <value_1+0x2>
    16f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <value_1+0x3>
    16f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    16fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fc:	98 a9       	ldd	r25, Y+48	; 0x30
    16fe:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    1702:	88 23       	and	r24, r24
    1704:	7c f0       	brlt	.+30     	; 0x1724 <main+0xed6>
    1706:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <value_2>
    170a:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <value_2+0x1>
    170e:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <value_2+0x2>
    1712:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <value_2+0x3>
    1716:	c5 01       	movw	r24, r10
    1718:	b4 01       	movw	r22, r8
    171a:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    171e:	88 23       	and	r24, r24
    1720:	0c f0       	brlt	.+2      	; 0x1724 <main+0xed6>
    1722:	b2 c1       	rjmp	.+868    	; 0x1a88 <main+0x123a>
							break;
						if ((extrud || Fextrud))
    1724:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <extrud>
    1728:	81 11       	cpse	r24, r1
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <main+0xee8>
    172c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <Fextrud>
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <main+0xee8>
    1734:	a0 c1       	rjmp	.+832    	; 0x1a76 <main+0x1228>
						{
							if (val == 2)
    1736:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <val>
    173a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <val+0x1>
    173e:	02 97       	sbiw	r24, 0x02	; 2
    1740:	09 f0       	breq	.+2      	; 0x1744 <main+0xef6>
    1742:	b0 c0       	rjmp	.+352    	; 0x18a4 <main+0x1056>
							{
								if ((I == 0) && (J == 0))
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <I>
    174e:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <I+0x1>
    1752:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <I+0x2>
    1756:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <I+0x3>
    175a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    175e:	81 11       	cpse	r24, r1
    1760:	41 c0       	rjmp	.+130    	; 0x17e4 <main+0xf96>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <J>
    176c:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <J+0x1>
    1770:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <J+0x2>
    1774:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <J+0x3>
    1778:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    177c:	81 11       	cpse	r24, r1
    177e:	32 c0       	rjmp	.+100    	; 0x17e4 <main+0xf96>
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm;     //call function to extract first step
    1780:	4d a5       	ldd	r20, Y+45	; 0x2d
    1782:	5e a5       	ldd	r21, Y+46	; 0x2e
    1784:	6f a5       	ldd	r22, Y+47	; 0x2f
    1786:	78 a9       	ldd	r23, Y+48	; 0x30
    1788:	8a e4       	ldi	r24, 0x4A	; 74
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <Xspm>
    1798:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <Xspm+0x1>
    179c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <Xspm+0x2>
    17a0:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <Xspm+0x3>
    17a4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    17a8:	d1 01       	movw	r26, r2
    17aa:	6d 93       	st	X+, r22
    17ac:	7d 93       	st	X+, r23
    17ae:	8d 93       	st	X+, r24
    17b0:	9c 93       	st	X, r25
    17b2:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm;    //call function to extract second step
    17b4:	b5 01       	movw	r22, r10
    17b6:	a4 01       	movw	r20, r8
    17b8:	86 e4       	ldi	r24, 0x46	; 70
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    17c0:	9b 01       	movw	r18, r22
    17c2:	ac 01       	movw	r20, r24
    17c4:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <Yspm>
    17c8:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <Yspm+0x1>
    17cc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Yspm+0x2>
    17d0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Yspm+0x3>
    17d4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    17d8:	f1 01       	movw	r30, r2
    17da:	64 83       	std	Z+4, r22	; 0x04
    17dc:	75 83       	std	Z+5, r23	; 0x05
    17de:	86 83       	std	Z+6, r24	; 0x06
    17e0:	97 83       	std	Z+7, r25	; 0x07
    17e2:	13 c1       	rjmp	.+550    	; 0x1a0a <main+0x11bc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(-I/I);     //call function to extract first step
    17e4:	4d a5       	ldd	r20, Y+45	; 0x2d
    17e6:	5e a5       	ldd	r21, Y+46	; 0x2e
    17e8:	6f a5       	ldd	r22, Y+47	; 0x2f
    17ea:	78 a9       	ldd	r23, Y+48	; 0x30
    17ec:	8a e4       	ldi	r24, 0x4A	; 74
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    17f4:	40 90 64 01 	lds	r4, 0x0164	; 0x800164 <I>
    17f8:	50 90 65 01 	lds	r5, 0x0165	; 0x800165 <I+0x1>
    17fc:	60 90 66 01 	lds	r6, 0x0166	; 0x800166 <I+0x2>
    1800:	70 90 67 01 	lds	r7, 0x0167	; 0x800167 <I+0x3>
    1804:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <Xspm>
    1808:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <Xspm+0x1>
    180c:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <Xspm+0x2>
    1810:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <Xspm+0x3>
    1814:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1818:	6d a7       	std	Y+45, r22	; 0x2d
    181a:	7e a7       	std	Y+46, r23	; 0x2e
    181c:	8f a7       	std	Y+47, r24	; 0x2f
    181e:	98 ab       	std	Y+48, r25	; 0x30
    1820:	c3 01       	movw	r24, r6
    1822:	b2 01       	movw	r22, r4
    1824:	90 58       	subi	r25, 0x80	; 128
    1826:	a3 01       	movw	r20, r6
    1828:	92 01       	movw	r18, r4
    182a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	6d a5       	ldd	r22, Y+45	; 0x2d
    1834:	7e a5       	ldd	r23, Y+46	; 0x2e
    1836:	8f a5       	ldd	r24, Y+47	; 0x2f
    1838:	98 a9       	ldd	r25, Y+48	; 0x30
    183a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    183e:	d1 01       	movw	r26, r2
    1840:	6d 93       	st	X+, r22
    1842:	7d 93       	st	X+, r23
    1844:	8d 93       	st	X+, r24
    1846:	9c 93       	st	X, r25
    1848:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(-J/J);    //call function to extract second step
    184a:	b5 01       	movw	r22, r10
    184c:	a4 01       	movw	r20, r8
    184e:	86 e4       	ldi	r24, 0x46	; 70
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1856:	80 90 60 01 	lds	r8, 0x0160	; 0x800160 <J>
    185a:	90 90 61 01 	lds	r9, 0x0161	; 0x800161 <J+0x1>
    185e:	a0 90 62 01 	lds	r10, 0x0162	; 0x800162 <J+0x2>
    1862:	b0 90 63 01 	lds	r11, 0x0163	; 0x800163 <J+0x3>
    1866:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <Yspm>
    186a:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <Yspm+0x1>
    186e:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <Yspm+0x2>
    1872:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <Yspm+0x3>
    1876:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    187a:	2b 01       	movw	r4, r22
    187c:	3c 01       	movw	r6, r24
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	90 58       	subi	r25, 0x80	; 128
    1884:	a5 01       	movw	r20, r10
    1886:	94 01       	movw	r18, r8
    1888:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	c3 01       	movw	r24, r6
    1892:	b2 01       	movw	r22, r4
    1894:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1898:	f1 01       	movw	r30, r2
    189a:	64 83       	std	Z+4, r22	; 0x04
    189c:	75 83       	std	Z+5, r23	; 0x05
    189e:	86 83       	std	Z+6, r24	; 0x06
    18a0:	97 83       	std	Z+7, r25	; 0x07
    18a2:	b3 c0       	rjmp	.+358    	; 0x1a0a <main+0x11bc>
								}
							} 
							else
							{
								if ((I == 0) && (J == 0))
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <I>
    18ae:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <I+0x1>
    18b2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <I+0x2>
    18b6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <I+0x3>
    18ba:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    18be:	81 11       	cpse	r24, r1
    18c0:	47 c0       	rjmp	.+142    	; 0x1950 <main+0x1102>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <J>
    18cc:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <J+0x1>
    18d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <J+0x2>
    18d4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <J+0x3>
    18d8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    18dc:	81 11       	cpse	r24, r1
    18de:	38 c0       	rjmp	.+112    	; 0x1950 <main+0x1102>
								{
									STEP[0] = sub_function (&old_val_1, xc)*-Xspm;     //call function to extract first step
    18e0:	4d a5       	ldd	r20, Y+45	; 0x2d
    18e2:	5e a5       	ldd	r21, Y+46	; 0x2e
    18e4:	6f a5       	ldd	r22, Y+47	; 0x2f
    18e6:	78 a9       	ldd	r23, Y+48	; 0x30
    18e8:	8a e4       	ldi	r24, 0x4A	; 74
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <Xspm>
    18f8:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <Xspm+0x1>
    18fc:	a0 91 c4 02 	lds	r26, 0x02C4	; 0x8002c4 <Xspm+0x2>
    1900:	b0 91 c5 02 	lds	r27, 0x02C5	; 0x8002c5 <Xspm+0x3>
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	90 58       	subi	r25, 0x80	; 128
    190a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    190e:	d1 01       	movw	r26, r2
    1910:	6d 93       	st	X+, r22
    1912:	7d 93       	st	X+, r23
    1914:	8d 93       	st	X+, r24
    1916:	9c 93       	st	X, r25
    1918:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*-Yspm;    //call function to extract second step
    191a:	b5 01       	movw	r22, r10
    191c:	a4 01       	movw	r20, r8
    191e:	86 e4       	ldi	r24, 0x46	; 70
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1926:	9b 01       	movw	r18, r22
    1928:	ac 01       	movw	r20, r24
    192a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <Yspm>
    192e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <Yspm+0x1>
    1932:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <Yspm+0x2>
    1936:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <Yspm+0x3>
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	90 58       	subi	r25, 0x80	; 128
    1940:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1944:	f1 01       	movw	r30, r2
    1946:	64 83       	std	Z+4, r22	; 0x04
    1948:	75 83       	std	Z+5, r23	; 0x05
    194a:	86 83       	std	Z+6, r24	; 0x06
    194c:	97 83       	std	Z+7, r25	; 0x07
    194e:	5d c0       	rjmp	.+186    	; 0x1a0a <main+0x11bc>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
    1950:	4d a5       	ldd	r20, Y+45	; 0x2d
    1952:	5e a5       	ldd	r21, Y+46	; 0x2e
    1954:	6f a5       	ldd	r22, Y+47	; 0x2f
    1956:	78 a9       	ldd	r23, Y+48	; 0x30
    1958:	8a e4       	ldi	r24, 0x4A	; 74
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1960:	40 90 64 01 	lds	r4, 0x0164	; 0x800164 <I>
    1964:	50 90 65 01 	lds	r5, 0x0165	; 0x800165 <I+0x1>
    1968:	60 90 66 01 	lds	r6, 0x0166	; 0x800166 <I+0x2>
    196c:	70 90 67 01 	lds	r7, 0x0167	; 0x800167 <I+0x3>
    1970:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <Xspm>
    1974:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <Xspm+0x1>
    1978:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <Xspm+0x2>
    197c:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <Xspm+0x3>
    1980:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1984:	6d a7       	std	Y+45, r22	; 0x2d
    1986:	7e a7       	std	Y+46, r23	; 0x2e
    1988:	8f a7       	std	Y+47, r24	; 0x2f
    198a:	98 ab       	std	Y+48, r25	; 0x30
    198c:	a3 01       	movw	r20, r6
    198e:	92 01       	movw	r18, r4
    1990:	c3 01       	movw	r24, r6
    1992:	b2 01       	movw	r22, r4
    1994:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    1998:	9b 01       	movw	r18, r22
    199a:	ac 01       	movw	r20, r24
    199c:	6d a5       	ldd	r22, Y+45	; 0x2d
    199e:	7e a5       	ldd	r23, Y+46	; 0x2e
    19a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a2:	98 a9       	ldd	r25, Y+48	; 0x30
    19a4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    19a8:	d1 01       	movw	r26, r2
    19aa:	6d 93       	st	X+, r22
    19ac:	7d 93       	st	X+, r23
    19ae:	8d 93       	st	X+, r24
    19b0:	9c 93       	st	X, r25
    19b2:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
    19b4:	b5 01       	movw	r22, r10
    19b6:	a4 01       	movw	r20, r8
    19b8:	86 e4       	ldi	r24, 0x46	; 70
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    19c0:	80 90 60 01 	lds	r8, 0x0160	; 0x800160 <J>
    19c4:	90 90 61 01 	lds	r9, 0x0161	; 0x800161 <J+0x1>
    19c8:	a0 90 62 01 	lds	r10, 0x0162	; 0x800162 <J+0x2>
    19cc:	b0 90 63 01 	lds	r11, 0x0163	; 0x800163 <J+0x3>
    19d0:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <Yspm>
    19d4:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <Yspm+0x1>
    19d8:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <Yspm+0x2>
    19dc:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <Yspm+0x3>
    19e0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    19e4:	2b 01       	movw	r4, r22
    19e6:	3c 01       	movw	r6, r24
    19e8:	a5 01       	movw	r20, r10
    19ea:	94 01       	movw	r18, r8
    19ec:	c5 01       	movw	r24, r10
    19ee:	b4 01       	movw	r22, r8
    19f0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	c3 01       	movw	r24, r6
    19fa:	b2 01       	movw	r22, r4
    19fc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1a00:	f1 01       	movw	r30, r2
    1a02:	64 83       	std	Z+4, r22	; 0x04
    1a04:	75 83       	std	Z+5, r23	; 0x05
    1a06:	86 83       	std	Z+6, r24	; 0x06
    1a08:	97 83       	std	Z+7, r25	; 0x07
								}
							}
							STEP[2] = 0;
    1a0a:	d1 01       	movw	r26, r2
    1a0c:	18 96       	adiw	r26, 0x08	; 8
    1a0e:	1d 92       	st	X+, r1
    1a10:	1d 92       	st	X+, r1
    1a12:	1d 92       	st	X+, r1
    1a14:	1c 92       	st	X, r1
    1a16:	1b 97       	sbiw	r26, 0x0b	; 11
							STEP[3] = Espm;
    1a18:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <Espm>
    1a1c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <Espm+0x1>
    1a20:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <Espm+0x2>
    1a24:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <Espm+0x3>
    1a28:	f1 01       	movw	r30, r2
    1a2a:	84 87       	std	Z+12, r24	; 0x0c
    1a2c:	95 87       	std	Z+13, r25	; 0x0d
    1a2e:	a6 87       	std	Z+14, r26	; 0x0e
    1a30:	b7 87       	std	Z+15, r27	; 0x0f
							status = 1;
    1a32:	f1 e0       	ldi	r31, 0x01	; 1
    1a34:	f0 93 84 01 	sts	0x0184, r31	; 0x800184 <status>
							sei();
    1a38:	78 94       	sei
							motor_movement(STEP,F,Fe);
    1a3a:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <Fe>
    1a3e:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <Fe+0x1>
    1a42:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Fe+0x2>
    1a46:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Fe+0x3>
    1a4a:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    1a4e:	4b 01       	movw	r8, r22
    1a50:	5c 01       	movw	r10, r24
    1a52:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <F>
    1a56:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <F+0x1>
    1a5a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <F+0x2>
    1a5e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <F+0x3>
    1a62:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    1a66:	ab 01       	movw	r20, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	95 01       	movw	r18, r10
    1a6c:	84 01       	movw	r16, r8
    1a6e:	8d 2d       	mov	r24, r13
    1a70:	99 a9       	ldd	r25, Y+49	; 0x31
    1a72:	0e 94 38 10 	call	0x2070	; 0x2070 <motor_movement>
					R = get_value(String,'R');
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					} 
					for (int th = 0 ; th <= 360 ; th++)
    1a76:	2f ef       	ldi	r18, 0xFF	; 255
    1a78:	e2 1a       	sub	r14, r18
    1a7a:	f2 0a       	sbc	r15, r18
    1a7c:	39 e6       	ldi	r19, 0x69	; 105
    1a7e:	e3 16       	cp	r14, r19
    1a80:	31 e0       	ldi	r19, 0x01	; 1
    1a82:	f3 06       	cpc	r15, r19
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <main+0x123a>
    1a86:	f8 cd       	rjmp	.-1040   	; 0x1678 <main+0xe2a>
    1a88:	cb a8       	ldd	r12, Y+51	; 0x33
    1a8a:	dc a8       	ldd	r13, Y+52	; 0x34
							status = 1;
							sei();
							motor_movement(STEP,F,Fe);
						} 
					}
					Transmit_Data("ok");
    1a8c:	81 e1       	ldi	r24, 0x11	; 17
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
    1a94:	3c c0       	rjmp	.+120    	; 0x1b0e <main+0x12c0>
// 						STEP[0] = find(String,'X');
// 						STEP[1] = find(String,'Y');
// 						STEP[2] = find(String,'Z');
// 						//make auto home
// 					} 
					Transmit_Data("ok");
    1a96:	81 e1       	ldi	r24, 0x11	; 17
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
					break;
    1a9e:	37 c0       	rjmp	.+110    	; 0x1b0e <main+0x12c0>
				case 92:
					value_1 = get_value(String,'X');           //extract first value
    1aa0:	68 e5       	ldi	r22, 0x58	; 88
    1aa2:	82 e7       	ldi	r24, 0x72	; 114
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1aaa:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <value_1>
    1aae:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <value_1+0x1>
    1ab2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <value_1+0x2>
    1ab6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <value_1+0x3>
					value_2 = get_value(String,'Y'); //call function to extract second value
    1aba:	69 e5       	ldi	r22, 0x59	; 89
    1abc:	82 e7       	ldi	r24, 0x72	; 114
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1ac4:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <value_2>
    1ac8:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <value_2+0x1>
    1acc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <value_2+0x2>
    1ad0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <value_2+0x3>
					value_3 = get_value(String,'Z'); //call function to extract third value
    1ad4:	6a e5       	ldi	r22, 0x5A	; 90
    1ad6:	82 e7       	ldi	r24, 0x72	; 114
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1ade:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <value_3>
    1ae2:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <value_3+0x1>
    1ae6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <value_3+0x2>
    1aea:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <value_3+0x3>
					STEP[3] = get_value(String,'E');
    1aee:	65 e4       	ldi	r22, 0x45	; 69
    1af0:	82 e7       	ldi	r24, 0x72	; 114
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1af8:	d1 01       	movw	r26, r2
    1afa:	1c 96       	adiw	r26, 0x0c	; 12
    1afc:	6d 93       	st	X+, r22
    1afe:	7d 93       	st	X+, r23
    1b00:	8d 93       	st	X+, r24
    1b02:	9c 93       	st	X, r25
    1b04:	1f 97       	sbiw	r26, 0x0f	; 15
					//set the middle of the bed to 0,0
					Transmit_Data("ok");
    1b06:	81 e1       	ldi	r24, 0x11	; 17
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				break;
			}
			status = 0;
    1b0e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <status>
			STEP[0] = 0;
    1b12:	f1 01       	movw	r30, r2
    1b14:	10 82       	st	Z, r1
    1b16:	11 82       	std	Z+1, r1	; 0x01
    1b18:	12 82       	std	Z+2, r1	; 0x02
    1b1a:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1b1c:	14 82       	std	Z+4, r1	; 0x04
    1b1e:	15 82       	std	Z+5, r1	; 0x05
    1b20:	16 82       	std	Z+6, r1	; 0x06
    1b22:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    1b24:	10 86       	std	Z+8, r1	; 0x08
    1b26:	11 86       	std	Z+9, r1	; 0x09
    1b28:	12 86       	std	Z+10, r1	; 0x0a
    1b2a:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1b2c:	14 86       	std	Z+12, r1	; 0x0c
    1b2e:	15 86       	std	Z+13, r1	; 0x0d
    1b30:	16 86       	std	Z+14, r1	; 0x0e
    1b32:	17 86       	std	Z+15, r1	; 0x0f
    1b34:	0c 94 91 04 	jmp	0x922	; 0x922 <main+0xd4>
		}
		else if (String[0] == 'N')
    1b38:	8e 34       	cpi	r24, 0x4E	; 78
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <main+0x12f2>
    1b3c:	0c 94 91 04 	jmp	0x922	; 0x922 <main+0xd4>
		{
			cli();
    1b40:	f8 94       	cli
			status = 1;
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <status>
			NumberOfPLine ++ ;
    1b48:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <NumberOfPLine>
    1b4c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <NumberOfPLine+0x1>
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <NumberOfPLine+0x1>
    1b56:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <NumberOfPLine>
			NumberOfLine = get_int(String,'N');
    1b5a:	6e e4       	ldi	r22, 0x4E	; 78
    1b5c:	82 e7       	ldi	r24, 0x72	; 114
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1b64:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <NumberOfLine+0x1>
    1b68:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <NumberOfLine>
			CheckSum = get_int(String,'*');
    1b6c:	6a e2       	ldi	r22, 0x2A	; 42
    1b6e:	82 e7       	ldi	r24, 0x72	; 114
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1b76:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <CheckSum+0x1>
    1b7a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <CheckSum>
			get_SEvalue(String,' ','*');
    1b7e:	4a e2       	ldi	r20, 0x2A	; 42
    1b80:	60 e2       	ldi	r22, 0x20	; 32
    1b82:	82 e7       	ldi	r24, 0x72	; 114
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <get_SEvalue>
    1b8a:	0c 94 91 04 	jmp	0x922	; 0x922 <main+0xd4>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					STEP[3] = get_value(String,'E')*Espm;
					if ((value_1 && value_2 && value_3) == 0)
					{
						FN = get_value(String,'F');
    1b8e:	66 e4       	ldi	r22, 0x46	; 70
    1b90:	82 e7       	ldi	r24, 0x72	; 114
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1b98:	4b 01       	movw	r8, r22
    1b9a:	5c 01       	movw	r10, r24
    1b9c:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <FN>
    1ba0:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <FN+0x1>
    1ba4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <FN+0x2>
    1ba8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <FN+0x3>
						if (FN != 0)
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	d4 cb       	rjmp	.-2136   	; 0x1362 <main+0xb14>
    1bba:	e4 cb       	rjmp	.-2104   	; 0x1384 <main+0xb36>
							Fe = FN;
						}
					}
					else
					{
						FN = get_value(String,'F');
    1bbc:	66 e4       	ldi	r22, 0x46	; 70
    1bbe:	82 e7       	ldi	r24, 0x72	; 114
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1bc6:	4b 01       	movw	r8, r22
    1bc8:	5c 01       	movw	r10, r24
    1bca:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <FN>
    1bce:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <FN+0x1>
    1bd2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <FN+0x2>
    1bd6:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <FN+0x3>
						if (FN != 0)
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	a9 01       	movw	r20, r18
    1be0:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    1be4:	81 11       	cpse	r24, r1
    1be6:	c6 cb       	rjmp	.-2164   	; 0x1374 <main+0xb26>
    1be8:	cd cb       	rjmp	.-2150   	; 0x1384 <main+0xb36>
//three variables that contain numbers that convert from string/
double value_1;
double value_2;
double value_3;
int main(void)
{
    1bea:	e1 2c       	mov	r14, r1
    1bec:	f1 2c       	mov	r15, r1
    1bee:	dc aa       	std	Y+52, r13	; 0x34
    1bf0:	cb aa       	std	Y+51, r12	; 0x33
    1bf2:	da a8       	ldd	r13, Y+50	; 0x32
    1bf4:	41 cd       	rjmp	.-1406   	; 0x1678 <main+0xe2a>

00001bf6 <__vector_9>:
	TCNT0  = 0;
	sei();

}
ISR(TIMER0_OVF_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	64 97       	sbiw	r28, 0x14	; 20
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	cd bf       	out	0x3d, r28	; 61
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    1c2e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tcon>
    1c32:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <tcon+0x1>
    1c36:	86 39       	cpi	r24, 0x96	; 150
    1c38:	91 05       	cpc	r25, r1
    1c3a:	30 f4       	brcc	.+12     	; 0x1c48 <__vector_9+0x52>
	{
		tcon++;
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <tcon+0x1>
    1c42:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tcon>
    1c46:	09 c0       	rjmp	.+18     	; 0x1c5a <__vector_9+0x64>
		} else {
		gFlags.pidTimer = 1;
    1c48:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gFlags>
    1c4c:	81 60       	ori	r24, 0x01	; 1
    1c4e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <gFlags>
		tcon            = 0;
    1c52:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <tcon+0x1>
    1c56:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <tcon>
		
	}
	if (gFlags.pidTimer == 1 ) 
    1c5a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gFlags>
    1c5e:	80 ff       	sbrs	r24, 0
    1c60:	33 c0       	rjmp	.+102    	; 0x1cc8 <__vector_9+0xd2>
	{
 		OCR1A =	255 - pid_Controller(SE0	,getTemp(T0), &SpidData); //out the pid value to control the temperature of extruder
    1c62:	80 e4       	ldi	r24, 0x40	; 64
    1c64:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <SE0>
    1c70:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <SE0+0x1>
    1c74:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <SE0+0x2>
    1c78:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <SE0+0x3>
    1c7c:	06 ec       	ldi	r16, 0xC6	; 198
    1c7e:	11 e0       	ldi	r17, 0x01	; 1
    1c80:	0e 94 31 12 	call	0x2462	; 0x2462 <pid_Controller>
    1c84:	ee 24       	eor	r14, r14
    1c86:	ea 94       	dec	r14
    1c88:	f1 2c       	mov	r15, r1
    1c8a:	97 01       	movw	r18, r14
    1c8c:	28 1b       	sub	r18, r24
    1c8e:	39 0b       	sbc	r19, r25
    1c90:	3b bd       	out	0x2b, r19	; 43
    1c92:	2a bd       	out	0x2a, r18	; 42
  		OCR1B = 255 - pid_Controller(SB	,getTemp(T2), &BpidData); //out the pid value to control the temperature of heat bed
    1c94:	82 e4       	ldi	r24, 0x42	; 66
    1c96:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <SB>
    1ca2:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <SB+0x1>
    1ca6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <SB+0x2>
    1caa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <SB+0x3>
    1cae:	02 ee       	ldi	r16, 0xE2	; 226
    1cb0:	11 e0       	ldi	r17, 0x01	; 1
    1cb2:	0e 94 31 12 	call	0x2462	; 0x2462 <pid_Controller>
    1cb6:	e8 1a       	sub	r14, r24
    1cb8:	f9 0a       	sbc	r15, r25
    1cba:	f9 bc       	out	0x29, r15	; 41
    1cbc:	e8 bc       	out	0x28, r14	; 40
		gFlags.pidTimer = 0;
    1cbe:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gFlags>
    1cc2:	8e 7f       	andi	r24, 0xFE	; 254
    1cc4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <gFlags>
		
	}
	
	if (String2[0] == 'M' )
    1cc8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <String2>
    1ccc:	8d 34       	cpi	r24, 0x4D	; 77
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_9+0xdc>
    1cd0:	65 c1       	rjmp	.+714    	; 0x1f9c <__vector_9+0x3a6>
	{
		SUBval = get_int(String,'M');
    1cd2:	6d e4       	ldi	r22, 0x4D	; 77
    1cd4:	82 e7       	ldi	r24, 0x72	; 114
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_int>
    1cdc:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <SUBval+0x1>
    1ce0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SUBval>
		if (SUBval == 112)
    1ce4:	80 37       	cpi	r24, 0x70	; 112
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__vector_9+0xf6>
    1cea:	b7 c0       	rjmp	.+366    	; 0x1e5a <__vector_9+0x264>
		{
			value_1 = 0;  //extract first value
    1cec:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <value_1>
    1cf0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <value_1+0x1>
    1cf4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <value_1+0x2>
    1cf8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <value_1+0x3>
			value_2 = 0; //call function to extract second value
    1cfc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <value_2>
    1d00:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <value_2+0x1>
    1d04:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <value_2+0x2>
    1d08:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <value_2+0x3>
			value_3 = 0; //call function to extract third value
    1d0c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <value_3>
    1d10:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <value_3+0x1>
    1d14:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <value_3+0x2>
    1d18:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <value_3+0x3>
			STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	ba 01       	movw	r22, r20
    1d22:	8a e4       	ldi	r24, 0x4A	; 74
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1d2a:	9b 01       	movw	r18, r22
    1d2c:	ac 01       	movw	r20, r24
    1d2e:	0f 2e       	mov	r0, r31
    1d30:	fa e9       	ldi	r31, 0x9A	; 154
    1d32:	ef 2e       	mov	r14, r31
    1d34:	f1 e0       	ldi	r31, 0x01	; 1
    1d36:	ff 2e       	mov	r15, r31
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <Xspm>
    1d3e:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <Xspm+0x1>
    1d42:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <Xspm+0x2>
    1d46:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <Xspm+0x3>
    1d4a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1d4e:	f7 01       	movw	r30, r14
    1d50:	60 83       	st	Z, r22
    1d52:	71 83       	std	Z+1, r23	; 0x01
    1d54:	82 83       	std	Z+2, r24	; 0x02
    1d56:	93 83       	std	Z+3, r25	; 0x03
			STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    1d58:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <value_2>
    1d5c:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <value_2+0x1>
    1d60:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <value_2+0x2>
    1d64:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <value_2+0x3>
    1d68:	86 e4       	ldi	r24, 0x46	; 70
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1d70:	9b 01       	movw	r18, r22
    1d72:	ac 01       	movw	r20, r24
    1d74:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <Yspm>
    1d78:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <Yspm+0x1>
    1d7c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Yspm+0x2>
    1d80:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Yspm+0x3>
    1d84:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1d88:	f7 01       	movw	r30, r14
    1d8a:	64 83       	std	Z+4, r22	; 0x04
    1d8c:	75 83       	std	Z+5, r23	; 0x05
    1d8e:	86 83       	std	Z+6, r24	; 0x06
    1d90:	97 83       	std	Z+7, r25	; 0x07
			STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    1d92:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <value_3>
    1d96:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <value_3+0x1>
    1d9a:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <value_3+0x2>
    1d9e:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <value_3+0x3>
    1da2:	82 e4       	ldi	r24, 0x42	; 66
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	0e 94 57 03 	call	0x6ae	; 0x6ae <sub_function>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Zspm>
    1db2:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Zspm+0x1>
    1db6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <Zspm+0x2>
    1dba:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <Zspm+0x3>
    1dbe:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	60 87       	std	Z+8, r22	; 0x08
    1dc6:	71 87       	std	Z+9, r23	; 0x09
    1dc8:	82 87       	std	Z+10, r24	; 0x0a
    1dca:	93 87       	std	Z+11, r25	; 0x0b
			STEP[3] = 0;
    1dcc:	14 86       	std	Z+12, r1	; 0x0c
    1dce:	15 86       	std	Z+13, r1	; 0x0d
    1dd0:	16 86       	std	Z+14, r1	; 0x0e
    1dd2:	17 86       	std	Z+15, r1	; 0x0f
			F = 0;
    1dd4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <F>
    1dd8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <F+0x1>
    1ddc:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <F+0x2>
    1de0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <F+0x3>
			Fe = 0;
    1de4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Fe>
    1de8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <Fe+0x1>
    1dec:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <Fe+0x2>
    1df0:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <Fe+0x3>
			SE0 = 0;
    1df4:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <SE0>
    1df8:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <SE0+0x1>
    1dfc:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <SE0+0x2>
    1e00:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <SE0+0x3>
			SB = 0;
    1e04:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <SB>
    1e08:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <SB+0x1>
    1e0c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <SB+0x2>
    1e10:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <SB+0x3>
			status = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <status>
			motor_movement(STEP,F,Fe);
    1e1a:	00 e0       	ldi	r16, 0x00	; 0
    1e1c:	10 e0       	ldi	r17, 0x00	; 0
    1e1e:	98 01       	movw	r18, r16
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	ba 01       	movw	r22, r20
    1e26:	c7 01       	movw	r24, r14
    1e28:	0e 94 38 10 	call	0x2070	; 0x2070 <motor_movement>
			STEP[0] = 0;
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	10 82       	st	Z, r1
    1e30:	11 82       	std	Z+1, r1	; 0x01
    1e32:	12 82       	std	Z+2, r1	; 0x02
    1e34:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1e36:	14 82       	std	Z+4, r1	; 0x04
    1e38:	15 82       	std	Z+5, r1	; 0x05
    1e3a:	16 82       	std	Z+6, r1	; 0x06
    1e3c:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    1e3e:	10 86       	std	Z+8, r1	; 0x08
    1e40:	11 86       	std	Z+9, r1	; 0x09
    1e42:	12 86       	std	Z+10, r1	; 0x0a
    1e44:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1e46:	14 86       	std	Z+12, r1	; 0x0c
    1e48:	15 86       	std	Z+13, r1	; 0x0d
    1e4a:	16 86       	std	Z+14, r1	; 0x0e
    1e4c:	17 86       	std	Z+15, r1	; 0x0f
			status = 0;
    1e4e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <status>
			Transmit_Data("ok");
    1e52:	81 e1       	ldi	r24, 0x11	; 17
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
		}
		if (SUBval == 105)
    1e5a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SUBval>
    1e5e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <SUBval+0x1>
    1e62:	89 36       	cpi	r24, 0x69	; 105
    1e64:	91 05       	cpc	r25, r1
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <__vector_9+0x274>
    1e68:	a4 c0       	rjmp	.+328    	; 0x1fb2 <__vector_9+0x3bc>
		{
			if (START)
    1e6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <START>
    1e6e:	88 23       	and	r24, r24
    1e70:	51 f0       	breq	.+20     	; 0x1e86 <__vector_9+0x290>
			{
				Transmit_Data("welcome we are PRISCA");
    1e72:	8c e2       	ldi	r24, 0x2C	; 44
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				Transmit_Char('\r');
    1e7a:	8d e0       	ldi	r24, 0x0D	; 13
    1e7c:	0e 94 33 13 	call	0x2666	; 0x2666 <Transmit_Char>
				START = 0;
    1e80:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <START>
    1e84:	7f c0       	rjmp	.+254    	; 0x1f84 <__vector_9+0x38e>
    1e86:	e0 ed       	ldi	r30, 0xD0	; 208
    1e88:	f2 e0       	ldi	r31, 0x02	; 2
    1e8a:	aa ea       	ldi	r26, 0xAA	; 170
    1e8c:	b1 e0       	ldi	r27, 0x01	; 1
    1e8e:	8a ed       	ldi	r24, 0xDA	; 218
    1e90:	92 e0       	ldi	r25, 0x02	; 2
			else
			{

				for (int x = 0 ; x < 10 ; x ++)
				{
					TE[x] = 0;
    1e92:	11 92       	st	Z+, r1
					TB[x] = 0;
    1e94:	1d 92       	st	X+, r1
				START = 0;
			}
			else
			{

				for (int x = 0 ; x < 10 ; x ++)
    1e96:	e8 17       	cp	r30, r24
    1e98:	f9 07       	cpc	r31, r25
    1e9a:	d9 f7       	brne	.-10     	; 0x1e92 <__vector_9+0x29c>
				{
					TE[x] = 0;
					TB[x] = 0;
				}
				sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
    1e9c:	80 e4       	ldi	r24, 0x40	; 64
    1e9e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1ea2:	04 e1       	ldi	r16, 0x14	; 20
    1ea4:	11 e0       	ldi	r17, 0x01	; 1
    1ea6:	23 e0       	ldi	r18, 0x03	; 3
    1ea8:	42 e0       	ldi	r20, 0x02	; 2
    1eaa:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    1eae:	9f 93       	push	r25
    1eb0:	8f 93       	push	r24
    1eb2:	80 ed       	ldi	r24, 0xD0	; 208
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
				sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
    1ebe:	82 e4       	ldi	r24, 0x42	; 66
    1ec0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1ec4:	23 e0       	ldi	r18, 0x03	; 3
    1ec6:	42 e0       	ldi	r20, 0x02	; 2
    1ec8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <dtostrf>
    1ecc:	9f 93       	push	r25
    1ece:	8f 93       	push	r24
    1ed0:	8a ea       	ldi	r24, 0xAA	; 170
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sprintf>
				if ((BED_Activ == 1))
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <BED_Activ>
    1eea:	88 23       	and	r24, r24
    1eec:	71 f1       	breq	.+92     	; 0x1f4a <__vector_9+0x354>
				{
					char TEMP[20]={'T',':',
    1eee:	84 e5       	ldi	r24, 0x54	; 84
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	8a e3       	ldi	r24, 0x3A	; 58
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
						TE[0],TE[1],TE[2],TE[3],TE[4],
    1ef6:	e0 ed       	ldi	r30, 0xD0	; 208
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
				}
				sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
				sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
				if ((BED_Activ == 1))
				{
					char TEMP[20]={'T',':',
    1efa:	90 81       	ld	r25, Z
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	92 81       	ldd	r25, Z+2	; 0x02
    1f04:	9d 83       	std	Y+5, r25	; 0x05
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	94 81       	ldd	r25, Z+4	; 0x04
    1f0c:	9f 83       	std	Y+7, r25	; 0x07
    1f0e:	90 e2       	ldi	r25, 0x20	; 32
    1f10:	98 87       	std	Y+8, r25	; 0x08
    1f12:	25 e4       	ldi	r18, 0x45	; 69
    1f14:	29 87       	std	Y+9, r18	; 0x09
    1f16:	8a 87       	std	Y+10, r24	; 0x0a
    1f18:	20 e3       	ldi	r18, 0x30	; 48
    1f1a:	2b 87       	std	Y+11, r18	; 0x0b
    1f1c:	9c 87       	std	Y+12, r25	; 0x0c
    1f1e:	92 e4       	ldi	r25, 0x42	; 66
    1f20:	9d 87       	std	Y+13, r25	; 0x0d
    1f22:	8e 87       	std	Y+14, r24	; 0x0e
						TE[0],TE[1],TE[2],TE[3],TE[4],
						' ','E',':','0',' ',
					'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
    1f24:	ea ea       	ldi	r30, 0xAA	; 170
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
				}
				sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
				sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
				if ((BED_Activ == 1))
				{
					char TEMP[20]={'T',':',
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 87       	std	Y+15, r24	; 0x0f
    1f2c:	81 81       	ldd	r24, Z+1	; 0x01
    1f2e:	88 8b       	std	Y+16, r24	; 0x10
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	89 8b       	std	Y+17, r24	; 0x11
    1f34:	83 81       	ldd	r24, Z+3	; 0x03
    1f36:	8a 8b       	std	Y+18, r24	; 0x12
    1f38:	84 81       	ldd	r24, Z+4	; 0x04
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	8d e0       	ldi	r24, 0x0D	; 13
    1f3e:	8c 8b       	std	Y+20, r24	; 0x14
						TE[0],TE[1],TE[2],TE[3],TE[4],
						' ','E',':','0',' ',
					'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
					Transmit_Data(TEMP);
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
    1f48:	1d c0       	rjmp	.+58     	; 0x1f84 <__vector_9+0x38e>
				}
				else
				{
					char TEMP[12]={'T',':',
    1f4a:	84 e5       	ldi	r24, 0x54	; 84
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	8a e3       	ldi	r24, 0x3A	; 58
    1f50:	8a 83       	std	Y+2, r24	; 0x02
						TE[0],TE[1],TE[2],TE[3],TE[4],
    1f52:	e0 ed       	ldi	r30, 0xD0	; 208
    1f54:	f2 e0       	ldi	r31, 0x02	; 2
					'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
					Transmit_Data(TEMP);
				}
				else
				{
					char TEMP[12]={'T',':',
    1f56:	90 81       	ld	r25, Z
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
    1f5e:	92 81       	ldd	r25, Z+2	; 0x02
    1f60:	9d 83       	std	Y+5, r25	; 0x05
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	94 81       	ldd	r25, Z+4	; 0x04
    1f68:	9f 83       	std	Y+7, r25	; 0x07
    1f6a:	90 e2       	ldi	r25, 0x20	; 32
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	95 e4       	ldi	r25, 0x45	; 69
    1f70:	99 87       	std	Y+9, r25	; 0x09
    1f72:	8a 87       	std	Y+10, r24	; 0x0a
    1f74:	80 e3       	ldi	r24, 0x30	; 48
    1f76:	8b 87       	std	Y+11, r24	; 0x0b
    1f78:	8d e0       	ldi	r24, 0x0D	; 13
    1f7a:	8c 87       	std	Y+12, r24	; 0x0c
						TE[0],TE[1],TE[2],TE[3],TE[4],
					' ','E',':','0','\r'};
					Transmit_Data(TEMP);
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
				}
			}
			Transmit_Char('\n');
    1f84:	8a e0       	ldi	r24, 0x0A	; 10
    1f86:	0e 94 33 13 	call	0x2666	; 0x2666 <Transmit_Char>
			Transmit_Data("ok");
    1f8a:	81 e1       	ldi	r24, 0x11	; 17
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	0e 94 3b 13 	call	0x2676	; 0x2676 <Transmit_Data>
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <__vector_9+0x3bc>
		}
		for (int i = 0;i<80;i++)
		{
			String2[i] = 0;
    1f94:	11 92       	st	Z+, r1
				}
			}
			Transmit_Char('\n');
			Transmit_Data("ok");
		}
		for (int i = 0;i<80;i++)
    1f96:	8e 17       	cp	r24, r30
    1f98:	9f 07       	cpc	r25, r31
    1f9a:	e1 f7       	brne	.-8      	; 0x1f94 <__vector_9+0x39e>
		{
			String2[i] = 0;
		}
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
    1f9c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <status>
    1fa0:	88 23       	and	r24, r24
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <__vector_9+0x3c6>
    1fa4:	5f 9b       	sbis	0x0b, 7	; 11
    1fa6:	0a c0       	rjmp	.+20     	; 0x1fbc <__vector_9+0x3c6>
	{
		Recive_Data(String2);
    1fa8:	86 e0       	ldi	r24, 0x06	; 6
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	0e 94 4a 13 	call	0x2694	; 0x2694 <Recive_Data>
// 		Transmit_Data("wait");
	}
}
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <__vector_9+0x3c6>
    1fb2:	e6 e0       	ldi	r30, 0x06	; 6
    1fb4:	f2 e0       	ldi	r31, 0x02	; 2
    1fb6:	86 e5       	ldi	r24, 0x56	; 86
    1fb8:	92 e0       	ldi	r25, 0x02	; 2
    1fba:	ec cf       	rjmp	.-40     	; 0x1f94 <__vector_9+0x39e>
    1fbc:	64 96       	adiw	r28, 0x14	; 20
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <__vector_1>:
ISR (INT0_vect)
{
    1ff6:	1f 92       	push	r1
    1ff8:	0f 92       	push	r0
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	0f 92       	push	r0
    1ffe:	11 24       	eor	r1, r1
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
	pin_write (M_PORT, Z_DIR_PIN ,1 );
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	66 e0       	ldi	r22, 0x06	; 6
    201c:	83 e3       	ldi	r24, 0x33	; 51
    201e:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
	pin_write (M_PORT, Z ,0 );
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	62 e0       	ldi	r22, 0x02	; 2
    2026:	83 e3       	ldi	r24, 0x33	; 51
    2028:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    202c:	8f ea       	ldi	r24, 0xAF	; 175
    202e:	94 e0       	ldi	r25, 0x04	; 4
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <__vector_1+0x3a>
    2034:	00 c0       	rjmp	.+0      	; 0x2036 <__vector_1+0x40>
    2036:	00 00       	nop
	_delay_us (300);
	pin_write (M_PORT, Z ,1 );
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	83 e3       	ldi	r24, 0x33	; 51
    203e:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
    2042:	8f ea       	ldi	r24, 0xAF	; 175
    2044:	94 e0       	ldi	r25, 0x04	; 4
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <__vector_1+0x50>
    204a:	00 c0       	rjmp	.+0      	; 0x204c <__vector_1+0x56>
    204c:	00 00       	nop
	_delay_us (300);
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	bf 91       	pop	r27
    2054:	af 91       	pop	r26
    2056:	9f 91       	pop	r25
    2058:	8f 91       	pop	r24
    205a:	7f 91       	pop	r23
    205c:	6f 91       	pop	r22
    205e:	5f 91       	pop	r21
    2060:	4f 91       	pop	r20
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	0f 90       	pop	r0
    206c:	1f 90       	pop	r1
    206e:	18 95       	reti

00002070 <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],long speed,long exspeed)
{
    2070:	2f 92       	push	r2
    2072:	3f 92       	push	r3
    2074:	4f 92       	push	r4
    2076:	5f 92       	push	r5
    2078:	6f 92       	push	r6
    207a:	7f 92       	push	r7
    207c:	8f 92       	push	r8
    207e:	9f 92       	push	r9
    2080:	af 92       	push	r10
    2082:	bf 92       	push	r11
    2084:	cf 92       	push	r12
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	cc 59       	subi	r28, 0x9C	; 156
    209a:	d1 09       	sbc	r29, r1
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	6c 01       	movw	r12, r24
    20a8:	4a 01       	movw	r8, r20
    20aa:	5b 01       	movw	r10, r22
    20ac:	c7 56       	subi	r28, 0x67	; 103
    20ae:	df 4f       	sbci	r29, 0xFF	; 255
    20b0:	08 83       	st	Y, r16
    20b2:	19 83       	std	Y+1, r17	; 0x01
    20b4:	2a 83       	std	Y+2, r18	; 0x02
    20b6:	3b 83       	std	Y+3, r19	; 0x03
    20b8:	c9 59       	subi	r28, 0x99	; 153
    20ba:	d0 40       	sbci	r29, 0x00	; 0
	long stepDuration = (1/speed)*60*pow(10,6);
    20bc:	41 2c       	mov	r4, r1
    20be:	51 2c       	mov	r5, r1
    20c0:	32 01       	movw	r6, r4
    20c2:	43 94       	inc	r4
    20c4:	c3 01       	movw	r24, r6
    20c6:	b2 01       	movw	r22, r4
    20c8:	a5 01       	movw	r20, r10
    20ca:	94 01       	movw	r18, r8
    20cc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__divmodsi4>
    20d0:	ac e3       	ldi	r26, 0x3C	; 60
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__muluhisi3>
    20d8:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	34 e2       	ldi	r19, 0x24	; 36
    20e0:	44 e7       	ldi	r20, 0x74	; 116
    20e2:	59 e4       	ldi	r21, 0x49	; 73
    20e4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    20e8:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    20ec:	4b 01       	movw	r8, r22
    20ee:	5c 01       	movw	r10, r24
	long exstepDuration = (1/exspeed)*60*pow(10,6);
    20f0:	c3 01       	movw	r24, r6
    20f2:	b2 01       	movw	r22, r4
    20f4:	c7 56       	subi	r28, 0x67	; 103
    20f6:	df 4f       	sbci	r29, 0xFF	; 255
    20f8:	28 81       	ld	r18, Y
    20fa:	39 81       	ldd	r19, Y+1	; 0x01
    20fc:	4a 81       	ldd	r20, Y+2	; 0x02
    20fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2100:	c9 59       	subi	r28, 0x99	; 153
    2102:	d0 40       	sbci	r29, 0x00	; 0
    2104:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__divmodsi4>
    2108:	ac e3       	ldi	r26, 0x3C	; 60
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__muluhisi3>
    2110:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	34 e2       	ldi	r19, 0x24	; 36
    2118:	44 e7       	ldi	r20, 0x74	; 116
    211a:	59 e4       	ldi	r21, 0x49	; 73
    211c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    2120:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    2124:	2b 01       	movw	r4, r22
    2126:	3c 01       	movw	r6, r24
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    2128:	88 e0       	ldi	r24, 0x08	; 8
    212a:	e1 e8       	ldi	r30, 0x81	; 129
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	de 01       	movw	r26, r28
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	01 90       	ld	r0, Z+
    2134:	0d 92       	st	X+, r0
    2136:	8a 95       	dec	r24
    2138:	e1 f7       	brne	.-8      	; 0x2132 <motor_movement+0xc2>
    213a:	76 01       	movw	r14, r12
    213c:	8e 01       	movw	r16, r28
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	1e 01       	movw	r2, r28
    2144:	29 e0       	ldi	r18, 0x09	; 9
    2146:	22 0e       	add	r2, r18
    2148:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	f7 01       	movw	r30, r14
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	8c f4       	brge	.+34     	; 0x2184 <motor_movement+0x114>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	f8 01       	movw	r30, r16
    2166:	60 81       	ld	r22, Z
    2168:	83 e3       	ldi	r24, 0x33	; 51
    216a:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
			step [i] = step [i] * -1;
    216e:	f7 01       	movw	r30, r14
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	a2 81       	ldd	r26, Z+2	; 0x02
    2176:	b3 81       	ldd	r27, Z+3	; 0x03
    2178:	b0 58       	subi	r27, 0x80	; 128
    217a:	80 83       	st	Z, r24
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	a2 83       	std	Z+2, r26	; 0x02
    2180:	b3 83       	std	Z+3, r27	; 0x03
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <motor_movement+0x120>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	f8 01       	movw	r30, r16
    2188:	60 81       	ld	r22, Z
    218a:	83 e3       	ldi	r24, 0x33	; 51
    218c:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
    2190:	f4 e0       	ldi	r31, 0x04	; 4
    2192:	ef 0e       	add	r14, r31
    2194:	f1 1c       	adc	r15, r1
    2196:	0e 5f       	subi	r16, 0xFE	; 254
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],long speed,long exspeed)
{
	long stepDuration = (1/speed)*60*pow(10,6);
	long exstepDuration = (1/exspeed)*60*pow(10,6);
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    219a:	20 16       	cp	r2, r16
    219c:	31 06       	cpc	r3, r17
    219e:	a9 f6       	brne	.-86     	; 0x214a <motor_movement+0xda>
		int Out;     // make one step to one motor in one unit of time
		int Next[16];
	};
	typedef const struct State STyp; //define STYP from type of struct State
	/*{Current state,{next state}} */
	STyp FSM[4]=
    21a0:	88 e8       	ldi	r24, 0x88	; 136
    21a2:	e9 e8       	ldi	r30, 0x89	; 137
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	de 01       	movw	r26, r28
    21a8:	51 96       	adiw	r26, 0x11	; 17
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	8a 95       	dec	r24
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <motor_movement+0x13a>
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
		j [0] = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9a 87       	std	Y+10, r25	; 0x0a
    21b8:	89 87       	std	Y+9, r24	; 0x09
		j [1] = 1;
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
		j [2] = 1;
    21be:	9e 87       	std	Y+14, r25	; 0x0e
    21c0:	8d 87       	std	Y+13, r24	; 0x0d
		j [3] = 1;
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
		{Y,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{Z,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}},
		{E,{E,X,Y,X,Z,X,Y,X,E,X,Y,X,Z,X,Y,X}}
	};	 
		index = 1;
		S = X;
    21c6:	00 e0       	ldi	r16, 0x00	; 0
    21c8:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    21ca:	0f 2e       	mov	r0, r31
    21cc:	f2 e2       	ldi	r31, 0x22	; 34
    21ce:	2f 2e       	mov	r2, r31
    21d0:	f0 2d       	mov	r31, r0
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
    21d2:	0f 2e       	mov	r0, r31
    21d4:	f1 e1       	ldi	r31, 0x11	; 17
    21d6:	3f 2e       	mov	r3, r31
    21d8:	f0 2d       	mov	r31, r0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    21da:	20 9e       	mul	r2, r16
    21dc:	f0 01       	movw	r30, r0
    21de:	21 9e       	mul	r2, r17
    21e0:	f0 0d       	add	r31, r0
    21e2:	11 24       	eor	r1, r1
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	2c 0f       	add	r18, r28
    21ea:	3d 1f       	adc	r19, r29
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	60 89       	ldd	r22, Z+16	; 0x10
    21f2:	83 e3       	ldi	r24, 0x33	; 51
    21f4:	0e 94 bc 03 	call	0x778	; 0x778 <pin_XOR>
			 step[S] = step[S] - 1;
    21f8:	78 01       	movw	r14, r16
    21fa:	ee 0c       	add	r14, r14
    21fc:	ff 1c       	adc	r15, r15
    21fe:	ee 0c       	add	r14, r14
    2200:	ff 1c       	adc	r15, r15
    2202:	ec 0c       	add	r14, r12
    2204:	fd 1c       	adc	r15, r13
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	f7 01       	movw	r30, r14
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
    221c:	f7 01       	movw	r30, r14
    221e:	60 83       	st	Z, r22
    2220:	71 83       	std	Z+1, r23	; 0x01
    2222:	82 83       	std	Z+2, r24	; 0x02
    2224:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	a9 01       	movw	r20, r18
    222c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    2230:	18 16       	cp	r1, r24
    2232:	5c f0       	brlt	.+22     	; 0x224a <motor_movement+0x1da>
			  j[S] = 0;
    2234:	f8 01       	movw	r30, r16
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	2c 0f       	add	r18, r28
    2240:	3d 1f       	adc	r19, r29
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	11 86       	std	Z+9, r1	; 0x09
    2248:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    224a:	03 30       	cpi	r16, 0x03	; 3
    224c:	11 05       	cpc	r17, r1
    224e:	59 f4       	brne	.+22     	; 0x2266 <motor_movement+0x1f6>
			  {
				  for (int i = exstepDuration ; i>0 ; i-- )
    2250:	c2 01       	movw	r24, r4
    2252:	18 16       	cp	r1, r24
    2254:	19 06       	cpc	r1, r25
    2256:	8c f4       	brge	.+34     	; 0x227a <motor_movement+0x20a>
    2258:	35 e0       	ldi	r19, 0x05	; 5
    225a:	3a 95       	dec	r19
    225c:	f1 f7       	brne	.-4      	; 0x225a <motor_movement+0x1ea>
    225e:	00 00       	nop
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	d1 f7       	brne	.-12     	; 0x2258 <motor_movement+0x1e8>
    2264:	0a c0       	rjmp	.+20     	; 0x227a <motor_movement+0x20a>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>0 ; i-- )
    2266:	c4 01       	movw	r24, r8
    2268:	18 16       	cp	r1, r24
    226a:	19 06       	cpc	r1, r25
    226c:	34 f4       	brge	.+12     	; 0x227a <motor_movement+0x20a>
    226e:	e5 e0       	ldi	r30, 0x05	; 5
    2270:	ea 95       	dec	r30
    2272:	f1 f7       	brne	.-4      	; 0x2270 <motor_movement+0x200>
    2274:	00 00       	nop
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	d1 f7       	brne	.-12     	; 0x226e <motor_movement+0x1fe>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	9c 01       	movw	r18, r24
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	22 0f       	add	r18, r18
    228a:	33 1f       	adc	r19, r19
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	82 0f       	add	r24, r18
    229a:	93 1f       	adc	r25, r19
    229c:	2b 85       	ldd	r18, Y+11	; 0x0b
    229e:	3c 85       	ldd	r19, Y+12	; 0x0c
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	82 0f       	add	r24, r18
    22a6:	93 1f       	adc	r25, r19
    22a8:	29 85       	ldd	r18, Y+9	; 0x09
    22aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    22b0:	30 9e       	mul	r3, r16
    22b2:	f0 01       	movw	r30, r0
    22b4:	31 9e       	mul	r3, r17
    22b6:	f0 0d       	add	r31, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	e8 0f       	add	r30, r24
    22bc:	f9 1f       	adc	r31, r25
    22be:	31 96       	adiw	r30, 0x01	; 1
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	21 e0       	ldi	r18, 0x01	; 1
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	2c 0f       	add	r18, r28
    22ca:	3d 1f       	adc	r19, r29
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	00 89       	ldd	r16, Z+16	; 0x10
    22d2:	11 89       	ldd	r17, Z+17	; 0x11
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    22d4:	89 2b       	or	r24, r25
    22d6:	09 f0       	breq	.+2      	; 0x22da <motor_movement+0x26a>
    22d8:	80 cf       	rjmp	.-256    	; 0x21da <motor_movement+0x16a>
				  }
			  } 
			 index  = ( j[3]<<3) + ( j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    22da:	c4 56       	subi	r28, 0x64	; 100
    22dc:	df 4f       	sbci	r29, 0xFF	; 255
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	7f 90       	pop	r7
    2302:	6f 90       	pop	r6
    2304:	5f 90       	pop	r5
    2306:	4f 90       	pop	r4
    2308:	3f 90       	pop	r3
    230a:	2f 90       	pop	r2
    230c:	08 95       	ret

0000230e <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    230e:	88 35       	cpi	r24, 0x58	; 88
    2310:	49 f0       	breq	.+18     	; 0x2324 <motor_EN_DES+0x16>
    2312:	18 f4       	brcc	.+6      	; 0x231a <motor_EN_DES+0xc>
    2314:	85 34       	cpi	r24, 0x45	; 69
    2316:	c1 f0       	breq	.+48     	; 0x2348 <motor_EN_DES+0x3a>
    2318:	08 95       	ret
    231a:	89 35       	cpi	r24, 0x59	; 89
    231c:	49 f0       	breq	.+18     	; 0x2330 <motor_EN_DES+0x22>
    231e:	8a 35       	cpi	r24, 0x5A	; 90
    2320:	69 f0       	breq	.+26     	; 0x233c <motor_EN_DES+0x2e>
    2322:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    2324:	46 2f       	mov	r20, r22
    2326:	64 e0       	ldi	r22, 0x04	; 4
    2328:	86 e3       	ldi	r24, 0x36	; 54
    232a:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
			break;
    232e:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    2330:	46 2f       	mov	r20, r22
    2332:	65 e0       	ldi	r22, 0x05	; 5
    2334:	86 e3       	ldi	r24, 0x36	; 54
    2336:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
			break;
    233a:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    233c:	46 2f       	mov	r20, r22
    233e:	66 e0       	ldi	r22, 0x06	; 6
    2340:	86 e3       	ldi	r24, 0x36	; 54
    2342:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
			break;
    2346:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    2348:	46 2f       	mov	r20, r22
    234a:	67 e0       	ldi	r22, 0x07	; 7
    234c:	86 e3       	ldi	r24, 0x36	; 54
    234e:	0e 94 90 03 	call	0x720	; 0x720 <pin_write>
    2352:	08 95       	ret

00002354 <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	83 e3       	ldi	r24, 0x33	; 51
    2358:	0e 94 ad 03 	call	0x75a	; 0x75a <port_direction>
	port_write(M_PORT,0);
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	83 e3       	ldi	r24, 0x33	; 51
    2360:	0e 94 b8 03 	call	0x770	; 0x770 <port_write>
	pin_direction(EN_DES_PORT,EN_DES_XPIN,output);
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	86 e3       	ldi	r24, 0x36	; 54
    236a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_YPIN,output);
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	65 e0       	ldi	r22, 0x05	; 5
    2372:	86 e3       	ldi	r24, 0x36	; 54
    2374:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_ZPIN,output);
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	66 e0       	ldi	r22, 0x06	; 6
    237c:	86 e3       	ldi	r24, 0x36	; 54
    237e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pin_direction>
	pin_direction(EN_DES_PORT,EN_DES_EPIN,output);
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	67 e0       	ldi	r22, 0x07	; 7
    2386:	86 e3       	ldi	r24, 0x36	; 54
    2388:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pin_direction>
	motor_EN_DES('X',0);
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	88 e5       	ldi	r24, 0x58	; 88
    2390:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
	motor_EN_DES('Y',0);
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	89 e5       	ldi	r24, 0x59	; 89
    2398:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
	motor_EN_DES('Z',0);
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	8a e5       	ldi	r24, 0x5A	; 90
    23a0:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
	motor_EN_DES('E',0);
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	85 e4       	ldi	r24, 0x45	; 69
    23a8:	0e 94 87 11 	call	0x230e	; 0x230e <motor_EN_DES>
    23ac:	08 95       	ret

000023ae <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	49 01       	movw	r8, r18
    23c8:	5a 01       	movw	r10, r20
    23ca:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    23cc:	6c 83       	std	Y+4, r22	; 0x04
    23ce:	7d 83       	std	Y+5, r23	; 0x05
    23d0:	8e 83       	std	Y+6, r24	; 0x06
    23d2:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    23d4:	28 87       	std	Y+8, r18	; 0x08
    23d6:	39 87       	std	Y+9, r19	; 0x09
    23d8:	4a 87       	std	Y+10, r20	; 0x0a
    23da:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    23dc:	ec 86       	std	Y+12, r14	; 0x0c
    23de:	fd 86       	std	Y+13, r15	; 0x0d
    23e0:	0e 87       	std	Y+14, r16	; 0x0e
    23e2:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    23f0:	9b 01       	movw	r18, r22
    23f2:	ac 01       	movw	r20, r24
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	7e ef       	ldi	r23, 0xFE	; 254
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	96 e4       	ldi	r25, 0x46	; 70
    23fc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    2400:	6c 8b       	std	Y+20, r22	; 0x14
    2402:	7d 8b       	std	Y+21, r23	; 0x15
    2404:	8e 8b       	std	Y+22, r24	; 0x16
    2406:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	c5 01       	movw	r24, r10
    2412:	b4 01       	movw	r22, r8
    2414:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    2418:	9b 01       	movw	r18, r22
    241a:	ac 01       	movw	r20, r24
    241c:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    2420:	9b 01       	movw	r18, r22
    2422:	ac 01       	movw	r20, r24
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	9f e4       	ldi	r25, 0x4F	; 79
    242c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    2430:	68 8f       	std	Y+24, r22	; 0x18
    2432:	79 8f       	std	Y+25, r23	; 0x19
    2434:	8a 8f       	std	Y+26, r24	; 0x1a
    2436:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    2438:	18 82       	st	Y, r1
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	1a 82       	std	Y+2, r1	; 0x02
    243e:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    2440:	18 8a       	std	Y+16, r1	; 0x10
    2442:	19 8a       	std	Y+17, r1	; 0x11
    2444:	1a 8a       	std	Y+18, r1	; 0x12
    2446:	1b 8a       	std	Y+19, r1	; 0x13
}
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ff 90       	pop	r15
    2452:	ef 90       	pop	r14
    2454:	df 90       	pop	r13
    2456:	cf 90       	pop	r12
    2458:	bf 90       	pop	r11
    245a:	af 90       	pop	r10
    245c:	9f 90       	pop	r9
    245e:	8f 90       	pop	r8
    2460:	08 95       	ret

00002462 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    2462:	4f 92       	push	r4
    2464:	5f 92       	push	r5
    2466:	6f 92       	push	r6
    2468:	7f 92       	push	r7
    246a:	8f 92       	push	r8
    246c:	9f 92       	push	r9
    246e:	af 92       	push	r10
    2470:	bf 92       	push	r11
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	2a 97       	sbiw	r28, 0x0a	; 10
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	1a 87       	std	Y+10, r17	; 0x0a
    2494:	09 87       	std	Y+9, r16	; 0x09
	double P_value = 0.00,I_value = 0.00;
	double error = setPoint - processValue;										
    2496:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
    249a:	69 83       	std	Y+1, r22	; 0x01
    249c:	7a 83       	std	Y+2, r23	; 0x02
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
	pid_st ->SumError = pid_st ->SumError + error ;							
    24a2:	f8 01       	movw	r30, r16
    24a4:	20 89       	ldd	r18, Z+16	; 0x10
    24a6:	31 89       	ldd	r19, Z+17	; 0x11
    24a8:	42 89       	ldd	r20, Z+18	; 0x12
    24aa:	53 89       	ldd	r21, Z+19	; 0x13
    24ac:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    24b0:	4b 01       	movw	r8, r22
    24b2:	5c 01       	movw	r10, r24
    24b4:	f8 01       	movw	r30, r16
    24b6:	60 8b       	std	Z+16, r22	; 0x10
    24b8:	71 8b       	std	Z+17, r23	; 0x11
    24ba:	82 8b       	std	Z+18, r24	; 0x12
    24bc:	93 8b       	std	Z+19, r25	; 0x13
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    24be:	c4 84       	ldd	r12, Z+12	; 0x0c
    24c0:	d5 84       	ldd	r13, Z+13	; 0x0d
    24c2:	e6 84       	ldd	r14, Z+14	; 0x0e
    24c4:	f7 84       	ldd	r15, Z+15	; 0x0f
    24c6:	20 81       	ld	r18, Z
    24c8:	31 81       	ldd	r19, Z+1	; 0x01
    24ca:	42 81       	ldd	r20, Z+2	; 0x02
    24cc:	53 81       	ldd	r21, Z+3	; 0x03
    24ce:	69 81       	ldd	r22, Y+1	; 0x01
    24d0:	7a 81       	ldd	r23, Y+2	; 0x02
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	0e 94 65 13 	call	0x26ca	; 0x26ca <__subsf3>
    24da:	a7 01       	movw	r20, r14
    24dc:	96 01       	movw	r18, r12
    24de:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    24e2:	6d 83       	std	Y+5, r22	; 0x05
    24e4:	7e 83       	std	Y+6, r23	; 0x06
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	98 87       	std	Y+8, r25	; 0x08
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
    24ea:	f8 01       	movw	r30, r16
    24ec:	44 88       	ldd	r4, Z+20	; 0x14
    24ee:	55 88       	ldd	r5, Z+21	; 0x15
    24f0:	66 88       	ldd	r6, Z+22	; 0x16
    24f2:	77 88       	ldd	r7, Z+23	; 0x17
    24f4:	a3 01       	movw	r20, r6
    24f6:	92 01       	movw	r18, r4
    24f8:	69 81       	ldd	r22, Y+1	; 0x01
    24fa:	7a 81       	ldd	r23, Y+2	; 0x02
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    2504:	18 16       	cp	r1, r24
    2506:	b4 f0       	brlt	.+44     	; 0x2534 <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    2508:	a3 01       	movw	r20, r6
    250a:	92 01       	movw	r18, r4
    250c:	50 58       	subi	r21, 0x80	; 128
    250e:	69 81       	ldd	r22, Y+1	; 0x01
    2510:	7a 81       	ldd	r23, Y+2	; 0x02
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    251a:	88 23       	and	r24, r24
    251c:	ac f0       	brlt	.+42     	; 0x2548 <pid_Controller+0xe6>
	{
		P_value = -INT16_MAX;
	}
	else
		P_value = error * (pid_st ->pid_D);
    251e:	a7 01       	movw	r20, r14
    2520:	96 01       	movw	r18, r12
    2522:	69 81       	ldd	r22, Y+1	; 0x01
    2524:	7a 81       	ldd	r23, Y+2	; 0x02
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    252e:	2b 01       	movw	r4, r22
    2530:	3c 01       	movw	r6, r24
    2532:	13 c0       	rjmp	.+38     	; 0x255a <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;							
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	// Calculate Pterm and limit error overflow
	if (error > (pid_st ->MaxError)) 
	{
		P_value = INT16_MAX;
    2534:	0f 2e       	mov	r0, r31
    2536:	41 2c       	mov	r4, r1
    2538:	fe ef       	ldi	r31, 0xFE	; 254
    253a:	5f 2e       	mov	r5, r31
    253c:	66 24       	eor	r6, r6
    253e:	6a 94       	dec	r6
    2540:	f6 e4       	ldi	r31, 0x46	; 70
    2542:	7f 2e       	mov	r7, r31
    2544:	f0 2d       	mov	r31, r0
    2546:	09 c0       	rjmp	.+18     	; 0x255a <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    2548:	0f 2e       	mov	r0, r31
    254a:	41 2c       	mov	r4, r1
    254c:	fe ef       	ldi	r31, 0xFE	; 254
    254e:	5f 2e       	mov	r5, r31
    2550:	66 24       	eor	r6, r6
    2552:	6a 94       	dec	r6
    2554:	f6 ec       	ldi	r31, 0xC6	; 198
    2556:	7f 2e       	mov	r7, r31
    2558:	f0 2d       	mov	r31, r0
	}
	else
		P_value = error * (pid_st ->pid_D);
	// Calculate Iterm and limit integral runaway
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    255a:	e9 85       	ldd	r30, Y+9	; 0x09
    255c:	fa 85       	ldd	r31, Y+10	; 0x0a
    255e:	c0 8c       	ldd	r12, Z+24	; 0x18
    2560:	d1 8c       	ldd	r13, Z+25	; 0x19
    2562:	e2 8c       	ldd	r14, Z+26	; 0x1a
    2564:	f3 8c       	ldd	r15, Z+27	; 0x1b
    2566:	a7 01       	movw	r20, r14
    2568:	96 01       	movw	r18, r12
    256a:	c5 01       	movw	r24, r10
    256c:	b4 01       	movw	r22, r8
    256e:	0e 94 75 15 	call	0x2aea	; 0x2aea <__gesf2>
    2572:	18 16       	cp	r1, r24
    2574:	5c f4       	brge	.+22     	; 0x258c <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    2576:	e9 85       	ldd	r30, Y+9	; 0x09
    2578:	fa 85       	ldd	r31, Y+10	; 0x0a
    257a:	c0 8a       	std	Z+16, r12	; 0x10
    257c:	d1 8a       	std	Z+17, r13	; 0x11
    257e:	e2 8a       	std	Z+18, r14	; 0x12
    2580:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5e e4       	ldi	r21, 0x4E	; 78
    258a:	23 c0       	rjmp	.+70     	; 0x25d2 <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    258c:	f7 fa       	bst	r15, 7
    258e:	f0 94       	com	r15
    2590:	f7 f8       	bld	r15, 7
    2592:	f0 94       	com	r15
    2594:	a7 01       	movw	r20, r14
    2596:	96 01       	movw	r18, r12
    2598:	c5 01       	movw	r24, r10
    259a:	b4 01       	movw	r22, r8
    259c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	5c f4       	brge	.+22     	; 0x25ba <pid_Controller+0x158>
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    25a4:	e9 85       	ldd	r30, Y+9	; 0x09
    25a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    25a8:	c0 8a       	std	Z+16, r12	; 0x10
    25aa:	d1 8a       	std	Z+17, r13	; 0x11
    25ac:	e2 8a       	std	Z+18, r14	; 0x12
    25ae:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5e ec       	ldi	r21, 0xCE	; 206
    25b8:	0c c0       	rjmp	.+24     	; 0x25d2 <pid_Controller+0x170>
	}
	else
		I_value = pid_st ->SumError * pid_st->pid_I;	
    25ba:	e9 85       	ldd	r30, Y+9	; 0x09
    25bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    25be:	20 85       	ldd	r18, Z+8	; 0x08
    25c0:	31 85       	ldd	r19, Z+9	; 0x09
    25c2:	42 85       	ldd	r20, Z+10	; 0x0a
    25c4:	53 85       	ldd	r21, Z+11	; 0x0b
    25c6:	c5 01       	movw	r24, r10
    25c8:	b4 01       	movw	r22, r8
    25ca:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    25ce:	9b 01       	movw	r18, r22
    25d0:	ac 01       	movw	r20, r24
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    25d2:	c3 01       	movw	r24, r6
    25d4:	b2 01       	movw	r22, r4
    25d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    25da:	2d 81       	ldd	r18, Y+5	; 0x05
    25dc:	3e 81       	ldd	r19, Y+6	; 0x06
    25de:	4f 81       	ldd	r20, Y+7	; 0x07
    25e0:	58 85       	ldd	r21, Y+8	; 0x08
    25e2:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	48 ef       	ldi	r20, 0xF8	; 248
    25ec:	52 e4       	ldi	r21, 0x42	; 66
    25ee:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__divsf3>
    25f2:	0e 94 4e 14 	call	0x289c	; 0x289c <__fixsfsi>
    25f6:	77 23       	and	r23, r23
    25f8:	14 f4       	brge	.+4      	; 0x25fe <pid_Controller+0x19c>
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	8b 01       	movw	r16, r22
    2600:	6f 3f       	cpi	r22, 0xFF	; 255
    2602:	71 05       	cpc	r23, r1
    2604:	19 f0       	breq	.+6      	; 0x260c <pid_Controller+0x1aa>
    2606:	14 f0       	brlt	.+4      	; 0x260c <pid_Controller+0x1aa>
    2608:	0f ef       	ldi	r16, 0xFF	; 255
    260a:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    260c:	b8 01       	movw	r22, r16
    260e:	01 2e       	mov	r0, r17
    2610:	00 0c       	add	r0, r0
    2612:	88 0b       	sbc	r24, r24
    2614:	99 0b       	sbc	r25, r25
    2616:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
    261a:	e9 85       	ldd	r30, Y+9	; 0x09
    261c:	fa 85       	ldd	r31, Y+10	; 0x0a
    261e:	60 83       	st	Z, r22
    2620:	71 83       	std	Z+1, r23	; 0x01
    2622:	82 83       	std	Z+2, r24	; 0x02
    2624:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    2626:	c8 01       	movw	r24, r16
    2628:	2a 96       	adiw	r28, 0x0a	; 10
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	7f 90       	pop	r7
    264e:	6f 90       	pop	r6
    2650:	5f 90       	pop	r5
    2652:	4f 90       	pop	r4
    2654:	08 95       	ret

00002656 <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    2656:	83 e0       	ldi	r24, 0x03	; 3
    2658:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    265a:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    265c:	88 e1       	ldi	r24, 0x18	; 24
    265e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    2660:	86 e8       	ldi	r24, 0x86	; 134
    2662:	80 bd       	out	0x20, r24	; 32
    2664:	08 95       	ret

00002666 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    2666:	5d 9b       	sbis	0x0b, 5	; 11
    2668:	fe cf       	rjmp	.-4      	; 0x2666 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    266a:	8c b9       	out	0x0c, r24	; 12
    266c:	08 95       	ret

0000266e <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    266e:	5f 9b       	sbis	0x0b, 7	; 11
    2670:	fe cf       	rjmp	.-4      	; 0x266e <Recive_Char>
	return(UDR); 
    2672:	8c b1       	in	r24, 0x0c	; 12
}
    2674:	08 95       	ret

00002676 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	ec 01       	movw	r28, r24
	while(*ptr_string)
    267c:	88 81       	ld	r24, Y
    267e:	88 23       	and	r24, r24
    2680:	31 f0       	breq	.+12     	; 0x268e <Transmit_Data+0x18>
    2682:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    2684:	0e 94 33 13 	call	0x2666	; 0x2666 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    2688:	89 91       	ld	r24, Y+
    268a:	81 11       	cpse	r24, r1
    268c:	fb cf       	rjmp	.-10     	; 0x2684 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    269c:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    269e:	0e 94 37 13 	call	0x266e	; 0x266e <Recive_Char>
	 		if((ch == '\n') || (ch == '\r')) //read till enter key is pressed
    26a2:	8a 30       	cpi	r24, 0x0A	; 10
    26a4:	11 f0       	breq	.+4      	; 0x26aa <Recive_Data+0x16>
    26a6:	8d 30       	cpi	r24, 0x0D	; 13
    26a8:	31 f4       	brne	.+12     	; 0x26b6 <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    26aa:	f8 01       	movw	r30, r16
    26ac:	ec 0f       	add	r30, r28
    26ae:	f1 1d       	adc	r31, r1
    26b0:	80 e2       	ldi	r24, 0x20	; 32
    26b2:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    26b6:	f8 01       	movw	r30, r16
    26b8:	ec 0f       	add	r30, r28
    26ba:	f1 1d       	adc	r31, r1
    26bc:	80 83       	st	Z, r24
    26be:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    26c0:	ee cf       	rjmp	.-36     	; 0x269e <Recive_Data+0xa>
}
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	08 95       	ret

000026ca <__subsf3>:
    26ca:	50 58       	subi	r21, 0x80	; 128

000026cc <__addsf3>:
    26cc:	bb 27       	eor	r27, r27
    26ce:	aa 27       	eor	r26, r26
    26d0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__addsf3x>
    26d4:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_round>
    26d8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fp_pscA>
    26dc:	38 f0       	brcs	.+14     	; 0x26ec <__addsf3+0x20>
    26de:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__fp_pscB>
    26e2:	20 f0       	brcs	.+8      	; 0x26ec <__addsf3+0x20>
    26e4:	39 f4       	brne	.+14     	; 0x26f4 <__addsf3+0x28>
    26e6:	9f 3f       	cpi	r25, 0xFF	; 255
    26e8:	19 f4       	brne	.+6      	; 0x26f0 <__addsf3+0x24>
    26ea:	26 f4       	brtc	.+8      	; 0x26f4 <__addsf3+0x28>
    26ec:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>
    26f0:	0e f4       	brtc	.+2      	; 0x26f4 <__addsf3+0x28>
    26f2:	e0 95       	com	r30
    26f4:	e7 fb       	bst	r30, 7
    26f6:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>

000026fa <__addsf3x>:
    26fa:	e9 2f       	mov	r30, r25
    26fc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fp_split3>
    2700:	58 f3       	brcs	.-42     	; 0x26d8 <__addsf3+0xc>
    2702:	ba 17       	cp	r27, r26
    2704:	62 07       	cpc	r22, r18
    2706:	73 07       	cpc	r23, r19
    2708:	84 07       	cpc	r24, r20
    270a:	95 07       	cpc	r25, r21
    270c:	20 f0       	brcs	.+8      	; 0x2716 <__addsf3x+0x1c>
    270e:	79 f4       	brne	.+30     	; 0x272e <__addsf3x+0x34>
    2710:	a6 f5       	brtc	.+104    	; 0x277a <__addsf3x+0x80>
    2712:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__fp_zero>
    2716:	0e f4       	brtc	.+2      	; 0x271a <__addsf3x+0x20>
    2718:	e0 95       	com	r30
    271a:	0b 2e       	mov	r0, r27
    271c:	ba 2f       	mov	r27, r26
    271e:	a0 2d       	mov	r26, r0
    2720:	0b 01       	movw	r0, r22
    2722:	b9 01       	movw	r22, r18
    2724:	90 01       	movw	r18, r0
    2726:	0c 01       	movw	r0, r24
    2728:	ca 01       	movw	r24, r20
    272a:	a0 01       	movw	r20, r0
    272c:	11 24       	eor	r1, r1
    272e:	ff 27       	eor	r31, r31
    2730:	59 1b       	sub	r21, r25
    2732:	99 f0       	breq	.+38     	; 0x275a <__addsf3x+0x60>
    2734:	59 3f       	cpi	r21, 0xF9	; 249
    2736:	50 f4       	brcc	.+20     	; 0x274c <__addsf3x+0x52>
    2738:	50 3e       	cpi	r21, 0xE0	; 224
    273a:	68 f1       	brcs	.+90     	; 0x2796 <__addsf3x+0x9c>
    273c:	1a 16       	cp	r1, r26
    273e:	f0 40       	sbci	r31, 0x00	; 0
    2740:	a2 2f       	mov	r26, r18
    2742:	23 2f       	mov	r18, r19
    2744:	34 2f       	mov	r19, r20
    2746:	44 27       	eor	r20, r20
    2748:	58 5f       	subi	r21, 0xF8	; 248
    274a:	f3 cf       	rjmp	.-26     	; 0x2732 <__addsf3x+0x38>
    274c:	46 95       	lsr	r20
    274e:	37 95       	ror	r19
    2750:	27 95       	ror	r18
    2752:	a7 95       	ror	r26
    2754:	f0 40       	sbci	r31, 0x00	; 0
    2756:	53 95       	inc	r21
    2758:	c9 f7       	brne	.-14     	; 0x274c <__addsf3x+0x52>
    275a:	7e f4       	brtc	.+30     	; 0x277a <__addsf3x+0x80>
    275c:	1f 16       	cp	r1, r31
    275e:	ba 0b       	sbc	r27, r26
    2760:	62 0b       	sbc	r22, r18
    2762:	73 0b       	sbc	r23, r19
    2764:	84 0b       	sbc	r24, r20
    2766:	ba f0       	brmi	.+46     	; 0x2796 <__addsf3x+0x9c>
    2768:	91 50       	subi	r25, 0x01	; 1
    276a:	a1 f0       	breq	.+40     	; 0x2794 <__addsf3x+0x9a>
    276c:	ff 0f       	add	r31, r31
    276e:	bb 1f       	adc	r27, r27
    2770:	66 1f       	adc	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	88 1f       	adc	r24, r24
    2776:	c2 f7       	brpl	.-16     	; 0x2768 <__addsf3x+0x6e>
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <__addsf3x+0x9c>
    277a:	ba 0f       	add	r27, r26
    277c:	62 1f       	adc	r22, r18
    277e:	73 1f       	adc	r23, r19
    2780:	84 1f       	adc	r24, r20
    2782:	48 f4       	brcc	.+18     	; 0x2796 <__addsf3x+0x9c>
    2784:	87 95       	ror	r24
    2786:	77 95       	ror	r23
    2788:	67 95       	ror	r22
    278a:	b7 95       	ror	r27
    278c:	f7 95       	ror	r31
    278e:	9e 3f       	cpi	r25, 0xFE	; 254
    2790:	08 f0       	brcs	.+2      	; 0x2794 <__addsf3x+0x9a>
    2792:	b0 cf       	rjmp	.-160    	; 0x26f4 <__addsf3+0x28>
    2794:	93 95       	inc	r25
    2796:	88 0f       	add	r24, r24
    2798:	08 f0       	brcs	.+2      	; 0x279c <__addsf3x+0xa2>
    279a:	99 27       	eor	r25, r25
    279c:	ee 0f       	add	r30, r30
    279e:	97 95       	ror	r25
    27a0:	87 95       	ror	r24
    27a2:	08 95       	ret

000027a4 <__cmpsf2>:
    27a4:	0e 94 c1 14 	call	0x2982	; 0x2982 <__fp_cmp>
    27a8:	08 f4       	brcc	.+2      	; 0x27ac <__cmpsf2+0x8>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	08 95       	ret

000027ae <cos>:
    27ae:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fp_rempio2>
    27b2:	e3 95       	inc	r30
    27b4:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_sinus>

000027b8 <__divsf3>:
    27b8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__divsf3x>
    27bc:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_round>
    27c0:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__fp_pscB>
    27c4:	58 f0       	brcs	.+22     	; 0x27dc <__divsf3+0x24>
    27c6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fp_pscA>
    27ca:	40 f0       	brcs	.+16     	; 0x27dc <__divsf3+0x24>
    27cc:	29 f4       	brne	.+10     	; 0x27d8 <__divsf3+0x20>
    27ce:	5f 3f       	cpi	r21, 0xFF	; 255
    27d0:	29 f0       	breq	.+10     	; 0x27dc <__divsf3+0x24>
    27d2:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>
    27d6:	51 11       	cpse	r21, r1
    27d8:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__fp_szero>
    27dc:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>

000027e0 <__divsf3x>:
    27e0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fp_split3>
    27e4:	68 f3       	brcs	.-38     	; 0x27c0 <__divsf3+0x8>

000027e6 <__divsf3_pse>:
    27e6:	99 23       	and	r25, r25
    27e8:	b1 f3       	breq	.-20     	; 0x27d6 <__divsf3+0x1e>
    27ea:	55 23       	and	r21, r21
    27ec:	91 f3       	breq	.-28     	; 0x27d2 <__divsf3+0x1a>
    27ee:	95 1b       	sub	r25, r21
    27f0:	55 0b       	sbc	r21, r21
    27f2:	bb 27       	eor	r27, r27
    27f4:	aa 27       	eor	r26, r26
    27f6:	62 17       	cp	r22, r18
    27f8:	73 07       	cpc	r23, r19
    27fa:	84 07       	cpc	r24, r20
    27fc:	38 f0       	brcs	.+14     	; 0x280c <__divsf3_pse+0x26>
    27fe:	9f 5f       	subi	r25, 0xFF	; 255
    2800:	5f 4f       	sbci	r21, 0xFF	; 255
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	44 1f       	adc	r20, r20
    2808:	aa 1f       	adc	r26, r26
    280a:	a9 f3       	breq	.-22     	; 0x27f6 <__divsf3_pse+0x10>
    280c:	35 d0       	rcall	.+106    	; 0x2878 <__divsf3_pse+0x92>
    280e:	0e 2e       	mov	r0, r30
    2810:	3a f0       	brmi	.+14     	; 0x2820 <__divsf3_pse+0x3a>
    2812:	e0 e8       	ldi	r30, 0x80	; 128
    2814:	32 d0       	rcall	.+100    	; 0x287a <__divsf3_pse+0x94>
    2816:	91 50       	subi	r25, 0x01	; 1
    2818:	50 40       	sbci	r21, 0x00	; 0
    281a:	e6 95       	lsr	r30
    281c:	00 1c       	adc	r0, r0
    281e:	ca f7       	brpl	.-14     	; 0x2812 <__divsf3_pse+0x2c>
    2820:	2b d0       	rcall	.+86     	; 0x2878 <__divsf3_pse+0x92>
    2822:	fe 2f       	mov	r31, r30
    2824:	29 d0       	rcall	.+82     	; 0x2878 <__divsf3_pse+0x92>
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	88 1f       	adc	r24, r24
    282c:	bb 1f       	adc	r27, r27
    282e:	26 17       	cp	r18, r22
    2830:	37 07       	cpc	r19, r23
    2832:	48 07       	cpc	r20, r24
    2834:	ab 07       	cpc	r26, r27
    2836:	b0 e8       	ldi	r27, 0x80	; 128
    2838:	09 f0       	breq	.+2      	; 0x283c <__divsf3_pse+0x56>
    283a:	bb 0b       	sbc	r27, r27
    283c:	80 2d       	mov	r24, r0
    283e:	bf 01       	movw	r22, r30
    2840:	ff 27       	eor	r31, r31
    2842:	93 58       	subi	r25, 0x83	; 131
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
    2846:	3a f0       	brmi	.+14     	; 0x2856 <__divsf3_pse+0x70>
    2848:	9e 3f       	cpi	r25, 0xFE	; 254
    284a:	51 05       	cpc	r21, r1
    284c:	78 f0       	brcs	.+30     	; 0x286c <__divsf3_pse+0x86>
    284e:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>
    2852:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__fp_szero>
    2856:	5f 3f       	cpi	r21, 0xFF	; 255
    2858:	e4 f3       	brlt	.-8      	; 0x2852 <__divsf3_pse+0x6c>
    285a:	98 3e       	cpi	r25, 0xE8	; 232
    285c:	d4 f3       	brlt	.-12     	; 0x2852 <__divsf3_pse+0x6c>
    285e:	86 95       	lsr	r24
    2860:	77 95       	ror	r23
    2862:	67 95       	ror	r22
    2864:	b7 95       	ror	r27
    2866:	f7 95       	ror	r31
    2868:	9f 5f       	subi	r25, 0xFF	; 255
    286a:	c9 f7       	brne	.-14     	; 0x285e <__divsf3_pse+0x78>
    286c:	88 0f       	add	r24, r24
    286e:	91 1d       	adc	r25, r1
    2870:	96 95       	lsr	r25
    2872:	87 95       	ror	r24
    2874:	97 f9       	bld	r25, 7
    2876:	08 95       	ret
    2878:	e1 e0       	ldi	r30, 0x01	; 1
    287a:	66 0f       	add	r22, r22
    287c:	77 1f       	adc	r23, r23
    287e:	88 1f       	adc	r24, r24
    2880:	bb 1f       	adc	r27, r27
    2882:	62 17       	cp	r22, r18
    2884:	73 07       	cpc	r23, r19
    2886:	84 07       	cpc	r24, r20
    2888:	ba 07       	cpc	r27, r26
    288a:	20 f0       	brcs	.+8      	; 0x2894 <__divsf3_pse+0xae>
    288c:	62 1b       	sub	r22, r18
    288e:	73 0b       	sbc	r23, r19
    2890:	84 0b       	sbc	r24, r20
    2892:	ba 0b       	sbc	r27, r26
    2894:	ee 1f       	adc	r30, r30
    2896:	88 f7       	brcc	.-30     	; 0x287a <__divsf3_pse+0x94>
    2898:	e0 95       	com	r30
    289a:	08 95       	ret

0000289c <__fixsfsi>:
    289c:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixunssfsi>
    28a0:	68 94       	set
    28a2:	b1 11       	cpse	r27, r1
    28a4:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__fp_szero>
    28a8:	08 95       	ret

000028aa <__fixunssfsi>:
    28aa:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__fp_splitA>
    28ae:	88 f0       	brcs	.+34     	; 0x28d2 <__fixunssfsi+0x28>
    28b0:	9f 57       	subi	r25, 0x7F	; 127
    28b2:	98 f0       	brcs	.+38     	; 0x28da <__fixunssfsi+0x30>
    28b4:	b9 2f       	mov	r27, r25
    28b6:	99 27       	eor	r25, r25
    28b8:	b7 51       	subi	r27, 0x17	; 23
    28ba:	b0 f0       	brcs	.+44     	; 0x28e8 <__fixunssfsi+0x3e>
    28bc:	e1 f0       	breq	.+56     	; 0x28f6 <__fixunssfsi+0x4c>
    28be:	66 0f       	add	r22, r22
    28c0:	77 1f       	adc	r23, r23
    28c2:	88 1f       	adc	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	1a f0       	brmi	.+6      	; 0x28ce <__fixunssfsi+0x24>
    28c8:	ba 95       	dec	r27
    28ca:	c9 f7       	brne	.-14     	; 0x28be <__fixunssfsi+0x14>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <__fixunssfsi+0x4c>
    28ce:	b1 30       	cpi	r27, 0x01	; 1
    28d0:	91 f0       	breq	.+36     	; 0x28f6 <__fixunssfsi+0x4c>
    28d2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fp_zero>
    28d6:	b1 e0       	ldi	r27, 0x01	; 1
    28d8:	08 95       	ret
    28da:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__fp_zero>
    28de:	67 2f       	mov	r22, r23
    28e0:	78 2f       	mov	r23, r24
    28e2:	88 27       	eor	r24, r24
    28e4:	b8 5f       	subi	r27, 0xF8	; 248
    28e6:	39 f0       	breq	.+14     	; 0x28f6 <__fixunssfsi+0x4c>
    28e8:	b9 3f       	cpi	r27, 0xF9	; 249
    28ea:	cc f3       	brlt	.-14     	; 0x28de <__fixunssfsi+0x34>
    28ec:	86 95       	lsr	r24
    28ee:	77 95       	ror	r23
    28f0:	67 95       	ror	r22
    28f2:	b3 95       	inc	r27
    28f4:	d9 f7       	brne	.-10     	; 0x28ec <__fixunssfsi+0x42>
    28f6:	3e f4       	brtc	.+14     	; 0x2906 <__fixunssfsi+0x5c>
    28f8:	90 95       	com	r25
    28fa:	80 95       	com	r24
    28fc:	70 95       	com	r23
    28fe:	61 95       	neg	r22
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	8f 4f       	sbci	r24, 0xFF	; 255
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	08 95       	ret

00002908 <__floatunsisf>:
    2908:	e8 94       	clt
    290a:	09 c0       	rjmp	.+18     	; 0x291e <__floatsisf+0x12>

0000290c <__floatsisf>:
    290c:	97 fb       	bst	r25, 7
    290e:	3e f4       	brtc	.+14     	; 0x291e <__floatsisf+0x12>
    2910:	90 95       	com	r25
    2912:	80 95       	com	r24
    2914:	70 95       	com	r23
    2916:	61 95       	neg	r22
    2918:	7f 4f       	sbci	r23, 0xFF	; 255
    291a:	8f 4f       	sbci	r24, 0xFF	; 255
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	99 23       	and	r25, r25
    2920:	a9 f0       	breq	.+42     	; 0x294c <__floatsisf+0x40>
    2922:	f9 2f       	mov	r31, r25
    2924:	96 e9       	ldi	r25, 0x96	; 150
    2926:	bb 27       	eor	r27, r27
    2928:	93 95       	inc	r25
    292a:	f6 95       	lsr	r31
    292c:	87 95       	ror	r24
    292e:	77 95       	ror	r23
    2930:	67 95       	ror	r22
    2932:	b7 95       	ror	r27
    2934:	f1 11       	cpse	r31, r1
    2936:	f8 cf       	rjmp	.-16     	; 0x2928 <__floatsisf+0x1c>
    2938:	fa f4       	brpl	.+62     	; 0x2978 <__floatsisf+0x6c>
    293a:	bb 0f       	add	r27, r27
    293c:	11 f4       	brne	.+4      	; 0x2942 <__floatsisf+0x36>
    293e:	60 ff       	sbrs	r22, 0
    2940:	1b c0       	rjmp	.+54     	; 0x2978 <__floatsisf+0x6c>
    2942:	6f 5f       	subi	r22, 0xFF	; 255
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	8f 4f       	sbci	r24, 0xFF	; 255
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	16 c0       	rjmp	.+44     	; 0x2978 <__floatsisf+0x6c>
    294c:	88 23       	and	r24, r24
    294e:	11 f0       	breq	.+4      	; 0x2954 <__floatsisf+0x48>
    2950:	96 e9       	ldi	r25, 0x96	; 150
    2952:	11 c0       	rjmp	.+34     	; 0x2976 <__floatsisf+0x6a>
    2954:	77 23       	and	r23, r23
    2956:	21 f0       	breq	.+8      	; 0x2960 <__floatsisf+0x54>
    2958:	9e e8       	ldi	r25, 0x8E	; 142
    295a:	87 2f       	mov	r24, r23
    295c:	76 2f       	mov	r23, r22
    295e:	05 c0       	rjmp	.+10     	; 0x296a <__floatsisf+0x5e>
    2960:	66 23       	and	r22, r22
    2962:	71 f0       	breq	.+28     	; 0x2980 <__floatsisf+0x74>
    2964:	96 e8       	ldi	r25, 0x86	; 134
    2966:	86 2f       	mov	r24, r22
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	2a f0       	brmi	.+10     	; 0x2978 <__floatsisf+0x6c>
    296e:	9a 95       	dec	r25
    2970:	66 0f       	add	r22, r22
    2972:	77 1f       	adc	r23, r23
    2974:	88 1f       	adc	r24, r24
    2976:	da f7       	brpl	.-10     	; 0x296e <__floatsisf+0x62>
    2978:	88 0f       	add	r24, r24
    297a:	96 95       	lsr	r25
    297c:	87 95       	ror	r24
    297e:	97 f9       	bld	r25, 7
    2980:	08 95       	ret

00002982 <__fp_cmp>:
    2982:	99 0f       	add	r25, r25
    2984:	00 08       	sbc	r0, r0
    2986:	55 0f       	add	r21, r21
    2988:	aa 0b       	sbc	r26, r26
    298a:	e0 e8       	ldi	r30, 0x80	; 128
    298c:	fe ef       	ldi	r31, 0xFE	; 254
    298e:	16 16       	cp	r1, r22
    2990:	17 06       	cpc	r1, r23
    2992:	e8 07       	cpc	r30, r24
    2994:	f9 07       	cpc	r31, r25
    2996:	c0 f0       	brcs	.+48     	; 0x29c8 <__fp_cmp+0x46>
    2998:	12 16       	cp	r1, r18
    299a:	13 06       	cpc	r1, r19
    299c:	e4 07       	cpc	r30, r20
    299e:	f5 07       	cpc	r31, r21
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__fp_cmp+0x46>
    29a2:	62 1b       	sub	r22, r18
    29a4:	73 0b       	sbc	r23, r19
    29a6:	84 0b       	sbc	r24, r20
    29a8:	95 0b       	sbc	r25, r21
    29aa:	39 f4       	brne	.+14     	; 0x29ba <__fp_cmp+0x38>
    29ac:	0a 26       	eor	r0, r26
    29ae:	61 f0       	breq	.+24     	; 0x29c8 <__fp_cmp+0x46>
    29b0:	23 2b       	or	r18, r19
    29b2:	24 2b       	or	r18, r20
    29b4:	25 2b       	or	r18, r21
    29b6:	21 f4       	brne	.+8      	; 0x29c0 <__fp_cmp+0x3e>
    29b8:	08 95       	ret
    29ba:	0a 26       	eor	r0, r26
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <__fp_cmp+0x3e>
    29be:	a1 40       	sbci	r26, 0x01	; 1
    29c0:	a6 95       	lsr	r26
    29c2:	8f ef       	ldi	r24, 0xFF	; 255
    29c4:	81 1d       	adc	r24, r1
    29c6:	81 1d       	adc	r24, r1
    29c8:	08 95       	ret

000029ca <__fp_inf>:
    29ca:	97 f9       	bld	r25, 7
    29cc:	9f 67       	ori	r25, 0x7F	; 127
    29ce:	80 e8       	ldi	r24, 0x80	; 128
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	08 95       	ret

000029d6 <__fp_nan>:
    29d6:	9f ef       	ldi	r25, 0xFF	; 255
    29d8:	80 ec       	ldi	r24, 0xC0	; 192
    29da:	08 95       	ret

000029dc <__fp_pscA>:
    29dc:	00 24       	eor	r0, r0
    29de:	0a 94       	dec	r0
    29e0:	16 16       	cp	r1, r22
    29e2:	17 06       	cpc	r1, r23
    29e4:	18 06       	cpc	r1, r24
    29e6:	09 06       	cpc	r0, r25
    29e8:	08 95       	ret

000029ea <__fp_pscB>:
    29ea:	00 24       	eor	r0, r0
    29ec:	0a 94       	dec	r0
    29ee:	12 16       	cp	r1, r18
    29f0:	13 06       	cpc	r1, r19
    29f2:	14 06       	cpc	r1, r20
    29f4:	05 06       	cpc	r0, r21
    29f6:	08 95       	ret
    29f8:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>

000029fc <__fp_rempio2>:
    29fc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__fp_splitA>
    2a00:	d8 f3       	brcs	.-10     	; 0x29f8 <__fp_pscB+0xe>
    2a02:	e8 94       	clt
    2a04:	e0 e0       	ldi	r30, 0x00	; 0
    2a06:	bb 27       	eor	r27, r27
    2a08:	9f 57       	subi	r25, 0x7F	; 127
    2a0a:	f0 f0       	brcs	.+60     	; 0x2a48 <__fp_rempio2+0x4c>
    2a0c:	2a ed       	ldi	r18, 0xDA	; 218
    2a0e:	3f e0       	ldi	r19, 0x0F	; 15
    2a10:	49 ec       	ldi	r20, 0xC9	; 201
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <__fp_rempio2+0x24>
    2a14:	ee 0f       	add	r30, r30
    2a16:	bb 0f       	add	r27, r27
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	28 f0       	brcs	.+10     	; 0x2a2a <__fp_rempio2+0x2e>
    2a20:	b2 3a       	cpi	r27, 0xA2	; 162
    2a22:	62 07       	cpc	r22, r18
    2a24:	73 07       	cpc	r23, r19
    2a26:	84 07       	cpc	r24, r20
    2a28:	28 f0       	brcs	.+10     	; 0x2a34 <__fp_rempio2+0x38>
    2a2a:	b2 5a       	subi	r27, 0xA2	; 162
    2a2c:	62 0b       	sbc	r22, r18
    2a2e:	73 0b       	sbc	r23, r19
    2a30:	84 0b       	sbc	r24, r20
    2a32:	e3 95       	inc	r30
    2a34:	9a 95       	dec	r25
    2a36:	72 f7       	brpl	.-36     	; 0x2a14 <__fp_rempio2+0x18>
    2a38:	80 38       	cpi	r24, 0x80	; 128
    2a3a:	30 f4       	brcc	.+12     	; 0x2a48 <__fp_rempio2+0x4c>
    2a3c:	9a 95       	dec	r25
    2a3e:	bb 0f       	add	r27, r27
    2a40:	66 1f       	adc	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	d2 f7       	brpl	.-12     	; 0x2a3c <__fp_rempio2+0x40>
    2a48:	90 48       	sbci	r25, 0x80	; 128
    2a4a:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__fp_mpack_finite>

00002a4e <__fp_round>:
    2a4e:	09 2e       	mov	r0, r25
    2a50:	03 94       	inc	r0
    2a52:	00 0c       	add	r0, r0
    2a54:	11 f4       	brne	.+4      	; 0x2a5a <__fp_round+0xc>
    2a56:	88 23       	and	r24, r24
    2a58:	52 f0       	brmi	.+20     	; 0x2a6e <__fp_round+0x20>
    2a5a:	bb 0f       	add	r27, r27
    2a5c:	40 f4       	brcc	.+16     	; 0x2a6e <__fp_round+0x20>
    2a5e:	bf 2b       	or	r27, r31
    2a60:	11 f4       	brne	.+4      	; 0x2a66 <__fp_round+0x18>
    2a62:	60 ff       	sbrs	r22, 0
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <__fp_round+0x20>
    2a66:	6f 5f       	subi	r22, 0xFF	; 255
    2a68:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	08 95       	ret

00002a70 <__fp_sinus>:
    2a70:	ef 93       	push	r30
    2a72:	e0 ff       	sbrs	r30, 0
    2a74:	07 c0       	rjmp	.+14     	; 0x2a84 <__fp_sinus+0x14>
    2a76:	a2 ea       	ldi	r26, 0xA2	; 162
    2a78:	2a ed       	ldi	r18, 0xDA	; 218
    2a7a:	3f e0       	ldi	r19, 0x0F	; 15
    2a7c:	49 ec       	ldi	r20, 0xC9	; 201
    2a7e:	5f eb       	ldi	r21, 0xBF	; 191
    2a80:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__addsf3x>
    2a84:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__fp_round>
    2a88:	0f 90       	pop	r0
    2a8a:	03 94       	inc	r0
    2a8c:	01 fc       	sbrc	r0, 1
    2a8e:	90 58       	subi	r25, 0x80	; 128
    2a90:	e4 e5       	ldi	r30, 0x54	; 84
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__fp_powsodd>

00002a98 <__fp_split3>:
    2a98:	57 fd       	sbrc	r21, 7
    2a9a:	90 58       	subi	r25, 0x80	; 128
    2a9c:	44 0f       	add	r20, r20
    2a9e:	55 1f       	adc	r21, r21
    2aa0:	59 f0       	breq	.+22     	; 0x2ab8 <__fp_splitA+0x10>
    2aa2:	5f 3f       	cpi	r21, 0xFF	; 255
    2aa4:	71 f0       	breq	.+28     	; 0x2ac2 <__fp_splitA+0x1a>
    2aa6:	47 95       	ror	r20

00002aa8 <__fp_splitA>:
    2aa8:	88 0f       	add	r24, r24
    2aaa:	97 fb       	bst	r25, 7
    2aac:	99 1f       	adc	r25, r25
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <__fp_splitA+0x20>
    2ab0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ab2:	79 f0       	breq	.+30     	; 0x2ad2 <__fp_splitA+0x2a>
    2ab4:	87 95       	ror	r24
    2ab6:	08 95       	ret
    2ab8:	12 16       	cp	r1, r18
    2aba:	13 06       	cpc	r1, r19
    2abc:	14 06       	cpc	r1, r20
    2abe:	55 1f       	adc	r21, r21
    2ac0:	f2 cf       	rjmp	.-28     	; 0x2aa6 <__fp_split3+0xe>
    2ac2:	46 95       	lsr	r20
    2ac4:	f1 df       	rcall	.-30     	; 0x2aa8 <__fp_splitA>
    2ac6:	08 c0       	rjmp	.+16     	; 0x2ad8 <__fp_splitA+0x30>
    2ac8:	16 16       	cp	r1, r22
    2aca:	17 06       	cpc	r1, r23
    2acc:	18 06       	cpc	r1, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	f1 cf       	rjmp	.-30     	; 0x2ab4 <__fp_splitA+0xc>
    2ad2:	86 95       	lsr	r24
    2ad4:	71 05       	cpc	r23, r1
    2ad6:	61 05       	cpc	r22, r1
    2ad8:	08 94       	sec
    2ada:	08 95       	ret

00002adc <__fp_zero>:
    2adc:	e8 94       	clt

00002ade <__fp_szero>:
    2ade:	bb 27       	eor	r27, r27
    2ae0:	66 27       	eor	r22, r22
    2ae2:	77 27       	eor	r23, r23
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	97 f9       	bld	r25, 7
    2ae8:	08 95       	ret

00002aea <__gesf2>:
    2aea:	0e 94 c1 14 	call	0x2982	; 0x2982 <__fp_cmp>
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <__gesf2+0x8>
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	08 95       	ret
    2af4:	16 f0       	brts	.+4      	; 0x2afa <__gesf2+0x10>
    2af6:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_mpack>
    2afa:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>
    2afe:	68 94       	set
    2b00:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>

00002b04 <log>:
    2b04:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__fp_splitA>
    2b08:	a8 f3       	brcs	.-22     	; 0x2af4 <__gesf2+0xa>
    2b0a:	99 23       	and	r25, r25
    2b0c:	c1 f3       	breq	.-16     	; 0x2afe <__gesf2+0x14>
    2b0e:	ae f3       	brts	.-22     	; 0x2afa <__gesf2+0x10>
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	1f 93       	push	r17
    2b16:	0f 93       	push	r16
    2b18:	ff 92       	push	r15
    2b1a:	c9 2f       	mov	r28, r25
    2b1c:	dd 27       	eor	r29, r29
    2b1e:	88 23       	and	r24, r24
    2b20:	2a f0       	brmi	.+10     	; 0x2b2c <log+0x28>
    2b22:	21 97       	sbiw	r28, 0x01	; 1
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	da f7       	brpl	.-10     	; 0x2b22 <log+0x1e>
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	5f eb       	ldi	r21, 0xBF	; 191
    2b34:	9f e3       	ldi	r25, 0x3F	; 63
    2b36:	88 39       	cpi	r24, 0x98	; 152
    2b38:	20 f0       	brcs	.+8      	; 0x2b42 <log+0x3e>
    2b3a:	80 3e       	cpi	r24, 0xE0	; 224
    2b3c:	38 f0       	brcs	.+14     	; 0x2b4c <log+0x48>
    2b3e:	21 96       	adiw	r28, 0x01	; 1
    2b40:	8f 77       	andi	r24, 0x7F	; 127
    2b42:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    2b46:	e2 e7       	ldi	r30, 0x72	; 114
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <log+0x50>
    2b4c:	0e 94 66 13 	call	0x26cc	; 0x26cc <__addsf3>
    2b50:	ef e9       	ldi	r30, 0x9F	; 159
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__fp_powser>
    2b58:	8b 01       	movw	r16, r22
    2b5a:	be 01       	movw	r22, r28
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	fb 2e       	mov	r15, r27
    2b60:	6f 57       	subi	r22, 0x7F	; 127
    2b62:	71 09       	sbc	r23, r1
    2b64:	75 95       	asr	r23
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 0b       	sbc	r24, r24
    2b6a:	99 0b       	sbc	r25, r25
    2b6c:	0e 94 86 14 	call	0x290c	; 0x290c <__floatsisf>
    2b70:	28 e1       	ldi	r18, 0x18	; 24
    2b72:	32 e7       	ldi	r19, 0x72	; 114
    2b74:	41 e3       	ldi	r20, 0x31	; 49
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsf3x>
    2b7c:	af 2d       	mov	r26, r15
    2b7e:	98 01       	movw	r18, r16
    2b80:	ae 01       	movw	r20, r28
    2b82:	ff 90       	pop	r15
    2b84:	0f 91       	pop	r16
    2b86:	1f 91       	pop	r17
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__addsf3x>
    2b90:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_round>

00002b94 <__mulsf3>:
    2b94:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsf3x>
    2b98:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_round>
    2b9c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fp_pscA>
    2ba0:	38 f0       	brcs	.+14     	; 0x2bb0 <__mulsf3+0x1c>
    2ba2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__fp_pscB>
    2ba6:	20 f0       	brcs	.+8      	; 0x2bb0 <__mulsf3+0x1c>
    2ba8:	95 23       	and	r25, r21
    2baa:	11 f0       	breq	.+4      	; 0x2bb0 <__mulsf3+0x1c>
    2bac:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>
    2bb0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>
    2bb4:	11 24       	eor	r1, r1
    2bb6:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__fp_szero>

00002bba <__mulsf3x>:
    2bba:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fp_split3>
    2bbe:	70 f3       	brcs	.-36     	; 0x2b9c <__mulsf3+0x8>

00002bc0 <__mulsf3_pse>:
    2bc0:	95 9f       	mul	r25, r21
    2bc2:	c1 f3       	breq	.-16     	; 0x2bb4 <__mulsf3+0x20>
    2bc4:	95 0f       	add	r25, r21
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	55 1f       	adc	r21, r21
    2bca:	62 9f       	mul	r22, r18
    2bcc:	f0 01       	movw	r30, r0
    2bce:	72 9f       	mul	r23, r18
    2bd0:	bb 27       	eor	r27, r27
    2bd2:	f0 0d       	add	r31, r0
    2bd4:	b1 1d       	adc	r27, r1
    2bd6:	63 9f       	mul	r22, r19
    2bd8:	aa 27       	eor	r26, r26
    2bda:	f0 0d       	add	r31, r0
    2bdc:	b1 1d       	adc	r27, r1
    2bde:	aa 1f       	adc	r26, r26
    2be0:	64 9f       	mul	r22, r20
    2be2:	66 27       	eor	r22, r22
    2be4:	b0 0d       	add	r27, r0
    2be6:	a1 1d       	adc	r26, r1
    2be8:	66 1f       	adc	r22, r22
    2bea:	82 9f       	mul	r24, r18
    2bec:	22 27       	eor	r18, r18
    2bee:	b0 0d       	add	r27, r0
    2bf0:	a1 1d       	adc	r26, r1
    2bf2:	62 1f       	adc	r22, r18
    2bf4:	73 9f       	mul	r23, r19
    2bf6:	b0 0d       	add	r27, r0
    2bf8:	a1 1d       	adc	r26, r1
    2bfa:	62 1f       	adc	r22, r18
    2bfc:	83 9f       	mul	r24, r19
    2bfe:	a0 0d       	add	r26, r0
    2c00:	61 1d       	adc	r22, r1
    2c02:	22 1f       	adc	r18, r18
    2c04:	74 9f       	mul	r23, r20
    2c06:	33 27       	eor	r19, r19
    2c08:	a0 0d       	add	r26, r0
    2c0a:	61 1d       	adc	r22, r1
    2c0c:	23 1f       	adc	r18, r19
    2c0e:	84 9f       	mul	r24, r20
    2c10:	60 0d       	add	r22, r0
    2c12:	21 1d       	adc	r18, r1
    2c14:	82 2f       	mov	r24, r18
    2c16:	76 2f       	mov	r23, r22
    2c18:	6a 2f       	mov	r22, r26
    2c1a:	11 24       	eor	r1, r1
    2c1c:	9f 57       	subi	r25, 0x7F	; 127
    2c1e:	50 40       	sbci	r21, 0x00	; 0
    2c20:	9a f0       	brmi	.+38     	; 0x2c48 <__mulsf3_pse+0x88>
    2c22:	f1 f0       	breq	.+60     	; 0x2c60 <__mulsf3_pse+0xa0>
    2c24:	88 23       	and	r24, r24
    2c26:	4a f0       	brmi	.+18     	; 0x2c3a <__mulsf3_pse+0x7a>
    2c28:	ee 0f       	add	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	bb 1f       	adc	r27, r27
    2c2e:	66 1f       	adc	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	88 1f       	adc	r24, r24
    2c34:	91 50       	subi	r25, 0x01	; 1
    2c36:	50 40       	sbci	r21, 0x00	; 0
    2c38:	a9 f7       	brne	.-22     	; 0x2c24 <__mulsf3_pse+0x64>
    2c3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c3c:	51 05       	cpc	r21, r1
    2c3e:	80 f0       	brcs	.+32     	; 0x2c60 <__mulsf3_pse+0xa0>
    2c40:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__fp_inf>
    2c44:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__fp_szero>
    2c48:	5f 3f       	cpi	r21, 0xFF	; 255
    2c4a:	e4 f3       	brlt	.-8      	; 0x2c44 <__mulsf3_pse+0x84>
    2c4c:	98 3e       	cpi	r25, 0xE8	; 232
    2c4e:	d4 f3       	brlt	.-12     	; 0x2c44 <__mulsf3_pse+0x84>
    2c50:	86 95       	lsr	r24
    2c52:	77 95       	ror	r23
    2c54:	67 95       	ror	r22
    2c56:	b7 95       	ror	r27
    2c58:	f7 95       	ror	r31
    2c5a:	e7 95       	ror	r30
    2c5c:	9f 5f       	subi	r25, 0xFF	; 255
    2c5e:	c1 f7       	brne	.-16     	; 0x2c50 <__mulsf3_pse+0x90>
    2c60:	fe 2b       	or	r31, r30
    2c62:	88 0f       	add	r24, r24
    2c64:	91 1d       	adc	r25, r1
    2c66:	96 95       	lsr	r25
    2c68:	87 95       	ror	r24
    2c6a:	97 f9       	bld	r25, 7
    2c6c:	08 95       	ret

00002c6e <sin>:
    2c6e:	9f 93       	push	r25
    2c70:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fp_rempio2>
    2c74:	0f 90       	pop	r0
    2c76:	07 fc       	sbrc	r0, 7
    2c78:	ee 5f       	subi	r30, 0xFE	; 254
    2c7a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_sinus>
    2c7e:	19 f4       	brne	.+6      	; 0x2c86 <sin+0x18>
    2c80:	16 f4       	brtc	.+4      	; 0x2c86 <sin+0x18>
    2c82:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__fp_nan>
    2c86:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_mpack>

00002c8a <sqrt>:
    2c8a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__fp_splitA>
    2c8e:	b8 f3       	brcs	.-18     	; 0x2c7e <sin+0x10>
    2c90:	99 23       	and	r25, r25
    2c92:	c9 f3       	breq	.-14     	; 0x2c86 <sin+0x18>
    2c94:	b6 f3       	brts	.-20     	; 0x2c82 <sin+0x14>
    2c96:	9f 57       	subi	r25, 0x7F	; 127
    2c98:	55 0b       	sbc	r21, r21
    2c9a:	87 ff       	sbrs	r24, 7
    2c9c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_norm2>
    2ca0:	00 24       	eor	r0, r0
    2ca2:	a0 e6       	ldi	r26, 0x60	; 96
    2ca4:	40 ea       	ldi	r20, 0xA0	; 160
    2ca6:	90 01       	movw	r18, r0
    2ca8:	80 58       	subi	r24, 0x80	; 128
    2caa:	56 95       	lsr	r21
    2cac:	97 95       	ror	r25
    2cae:	28 f4       	brcc	.+10     	; 0x2cba <sqrt+0x30>
    2cb0:	80 5c       	subi	r24, 0xC0	; 192
    2cb2:	66 0f       	add	r22, r22
    2cb4:	77 1f       	adc	r23, r23
    2cb6:	88 1f       	adc	r24, r24
    2cb8:	20 f0       	brcs	.+8      	; 0x2cc2 <sqrt+0x38>
    2cba:	26 17       	cp	r18, r22
    2cbc:	37 07       	cpc	r19, r23
    2cbe:	48 07       	cpc	r20, r24
    2cc0:	30 f4       	brcc	.+12     	; 0x2cce <sqrt+0x44>
    2cc2:	62 1b       	sub	r22, r18
    2cc4:	73 0b       	sbc	r23, r19
    2cc6:	84 0b       	sbc	r24, r20
    2cc8:	20 29       	or	r18, r0
    2cca:	31 29       	or	r19, r1
    2ccc:	4a 2b       	or	r20, r26
    2cce:	a6 95       	lsr	r26
    2cd0:	17 94       	ror	r1
    2cd2:	07 94       	ror	r0
    2cd4:	20 25       	eor	r18, r0
    2cd6:	31 25       	eor	r19, r1
    2cd8:	4a 27       	eor	r20, r26
    2cda:	58 f7       	brcc	.-42     	; 0x2cb2 <sqrt+0x28>
    2cdc:	66 0f       	add	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	88 1f       	adc	r24, r24
    2ce2:	20 f0       	brcs	.+8      	; 0x2cec <sqrt+0x62>
    2ce4:	26 17       	cp	r18, r22
    2ce6:	37 07       	cpc	r19, r23
    2ce8:	48 07       	cpc	r20, r24
    2cea:	30 f4       	brcc	.+12     	; 0x2cf8 <sqrt+0x6e>
    2cec:	62 0b       	sbc	r22, r18
    2cee:	73 0b       	sbc	r23, r19
    2cf0:	84 0b       	sbc	r24, r20
    2cf2:	20 0d       	add	r18, r0
    2cf4:	31 1d       	adc	r19, r1
    2cf6:	41 1d       	adc	r20, r1
    2cf8:	a0 95       	com	r26
    2cfa:	81 f7       	brne	.-32     	; 0x2cdc <sqrt+0x52>
    2cfc:	b9 01       	movw	r22, r18
    2cfe:	84 2f       	mov	r24, r20
    2d00:	91 58       	subi	r25, 0x81	; 129
    2d02:	88 0f       	add	r24, r24
    2d04:	96 95       	lsr	r25
    2d06:	87 95       	ror	r24
    2d08:	08 95       	ret

00002d0a <__fp_mpack>:
    2d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d0c:	31 f0       	breq	.+12     	; 0x2d1a <__fp_mpack_finite+0xc>

00002d0e <__fp_mpack_finite>:
    2d0e:	91 50       	subi	r25, 0x01	; 1
    2d10:	20 f4       	brcc	.+8      	; 0x2d1a <__fp_mpack_finite+0xc>
    2d12:	87 95       	ror	r24
    2d14:	77 95       	ror	r23
    2d16:	67 95       	ror	r22
    2d18:	b7 95       	ror	r27
    2d1a:	88 0f       	add	r24, r24
    2d1c:	91 1d       	adc	r25, r1
    2d1e:	96 95       	lsr	r25
    2d20:	87 95       	ror	r24
    2d22:	97 f9       	bld	r25, 7
    2d24:	08 95       	ret

00002d26 <__fp_norm2>:
    2d26:	91 50       	subi	r25, 0x01	; 1
    2d28:	50 40       	sbci	r21, 0x00	; 0
    2d2a:	66 0f       	add	r22, r22
    2d2c:	77 1f       	adc	r23, r23
    2d2e:	88 1f       	adc	r24, r24
    2d30:	d2 f7       	brpl	.-12     	; 0x2d26 <__fp_norm2>
    2d32:	08 95       	ret

00002d34 <__fp_powser>:
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	1f 93       	push	r17
    2d3a:	0f 93       	push	r16
    2d3c:	ff 92       	push	r15
    2d3e:	ef 92       	push	r14
    2d40:	df 92       	push	r13
    2d42:	7b 01       	movw	r14, r22
    2d44:	8c 01       	movw	r16, r24
    2d46:	68 94       	set
    2d48:	06 c0       	rjmp	.+12     	; 0x2d56 <__fp_powser+0x22>
    2d4a:	da 2e       	mov	r13, r26
    2d4c:	ef 01       	movw	r28, r30
    2d4e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsf3x>
    2d52:	fe 01       	movw	r30, r28
    2d54:	e8 94       	clt
    2d56:	a5 91       	lpm	r26, Z+
    2d58:	25 91       	lpm	r18, Z+
    2d5a:	35 91       	lpm	r19, Z+
    2d5c:	45 91       	lpm	r20, Z+
    2d5e:	55 91       	lpm	r21, Z+
    2d60:	a6 f3       	brts	.-24     	; 0x2d4a <__fp_powser+0x16>
    2d62:	ef 01       	movw	r28, r30
    2d64:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__addsf3x>
    2d68:	fe 01       	movw	r30, r28
    2d6a:	97 01       	movw	r18, r14
    2d6c:	a8 01       	movw	r20, r16
    2d6e:	da 94       	dec	r13
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <__fp_powser+0x18>
    2d72:	df 90       	pop	r13
    2d74:	ef 90       	pop	r14
    2d76:	ff 90       	pop	r15
    2d78:	0f 91       	pop	r16
    2d7a:	1f 91       	pop	r17
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <__fp_powsodd>:
    2d82:	9f 93       	push	r25
    2d84:	8f 93       	push	r24
    2d86:	7f 93       	push	r23
    2d88:	6f 93       	push	r22
    2d8a:	ff 93       	push	r31
    2d8c:	ef 93       	push	r30
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    2d96:	ef 91       	pop	r30
    2d98:	ff 91       	pop	r31
    2d9a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__fp_powser>
    2d9e:	2f 91       	pop	r18
    2da0:	3f 91       	pop	r19
    2da2:	4f 91       	pop	r20
    2da4:	5f 91       	pop	r21
    2da6:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__mulsf3>

00002daa <__divmodsi4>:
    2daa:	05 2e       	mov	r0, r21
    2dac:	97 fb       	bst	r25, 7
    2dae:	1e f4       	brtc	.+6      	; 0x2db6 <__divmodsi4+0xc>
    2db0:	00 94       	com	r0
    2db2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__negsi2>
    2db6:	57 fd       	sbrc	r21, 7
    2db8:	07 d0       	rcall	.+14     	; 0x2dc8 <__divmodsi4_neg2>
    2dba:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__udivmodsi4>
    2dbe:	07 fc       	sbrc	r0, 7
    2dc0:	03 d0       	rcall	.+6      	; 0x2dc8 <__divmodsi4_neg2>
    2dc2:	4e f4       	brtc	.+18     	; 0x2dd6 <__divmodsi4_exit>
    2dc4:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__negsi2>

00002dc8 <__divmodsi4_neg2>:
    2dc8:	50 95       	com	r21
    2dca:	40 95       	com	r20
    2dcc:	30 95       	com	r19
    2dce:	21 95       	neg	r18
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	4f 4f       	sbci	r20, 0xFF	; 255
    2dd4:	5f 4f       	sbci	r21, 0xFF	; 255

00002dd6 <__divmodsi4_exit>:
    2dd6:	08 95       	ret

00002dd8 <__negsi2>:
    2dd8:	90 95       	com	r25
    2dda:	80 95       	com	r24
    2ddc:	70 95       	com	r23
    2dde:	61 95       	neg	r22
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	8f 4f       	sbci	r24, 0xFF	; 255
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	08 95       	ret

00002de8 <__muluhisi3>:
    2de8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__umulhisi3>
    2dec:	a5 9f       	mul	r26, r21
    2dee:	90 0d       	add	r25, r0
    2df0:	b4 9f       	mul	r27, r20
    2df2:	90 0d       	add	r25, r0
    2df4:	a4 9f       	mul	r26, r20
    2df6:	80 0d       	add	r24, r0
    2df8:	91 1d       	adc	r25, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	08 95       	ret

00002dfe <__udivmodsi4>:
    2dfe:	a1 e2       	ldi	r26, 0x21	; 33
    2e00:	1a 2e       	mov	r1, r26
    2e02:	aa 1b       	sub	r26, r26
    2e04:	bb 1b       	sub	r27, r27
    2e06:	fd 01       	movw	r30, r26
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <__udivmodsi4_ep>

00002e0a <__udivmodsi4_loop>:
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	bb 1f       	adc	r27, r27
    2e0e:	ee 1f       	adc	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	a2 17       	cp	r26, r18
    2e14:	b3 07       	cpc	r27, r19
    2e16:	e4 07       	cpc	r30, r20
    2e18:	f5 07       	cpc	r31, r21
    2e1a:	20 f0       	brcs	.+8      	; 0x2e24 <__udivmodsi4_ep>
    2e1c:	a2 1b       	sub	r26, r18
    2e1e:	b3 0b       	sbc	r27, r19
    2e20:	e4 0b       	sbc	r30, r20
    2e22:	f5 0b       	sbc	r31, r21

00002e24 <__udivmodsi4_ep>:
    2e24:	66 1f       	adc	r22, r22
    2e26:	77 1f       	adc	r23, r23
    2e28:	88 1f       	adc	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	1a 94       	dec	r1
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <__udivmodsi4_loop>
    2e30:	60 95       	com	r22
    2e32:	70 95       	com	r23
    2e34:	80 95       	com	r24
    2e36:	90 95       	com	r25
    2e38:	9b 01       	movw	r18, r22
    2e3a:	ac 01       	movw	r20, r24
    2e3c:	bd 01       	movw	r22, r26
    2e3e:	cf 01       	movw	r24, r30
    2e40:	08 95       	ret

00002e42 <__umulhisi3>:
    2e42:	a2 9f       	mul	r26, r18
    2e44:	b0 01       	movw	r22, r0
    2e46:	b3 9f       	mul	r27, r19
    2e48:	c0 01       	movw	r24, r0
    2e4a:	a3 9f       	mul	r26, r19
    2e4c:	70 0d       	add	r23, r0
    2e4e:	81 1d       	adc	r24, r1
    2e50:	11 24       	eor	r1, r1
    2e52:	91 1d       	adc	r25, r1
    2e54:	b2 9f       	mul	r27, r18
    2e56:	70 0d       	add	r23, r0
    2e58:	81 1d       	adc	r24, r1
    2e5a:	11 24       	eor	r1, r1
    2e5c:	91 1d       	adc	r25, r1
    2e5e:	08 95       	ret

00002e60 <dtostrf>:
    2e60:	ef 92       	push	r14
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	e8 01       	movw	r28, r16
    2e6c:	47 fd       	sbrc	r20, 7
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <dtostrf+0x14>
    2e70:	34 e0       	ldi	r19, 0x04	; 4
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <dtostrf+0x16>
    2e74:	34 e1       	ldi	r19, 0x14	; 20
    2e76:	04 2e       	mov	r0, r20
    2e78:	00 0c       	add	r0, r0
    2e7a:	55 0b       	sbc	r21, r21
    2e7c:	57 ff       	sbrs	r21, 7
    2e7e:	03 c0       	rjmp	.+6      	; 0x2e86 <dtostrf+0x26>
    2e80:	51 95       	neg	r21
    2e82:	41 95       	neg	r20
    2e84:	51 09       	sbc	r21, r1
    2e86:	e3 2e       	mov	r14, r19
    2e88:	02 2f       	mov	r16, r18
    2e8a:	24 2f       	mov	r18, r20
    2e8c:	ae 01       	movw	r20, r28
    2e8e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <dtoa_prf>
    2e92:	ce 01       	movw	r24, r28
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	ef 90       	pop	r14
    2e9e:	08 95       	ret

00002ea0 <atof>:
    2ea0:	66 27       	eor	r22, r22
    2ea2:	77 27       	eor	r23, r23
    2ea4:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <strtod>

00002ea8 <atoi>:
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	88 27       	eor	r24, r24
    2eac:	99 27       	eor	r25, r25
    2eae:	e8 94       	clt
    2eb0:	21 91       	ld	r18, Z+
    2eb2:	20 32       	cpi	r18, 0x20	; 32
    2eb4:	e9 f3       	breq	.-6      	; 0x2eb0 <atoi+0x8>
    2eb6:	29 30       	cpi	r18, 0x09	; 9
    2eb8:	10 f0       	brcs	.+4      	; 0x2ebe <atoi+0x16>
    2eba:	2e 30       	cpi	r18, 0x0E	; 14
    2ebc:	c8 f3       	brcs	.-14     	; 0x2eb0 <atoi+0x8>
    2ebe:	2b 32       	cpi	r18, 0x2B	; 43
    2ec0:	41 f0       	breq	.+16     	; 0x2ed2 <atoi+0x2a>
    2ec2:	2d 32       	cpi	r18, 0x2D	; 45
    2ec4:	39 f4       	brne	.+14     	; 0x2ed4 <atoi+0x2c>
    2ec6:	68 94       	set
    2ec8:	04 c0       	rjmp	.+8      	; 0x2ed2 <atoi+0x2a>
    2eca:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__mulhi_const_10>
    2ece:	82 0f       	add	r24, r18
    2ed0:	91 1d       	adc	r25, r1
    2ed2:	21 91       	ld	r18, Z+
    2ed4:	20 53       	subi	r18, 0x30	; 48
    2ed6:	2a 30       	cpi	r18, 0x0A	; 10
    2ed8:	c0 f3       	brcs	.-16     	; 0x2eca <atoi+0x22>
    2eda:	1e f4       	brtc	.+6      	; 0x2ee2 <atoi+0x3a>
    2edc:	90 95       	com	r25
    2ede:	81 95       	neg	r24
    2ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee2:	08 95       	ret

00002ee4 <__mulhi_const_10>:
    2ee4:	7a e0       	ldi	r23, 0x0A	; 10
    2ee6:	97 9f       	mul	r25, r23
    2ee8:	90 2d       	mov	r25, r0
    2eea:	87 9f       	mul	r24, r23
    2eec:	80 2d       	mov	r24, r0
    2eee:	91 0d       	add	r25, r1
    2ef0:	11 24       	eor	r1, r1
    2ef2:	08 95       	ret

00002ef4 <sprintf>:
    2ef4:	ae e0       	ldi	r26, 0x0E	; 14
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e0 e8       	ldi	r30, 0x80	; 128
    2efa:	f7 e1       	ldi	r31, 0x17	; 23
    2efc:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x1c>
    2f00:	0d 89       	ldd	r16, Y+21	; 0x15
    2f02:	1e 89       	ldd	r17, Y+22	; 0x16
    2f04:	86 e0       	ldi	r24, 0x06	; 6
    2f06:	8c 83       	std	Y+4, r24	; 0x04
    2f08:	1a 83       	std	Y+2, r17	; 0x02
    2f0a:	09 83       	std	Y+1, r16	; 0x01
    2f0c:	8f ef       	ldi	r24, 0xFF	; 255
    2f0e:	9f e7       	ldi	r25, 0x7F	; 127
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	ae 01       	movw	r20, r28
    2f16:	47 5e       	subi	r20, 0xE7	; 231
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	6f 89       	ldd	r22, Y+23	; 0x17
    2f1c:	78 8d       	ldd	r23, Y+24	; 0x18
    2f1e:	ce 01       	movw	r24, r28
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <vfprintf>
    2f26:	ef 81       	ldd	r30, Y+7	; 0x07
    2f28:	f8 85       	ldd	r31, Y+8	; 0x08
    2f2a:	e0 0f       	add	r30, r16
    2f2c:	f1 1f       	adc	r31, r17
    2f2e:	10 82       	st	Z, r1
    2f30:	2e 96       	adiw	r28, 0x0e	; 14
    2f32:	e4 e0       	ldi	r30, 0x04	; 4
    2f34:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x1c>

00002f38 <vfprintf>:
    2f38:	ab e0       	ldi	r26, 0x0B	; 11
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    2f3e:	f7 e1       	ldi	r31, 0x17	; 23
    2f40:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__prologue_saves__>
    2f44:	6c 01       	movw	r12, r24
    2f46:	7b 01       	movw	r14, r22
    2f48:	8a 01       	movw	r16, r20
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	17 82       	std	Z+7, r1	; 0x07
    2f4e:	16 82       	std	Z+6, r1	; 0x06
    2f50:	83 81       	ldd	r24, Z+3	; 0x03
    2f52:	81 ff       	sbrs	r24, 1
    2f54:	cc c1       	rjmp	.+920    	; 0x32ee <vfprintf+0x3b6>
    2f56:	ce 01       	movw	r24, r28
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	3c 01       	movw	r6, r24
    2f5c:	f6 01       	movw	r30, r12
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	f7 01       	movw	r30, r14
    2f62:	93 fd       	sbrc	r25, 3
    2f64:	85 91       	lpm	r24, Z+
    2f66:	93 ff       	sbrs	r25, 3
    2f68:	81 91       	ld	r24, Z+
    2f6a:	7f 01       	movw	r14, r30
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <vfprintf+0x3a>
    2f70:	ba c1       	rjmp	.+884    	; 0x32e6 <vfprintf+0x3ae>
    2f72:	85 32       	cpi	r24, 0x25	; 37
    2f74:	39 f4       	brne	.+14     	; 0x2f84 <vfprintf+0x4c>
    2f76:	93 fd       	sbrc	r25, 3
    2f78:	85 91       	lpm	r24, Z+
    2f7a:	93 ff       	sbrs	r25, 3
    2f7c:	81 91       	ld	r24, Z+
    2f7e:	7f 01       	movw	r14, r30
    2f80:	85 32       	cpi	r24, 0x25	; 37
    2f82:	29 f4       	brne	.+10     	; 0x2f8e <vfprintf+0x56>
    2f84:	b6 01       	movw	r22, r12
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    2f8c:	e7 cf       	rjmp	.-50     	; 0x2f5c <vfprintf+0x24>
    2f8e:	91 2c       	mov	r9, r1
    2f90:	21 2c       	mov	r2, r1
    2f92:	31 2c       	mov	r3, r1
    2f94:	ff e1       	ldi	r31, 0x1F	; 31
    2f96:	f3 15       	cp	r31, r3
    2f98:	d8 f0       	brcs	.+54     	; 0x2fd0 <vfprintf+0x98>
    2f9a:	8b 32       	cpi	r24, 0x2B	; 43
    2f9c:	79 f0       	breq	.+30     	; 0x2fbc <vfprintf+0x84>
    2f9e:	38 f4       	brcc	.+14     	; 0x2fae <vfprintf+0x76>
    2fa0:	80 32       	cpi	r24, 0x20	; 32
    2fa2:	79 f0       	breq	.+30     	; 0x2fc2 <vfprintf+0x8a>
    2fa4:	83 32       	cpi	r24, 0x23	; 35
    2fa6:	a1 f4       	brne	.+40     	; 0x2fd0 <vfprintf+0x98>
    2fa8:	23 2d       	mov	r18, r3
    2faa:	20 61       	ori	r18, 0x10	; 16
    2fac:	1d c0       	rjmp	.+58     	; 0x2fe8 <vfprintf+0xb0>
    2fae:	8d 32       	cpi	r24, 0x2D	; 45
    2fb0:	61 f0       	breq	.+24     	; 0x2fca <vfprintf+0x92>
    2fb2:	80 33       	cpi	r24, 0x30	; 48
    2fb4:	69 f4       	brne	.+26     	; 0x2fd0 <vfprintf+0x98>
    2fb6:	23 2d       	mov	r18, r3
    2fb8:	21 60       	ori	r18, 0x01	; 1
    2fba:	16 c0       	rjmp	.+44     	; 0x2fe8 <vfprintf+0xb0>
    2fbc:	83 2d       	mov	r24, r3
    2fbe:	82 60       	ori	r24, 0x02	; 2
    2fc0:	38 2e       	mov	r3, r24
    2fc2:	e3 2d       	mov	r30, r3
    2fc4:	e4 60       	ori	r30, 0x04	; 4
    2fc6:	3e 2e       	mov	r3, r30
    2fc8:	2a c0       	rjmp	.+84     	; 0x301e <vfprintf+0xe6>
    2fca:	f3 2d       	mov	r31, r3
    2fcc:	f8 60       	ori	r31, 0x08	; 8
    2fce:	1d c0       	rjmp	.+58     	; 0x300a <vfprintf+0xd2>
    2fd0:	37 fc       	sbrc	r3, 7
    2fd2:	2d c0       	rjmp	.+90     	; 0x302e <vfprintf+0xf6>
    2fd4:	20 ed       	ldi	r18, 0xD0	; 208
    2fd6:	28 0f       	add	r18, r24
    2fd8:	2a 30       	cpi	r18, 0x0A	; 10
    2fda:	40 f0       	brcs	.+16     	; 0x2fec <vfprintf+0xb4>
    2fdc:	8e 32       	cpi	r24, 0x2E	; 46
    2fde:	b9 f4       	brne	.+46     	; 0x300e <vfprintf+0xd6>
    2fe0:	36 fc       	sbrc	r3, 6
    2fe2:	81 c1       	rjmp	.+770    	; 0x32e6 <vfprintf+0x3ae>
    2fe4:	23 2d       	mov	r18, r3
    2fe6:	20 64       	ori	r18, 0x40	; 64
    2fe8:	32 2e       	mov	r3, r18
    2fea:	19 c0       	rjmp	.+50     	; 0x301e <vfprintf+0xe6>
    2fec:	36 fe       	sbrs	r3, 6
    2fee:	06 c0       	rjmp	.+12     	; 0x2ffc <vfprintf+0xc4>
    2ff0:	8a e0       	ldi	r24, 0x0A	; 10
    2ff2:	98 9e       	mul	r9, r24
    2ff4:	20 0d       	add	r18, r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	92 2e       	mov	r9, r18
    2ffa:	11 c0       	rjmp	.+34     	; 0x301e <vfprintf+0xe6>
    2ffc:	ea e0       	ldi	r30, 0x0A	; 10
    2ffe:	2e 9e       	mul	r2, r30
    3000:	20 0d       	add	r18, r0
    3002:	11 24       	eor	r1, r1
    3004:	22 2e       	mov	r2, r18
    3006:	f3 2d       	mov	r31, r3
    3008:	f0 62       	ori	r31, 0x20	; 32
    300a:	3f 2e       	mov	r3, r31
    300c:	08 c0       	rjmp	.+16     	; 0x301e <vfprintf+0xe6>
    300e:	8c 36       	cpi	r24, 0x6C	; 108
    3010:	21 f4       	brne	.+8      	; 0x301a <vfprintf+0xe2>
    3012:	83 2d       	mov	r24, r3
    3014:	80 68       	ori	r24, 0x80	; 128
    3016:	38 2e       	mov	r3, r24
    3018:	02 c0       	rjmp	.+4      	; 0x301e <vfprintf+0xe6>
    301a:	88 36       	cpi	r24, 0x68	; 104
    301c:	41 f4       	brne	.+16     	; 0x302e <vfprintf+0xf6>
    301e:	f7 01       	movw	r30, r14
    3020:	93 fd       	sbrc	r25, 3
    3022:	85 91       	lpm	r24, Z+
    3024:	93 ff       	sbrs	r25, 3
    3026:	81 91       	ld	r24, Z+
    3028:	7f 01       	movw	r14, r30
    302a:	81 11       	cpse	r24, r1
    302c:	b3 cf       	rjmp	.-154    	; 0x2f94 <vfprintf+0x5c>
    302e:	98 2f       	mov	r25, r24
    3030:	9f 7d       	andi	r25, 0xDF	; 223
    3032:	95 54       	subi	r25, 0x45	; 69
    3034:	93 30       	cpi	r25, 0x03	; 3
    3036:	28 f4       	brcc	.+10     	; 0x3042 <vfprintf+0x10a>
    3038:	0c 5f       	subi	r16, 0xFC	; 252
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	9f e3       	ldi	r25, 0x3F	; 63
    303e:	99 83       	std	Y+1, r25	; 0x01
    3040:	0d c0       	rjmp	.+26     	; 0x305c <vfprintf+0x124>
    3042:	83 36       	cpi	r24, 0x63	; 99
    3044:	31 f0       	breq	.+12     	; 0x3052 <vfprintf+0x11a>
    3046:	83 37       	cpi	r24, 0x73	; 115
    3048:	71 f0       	breq	.+28     	; 0x3066 <vfprintf+0x12e>
    304a:	83 35       	cpi	r24, 0x53	; 83
    304c:	09 f0       	breq	.+2      	; 0x3050 <vfprintf+0x118>
    304e:	59 c0       	rjmp	.+178    	; 0x3102 <vfprintf+0x1ca>
    3050:	21 c0       	rjmp	.+66     	; 0x3094 <vfprintf+0x15c>
    3052:	f8 01       	movw	r30, r16
    3054:	80 81       	ld	r24, Z
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	0e 5f       	subi	r16, 0xFE	; 254
    305a:	1f 4f       	sbci	r17, 0xFF	; 255
    305c:	88 24       	eor	r8, r8
    305e:	83 94       	inc	r8
    3060:	91 2c       	mov	r9, r1
    3062:	53 01       	movw	r10, r6
    3064:	13 c0       	rjmp	.+38     	; 0x308c <vfprintf+0x154>
    3066:	28 01       	movw	r4, r16
    3068:	f2 e0       	ldi	r31, 0x02	; 2
    306a:	4f 0e       	add	r4, r31
    306c:	51 1c       	adc	r5, r1
    306e:	f8 01       	movw	r30, r16
    3070:	a0 80       	ld	r10, Z
    3072:	b1 80       	ldd	r11, Z+1	; 0x01
    3074:	36 fe       	sbrs	r3, 6
    3076:	03 c0       	rjmp	.+6      	; 0x307e <vfprintf+0x146>
    3078:	69 2d       	mov	r22, r9
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <vfprintf+0x14a>
    307e:	6f ef       	ldi	r22, 0xFF	; 255
    3080:	7f ef       	ldi	r23, 0xFF	; 255
    3082:	c5 01       	movw	r24, r10
    3084:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <strnlen>
    3088:	4c 01       	movw	r8, r24
    308a:	82 01       	movw	r16, r4
    308c:	f3 2d       	mov	r31, r3
    308e:	ff 77       	andi	r31, 0x7F	; 127
    3090:	3f 2e       	mov	r3, r31
    3092:	16 c0       	rjmp	.+44     	; 0x30c0 <vfprintf+0x188>
    3094:	28 01       	movw	r4, r16
    3096:	22 e0       	ldi	r18, 0x02	; 2
    3098:	42 0e       	add	r4, r18
    309a:	51 1c       	adc	r5, r1
    309c:	f8 01       	movw	r30, r16
    309e:	a0 80       	ld	r10, Z
    30a0:	b1 80       	ldd	r11, Z+1	; 0x01
    30a2:	36 fe       	sbrs	r3, 6
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <vfprintf+0x174>
    30a6:	69 2d       	mov	r22, r9
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <vfprintf+0x178>
    30ac:	6f ef       	ldi	r22, 0xFF	; 255
    30ae:	7f ef       	ldi	r23, 0xFF	; 255
    30b0:	c5 01       	movw	r24, r10
    30b2:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <strnlen_P>
    30b6:	4c 01       	movw	r8, r24
    30b8:	f3 2d       	mov	r31, r3
    30ba:	f0 68       	ori	r31, 0x80	; 128
    30bc:	3f 2e       	mov	r3, r31
    30be:	82 01       	movw	r16, r4
    30c0:	33 fc       	sbrc	r3, 3
    30c2:	1b c0       	rjmp	.+54     	; 0x30fa <vfprintf+0x1c2>
    30c4:	82 2d       	mov	r24, r2
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	88 16       	cp	r8, r24
    30ca:	99 06       	cpc	r9, r25
    30cc:	b0 f4       	brcc	.+44     	; 0x30fa <vfprintf+0x1c2>
    30ce:	b6 01       	movw	r22, r12
    30d0:	80 e2       	ldi	r24, 0x20	; 32
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    30d8:	2a 94       	dec	r2
    30da:	f4 cf       	rjmp	.-24     	; 0x30c4 <vfprintf+0x18c>
    30dc:	f5 01       	movw	r30, r10
    30de:	37 fc       	sbrc	r3, 7
    30e0:	85 91       	lpm	r24, Z+
    30e2:	37 fe       	sbrs	r3, 7
    30e4:	81 91       	ld	r24, Z+
    30e6:	5f 01       	movw	r10, r30
    30e8:	b6 01       	movw	r22, r12
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    30f0:	21 10       	cpse	r2, r1
    30f2:	2a 94       	dec	r2
    30f4:	21 e0       	ldi	r18, 0x01	; 1
    30f6:	82 1a       	sub	r8, r18
    30f8:	91 08       	sbc	r9, r1
    30fa:	81 14       	cp	r8, r1
    30fc:	91 04       	cpc	r9, r1
    30fe:	71 f7       	brne	.-36     	; 0x30dc <vfprintf+0x1a4>
    3100:	e8 c0       	rjmp	.+464    	; 0x32d2 <vfprintf+0x39a>
    3102:	84 36       	cpi	r24, 0x64	; 100
    3104:	11 f0       	breq	.+4      	; 0x310a <vfprintf+0x1d2>
    3106:	89 36       	cpi	r24, 0x69	; 105
    3108:	41 f5       	brne	.+80     	; 0x315a <vfprintf+0x222>
    310a:	f8 01       	movw	r30, r16
    310c:	37 fe       	sbrs	r3, 7
    310e:	07 c0       	rjmp	.+14     	; 0x311e <vfprintf+0x1e6>
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	0c 5f       	subi	r16, 0xFC	; 252
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	08 c0       	rjmp	.+16     	; 0x312e <vfprintf+0x1f6>
    311e:	60 81       	ld	r22, Z
    3120:	71 81       	ldd	r23, Z+1	; 0x01
    3122:	07 2e       	mov	r0, r23
    3124:	00 0c       	add	r0, r0
    3126:	88 0b       	sbc	r24, r24
    3128:	99 0b       	sbc	r25, r25
    312a:	0e 5f       	subi	r16, 0xFE	; 254
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	f3 2d       	mov	r31, r3
    3130:	ff 76       	andi	r31, 0x6F	; 111
    3132:	3f 2e       	mov	r3, r31
    3134:	97 ff       	sbrs	r25, 7
    3136:	09 c0       	rjmp	.+18     	; 0x314a <vfprintf+0x212>
    3138:	90 95       	com	r25
    313a:	80 95       	com	r24
    313c:	70 95       	com	r23
    313e:	61 95       	neg	r22
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	f0 68       	ori	r31, 0x80	; 128
    3148:	3f 2e       	mov	r3, r31
    314a:	2a e0       	ldi	r18, 0x0A	; 10
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	a3 01       	movw	r20, r6
    3150:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__ultoa_invert>
    3154:	88 2e       	mov	r8, r24
    3156:	86 18       	sub	r8, r6
    3158:	45 c0       	rjmp	.+138    	; 0x31e4 <vfprintf+0x2ac>
    315a:	85 37       	cpi	r24, 0x75	; 117
    315c:	31 f4       	brne	.+12     	; 0x316a <vfprintf+0x232>
    315e:	23 2d       	mov	r18, r3
    3160:	2f 7e       	andi	r18, 0xEF	; 239
    3162:	b2 2e       	mov	r11, r18
    3164:	2a e0       	ldi	r18, 0x0A	; 10
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	25 c0       	rjmp	.+74     	; 0x31b4 <vfprintf+0x27c>
    316a:	93 2d       	mov	r25, r3
    316c:	99 7f       	andi	r25, 0xF9	; 249
    316e:	b9 2e       	mov	r11, r25
    3170:	8f 36       	cpi	r24, 0x6F	; 111
    3172:	c1 f0       	breq	.+48     	; 0x31a4 <vfprintf+0x26c>
    3174:	18 f4       	brcc	.+6      	; 0x317c <vfprintf+0x244>
    3176:	88 35       	cpi	r24, 0x58	; 88
    3178:	79 f0       	breq	.+30     	; 0x3198 <vfprintf+0x260>
    317a:	b5 c0       	rjmp	.+362    	; 0x32e6 <vfprintf+0x3ae>
    317c:	80 37       	cpi	r24, 0x70	; 112
    317e:	19 f0       	breq	.+6      	; 0x3186 <vfprintf+0x24e>
    3180:	88 37       	cpi	r24, 0x78	; 120
    3182:	21 f0       	breq	.+8      	; 0x318c <vfprintf+0x254>
    3184:	b0 c0       	rjmp	.+352    	; 0x32e6 <vfprintf+0x3ae>
    3186:	e9 2f       	mov	r30, r25
    3188:	e0 61       	ori	r30, 0x10	; 16
    318a:	be 2e       	mov	r11, r30
    318c:	b4 fe       	sbrs	r11, 4
    318e:	0d c0       	rjmp	.+26     	; 0x31aa <vfprintf+0x272>
    3190:	fb 2d       	mov	r31, r11
    3192:	f4 60       	ori	r31, 0x04	; 4
    3194:	bf 2e       	mov	r11, r31
    3196:	09 c0       	rjmp	.+18     	; 0x31aa <vfprintf+0x272>
    3198:	34 fe       	sbrs	r3, 4
    319a:	0a c0       	rjmp	.+20     	; 0x31b0 <vfprintf+0x278>
    319c:	29 2f       	mov	r18, r25
    319e:	26 60       	ori	r18, 0x06	; 6
    31a0:	b2 2e       	mov	r11, r18
    31a2:	06 c0       	rjmp	.+12     	; 0x31b0 <vfprintf+0x278>
    31a4:	28 e0       	ldi	r18, 0x08	; 8
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	05 c0       	rjmp	.+10     	; 0x31b4 <vfprintf+0x27c>
    31aa:	20 e1       	ldi	r18, 0x10	; 16
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x27c>
    31b0:	20 e1       	ldi	r18, 0x10	; 16
    31b2:	32 e0       	ldi	r19, 0x02	; 2
    31b4:	f8 01       	movw	r30, r16
    31b6:	b7 fe       	sbrs	r11, 7
    31b8:	07 c0       	rjmp	.+14     	; 0x31c8 <vfprintf+0x290>
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	0c 5f       	subi	r16, 0xFC	; 252
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	06 c0       	rjmp	.+12     	; 0x31d4 <vfprintf+0x29c>
    31c8:	60 81       	ld	r22, Z
    31ca:	71 81       	ldd	r23, Z+1	; 0x01
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 5f       	subi	r16, 0xFE	; 254
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	a3 01       	movw	r20, r6
    31d6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__ultoa_invert>
    31da:	88 2e       	mov	r8, r24
    31dc:	86 18       	sub	r8, r6
    31de:	fb 2d       	mov	r31, r11
    31e0:	ff 77       	andi	r31, 0x7F	; 127
    31e2:	3f 2e       	mov	r3, r31
    31e4:	36 fe       	sbrs	r3, 6
    31e6:	0d c0       	rjmp	.+26     	; 0x3202 <vfprintf+0x2ca>
    31e8:	23 2d       	mov	r18, r3
    31ea:	2e 7f       	andi	r18, 0xFE	; 254
    31ec:	a2 2e       	mov	r10, r18
    31ee:	89 14       	cp	r8, r9
    31f0:	58 f4       	brcc	.+22     	; 0x3208 <vfprintf+0x2d0>
    31f2:	34 fe       	sbrs	r3, 4
    31f4:	0b c0       	rjmp	.+22     	; 0x320c <vfprintf+0x2d4>
    31f6:	32 fc       	sbrc	r3, 2
    31f8:	09 c0       	rjmp	.+18     	; 0x320c <vfprintf+0x2d4>
    31fa:	83 2d       	mov	r24, r3
    31fc:	8e 7e       	andi	r24, 0xEE	; 238
    31fe:	a8 2e       	mov	r10, r24
    3200:	05 c0       	rjmp	.+10     	; 0x320c <vfprintf+0x2d4>
    3202:	b8 2c       	mov	r11, r8
    3204:	a3 2c       	mov	r10, r3
    3206:	03 c0       	rjmp	.+6      	; 0x320e <vfprintf+0x2d6>
    3208:	b8 2c       	mov	r11, r8
    320a:	01 c0       	rjmp	.+2      	; 0x320e <vfprintf+0x2d6>
    320c:	b9 2c       	mov	r11, r9
    320e:	a4 fe       	sbrs	r10, 4
    3210:	0f c0       	rjmp	.+30     	; 0x3230 <vfprintf+0x2f8>
    3212:	fe 01       	movw	r30, r28
    3214:	e8 0d       	add	r30, r8
    3216:	f1 1d       	adc	r31, r1
    3218:	80 81       	ld	r24, Z
    321a:	80 33       	cpi	r24, 0x30	; 48
    321c:	21 f4       	brne	.+8      	; 0x3226 <vfprintf+0x2ee>
    321e:	9a 2d       	mov	r25, r10
    3220:	99 7e       	andi	r25, 0xE9	; 233
    3222:	a9 2e       	mov	r10, r25
    3224:	09 c0       	rjmp	.+18     	; 0x3238 <vfprintf+0x300>
    3226:	a2 fe       	sbrs	r10, 2
    3228:	06 c0       	rjmp	.+12     	; 0x3236 <vfprintf+0x2fe>
    322a:	b3 94       	inc	r11
    322c:	b3 94       	inc	r11
    322e:	04 c0       	rjmp	.+8      	; 0x3238 <vfprintf+0x300>
    3230:	8a 2d       	mov	r24, r10
    3232:	86 78       	andi	r24, 0x86	; 134
    3234:	09 f0       	breq	.+2      	; 0x3238 <vfprintf+0x300>
    3236:	b3 94       	inc	r11
    3238:	a3 fc       	sbrc	r10, 3
    323a:	11 c0       	rjmp	.+34     	; 0x325e <vfprintf+0x326>
    323c:	a0 fe       	sbrs	r10, 0
    323e:	06 c0       	rjmp	.+12     	; 0x324c <vfprintf+0x314>
    3240:	b2 14       	cp	r11, r2
    3242:	88 f4       	brcc	.+34     	; 0x3266 <vfprintf+0x32e>
    3244:	28 0c       	add	r2, r8
    3246:	92 2c       	mov	r9, r2
    3248:	9b 18       	sub	r9, r11
    324a:	0e c0       	rjmp	.+28     	; 0x3268 <vfprintf+0x330>
    324c:	b2 14       	cp	r11, r2
    324e:	60 f4       	brcc	.+24     	; 0x3268 <vfprintf+0x330>
    3250:	b6 01       	movw	r22, r12
    3252:	80 e2       	ldi	r24, 0x20	; 32
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    325a:	b3 94       	inc	r11
    325c:	f7 cf       	rjmp	.-18     	; 0x324c <vfprintf+0x314>
    325e:	b2 14       	cp	r11, r2
    3260:	18 f4       	brcc	.+6      	; 0x3268 <vfprintf+0x330>
    3262:	2b 18       	sub	r2, r11
    3264:	02 c0       	rjmp	.+4      	; 0x326a <vfprintf+0x332>
    3266:	98 2c       	mov	r9, r8
    3268:	21 2c       	mov	r2, r1
    326a:	a4 fe       	sbrs	r10, 4
    326c:	10 c0       	rjmp	.+32     	; 0x328e <vfprintf+0x356>
    326e:	b6 01       	movw	r22, r12
    3270:	80 e3       	ldi	r24, 0x30	; 48
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    3278:	a2 fe       	sbrs	r10, 2
    327a:	17 c0       	rjmp	.+46     	; 0x32aa <vfprintf+0x372>
    327c:	a1 fc       	sbrc	r10, 1
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <vfprintf+0x34e>
    3280:	88 e7       	ldi	r24, 0x78	; 120
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	02 c0       	rjmp	.+4      	; 0x328a <vfprintf+0x352>
    3286:	88 e5       	ldi	r24, 0x58	; 88
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	b6 01       	movw	r22, r12
    328c:	0c c0       	rjmp	.+24     	; 0x32a6 <vfprintf+0x36e>
    328e:	8a 2d       	mov	r24, r10
    3290:	86 78       	andi	r24, 0x86	; 134
    3292:	59 f0       	breq	.+22     	; 0x32aa <vfprintf+0x372>
    3294:	a1 fe       	sbrs	r10, 1
    3296:	02 c0       	rjmp	.+4      	; 0x329c <vfprintf+0x364>
    3298:	8b e2       	ldi	r24, 0x2B	; 43
    329a:	01 c0       	rjmp	.+2      	; 0x329e <vfprintf+0x366>
    329c:	80 e2       	ldi	r24, 0x20	; 32
    329e:	a7 fc       	sbrc	r10, 7
    32a0:	8d e2       	ldi	r24, 0x2D	; 45
    32a2:	b6 01       	movw	r22, r12
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    32aa:	89 14       	cp	r8, r9
    32ac:	38 f4       	brcc	.+14     	; 0x32bc <vfprintf+0x384>
    32ae:	b6 01       	movw	r22, r12
    32b0:	80 e3       	ldi	r24, 0x30	; 48
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    32b8:	9a 94       	dec	r9
    32ba:	f7 cf       	rjmp	.-18     	; 0x32aa <vfprintf+0x372>
    32bc:	8a 94       	dec	r8
    32be:	f3 01       	movw	r30, r6
    32c0:	e8 0d       	add	r30, r8
    32c2:	f1 1d       	adc	r31, r1
    32c4:	80 81       	ld	r24, Z
    32c6:	b6 01       	movw	r22, r12
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    32ce:	81 10       	cpse	r8, r1
    32d0:	f5 cf       	rjmp	.-22     	; 0x32bc <vfprintf+0x384>
    32d2:	22 20       	and	r2, r2
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <vfprintf+0x3a0>
    32d6:	42 ce       	rjmp	.-892    	; 0x2f5c <vfprintf+0x24>
    32d8:	b6 01       	movw	r22, r12
    32da:	80 e2       	ldi	r24, 0x20	; 32
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <fputc>
    32e2:	2a 94       	dec	r2
    32e4:	f6 cf       	rjmp	.-20     	; 0x32d2 <vfprintf+0x39a>
    32e6:	f6 01       	movw	r30, r12
    32e8:	86 81       	ldd	r24, Z+6	; 0x06
    32ea:	97 81       	ldd	r25, Z+7	; 0x07
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <vfprintf+0x3ba>
    32ee:	8f ef       	ldi	r24, 0xFF	; 255
    32f0:	9f ef       	ldi	r25, 0xFF	; 255
    32f2:	2b 96       	adiw	r28, 0x0b	; 11
    32f4:	e2 e1       	ldi	r30, 0x12	; 18
    32f6:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__epilogue_restores__>

000032fa <dtoa_prf>:
    32fa:	a9 e0       	ldi	r26, 0x09	; 9
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	e3 e8       	ldi	r30, 0x83	; 131
    3300:	f9 e1       	ldi	r31, 0x19	; 25
    3302:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__+0xc>
    3306:	6a 01       	movw	r12, r20
    3308:	12 2f       	mov	r17, r18
    330a:	b0 2e       	mov	r11, r16
    330c:	2b e3       	ldi	r18, 0x3B	; 59
    330e:	20 17       	cp	r18, r16
    3310:	20 f0       	brcs	.+8      	; 0x331a <dtoa_prf+0x20>
    3312:	ff 24       	eor	r15, r15
    3314:	f3 94       	inc	r15
    3316:	f0 0e       	add	r15, r16
    3318:	02 c0       	rjmp	.+4      	; 0x331e <dtoa_prf+0x24>
    331a:	2c e3       	ldi	r18, 0x3C	; 60
    331c:	f2 2e       	mov	r15, r18
    331e:	0f 2d       	mov	r16, r15
    3320:	27 e0       	ldi	r18, 0x07	; 7
    3322:	ae 01       	movw	r20, r28
    3324:	4f 5f       	subi	r20, 0xFF	; 255
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	0e 94 25 1c 	call	0x384a	; 0x384a <__ftoa_engine>
    332c:	bc 01       	movw	r22, r24
    332e:	49 81       	ldd	r20, Y+1	; 0x01
    3330:	84 2f       	mov	r24, r20
    3332:	89 70       	andi	r24, 0x09	; 9
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	31 f0       	breq	.+12     	; 0x3344 <dtoa_prf+0x4a>
    3338:	e1 fc       	sbrc	r14, 1
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <dtoa_prf+0x4e>
    333c:	e0 fe       	sbrs	r14, 0
    333e:	06 c0       	rjmp	.+12     	; 0x334c <dtoa_prf+0x52>
    3340:	90 e2       	ldi	r25, 0x20	; 32
    3342:	05 c0       	rjmp	.+10     	; 0x334e <dtoa_prf+0x54>
    3344:	9d e2       	ldi	r25, 0x2D	; 45
    3346:	03 c0       	rjmp	.+6      	; 0x334e <dtoa_prf+0x54>
    3348:	9b e2       	ldi	r25, 0x2B	; 43
    334a:	01 c0       	rjmp	.+2      	; 0x334e <dtoa_prf+0x54>
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	5e 2d       	mov	r21, r14
    3350:	50 71       	andi	r21, 0x10	; 16
    3352:	43 ff       	sbrs	r20, 3
    3354:	3c c0       	rjmp	.+120    	; 0x33ce <dtoa_prf+0xd4>
    3356:	91 11       	cpse	r25, r1
    3358:	02 c0       	rjmp	.+4      	; 0x335e <dtoa_prf+0x64>
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	01 c0       	rjmp	.+2      	; 0x3360 <dtoa_prf+0x66>
    335e:	84 e0       	ldi	r24, 0x04	; 4
    3360:	81 17       	cp	r24, r17
    3362:	18 f4       	brcc	.+6      	; 0x336a <dtoa_prf+0x70>
    3364:	21 2f       	mov	r18, r17
    3366:	28 1b       	sub	r18, r24
    3368:	01 c0       	rjmp	.+2      	; 0x336c <dtoa_prf+0x72>
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	51 11       	cpse	r21, r1
    336e:	0b c0       	rjmp	.+22     	; 0x3386 <dtoa_prf+0x8c>
    3370:	f6 01       	movw	r30, r12
    3372:	82 2f       	mov	r24, r18
    3374:	30 e2       	ldi	r19, 0x20	; 32
    3376:	88 23       	and	r24, r24
    3378:	19 f0       	breq	.+6      	; 0x3380 <dtoa_prf+0x86>
    337a:	31 93       	st	Z+, r19
    337c:	81 50       	subi	r24, 0x01	; 1
    337e:	fb cf       	rjmp	.-10     	; 0x3376 <dtoa_prf+0x7c>
    3380:	c2 0e       	add	r12, r18
    3382:	d1 1c       	adc	r13, r1
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	99 23       	and	r25, r25
    3388:	29 f0       	breq	.+10     	; 0x3394 <dtoa_prf+0x9a>
    338a:	d6 01       	movw	r26, r12
    338c:	9c 93       	st	X, r25
    338e:	f6 01       	movw	r30, r12
    3390:	31 96       	adiw	r30, 0x01	; 1
    3392:	6f 01       	movw	r12, r30
    3394:	c6 01       	movw	r24, r12
    3396:	03 96       	adiw	r24, 0x03	; 3
    3398:	e2 fe       	sbrs	r14, 2
    339a:	0a c0       	rjmp	.+20     	; 0x33b0 <dtoa_prf+0xb6>
    339c:	3e e4       	ldi	r19, 0x4E	; 78
    339e:	d6 01       	movw	r26, r12
    33a0:	3c 93       	st	X, r19
    33a2:	41 e4       	ldi	r20, 0x41	; 65
    33a4:	11 96       	adiw	r26, 0x01	; 1
    33a6:	4c 93       	st	X, r20
    33a8:	11 97       	sbiw	r26, 0x01	; 1
    33aa:	12 96       	adiw	r26, 0x02	; 2
    33ac:	3c 93       	st	X, r19
    33ae:	06 c0       	rjmp	.+12     	; 0x33bc <dtoa_prf+0xc2>
    33b0:	3e e6       	ldi	r19, 0x6E	; 110
    33b2:	f6 01       	movw	r30, r12
    33b4:	30 83       	st	Z, r19
    33b6:	41 e6       	ldi	r20, 0x61	; 97
    33b8:	41 83       	std	Z+1, r20	; 0x01
    33ba:	32 83       	std	Z+2, r19	; 0x02
    33bc:	fc 01       	movw	r30, r24
    33be:	32 2f       	mov	r19, r18
    33c0:	40 e2       	ldi	r20, 0x20	; 32
    33c2:	33 23       	and	r19, r19
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <dtoa_prf+0xce>
    33c6:	42 c0       	rjmp	.+132    	; 0x344c <dtoa_prf+0x152>
    33c8:	41 93       	st	Z+, r20
    33ca:	31 50       	subi	r19, 0x01	; 1
    33cc:	fa cf       	rjmp	.-12     	; 0x33c2 <dtoa_prf+0xc8>
    33ce:	42 ff       	sbrs	r20, 2
    33d0:	44 c0       	rjmp	.+136    	; 0x345a <dtoa_prf+0x160>
    33d2:	91 11       	cpse	r25, r1
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <dtoa_prf+0xe0>
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <dtoa_prf+0xe2>
    33da:	84 e0       	ldi	r24, 0x04	; 4
    33dc:	81 17       	cp	r24, r17
    33de:	18 f4       	brcc	.+6      	; 0x33e6 <dtoa_prf+0xec>
    33e0:	21 2f       	mov	r18, r17
    33e2:	28 1b       	sub	r18, r24
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <dtoa_prf+0xee>
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	51 11       	cpse	r21, r1
    33ea:	0b c0       	rjmp	.+22     	; 0x3402 <dtoa_prf+0x108>
    33ec:	f6 01       	movw	r30, r12
    33ee:	82 2f       	mov	r24, r18
    33f0:	30 e2       	ldi	r19, 0x20	; 32
    33f2:	88 23       	and	r24, r24
    33f4:	19 f0       	breq	.+6      	; 0x33fc <dtoa_prf+0x102>
    33f6:	31 93       	st	Z+, r19
    33f8:	81 50       	subi	r24, 0x01	; 1
    33fa:	fb cf       	rjmp	.-10     	; 0x33f2 <dtoa_prf+0xf8>
    33fc:	c2 0e       	add	r12, r18
    33fe:	d1 1c       	adc	r13, r1
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	99 23       	and	r25, r25
    3404:	29 f0       	breq	.+10     	; 0x3410 <dtoa_prf+0x116>
    3406:	d6 01       	movw	r26, r12
    3408:	9c 93       	st	X, r25
    340a:	f6 01       	movw	r30, r12
    340c:	31 96       	adiw	r30, 0x01	; 1
    340e:	6f 01       	movw	r12, r30
    3410:	c6 01       	movw	r24, r12
    3412:	03 96       	adiw	r24, 0x03	; 3
    3414:	e2 fe       	sbrs	r14, 2
    3416:	0b c0       	rjmp	.+22     	; 0x342e <dtoa_prf+0x134>
    3418:	39 e4       	ldi	r19, 0x49	; 73
    341a:	d6 01       	movw	r26, r12
    341c:	3c 93       	st	X, r19
    341e:	3e e4       	ldi	r19, 0x4E	; 78
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	3c 93       	st	X, r19
    3424:	11 97       	sbiw	r26, 0x01	; 1
    3426:	36 e4       	ldi	r19, 0x46	; 70
    3428:	12 96       	adiw	r26, 0x02	; 2
    342a:	3c 93       	st	X, r19
    342c:	07 c0       	rjmp	.+14     	; 0x343c <dtoa_prf+0x142>
    342e:	39 e6       	ldi	r19, 0x69	; 105
    3430:	f6 01       	movw	r30, r12
    3432:	30 83       	st	Z, r19
    3434:	3e e6       	ldi	r19, 0x6E	; 110
    3436:	31 83       	std	Z+1, r19	; 0x01
    3438:	36 e6       	ldi	r19, 0x66	; 102
    343a:	32 83       	std	Z+2, r19	; 0x02
    343c:	fc 01       	movw	r30, r24
    343e:	32 2f       	mov	r19, r18
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	33 23       	and	r19, r19
    3444:	19 f0       	breq	.+6      	; 0x344c <dtoa_prf+0x152>
    3446:	41 93       	st	Z+, r20
    3448:	31 50       	subi	r19, 0x01	; 1
    344a:	fb cf       	rjmp	.-10     	; 0x3442 <dtoa_prf+0x148>
    344c:	fc 01       	movw	r30, r24
    344e:	e2 0f       	add	r30, r18
    3450:	f1 1d       	adc	r31, r1
    3452:	10 82       	st	Z, r1
    3454:	8e ef       	ldi	r24, 0xFE	; 254
    3456:	9f ef       	ldi	r25, 0xFF	; 255
    3458:	a6 c0       	rjmp	.+332    	; 0x35a6 <dtoa_prf+0x2ac>
    345a:	21 e0       	ldi	r18, 0x01	; 1
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	91 11       	cpse	r25, r1
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <dtoa_prf+0x16c>
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	16 16       	cp	r1, r22
    3468:	17 06       	cpc	r1, r23
    346a:	1c f4       	brge	.+6      	; 0x3472 <dtoa_prf+0x178>
    346c:	fb 01       	movw	r30, r22
    346e:	31 96       	adiw	r30, 0x01	; 1
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <dtoa_prf+0x17c>
    3472:	e1 e0       	ldi	r30, 0x01	; 1
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	2e 0f       	add	r18, r30
    3478:	3f 1f       	adc	r19, r31
    347a:	bb 20       	and	r11, r11
    347c:	21 f0       	breq	.+8      	; 0x3486 <dtoa_prf+0x18c>
    347e:	eb 2d       	mov	r30, r11
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	31 96       	adiw	r30, 0x01	; 1
    3484:	02 c0       	rjmp	.+4      	; 0x348a <dtoa_prf+0x190>
    3486:	e0 e0       	ldi	r30, 0x00	; 0
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	2e 0f       	add	r18, r30
    348c:	3f 1f       	adc	r19, r31
    348e:	e1 2f       	mov	r30, r17
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	2e 17       	cp	r18, r30
    3494:	3f 07       	cpc	r19, r31
    3496:	1c f4       	brge	.+6      	; 0x349e <dtoa_prf+0x1a4>
    3498:	12 1b       	sub	r17, r18
    349a:	21 2f       	mov	r18, r17
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <dtoa_prf+0x1a6>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	8e 2d       	mov	r24, r14
    34a2:	88 71       	andi	r24, 0x18	; 24
    34a4:	59 f4       	brne	.+22     	; 0x34bc <dtoa_prf+0x1c2>
    34a6:	f6 01       	movw	r30, r12
    34a8:	82 2f       	mov	r24, r18
    34aa:	30 e2       	ldi	r19, 0x20	; 32
    34ac:	88 23       	and	r24, r24
    34ae:	19 f0       	breq	.+6      	; 0x34b6 <dtoa_prf+0x1bc>
    34b0:	31 93       	st	Z+, r19
    34b2:	81 50       	subi	r24, 0x01	; 1
    34b4:	fb cf       	rjmp	.-10     	; 0x34ac <dtoa_prf+0x1b2>
    34b6:	c2 0e       	add	r12, r18
    34b8:	d1 1c       	adc	r13, r1
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	99 23       	and	r25, r25
    34be:	29 f0       	breq	.+10     	; 0x34ca <dtoa_prf+0x1d0>
    34c0:	d6 01       	movw	r26, r12
    34c2:	9c 93       	st	X, r25
    34c4:	f6 01       	movw	r30, r12
    34c6:	31 96       	adiw	r30, 0x01	; 1
    34c8:	6f 01       	movw	r12, r30
    34ca:	51 11       	cpse	r21, r1
    34cc:	0b c0       	rjmp	.+22     	; 0x34e4 <dtoa_prf+0x1ea>
    34ce:	f6 01       	movw	r30, r12
    34d0:	82 2f       	mov	r24, r18
    34d2:	90 e3       	ldi	r25, 0x30	; 48
    34d4:	88 23       	and	r24, r24
    34d6:	19 f0       	breq	.+6      	; 0x34de <dtoa_prf+0x1e4>
    34d8:	91 93       	st	Z+, r25
    34da:	81 50       	subi	r24, 0x01	; 1
    34dc:	fb cf       	rjmp	.-10     	; 0x34d4 <dtoa_prf+0x1da>
    34de:	c2 0e       	add	r12, r18
    34e0:	d1 1c       	adc	r13, r1
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	0f 2d       	mov	r16, r15
    34e6:	06 0f       	add	r16, r22
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	34 2f       	mov	r19, r20
    34ec:	30 71       	andi	r19, 0x10	; 16
    34ee:	44 ff       	sbrs	r20, 4
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <dtoa_prf+0x1fe>
    34f2:	91 33       	cpi	r25, 0x31	; 49
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <dtoa_prf+0x1fe>
    34f6:	01 50       	subi	r16, 0x01	; 1
    34f8:	10 16       	cp	r1, r16
    34fa:	24 f4       	brge	.+8      	; 0x3504 <dtoa_prf+0x20a>
    34fc:	09 30       	cpi	r16, 0x09	; 9
    34fe:	18 f0       	brcs	.+6      	; 0x3506 <dtoa_prf+0x20c>
    3500:	08 e0       	ldi	r16, 0x08	; 8
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <dtoa_prf+0x20c>
    3504:	01 e0       	ldi	r16, 0x01	; 1
    3506:	ab 01       	movw	r20, r22
    3508:	77 ff       	sbrs	r23, 7
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <dtoa_prf+0x216>
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	fb 01       	movw	r30, r22
    3512:	e4 1b       	sub	r30, r20
    3514:	f5 0b       	sbc	r31, r21
    3516:	a1 e0       	ldi	r26, 0x01	; 1
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	ac 0f       	add	r26, r28
    351c:	bd 1f       	adc	r27, r29
    351e:	ea 0f       	add	r30, r26
    3520:	fb 1f       	adc	r31, r27
    3522:	8e e2       	ldi	r24, 0x2E	; 46
    3524:	a8 2e       	mov	r10, r24
    3526:	4b 01       	movw	r8, r22
    3528:	80 1a       	sub	r8, r16
    352a:	91 08       	sbc	r9, r1
    352c:	0b 2d       	mov	r16, r11
    352e:	10 e0       	ldi	r17, 0x00	; 0
    3530:	11 95       	neg	r17
    3532:	01 95       	neg	r16
    3534:	11 09       	sbc	r17, r1
    3536:	4f 3f       	cpi	r20, 0xFF	; 255
    3538:	bf ef       	ldi	r27, 0xFF	; 255
    353a:	5b 07       	cpc	r21, r27
    353c:	21 f4       	brne	.+8      	; 0x3546 <dtoa_prf+0x24c>
    353e:	d6 01       	movw	r26, r12
    3540:	ac 92       	st	X, r10
    3542:	11 96       	adiw	r26, 0x01	; 1
    3544:	6d 01       	movw	r12, r26
    3546:	64 17       	cp	r22, r20
    3548:	75 07       	cpc	r23, r21
    354a:	2c f0       	brlt	.+10     	; 0x3556 <dtoa_prf+0x25c>
    354c:	84 16       	cp	r8, r20
    354e:	95 06       	cpc	r9, r21
    3550:	14 f4       	brge	.+4      	; 0x3556 <dtoa_prf+0x25c>
    3552:	81 81       	ldd	r24, Z+1	; 0x01
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <dtoa_prf+0x25e>
    3556:	80 e3       	ldi	r24, 0x30	; 48
    3558:	41 50       	subi	r20, 0x01	; 1
    355a:	51 09       	sbc	r21, r1
    355c:	31 96       	adiw	r30, 0x01	; 1
    355e:	d6 01       	movw	r26, r12
    3560:	11 96       	adiw	r26, 0x01	; 1
    3562:	7d 01       	movw	r14, r26
    3564:	40 17       	cp	r20, r16
    3566:	51 07       	cpc	r21, r17
    3568:	24 f0       	brlt	.+8      	; 0x3572 <dtoa_prf+0x278>
    356a:	d6 01       	movw	r26, r12
    356c:	8c 93       	st	X, r24
    356e:	67 01       	movw	r12, r14
    3570:	e2 cf       	rjmp	.-60     	; 0x3536 <dtoa_prf+0x23c>
    3572:	64 17       	cp	r22, r20
    3574:	75 07       	cpc	r23, r21
    3576:	39 f4       	brne	.+14     	; 0x3586 <dtoa_prf+0x28c>
    3578:	96 33       	cpi	r25, 0x36	; 54
    357a:	20 f4       	brcc	.+8      	; 0x3584 <dtoa_prf+0x28a>
    357c:	95 33       	cpi	r25, 0x35	; 53
    357e:	19 f4       	brne	.+6      	; 0x3586 <dtoa_prf+0x28c>
    3580:	31 11       	cpse	r19, r1
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <dtoa_prf+0x28c>
    3584:	81 e3       	ldi	r24, 0x31	; 49
    3586:	f6 01       	movw	r30, r12
    3588:	80 83       	st	Z, r24
    358a:	f7 01       	movw	r30, r14
    358c:	82 2f       	mov	r24, r18
    358e:	90 e2       	ldi	r25, 0x20	; 32
    3590:	88 23       	and	r24, r24
    3592:	19 f0       	breq	.+6      	; 0x359a <dtoa_prf+0x2a0>
    3594:	91 93       	st	Z+, r25
    3596:	81 50       	subi	r24, 0x01	; 1
    3598:	fb cf       	rjmp	.-10     	; 0x3590 <dtoa_prf+0x296>
    359a:	f7 01       	movw	r30, r14
    359c:	e2 0f       	add	r30, r18
    359e:	f1 1d       	adc	r31, r1
    35a0:	10 82       	st	Z, r1
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	29 96       	adiw	r28, 0x09	; 9
    35a8:	ec e0       	ldi	r30, 0x0C	; 12
    35aa:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__+0xc>

000035ae <strtod>:
    35ae:	a0 e0       	ldi	r26, 0x00	; 0
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	ed ed       	ldi	r30, 0xDD	; 221
    35b4:	fa e1       	ldi	r31, 0x1A	; 26
    35b6:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__+0xc>
    35ba:	ec 01       	movw	r28, r24
    35bc:	6b 01       	movw	r12, r22
    35be:	61 15       	cp	r22, r1
    35c0:	71 05       	cpc	r23, r1
    35c2:	19 f0       	breq	.+6      	; 0x35ca <strtod+0x1c>
    35c4:	fb 01       	movw	r30, r22
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
    35ca:	7e 01       	movw	r14, r28
    35cc:	ff ef       	ldi	r31, 0xFF	; 255
    35ce:	ef 1a       	sub	r14, r31
    35d0:	ff 0a       	sbc	r15, r31
    35d2:	08 81       	ld	r16, Y
    35d4:	80 2f       	mov	r24, r16
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <isspace>
    35dc:	89 2b       	or	r24, r25
    35de:	11 f0       	breq	.+4      	; 0x35e4 <strtod+0x36>
    35e0:	e7 01       	movw	r28, r14
    35e2:	f3 cf       	rjmp	.-26     	; 0x35ca <strtod+0x1c>
    35e4:	0d 32       	cpi	r16, 0x2D	; 45
    35e6:	39 f4       	brne	.+14     	; 0x35f6 <strtod+0x48>
    35e8:	7e 01       	movw	r14, r28
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	e8 0e       	add	r14, r24
    35ee:	f1 1c       	adc	r15, r1
    35f0:	09 81       	ldd	r16, Y+1	; 0x01
    35f2:	11 e0       	ldi	r17, 0x01	; 1
    35f4:	08 c0       	rjmp	.+16     	; 0x3606 <strtod+0x58>
    35f6:	0b 32       	cpi	r16, 0x2B	; 43
    35f8:	29 f4       	brne	.+10     	; 0x3604 <strtod+0x56>
    35fa:	7e 01       	movw	r14, r28
    35fc:	92 e0       	ldi	r25, 0x02	; 2
    35fe:	e9 0e       	add	r14, r25
    3600:	f1 1c       	adc	r15, r1
    3602:	09 81       	ldd	r16, Y+1	; 0x01
    3604:	10 e0       	ldi	r17, 0x00	; 0
    3606:	e7 01       	movw	r28, r14
    3608:	21 97       	sbiw	r28, 0x01	; 1
    360a:	43 e0       	ldi	r20, 0x03	; 3
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	64 ed       	ldi	r22, 0xD4	; 212
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	ce 01       	movw	r24, r28
    3614:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncasecmp_P>
    3618:	89 2b       	or	r24, r25
    361a:	c1 f4       	brne	.+48     	; 0x364c <strtod+0x9e>
    361c:	23 96       	adiw	r28, 0x03	; 3
    361e:	45 e0       	ldi	r20, 0x05	; 5
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	6f ec       	ldi	r22, 0xCF	; 207
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	ce 01       	movw	r24, r28
    3628:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncasecmp_P>
    362c:	89 2b       	or	r24, r25
    362e:	09 f4       	brne	.+2      	; 0x3632 <strtod+0x84>
    3630:	25 96       	adiw	r28, 0x05	; 5
    3632:	c1 14       	cp	r12, r1
    3634:	d1 04       	cpc	r13, r1
    3636:	19 f0       	breq	.+6      	; 0x363e <strtod+0x90>
    3638:	f6 01       	movw	r30, r12
    363a:	d1 83       	std	Z+1, r29	; 0x01
    363c:	c0 83       	st	Z, r28
    363e:	11 11       	cpse	r17, r1
    3640:	f6 c0       	rjmp	.+492    	; 0x382e <strtod+0x280>
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	80 e8       	ldi	r24, 0x80	; 128
    3648:	9f e7       	ldi	r25, 0x7F	; 127
    364a:	fa c0       	rjmp	.+500    	; 0x3840 <strtod+0x292>
    364c:	43 e0       	ldi	r20, 0x03	; 3
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	6c ec       	ldi	r22, 0xCC	; 204
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	ce 01       	movw	r24, r28
    3656:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <strncasecmp_P>
    365a:	89 2b       	or	r24, r25
    365c:	59 f4       	brne	.+22     	; 0x3674 <strtod+0xc6>
    365e:	c1 14       	cp	r12, r1
    3660:	d1 04       	cpc	r13, r1
    3662:	09 f4       	brne	.+2      	; 0x3666 <strtod+0xb8>
    3664:	e9 c0       	rjmp	.+466    	; 0x3838 <strtod+0x28a>
    3666:	f2 e0       	ldi	r31, 0x02	; 2
    3668:	ef 0e       	add	r14, r31
    366a:	f1 1c       	adc	r15, r1
    366c:	f6 01       	movw	r30, r12
    366e:	f1 82       	std	Z+1, r15	; 0x01
    3670:	e0 82       	st	Z, r14
    3672:	e2 c0       	rjmp	.+452    	; 0x3838 <strtod+0x28a>
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	a9 01       	movw	r20, r18
    367a:	c0 e0       	ldi	r28, 0x00	; 0
    367c:	d0 e0       	ldi	r29, 0x00	; 0
    367e:	f7 01       	movw	r30, r14
    3680:	80 ed       	ldi	r24, 0xD0	; 208
    3682:	a8 2e       	mov	r10, r24
    3684:	a0 0e       	add	r10, r16
    3686:	89 e0       	ldi	r24, 0x09	; 9
    3688:	8a 15       	cp	r24, r10
    368a:	30 f1       	brcs	.+76     	; 0x36d8 <strtod+0x12a>
    368c:	91 2f       	mov	r25, r17
    368e:	92 60       	ori	r25, 0x02	; 2
    3690:	b9 2e       	mov	r11, r25
    3692:	81 2f       	mov	r24, r17
    3694:	88 70       	andi	r24, 0x08	; 8
    3696:	12 ff       	sbrs	r17, 2
    3698:	04 c0       	rjmp	.+8      	; 0x36a2 <strtod+0xf4>
    369a:	81 11       	cpse	r24, r1
    369c:	24 c0       	rjmp	.+72     	; 0x36e6 <strtod+0x138>
    369e:	21 96       	adiw	r28, 0x01	; 1
    36a0:	22 c0       	rjmp	.+68     	; 0x36e6 <strtod+0x138>
    36a2:	81 11       	cpse	r24, r1
    36a4:	21 97       	sbiw	r28, 0x01	; 1
    36a6:	a5 e0       	ldi	r26, 0x05	; 5
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__muluhisi3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	aa 1f       	adc	r26, r26
    36b8:	bb 1f       	adc	r27, r27
    36ba:	9c 01       	movw	r18, r24
    36bc:	ad 01       	movw	r20, r26
    36be:	2a 0d       	add	r18, r10
    36c0:	31 1d       	adc	r19, r1
    36c2:	41 1d       	adc	r20, r1
    36c4:	51 1d       	adc	r21, r1
    36c6:	28 39       	cpi	r18, 0x98	; 152
    36c8:	89 e9       	ldi	r24, 0x99	; 153
    36ca:	38 07       	cpc	r19, r24
    36cc:	48 07       	cpc	r20, r24
    36ce:	89 e1       	ldi	r24, 0x19	; 25
    36d0:	58 07       	cpc	r21, r24
    36d2:	48 f0       	brcs	.+18     	; 0x36e6 <strtod+0x138>
    36d4:	16 60       	ori	r17, 0x06	; 6
    36d6:	06 c0       	rjmp	.+12     	; 0x36e4 <strtod+0x136>
    36d8:	9e ef       	ldi	r25, 0xFE	; 254
    36da:	a9 12       	cpse	r10, r25
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <strtod+0x144>
    36de:	13 fd       	sbrc	r17, 3
    36e0:	40 c0       	rjmp	.+128    	; 0x3762 <strtod+0x1b4>
    36e2:	18 60       	ori	r17, 0x08	; 8
    36e4:	b1 2e       	mov	r11, r17
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	e8 1a       	sub	r14, r24
    36ea:	f8 0a       	sbc	r15, r24
    36ec:	00 81       	ld	r16, Z
    36ee:	1b 2d       	mov	r17, r11
    36f0:	c6 cf       	rjmp	.-116    	; 0x367e <strtod+0xd0>
    36f2:	80 2f       	mov	r24, r16
    36f4:	8f 7d       	andi	r24, 0xDF	; 223
    36f6:	85 34       	cpi	r24, 0x45	; 69
    36f8:	a1 f5       	brne	.+104    	; 0x3762 <strtod+0x1b4>
    36fa:	80 81       	ld	r24, Z
    36fc:	8d 32       	cpi	r24, 0x2D	; 45
    36fe:	11 f4       	brne	.+4      	; 0x3704 <strtod+0x156>
    3700:	10 61       	ori	r17, 0x10	; 16
    3702:	06 c0       	rjmp	.+12     	; 0x3710 <strtod+0x162>
    3704:	8b 32       	cpi	r24, 0x2B	; 43
    3706:	21 f0       	breq	.+8      	; 0x3710 <strtod+0x162>
    3708:	31 96       	adiw	r30, 0x01	; 1
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <strtod+0x16a>
    3710:	81 81       	ldd	r24, Z+1	; 0x01
    3712:	32 96       	adiw	r30, 0x02	; 2
    3714:	62 e0       	ldi	r22, 0x02	; 2
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	80 53       	subi	r24, 0x30	; 48
    371a:	8a 30       	cpi	r24, 0x0A	; 10
    371c:	18 f0       	brcs	.+6      	; 0x3724 <strtod+0x176>
    371e:	e6 1b       	sub	r30, r22
    3720:	f7 0b       	sbc	r31, r23
    3722:	1f c0       	rjmp	.+62     	; 0x3762 <strtod+0x1b4>
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	60 38       	cpi	r22, 0x80	; 128
    372a:	9c e0       	ldi	r25, 0x0C	; 12
    372c:	79 07       	cpc	r23, r25
    372e:	5c f4       	brge	.+22     	; 0x3746 <strtod+0x198>
    3730:	db 01       	movw	r26, r22
    3732:	aa 0f       	add	r26, r26
    3734:	bb 1f       	adc	r27, r27
    3736:	aa 0f       	add	r26, r26
    3738:	bb 1f       	adc	r27, r27
    373a:	6a 0f       	add	r22, r26
    373c:	7b 1f       	adc	r23, r27
    373e:	66 0f       	add	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	68 0f       	add	r22, r24
    3744:	71 1d       	adc	r23, r1
    3746:	31 96       	adiw	r30, 0x01	; 1
    3748:	df 01       	movw	r26, r30
    374a:	11 97       	sbiw	r26, 0x01	; 1
    374c:	8c 91       	ld	r24, X
    374e:	80 53       	subi	r24, 0x30	; 48
    3750:	8a 30       	cpi	r24, 0x0A	; 10
    3752:	50 f3       	brcs	.-44     	; 0x3728 <strtod+0x17a>
    3754:	14 ff       	sbrs	r17, 4
    3756:	03 c0       	rjmp	.+6      	; 0x375e <strtod+0x1b0>
    3758:	71 95       	neg	r23
    375a:	61 95       	neg	r22
    375c:	71 09       	sbc	r23, r1
    375e:	c6 0f       	add	r28, r22
    3760:	d7 1f       	adc	r29, r23
    3762:	11 ff       	sbrs	r17, 1
    3764:	08 c0       	rjmp	.+16     	; 0x3776 <strtod+0x1c8>
    3766:	c1 14       	cp	r12, r1
    3768:	d1 04       	cpc	r13, r1
    376a:	29 f0       	breq	.+10     	; 0x3776 <strtod+0x1c8>
    376c:	cf 01       	movw	r24, r30
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f6 01       	movw	r30, r12
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	80 83       	st	Z, r24
    3776:	ca 01       	movw	r24, r20
    3778:	b9 01       	movw	r22, r18
    377a:	0e 94 84 14 	call	0x2908	; 0x2908 <__floatunsisf>
    377e:	21 2f       	mov	r18, r17
    3780:	23 70       	andi	r18, 0x03	; 3
    3782:	23 30       	cpi	r18, 0x03	; 3
    3784:	19 f0       	breq	.+6      	; 0x378c <strtod+0x1de>
    3786:	4b 01       	movw	r8, r22
    3788:	5c 01       	movw	r10, r24
    378a:	06 c0       	rjmp	.+12     	; 0x3798 <strtod+0x1ea>
    378c:	4b 01       	movw	r8, r22
    378e:	5c 01       	movw	r10, r24
    3790:	b7 fa       	bst	r11, 7
    3792:	b0 94       	com	r11
    3794:	b7 f8       	bld	r11, 7
    3796:	b0 94       	com	r11
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	a9 01       	movw	r20, r18
    379e:	c5 01       	movw	r24, r10
    37a0:	b4 01       	movw	r22, r8
    37a2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	09 f4       	brne	.+2      	; 0x37ac <strtod+0x1fe>
    37aa:	3e c0       	rjmp	.+124    	; 0x3828 <strtod+0x27a>
    37ac:	d7 ff       	sbrs	r29, 7
    37ae:	06 c0       	rjmp	.+12     	; 0x37bc <strtod+0x20e>
    37b0:	d1 95       	neg	r29
    37b2:	c1 95       	neg	r28
    37b4:	d1 09       	sbc	r29, r1
    37b6:	0b ee       	ldi	r16, 0xEB	; 235
    37b8:	10 e0       	ldi	r17, 0x00	; 0
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <strtod+0x212>
    37bc:	03 e0       	ldi	r16, 0x03	; 3
    37be:	11 e0       	ldi	r17, 0x01	; 1
    37c0:	68 01       	movw	r12, r16
    37c2:	f8 e1       	ldi	r31, 0x18	; 24
    37c4:	cf 1a       	sub	r12, r31
    37c6:	d1 08       	sbc	r13, r1
    37c8:	90 e2       	ldi	r25, 0x20	; 32
    37ca:	e9 2e       	mov	r14, r25
    37cc:	f1 2c       	mov	r15, r1
    37ce:	ce 15       	cp	r28, r14
    37d0:	df 05       	cpc	r29, r15
    37d2:	74 f0       	brlt	.+28     	; 0x37f0 <strtod+0x242>
    37d4:	f8 01       	movw	r30, r16
    37d6:	25 91       	lpm	r18, Z+
    37d8:	35 91       	lpm	r19, Z+
    37da:	45 91       	lpm	r20, Z+
    37dc:	54 91       	lpm	r21, Z
    37de:	c5 01       	movw	r24, r10
    37e0:	b4 01       	movw	r22, r8
    37e2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__mulsf3>
    37e6:	4b 01       	movw	r8, r22
    37e8:	5c 01       	movw	r10, r24
    37ea:	ce 19       	sub	r28, r14
    37ec:	df 09       	sbc	r29, r15
    37ee:	ef cf       	rjmp	.-34     	; 0x37ce <strtod+0x220>
    37f0:	04 50       	subi	r16, 0x04	; 4
    37f2:	11 09       	sbc	r17, r1
    37f4:	f5 94       	asr	r15
    37f6:	e7 94       	ror	r14
    37f8:	0c 15       	cp	r16, r12
    37fa:	1d 05       	cpc	r17, r13
    37fc:	41 f7       	brne	.-48     	; 0x37ce <strtod+0x220>
    37fe:	8a 2d       	mov	r24, r10
    3800:	88 0f       	add	r24, r24
    3802:	8b 2d       	mov	r24, r11
    3804:	88 1f       	adc	r24, r24
    3806:	8f 3f       	cpi	r24, 0xFF	; 255
    3808:	49 f0       	breq	.+18     	; 0x381c <strtod+0x26e>
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	a9 01       	movw	r20, r18
    3810:	c5 01       	movw	r24, r10
    3812:	b4 01       	movw	r22, r8
    3814:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__cmpsf2>
    3818:	81 11       	cpse	r24, r1
    381a:	06 c0       	rjmp	.+12     	; 0x3828 <strtod+0x27a>
    381c:	82 e2       	ldi	r24, 0x22	; 34
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <errno+0x1>
    3824:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <errno>
    3828:	c5 01       	movw	r24, r10
    382a:	b4 01       	movw	r22, r8
    382c:	09 c0       	rjmp	.+18     	; 0x3840 <strtod+0x292>
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	80 e8       	ldi	r24, 0x80	; 128
    3834:	9f ef       	ldi	r25, 0xFF	; 255
    3836:	04 c0       	rjmp	.+8      	; 0x3840 <strtod+0x292>
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	80 ec       	ldi	r24, 0xC0	; 192
    383e:	9f e7       	ldi	r25, 0x7F	; 127
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	ec e0       	ldi	r30, 0x0C	; 12
    3846:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__+0xc>

0000384a <__ftoa_engine>:
    384a:	28 30       	cpi	r18, 0x08	; 8
    384c:	08 f0       	brcs	.+2      	; 0x3850 <__ftoa_engine+0x6>
    384e:	27 e0       	ldi	r18, 0x07	; 7
    3850:	33 27       	eor	r19, r19
    3852:	da 01       	movw	r26, r20
    3854:	99 0f       	add	r25, r25
    3856:	31 1d       	adc	r19, r1
    3858:	87 fd       	sbrc	r24, 7
    385a:	91 60       	ori	r25, 0x01	; 1
    385c:	00 96       	adiw	r24, 0x00	; 0
    385e:	61 05       	cpc	r22, r1
    3860:	71 05       	cpc	r23, r1
    3862:	39 f4       	brne	.+14     	; 0x3872 <__ftoa_engine+0x28>
    3864:	32 60       	ori	r19, 0x02	; 2
    3866:	2e 5f       	subi	r18, 0xFE	; 254
    3868:	3d 93       	st	X+, r19
    386a:	30 e3       	ldi	r19, 0x30	; 48
    386c:	2a 95       	dec	r18
    386e:	e1 f7       	brne	.-8      	; 0x3868 <__ftoa_engine+0x1e>
    3870:	08 95       	ret
    3872:	9f 3f       	cpi	r25, 0xFF	; 255
    3874:	30 f0       	brcs	.+12     	; 0x3882 <__ftoa_engine+0x38>
    3876:	80 38       	cpi	r24, 0x80	; 128
    3878:	71 05       	cpc	r23, r1
    387a:	61 05       	cpc	r22, r1
    387c:	09 f0       	breq	.+2      	; 0x3880 <__ftoa_engine+0x36>
    387e:	3c 5f       	subi	r19, 0xFC	; 252
    3880:	3c 5f       	subi	r19, 0xFC	; 252
    3882:	3d 93       	st	X+, r19
    3884:	91 30       	cpi	r25, 0x01	; 1
    3886:	08 f0       	brcs	.+2      	; 0x388a <__ftoa_engine+0x40>
    3888:	80 68       	ori	r24, 0x80	; 128
    388a:	91 1d       	adc	r25, r1
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	1f 93       	push	r17
    3892:	0f 93       	push	r16
    3894:	ff 92       	push	r15
    3896:	ef 92       	push	r14
    3898:	19 2f       	mov	r17, r25
    389a:	98 7f       	andi	r25, 0xF8	; 248
    389c:	96 95       	lsr	r25
    389e:	e9 2f       	mov	r30, r25
    38a0:	96 95       	lsr	r25
    38a2:	96 95       	lsr	r25
    38a4:	e9 0f       	add	r30, r25
    38a6:	ff 27       	eor	r31, r31
    38a8:	ef 59       	subi	r30, 0x9F	; 159
    38aa:	fe 4f       	sbci	r31, 0xFE	; 254
    38ac:	99 27       	eor	r25, r25
    38ae:	33 27       	eor	r19, r19
    38b0:	ee 24       	eor	r14, r14
    38b2:	ff 24       	eor	r15, r15
    38b4:	a7 01       	movw	r20, r14
    38b6:	e7 01       	movw	r28, r14
    38b8:	05 90       	lpm	r0, Z+
    38ba:	08 94       	sec
    38bc:	07 94       	ror	r0
    38be:	28 f4       	brcc	.+10     	; 0x38ca <__ftoa_engine+0x80>
    38c0:	36 0f       	add	r19, r22
    38c2:	e7 1e       	adc	r14, r23
    38c4:	f8 1e       	adc	r15, r24
    38c6:	49 1f       	adc	r20, r25
    38c8:	51 1d       	adc	r21, r1
    38ca:	66 0f       	add	r22, r22
    38cc:	77 1f       	adc	r23, r23
    38ce:	88 1f       	adc	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	06 94       	lsr	r0
    38d4:	a1 f7       	brne	.-24     	; 0x38be <__ftoa_engine+0x74>
    38d6:	05 90       	lpm	r0, Z+
    38d8:	07 94       	ror	r0
    38da:	28 f4       	brcc	.+10     	; 0x38e6 <__ftoa_engine+0x9c>
    38dc:	e7 0e       	add	r14, r23
    38de:	f8 1e       	adc	r15, r24
    38e0:	49 1f       	adc	r20, r25
    38e2:	56 1f       	adc	r21, r22
    38e4:	c1 1d       	adc	r28, r1
    38e6:	77 0f       	add	r23, r23
    38e8:	88 1f       	adc	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	66 1f       	adc	r22, r22
    38ee:	06 94       	lsr	r0
    38f0:	a1 f7       	brne	.-24     	; 0x38da <__ftoa_engine+0x90>
    38f2:	05 90       	lpm	r0, Z+
    38f4:	07 94       	ror	r0
    38f6:	28 f4       	brcc	.+10     	; 0x3902 <__ftoa_engine+0xb8>
    38f8:	f8 0e       	add	r15, r24
    38fa:	49 1f       	adc	r20, r25
    38fc:	56 1f       	adc	r21, r22
    38fe:	c7 1f       	adc	r28, r23
    3900:	d1 1d       	adc	r29, r1
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	66 1f       	adc	r22, r22
    3908:	77 1f       	adc	r23, r23
    390a:	06 94       	lsr	r0
    390c:	a1 f7       	brne	.-24     	; 0x38f6 <__ftoa_engine+0xac>
    390e:	05 90       	lpm	r0, Z+
    3910:	07 94       	ror	r0
    3912:	20 f4       	brcc	.+8      	; 0x391c <__ftoa_engine+0xd2>
    3914:	49 0f       	add	r20, r25
    3916:	56 1f       	adc	r21, r22
    3918:	c7 1f       	adc	r28, r23
    391a:	d8 1f       	adc	r29, r24
    391c:	99 0f       	add	r25, r25
    391e:	66 1f       	adc	r22, r22
    3920:	77 1f       	adc	r23, r23
    3922:	88 1f       	adc	r24, r24
    3924:	06 94       	lsr	r0
    3926:	a9 f7       	brne	.-22     	; 0x3912 <__ftoa_engine+0xc8>
    3928:	84 91       	lpm	r24, Z
    392a:	10 95       	com	r17
    392c:	17 70       	andi	r17, 0x07	; 7
    392e:	41 f0       	breq	.+16     	; 0x3940 <__ftoa_engine+0xf6>
    3930:	d6 95       	lsr	r29
    3932:	c7 95       	ror	r28
    3934:	57 95       	ror	r21
    3936:	47 95       	ror	r20
    3938:	f7 94       	ror	r15
    393a:	e7 94       	ror	r14
    393c:	1a 95       	dec	r17
    393e:	c1 f7       	brne	.-16     	; 0x3930 <__ftoa_engine+0xe6>
    3940:	e7 e0       	ldi	r30, 0x07	; 7
    3942:	f1 e0       	ldi	r31, 0x01	; 1
    3944:	68 94       	set
    3946:	15 90       	lpm	r1, Z+
    3948:	15 91       	lpm	r17, Z+
    394a:	35 91       	lpm	r19, Z+
    394c:	65 91       	lpm	r22, Z+
    394e:	95 91       	lpm	r25, Z+
    3950:	05 90       	lpm	r0, Z+
    3952:	7f e2       	ldi	r23, 0x2F	; 47
    3954:	73 95       	inc	r23
    3956:	e1 18       	sub	r14, r1
    3958:	f1 0a       	sbc	r15, r17
    395a:	43 0b       	sbc	r20, r19
    395c:	56 0b       	sbc	r21, r22
    395e:	c9 0b       	sbc	r28, r25
    3960:	d0 09       	sbc	r29, r0
    3962:	c0 f7       	brcc	.-16     	; 0x3954 <__ftoa_engine+0x10a>
    3964:	e1 0c       	add	r14, r1
    3966:	f1 1e       	adc	r15, r17
    3968:	43 1f       	adc	r20, r19
    396a:	56 1f       	adc	r21, r22
    396c:	c9 1f       	adc	r28, r25
    396e:	d0 1d       	adc	r29, r0
    3970:	7e f4       	brtc	.+30     	; 0x3990 <__ftoa_engine+0x146>
    3972:	70 33       	cpi	r23, 0x30	; 48
    3974:	11 f4       	brne	.+4      	; 0x397a <__ftoa_engine+0x130>
    3976:	8a 95       	dec	r24
    3978:	e6 cf       	rjmp	.-52     	; 0x3946 <__ftoa_engine+0xfc>
    397a:	e8 94       	clt
    397c:	01 50       	subi	r16, 0x01	; 1
    397e:	30 f0       	brcs	.+12     	; 0x398c <__ftoa_engine+0x142>
    3980:	08 0f       	add	r16, r24
    3982:	0a f4       	brpl	.+2      	; 0x3986 <__ftoa_engine+0x13c>
    3984:	00 27       	eor	r16, r16
    3986:	02 17       	cp	r16, r18
    3988:	08 f4       	brcc	.+2      	; 0x398c <__ftoa_engine+0x142>
    398a:	20 2f       	mov	r18, r16
    398c:	23 95       	inc	r18
    398e:	02 2f       	mov	r16, r18
    3990:	7a 33       	cpi	r23, 0x3A	; 58
    3992:	28 f0       	brcs	.+10     	; 0x399e <__ftoa_engine+0x154>
    3994:	79 e3       	ldi	r23, 0x39	; 57
    3996:	7d 93       	st	X+, r23
    3998:	2a 95       	dec	r18
    399a:	e9 f7       	brne	.-6      	; 0x3996 <__ftoa_engine+0x14c>
    399c:	10 c0       	rjmp	.+32     	; 0x39be <__ftoa_engine+0x174>
    399e:	7d 93       	st	X+, r23
    39a0:	2a 95       	dec	r18
    39a2:	89 f6       	brne	.-94     	; 0x3946 <__ftoa_engine+0xfc>
    39a4:	06 94       	lsr	r0
    39a6:	97 95       	ror	r25
    39a8:	67 95       	ror	r22
    39aa:	37 95       	ror	r19
    39ac:	17 95       	ror	r17
    39ae:	17 94       	ror	r1
    39b0:	e1 18       	sub	r14, r1
    39b2:	f1 0a       	sbc	r15, r17
    39b4:	43 0b       	sbc	r20, r19
    39b6:	56 0b       	sbc	r21, r22
    39b8:	c9 0b       	sbc	r28, r25
    39ba:	d0 09       	sbc	r29, r0
    39bc:	98 f0       	brcs	.+38     	; 0x39e4 <__ftoa_engine+0x19a>
    39be:	23 95       	inc	r18
    39c0:	7e 91       	ld	r23, -X
    39c2:	73 95       	inc	r23
    39c4:	7a 33       	cpi	r23, 0x3A	; 58
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <__ftoa_engine+0x180>
    39c8:	70 e3       	ldi	r23, 0x30	; 48
    39ca:	7c 93       	st	X, r23
    39cc:	20 13       	cpse	r18, r16
    39ce:	b8 f7       	brcc	.-18     	; 0x39be <__ftoa_engine+0x174>
    39d0:	7e 91       	ld	r23, -X
    39d2:	70 61       	ori	r23, 0x10	; 16
    39d4:	7d 93       	st	X+, r23
    39d6:	30 f0       	brcs	.+12     	; 0x39e4 <__ftoa_engine+0x19a>
    39d8:	83 95       	inc	r24
    39da:	71 e3       	ldi	r23, 0x31	; 49
    39dc:	7d 93       	st	X+, r23
    39de:	70 e3       	ldi	r23, 0x30	; 48
    39e0:	2a 95       	dec	r18
    39e2:	e1 f7       	brne	.-8      	; 0x39dc <__ftoa_engine+0x192>
    39e4:	11 24       	eor	r1, r1
    39e6:	ef 90       	pop	r14
    39e8:	ff 90       	pop	r15
    39ea:	0f 91       	pop	r16
    39ec:	1f 91       	pop	r17
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	99 27       	eor	r25, r25
    39f4:	87 fd       	sbrc	r24, 7
    39f6:	90 95       	com	r25
    39f8:	08 95       	ret

000039fa <isspace>:
    39fa:	91 11       	cpse	r25, r1
    39fc:	0c 94 ce 1d 	jmp	0x3b9c	; 0x3b9c <__ctype_isfalse>
    3a00:	80 32       	cpi	r24, 0x20	; 32
    3a02:	19 f0       	breq	.+6      	; 0x3a0a <isspace+0x10>
    3a04:	89 50       	subi	r24, 0x09	; 9
    3a06:	85 50       	subi	r24, 0x05	; 5
    3a08:	c8 f7       	brcc	.-14     	; 0x39fc <isspace+0x2>
    3a0a:	08 95       	ret

00003a0c <strncasecmp_P>:
    3a0c:	fb 01       	movw	r30, r22
    3a0e:	dc 01       	movw	r26, r24
    3a10:	41 50       	subi	r20, 0x01	; 1
    3a12:	50 40       	sbci	r21, 0x00	; 0
    3a14:	88 f0       	brcs	.+34     	; 0x3a38 <strncasecmp_P+0x2c>
    3a16:	8d 91       	ld	r24, X+
    3a18:	81 34       	cpi	r24, 0x41	; 65
    3a1a:	1c f0       	brlt	.+6      	; 0x3a22 <strncasecmp_P+0x16>
    3a1c:	8b 35       	cpi	r24, 0x5B	; 91
    3a1e:	0c f4       	brge	.+2      	; 0x3a22 <strncasecmp_P+0x16>
    3a20:	80 5e       	subi	r24, 0xE0	; 224
    3a22:	65 91       	lpm	r22, Z+
    3a24:	61 34       	cpi	r22, 0x41	; 65
    3a26:	1c f0       	brlt	.+6      	; 0x3a2e <strncasecmp_P+0x22>
    3a28:	6b 35       	cpi	r22, 0x5B	; 91
    3a2a:	0c f4       	brge	.+2      	; 0x3a2e <strncasecmp_P+0x22>
    3a2c:	60 5e       	subi	r22, 0xE0	; 224
    3a2e:	86 1b       	sub	r24, r22
    3a30:	61 11       	cpse	r22, r1
    3a32:	71 f3       	breq	.-36     	; 0x3a10 <strncasecmp_P+0x4>
    3a34:	99 0b       	sbc	r25, r25
    3a36:	08 95       	ret
    3a38:	88 1b       	sub	r24, r24
    3a3a:	fc cf       	rjmp	.-8      	; 0x3a34 <strncasecmp_P+0x28>

00003a3c <strnlen_P>:
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	05 90       	lpm	r0, Z+
    3a40:	61 50       	subi	r22, 0x01	; 1
    3a42:	70 40       	sbci	r23, 0x00	; 0
    3a44:	01 10       	cpse	r0, r1
    3a46:	d8 f7       	brcc	.-10     	; 0x3a3e <strnlen_P+0x2>
    3a48:	80 95       	com	r24
    3a4a:	90 95       	com	r25
    3a4c:	8e 0f       	add	r24, r30
    3a4e:	9f 1f       	adc	r25, r31
    3a50:	08 95       	ret

00003a52 <strnlen>:
    3a52:	fc 01       	movw	r30, r24
    3a54:	61 50       	subi	r22, 0x01	; 1
    3a56:	70 40       	sbci	r23, 0x00	; 0
    3a58:	01 90       	ld	r0, Z+
    3a5a:	01 10       	cpse	r0, r1
    3a5c:	d8 f7       	brcc	.-10     	; 0x3a54 <strnlen+0x2>
    3a5e:	80 95       	com	r24
    3a60:	90 95       	com	r25
    3a62:	8e 0f       	add	r24, r30
    3a64:	9f 1f       	adc	r25, r31
    3a66:	08 95       	ret

00003a68 <fputc>:
    3a68:	0f 93       	push	r16
    3a6a:	1f 93       	push	r17
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	fb 01       	movw	r30, r22
    3a72:	23 81       	ldd	r18, Z+3	; 0x03
    3a74:	21 fd       	sbrc	r18, 1
    3a76:	03 c0       	rjmp	.+6      	; 0x3a7e <fputc+0x16>
    3a78:	8f ef       	ldi	r24, 0xFF	; 255
    3a7a:	9f ef       	ldi	r25, 0xFF	; 255
    3a7c:	2c c0       	rjmp	.+88     	; 0x3ad6 <fputc+0x6e>
    3a7e:	22 ff       	sbrs	r18, 2
    3a80:	16 c0       	rjmp	.+44     	; 0x3aae <fputc+0x46>
    3a82:	46 81       	ldd	r20, Z+6	; 0x06
    3a84:	57 81       	ldd	r21, Z+7	; 0x07
    3a86:	24 81       	ldd	r18, Z+4	; 0x04
    3a88:	35 81       	ldd	r19, Z+5	; 0x05
    3a8a:	42 17       	cp	r20, r18
    3a8c:	53 07       	cpc	r21, r19
    3a8e:	44 f4       	brge	.+16     	; 0x3aa0 <fputc+0x38>
    3a90:	a0 81       	ld	r26, Z
    3a92:	b1 81       	ldd	r27, Z+1	; 0x01
    3a94:	9d 01       	movw	r18, r26
    3a96:	2f 5f       	subi	r18, 0xFF	; 255
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	31 83       	std	Z+1, r19	; 0x01
    3a9c:	20 83       	st	Z, r18
    3a9e:	8c 93       	st	X, r24
    3aa0:	26 81       	ldd	r18, Z+6	; 0x06
    3aa2:	37 81       	ldd	r19, Z+7	; 0x07
    3aa4:	2f 5f       	subi	r18, 0xFF	; 255
    3aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa8:	37 83       	std	Z+7, r19	; 0x07
    3aaa:	26 83       	std	Z+6, r18	; 0x06
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <fputc+0x6e>
    3aae:	8b 01       	movw	r16, r22
    3ab0:	ec 01       	movw	r28, r24
    3ab2:	fb 01       	movw	r30, r22
    3ab4:	00 84       	ldd	r0, Z+8	; 0x08
    3ab6:	f1 85       	ldd	r31, Z+9	; 0x09
    3ab8:	e0 2d       	mov	r30, r0
    3aba:	09 95       	icall
    3abc:	89 2b       	or	r24, r25
    3abe:	e1 f6       	brne	.-72     	; 0x3a78 <fputc+0x10>
    3ac0:	d8 01       	movw	r26, r16
    3ac2:	16 96       	adiw	r26, 0x06	; 6
    3ac4:	8d 91       	ld	r24, X+
    3ac6:	9c 91       	ld	r25, X
    3ac8:	17 97       	sbiw	r26, 0x07	; 7
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	17 96       	adiw	r26, 0x07	; 7
    3ace:	9c 93       	st	X, r25
    3ad0:	8e 93       	st	-X, r24
    3ad2:	16 97       	sbiw	r26, 0x06	; 6
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	08 95       	ret

00003ae0 <__ultoa_invert>:
    3ae0:	fa 01       	movw	r30, r20
    3ae2:	aa 27       	eor	r26, r26
    3ae4:	28 30       	cpi	r18, 0x08	; 8
    3ae6:	51 f1       	breq	.+84     	; 0x3b3c <__ultoa_invert+0x5c>
    3ae8:	20 31       	cpi	r18, 0x10	; 16
    3aea:	81 f1       	breq	.+96     	; 0x3b4c <__ultoa_invert+0x6c>
    3aec:	e8 94       	clt
    3aee:	6f 93       	push	r22
    3af0:	6e 7f       	andi	r22, 0xFE	; 254
    3af2:	6e 5f       	subi	r22, 0xFE	; 254
    3af4:	7f 4f       	sbci	r23, 0xFF	; 255
    3af6:	8f 4f       	sbci	r24, 0xFF	; 255
    3af8:	9f 4f       	sbci	r25, 0xFF	; 255
    3afa:	af 4f       	sbci	r26, 0xFF	; 255
    3afc:	b1 e0       	ldi	r27, 0x01	; 1
    3afe:	3e d0       	rcall	.+124    	; 0x3b7c <__ultoa_invert+0x9c>
    3b00:	b4 e0       	ldi	r27, 0x04	; 4
    3b02:	3c d0       	rcall	.+120    	; 0x3b7c <__ultoa_invert+0x9c>
    3b04:	67 0f       	add	r22, r23
    3b06:	78 1f       	adc	r23, r24
    3b08:	89 1f       	adc	r24, r25
    3b0a:	9a 1f       	adc	r25, r26
    3b0c:	a1 1d       	adc	r26, r1
    3b0e:	68 0f       	add	r22, r24
    3b10:	79 1f       	adc	r23, r25
    3b12:	8a 1f       	adc	r24, r26
    3b14:	91 1d       	adc	r25, r1
    3b16:	a1 1d       	adc	r26, r1
    3b18:	6a 0f       	add	r22, r26
    3b1a:	71 1d       	adc	r23, r1
    3b1c:	81 1d       	adc	r24, r1
    3b1e:	91 1d       	adc	r25, r1
    3b20:	a1 1d       	adc	r26, r1
    3b22:	20 d0       	rcall	.+64     	; 0x3b64 <__ultoa_invert+0x84>
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <__ultoa_invert+0x48>
    3b26:	68 94       	set
    3b28:	3f 91       	pop	r19
    3b2a:	2a e0       	ldi	r18, 0x0A	; 10
    3b2c:	26 9f       	mul	r18, r22
    3b2e:	11 24       	eor	r1, r1
    3b30:	30 19       	sub	r19, r0
    3b32:	30 5d       	subi	r19, 0xD0	; 208
    3b34:	31 93       	st	Z+, r19
    3b36:	de f6       	brtc	.-74     	; 0x3aee <__ultoa_invert+0xe>
    3b38:	cf 01       	movw	r24, r30
    3b3a:	08 95       	ret
    3b3c:	46 2f       	mov	r20, r22
    3b3e:	47 70       	andi	r20, 0x07	; 7
    3b40:	40 5d       	subi	r20, 0xD0	; 208
    3b42:	41 93       	st	Z+, r20
    3b44:	b3 e0       	ldi	r27, 0x03	; 3
    3b46:	0f d0       	rcall	.+30     	; 0x3b66 <__ultoa_invert+0x86>
    3b48:	c9 f7       	brne	.-14     	; 0x3b3c <__ultoa_invert+0x5c>
    3b4a:	f6 cf       	rjmp	.-20     	; 0x3b38 <__ultoa_invert+0x58>
    3b4c:	46 2f       	mov	r20, r22
    3b4e:	4f 70       	andi	r20, 0x0F	; 15
    3b50:	40 5d       	subi	r20, 0xD0	; 208
    3b52:	4a 33       	cpi	r20, 0x3A	; 58
    3b54:	18 f0       	brcs	.+6      	; 0x3b5c <__ultoa_invert+0x7c>
    3b56:	49 5d       	subi	r20, 0xD9	; 217
    3b58:	31 fd       	sbrc	r19, 1
    3b5a:	40 52       	subi	r20, 0x20	; 32
    3b5c:	41 93       	st	Z+, r20
    3b5e:	02 d0       	rcall	.+4      	; 0x3b64 <__ultoa_invert+0x84>
    3b60:	a9 f7       	brne	.-22     	; 0x3b4c <__ultoa_invert+0x6c>
    3b62:	ea cf       	rjmp	.-44     	; 0x3b38 <__ultoa_invert+0x58>
    3b64:	b4 e0       	ldi	r27, 0x04	; 4
    3b66:	a6 95       	lsr	r26
    3b68:	97 95       	ror	r25
    3b6a:	87 95       	ror	r24
    3b6c:	77 95       	ror	r23
    3b6e:	67 95       	ror	r22
    3b70:	ba 95       	dec	r27
    3b72:	c9 f7       	brne	.-14     	; 0x3b66 <__ultoa_invert+0x86>
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	61 05       	cpc	r22, r1
    3b78:	71 05       	cpc	r23, r1
    3b7a:	08 95       	ret
    3b7c:	9b 01       	movw	r18, r22
    3b7e:	ac 01       	movw	r20, r24
    3b80:	0a 2e       	mov	r0, r26
    3b82:	06 94       	lsr	r0
    3b84:	57 95       	ror	r21
    3b86:	47 95       	ror	r20
    3b88:	37 95       	ror	r19
    3b8a:	27 95       	ror	r18
    3b8c:	ba 95       	dec	r27
    3b8e:	c9 f7       	brne	.-14     	; 0x3b82 <__ultoa_invert+0xa2>
    3b90:	62 0f       	add	r22, r18
    3b92:	73 1f       	adc	r23, r19
    3b94:	84 1f       	adc	r24, r20
    3b96:	95 1f       	adc	r25, r21
    3b98:	a0 1d       	adc	r26, r0
    3b9a:	08 95       	ret

00003b9c <__ctype_isfalse>:
    3b9c:	99 27       	eor	r25, r25
    3b9e:	88 27       	eor	r24, r24

00003ba0 <__ctype_istrue>:
    3ba0:	08 95       	ret

00003ba2 <__prologue_saves__>:
    3ba2:	2f 92       	push	r2
    3ba4:	3f 92       	push	r3
    3ba6:	4f 92       	push	r4
    3ba8:	5f 92       	push	r5
    3baa:	6f 92       	push	r6
    3bac:	7f 92       	push	r7
    3bae:	8f 92       	push	r8
    3bb0:	9f 92       	push	r9
    3bb2:	af 92       	push	r10
    3bb4:	bf 92       	push	r11
    3bb6:	cf 92       	push	r12
    3bb8:	df 92       	push	r13
    3bba:	ef 92       	push	r14
    3bbc:	ff 92       	push	r15
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	ca 1b       	sub	r28, r26
    3bcc:	db 0b       	sbc	r29, r27
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	09 94       	ijmp

00003bda <__epilogue_restores__>:
    3bda:	2a 88       	ldd	r2, Y+18	; 0x12
    3bdc:	39 88       	ldd	r3, Y+17	; 0x11
    3bde:	48 88       	ldd	r4, Y+16	; 0x10
    3be0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3be4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3be6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3be8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bea:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bec:	b9 84       	ldd	r11, Y+9	; 0x09
    3bee:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf0:	df 80       	ldd	r13, Y+7	; 0x07
    3bf2:	ee 80       	ldd	r14, Y+6	; 0x06
    3bf4:	fd 80       	ldd	r15, Y+5	; 0x05
    3bf6:	0c 81       	ldd	r16, Y+4	; 0x04
    3bf8:	1b 81       	ldd	r17, Y+3	; 0x03
    3bfa:	aa 81       	ldd	r26, Y+2	; 0x02
    3bfc:	b9 81       	ldd	r27, Y+1	; 0x01
    3bfe:	ce 0f       	add	r28, r30
    3c00:	d1 1d       	adc	r29, r1
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	ed 01       	movw	r28, r26
    3c0e:	08 95       	ret

00003c10 <_exit>:
    3c10:	f8 94       	cli

00003c12 <__stop_program>:
    3c12:	ff cf       	rjmp	.-2      	; 0x3c12 <__stop_program>

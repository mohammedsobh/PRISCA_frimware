
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00003bfa  00003c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000160  008000ee  008000ee  00003d1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003157  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea9  00000000  00000000  000070cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a1  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00009418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f3  00000000  00000000  00009988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019c3  00000000  00000000  0000a17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000bb3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_4>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_8>
      24:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x360>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x268>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ea ef       	ldi	r30, 0xFA	; 250
     216:	fb e3       	ldi	r31, 0x3B	; 59
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	ae 3e       	cpi	r26, 0xEE	; 238
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	ae ee       	ldi	r26, 0xEE	; 238
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ae 34       	cpi	r26, 0x4E	; 78
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
     238:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	2a 97       	sbiw	r28, 0x0a	; 10
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	ac 01       	movw	r20, r24
     2e8:	fe 01       	movw	r30, r28
     2ea:	31 96       	adiw	r30, 0x01	; 1
     2ec:	ce 01       	movw	r24, r28
     2ee:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     2f0:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     2f2:	e8 17       	cp	r30, r24
     2f4:	f9 07       	cpc	r31, r25
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <get_value+0x22>
     2f8:	00 e0       	ldi	r16, 0x00	; 0
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     300:	fa 01       	movw	r30, r20
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	90 81       	ld	r25, Z
     308:	96 13       	cpse	r25, r22
     30a:	17 c0       	rjmp	.+46     	; 0x33a <get_value+0x6c>
			v [j] = String[j+i+1];
     30c:	f9 01       	movw	r30, r18
     30e:	e0 0f       	add	r30, r16
     310:	f1 1f       	adc	r31, r17
     312:	e4 0f       	add	r30, r20
     314:	f5 1f       	adc	r31, r21
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	a1 e0       	ldi	r26, 0x01	; 1
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	ac 0f       	add	r26, r28
     31e:	bd 1f       	adc	r27, r29
     320:	a0 0f       	add	r26, r16
     322:	b1 1f       	adc	r27, r17
     324:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r'))
     326:	82 81       	ldd	r24, Z+2	; 0x02
     328:	80 32       	cpi	r24, 0x20	; 32
     32a:	61 f0       	breq	.+24     	; 0x344 <get_value+0x76>
     32c:	8a 30       	cpi	r24, 0x0A	; 10
     32e:	51 f0       	breq	.+20     	; 0x344 <get_value+0x76>
     330:	8d 30       	cpi	r24, 0x0D	; 13
     332:	41 f0       	breq	.+16     	; 0x344 <get_value+0x76>
			break;
			j++;
     334:	0f 5f       	subi	r16, 0xFF	; 255
     336:	1f 4f       	sbci	r17, 0xFF	; 255
     338:	e3 cf       	rjmp	.-58     	; 0x300 <get_value+0x32>
		}
		else if (String [i] == '\r')
     33a:	9d 30       	cpi	r25, 0x0D	; 13
     33c:	19 f0       	breq	.+6      	; 0x344 <get_value+0x76>
			break;
		else
			i++;
     33e:	2f 5f       	subi	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	de cf       	rjmp	.-68     	; 0x300 <get_value+0x32>
	}
	return (atof(v));
     344:	ce 01       	movw	r24, r28
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
}
     34c:	2a 96       	adiw	r28, 0x0a	; 10
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <get_int>:
int get_int (char* String,char ch)
{
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	2a 97       	sbiw	r28, 0x0a	; 10
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	ac 01       	movw	r20, r24
     37c:	fe 01       	movw	r30, r28
     37e:	31 96       	adiw	r30, 0x01	; 1
     380:	ce 01       	movw	r24, r28
     382:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     384:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     386:	e8 17       	cp	r30, r24
     388:	f9 07       	cpc	r31, r25
     38a:	e1 f7       	brne	.-8      	; 0x384 <get_int+0x22>
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	10 e0       	ldi	r17, 0x00	; 0
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     394:	fa 01       	movw	r30, r20
     396:	e2 0f       	add	r30, r18
     398:	f3 1f       	adc	r31, r19
     39a:	90 81       	ld	r25, Z
     39c:	96 13       	cpse	r25, r22
     39e:	17 c0       	rjmp	.+46     	; 0x3ce <get_int+0x6c>
			v [j] = String[j+i+1];
     3a0:	f9 01       	movw	r30, r18
     3a2:	e0 0f       	add	r30, r16
     3a4:	f1 1f       	adc	r31, r17
     3a6:	e4 0f       	add	r30, r20
     3a8:	f5 1f       	adc	r31, r21
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	a1 e0       	ldi	r26, 0x01	; 1
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	ac 0f       	add	r26, r28
     3b2:	bd 1f       	adc	r27, r29
     3b4:	a0 0f       	add	r26, r16
     3b6:	b1 1f       	adc	r27, r17
     3b8:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r') )
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	80 32       	cpi	r24, 0x20	; 32
     3be:	61 f0       	breq	.+24     	; 0x3d8 <get_int+0x76>
     3c0:	8a 30       	cpi	r24, 0x0A	; 10
     3c2:	51 f0       	breq	.+20     	; 0x3d8 <get_int+0x76>
     3c4:	8d 30       	cpi	r24, 0x0D	; 13
     3c6:	41 f0       	breq	.+16     	; 0x3d8 <get_int+0x76>
			break;
			j++;
     3c8:	0f 5f       	subi	r16, 0xFF	; 255
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	e3 cf       	rjmp	.-58     	; 0x394 <get_int+0x32>
		}
		else if (String [i] == '\r')
     3ce:	9d 30       	cpi	r25, 0x0D	; 13
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <get_int+0x76>
			break;
		else
			i++;
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	de cf       	rjmp	.-68     	; 0x394 <get_int+0x32>
	}
	return (atoi(v));
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <atoi>
}
     3e0:	2a 96       	adiw	r28, 0x0a	; 10
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret

000003f6 <find>:
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 81       	ld	r18, Z
     3fa:	62 17       	cp	r22, r18
     3fc:	59 f0       	breq	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			f = 1;
			break;
		}
		else if (String [i] == '\r')
     3fe:	2d 30       	cpi	r18, 0x0D	; 13
     400:	59 f0       	breq	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	31 96       	adiw	r30, 0x01	; 1
     404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	9d 30       	cpi	r25, 0x0D	; 13
     408:	49 f0       	breq	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     40a:	91 91       	ld	r25, Z+
     40c:	96 13       	cpse	r25, r22
     40e:	fb cf       	rjmp	.-10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			f = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	08 95       	ret
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	08 95       	ret
     41c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     41e:	08 95       	ret

00000420 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
     42e:	6a 01       	movw	r12, r20
     430:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     432:	28 81       	ld	r18, Y
     434:	39 81       	ldd	r19, Y+1	; 0x01
     436:	4a 81       	ldd	r20, Y+2	; 0x02
     438:	5b 81       	ldd	r21, Y+3	; 0x03
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	0e 94 28 13 	call	0x2650	; 0x2650 <__subsf3>
    *current_pos = new_pos;
     442:	c8 82       	st	Y, r12
     444:	d9 82       	std	Y+1, r13	; 0x01
     446:	ea 82       	std	Y+2, r14	; 0x02
     448:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	08 95       	ret

00000458 <pin_write>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     458:	41 11       	cpse	r20, r1
     45a:	0d c0       	rjmp	.+26     	; 0x476 <__stack+0x17>
     45c:	e8 2f       	mov	r30, r24
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	22 81       	ldd	r18, Z+2	; 0x02
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	02 c0       	rjmp	.+4      	; 0x46c <__stack+0xd>
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	6a 95       	dec	r22
     46e:	e2 f7       	brpl	.-8      	; 0x468 <__stack+0x9>
     470:	82 2b       	or	r24, r18
     472:	82 83       	std	Z+2, r24	; 0x02
     474:	08 95       	ret
     476:	e8 2f       	mov	r30, r24
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	22 81       	ldd	r18, Z+2	; 0x02
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	6a 95       	dec	r22
     488:	e2 f7       	brpl	.-8      	; 0x482 <__stack+0x23>
     48a:	80 95       	com	r24
     48c:	82 23       	and	r24, r18
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	08 95       	ret

00000492 <port_direction>:
     492:	61 11       	cpse	r22, r1
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <port_direction+0xe>
     496:	e8 2f       	mov	r30, r24
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	81 83       	std	Z+1, r24	; 0x01
     49e:	08 95       	ret
     4a0:	e8 2f       	mov	r30, r24
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	11 82       	std	Z+1, r1	; 0x01
     4a6:	08 95       	ret

000004a8 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     4a8:	e8 2f       	mov	r30, r24
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	62 83       	std	Z+2, r22	; 0x02
     4ae:	08 95       	ret

000004b0 <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     4b0:	e8 2f       	mov	r30, r24
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <pin_XOR+0x10>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	6a 95       	dec	r22
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <pin_XOR+0xc>
     4c4:	28 27       	eor	r18, r24
     4c6:	22 83       	std	Z+2, r18	; 0x02
     4c8:	08 95       	ret

000004ca <Init>:
			}
		}
	}
}
void Init(void){
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     4ca:	81 b3       	in	r24, 0x11	; 17
     4cc:	80 6b       	ori	r24, 0xB0	; 176
     4ce:	81 bb       	out	0x11, r24	; 17
	DDRC = 0XFF;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	84 bb       	out	0x14, r24	; 20
	ADCSRA = 0x87; //to active A/D pins
     4d4:	87 e8       	ldi	r24, 0x87	; 135
     4d6:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     4d8:	3e 9a       	sbi	0x07, 6	; 7
	UART_INIT();
     4da:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_INIT>
	motor_init();
     4de:	0e 94 ff 11 	call	0x23fe	; 0x23fe <motor_init>
	pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);
     4e2:	21 ed       	ldi	r18, 0xD1	; 209
     4e4:	31 e0       	ldi	r19, 0x01	; 1
     4e6:	40 ea       	ldi	r20, 0xA0	; 160
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	6c e3       	ldi	r22, 0x3C	; 60
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	84 eb       	ldi	r24, 0xB4	; 180
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 18 12 	call	0x2430	; 0x2430 <pid_Init>
	TCNT0 = 0;
     4f6:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS02) | (1<<CS00); // PRESCALER 1024
     4f8:	83 b7       	in	r24, 0x33	; 51
     4fa:	85 60       	ori	r24, 0x05	; 5
     4fc:	83 bf       	out	0x33, r24	; 51
	/*set fast PWM mode with non-inverted output*/
	TCCR0	|= (1<<WGM00)	| (1<<WGM01)	| (1<<COM01) | (1<<CS00);
     4fe:	83 b7       	in	r24, 0x33	; 51
     500:	89 66       	ori	r24, 0x69	; 105
     502:	83 bf       	out	0x33, r24	; 51
	TCCR1A	|= (1<<COM1A1)	| (1<<COM1B1)	| (1<<WGM10);
     504:	8f b5       	in	r24, 0x2f	; 47
     506:	81 6a       	ori	r24, 0xA1	; 161
     508:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	|= (1<<CS10);
     50a:	8e b5       	in	r24, 0x2e	; 46
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)	| (1<<WGM21)	| (1<<COM21) | (1<<CS20);
     510:	85 b5       	in	r24, 0x25	; 37
     512:	89 66       	ori	r24, 0x69	; 105
     514:	85 bd       	out	0x25, r24	; 37
	DDRB	|= (1<<PB3);  /*set OC0 pin as output*/
     516:	bb 9a       	sbi	0x17, 3	; 23
	TIMSK	|= (1<<TOIE0)	| (1<<TOIE1) ;
     518:	89 b7       	in	r24, 0x39	; 57
     51a:	85 60       	ori	r24, 0x05	; 5
     51c:	89 bf       	out	0x39, r24	; 57
	sei();
     51e:	78 94       	sei
     520:	08 95       	ret

00000522 <ADC_value>:
}
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     522:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     524:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     526:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     528:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     52a:	84 b1       	in	r24, 0x04	; 4
     52c:	95 b1       	in	r25, 0x05	; 5
}
     52e:	08 95       	ret

00000530 <getTemp>:
double getTemp(uint8_t ADC_pin)
{
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     540:	0e 94 91 02 	call	0x522	; 0x522 <ADC_value>
     544:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <Vo+0x1>
     548:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     54c:	bc 01       	movw	r22, r24
     54e:	99 0f       	add	r25, r25
     550:	88 0b       	sbc	r24, r24
     552:	99 0b       	sbc	r25, r25
     554:	0e 94 49 14 	call	0x2892	; 0x2892 <__floatsisf>
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 ec       	ldi	r23, 0xC0	; 192
     560:	8f e7       	ldi	r24, 0x7F	; 127
     562:	94 e4       	ldi	r25, 0x44	; 68
     564:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5f e3       	ldi	r21, 0x3F	; 63
     570:	0e 94 28 13 	call	0x2650	; 0x2650 <__subsf3>
     574:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <R1>
     578:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <R1+0x1>
     57c:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <R1+0x2>
     580:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <R1+0x3>
     584:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     588:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <R2>
     58c:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <R2+0x1>
     590:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <R2+0x2>
     594:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <R2+0x3>
	logR2 = log(R2);
     598:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <log>
     59c:	6b 01       	movw	r12, r22
     59e:	7c 01       	movw	r14, r24
     5a0:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <logR2>
     5a4:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <logR2+0x1>
     5a8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <logR2+0x2>
     5ac:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
     5b0:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <c2>
     5b4:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <c2+0x1>
     5b8:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <c2+0x2>
     5bc:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <c2+0x3>
     5c0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     5c4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <c1>
     5c8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <c1+0x1>
     5cc:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <c1+0x2>
     5d0:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <c1+0x3>
     5d4:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
     5d8:	4b 01       	movw	r8, r22
     5da:	5c 01       	movw	r10, r24
     5dc:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <c3>
     5e0:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <c3+0x1>
     5e4:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <c3+0x2>
     5e8:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <c3+0x3>
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     5f4:	a7 01       	movw	r20, r14
     5f6:	96 01       	movw	r18, r12
     5f8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	c5 01       	movw	r24, r10
     60a:	b4 01       	movw	r22, r8
     60c:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
     610:	9b 01       	movw	r18, r22
     612:	ac 01       	movw	r20, r24
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e8       	ldi	r24, 0x80	; 128
     61a:	9f e3       	ldi	r25, 0x3F	; 63
     61c:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
     620:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <T>
     624:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <T+0x1>
     628:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <T+0x2>
     62c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <T+0x3>
	Tc = T - 273.15;
     630:	23 e3       	ldi	r18, 0x33	; 51
     632:	33 e9       	ldi	r19, 0x93	; 147
     634:	48 e8       	ldi	r20, 0x88	; 136
     636:	53 e4       	ldi	r21, 0x43	; 67
     638:	0e 94 28 13 	call	0x2650	; 0x2650 <__subsf3>
     63c:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <Tc>
     640:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <Tc+0x1>
     644:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Tc+0x2>
     648:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <Tc+0x3>
	return (Tc);
}
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <main>:
double I;
double J;
double R;
long wait;
int main(void)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	e3 97       	sbiw	r28, 0x33	; 51
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
    Init();
     672:	0e 94 65 02 	call	0x4ca	; 0x4ca <Init>
	//three variables that contain numbers that convert from string/
	double value_1;
	double value_2;
	double value_3;
	int val = 0;
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     676:	45 e0       	ldi	r20, 0x05	; 5
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	69 e5       	ldi	r22, 0x59	; 89
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     686:	45 e0       	ldi	r20, 0x05	; 5
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	61 e3       	ldi	r22, 0x31	; 49
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     696:	45 e0       	ldi	r20, 0x05	; 5
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	63 ec       	ldi	r22, 0xC3	; 195
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	8a e0       	ldi	r24, 0x0A	; 10
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     6a6:	45 e0       	ldi	r20, 0x05	; 5
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	6b e1       	ldi	r22, 0x1B	; 27
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     6b6:	89 e5       	ldi	r24, 0x59	; 89
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
     6be:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <Xspm>
     6c2:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <Xspm+0x1>
     6c6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <Xspm+0x2>
     6ca:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <Xspm+0x3>
	Yspm = atof(Y_pos);
     6ce:	81 e3       	ldi	r24, 0x31	; 49
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
     6d6:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <Yspm>
     6da:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <Yspm+0x1>
     6de:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Yspm+0x2>
     6e2:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <Yspm+0x3>
	Zspm = atof(Z_pos);
     6e6:	83 ec       	ldi	r24, 0xC3	; 195
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
     6ee:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <Zspm>
     6f2:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <Zspm+0x1>
     6f6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Zspm+0x2>
     6fa:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <Zspm+0x3>
	Espm = atof(E_pos);
     6fe:	8b e1       	ldi	r24, 0x1B	; 27
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
     706:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <Espm>
     70a:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <Espm+0x1>
     70e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Espm+0x2>
     712:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Espm+0x3>
     716:	0f 2e       	mov	r0, r31
     718:	fb eb       	ldi	r31, 0xBB	; 187
     71a:	6f 2e       	mov	r6, r31
     71c:	f1 e0       	ldi	r31, 0x01	; 1
     71e:	7f 2e       	mov	r7, r31
     720:	f0 2d       	mov	r31, r0
									motor_movement(step,F,Fe);
								}
								else
								{
									double step[4]={x*Xspm*(I/I),y*Yspm*(J/J),0,1*Espm};
									motor_movement(step,F,Fe);
     722:	9e 01       	movw	r18, r28
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	3b a3       	std	Y+35, r19	; 0x23
     72a:	2a a3       	std	Y+34, r18	; 0x22
     72c:	3a a1       	ldd	r19, Y+34	; 0x22
     72e:	39 ab       	std	Y+49, r19	; 0x31
     730:	4b a1       	ldd	r20, Y+35	; 0x23
     732:	4c a7       	std	Y+44, r20	; 0x2c
	Yspm = atof(Y_pos);
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	while (1)
	{
		if (status == 0)
     734:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <status>
     738:	81 11       	cpse	r24, r1
     73a:	0a c0       	rjmp	.+20     	; 0x750 <main+0xf2>
     73c:	eb e6       	ldi	r30, 0x6B	; 107
     73e:	f1 e0       	ldi	r31, 0x01	; 1
		{
			for (int i = 0 ; i < 80 ;i++)
			{
		 		String [i] = 0;
     740:	11 92       	st	Z+, r1
	Espm = atof(E_pos);
	while (1)
	{
		if (status == 0)
		{
			for (int i = 0 ; i < 80 ;i++)
     742:	6e 16       	cp	r6, r30
     744:	7f 06       	cpc	r7, r31
     746:	e1 f7       	brne	.-8      	; 0x740 <main+0xe2>
			{
		 		String [i] = 0;
			}
			Recive_Data(String);
     748:	8b e6       	ldi	r24, 0x6B	; 107
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 0d 13 	call	0x261a	; 0x261a <Recive_Data>
		}
		if (String[0] == 'M')
     750:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <String>
     754:	8d 34       	cpi	r24, 0x4D	; 77
     756:	09 f0       	breq	.+2      	; 0x75a <main+0xfc>
     758:	56 c6       	rjmp	.+3244   	; 0x1406 <main+0xda8>
		{
			val = get_int (String,'M');
     75a:	6d e4       	ldi	r22, 0x4D	; 77
     75c:	8b e6       	ldi	r24, 0x6B	; 107
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 b1 01 	call	0x362	; 0x362 <get_int>
			switch (val)
     764:	8b 36       	cpi	r24, 0x6B	; 107
     766:	91 05       	cpc	r25, r1
     768:	09 f4       	brne	.+2      	; 0x76c <main+0x10e>
     76a:	30 c3       	rjmp	.+1632   	; 0xdcc <main+0x76e>
     76c:	74 f5       	brge	.+92     	; 0x7ca <main+0x16c>
     76e:	83 35       	cpi	r24, 0x53	; 83
     770:	91 05       	cpc	r25, r1
     772:	09 f4       	brne	.+2      	; 0x776 <main+0x118>
     774:	3c c1       	rjmp	.+632    	; 0x9ee <main+0x390>
     776:	94 f4       	brge	.+36     	; 0x79c <main+0x13e>
     778:	81 31       	cpi	r24, 0x11	; 17
     77a:	91 05       	cpc	r25, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <main+0x122>
     77e:	a1 c0       	rjmp	.+322    	; 0x8c2 <main+0x264>
     780:	24 f4       	brge	.+8      	; 0x78a <main+0x12c>
     782:	02 97       	sbiw	r24, 0x02	; 2
     784:	08 f4       	brcc	.+2      	; 0x788 <main+0x12a>
     786:	58 c0       	rjmp	.+176    	; 0x838 <main+0x1da>
     788:	d5 cf       	rjmp	.-86     	; 0x734 <main+0xd6>
     78a:	82 31       	cpi	r24, 0x12	; 18
     78c:	91 05       	cpc	r25, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <main+0x134>
     790:	9f c0       	rjmp	.+318    	; 0x8d0 <main+0x272>
     792:	82 35       	cpi	r24, 0x52	; 82
     794:	91 05       	cpc	r25, r1
     796:	09 f4       	brne	.+2      	; 0x79a <main+0x13c>
     798:	1d c1       	rjmp	.+570    	; 0x9d4 <main+0x376>
     79a:	cc cf       	rjmp	.-104    	; 0x734 <main+0xd6>
     79c:	88 36       	cpi	r24, 0x68	; 104
     79e:	91 05       	cpc	r25, r1
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0x146>
     7a2:	69 c2       	rjmp	.+1234   	; 0xc76 <main+0x618>
     7a4:	4c f4       	brge	.+18     	; 0x7b8 <main+0x15a>
     7a6:	84 35       	cpi	r24, 0x54	; 84
     7a8:	91 05       	cpc	r25, r1
     7aa:	09 f4       	brne	.+2      	; 0x7ae <main+0x150>
     7ac:	91 c0       	rjmp	.+290    	; 0x8d0 <main+0x272>
     7ae:	8c 35       	cpi	r24, 0x5C	; 92
     7b0:	91 05       	cpc	r25, r1
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x158>
     7b4:	51 c1       	rjmp	.+674    	; 0xa58 <main+0x3fa>
     7b6:	be cf       	rjmp	.-132    	; 0x734 <main+0xd6>
     7b8:	89 36       	cpi	r24, 0x69	; 105
     7ba:	91 05       	cpc	r25, r1
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <main+0x162>
     7be:	6d c2       	rjmp	.+1242   	; 0xc9a <main+0x63c>
     7c0:	8a 36       	cpi	r24, 0x6A	; 106
     7c2:	91 05       	cpc	r25, r1
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <main+0x16a>
     7c6:	f5 c2       	rjmp	.+1514   	; 0xdb2 <main+0x754>
     7c8:	b5 cf       	rjmp	.-150    	; 0x734 <main+0xd6>
     7ca:	8e 3c       	cpi	r24, 0xCE	; 206
     7cc:	91 05       	cpc	r25, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x174>
     7d0:	d0 c4       	rjmp	.+2464   	; 0x1172 <main+0xb14>
     7d2:	bc f4       	brge	.+46     	; 0x802 <main+0x1a4>
     7d4:	82 37       	cpi	r24, 0x72	; 114
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <main+0x17e>
     7da:	fa c3       	rjmp	.+2036   	; 0xfd0 <main+0x972>
     7dc:	4c f4       	brge	.+18     	; 0x7f0 <main+0x192>
     7de:	8d 36       	cpi	r24, 0x6D	; 109
     7e0:	91 05       	cpc	r25, r1
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x188>
     7e4:	f9 c2       	rjmp	.+1522   	; 0xdd8 <main+0x77a>
     7e6:	80 37       	cpi	r24, 0x70	; 112
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <main+0x190>
     7ec:	44 c3       	rjmp	.+1672   	; 0xe76 <main+0x818>
     7ee:	a2 cf       	rjmp	.-188    	; 0x734 <main+0xd6>
     7f0:	8c 38       	cpi	r24, 0x8C	; 140
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <main+0x19a>
     7f6:	82 c4       	rjmp	.+2308   	; 0x10fc <main+0xa9e>
     7f8:	8e 3b       	cpi	r24, 0xBE	; 190
     7fa:	91 05       	cpc	r25, r1
     7fc:	09 f4       	brne	.+2      	; 0x800 <main+0x1a2>
     7fe:	93 c4       	rjmp	.+2342   	; 0x1126 <main+0xac8>
     800:	99 cf       	rjmp	.-206    	; 0x734 <main+0xd6>
     802:	85 3f       	cpi	r24, 0xF5	; 245
     804:	51 e0       	ldi	r21, 0x01	; 1
     806:	95 07       	cpc	r25, r21
     808:	09 f4       	brne	.+2      	; 0x80c <main+0x1ae>
     80a:	eb c4       	rjmp	.+2518   	; 0x11e2 <main+0xb84>
     80c:	5c f4       	brge	.+22     	; 0x824 <main+0x1c6>
     80e:	8e 32       	cpi	r24, 0x2E	; 46
     810:	a1 e0       	ldi	r26, 0x01	; 1
     812:	9a 07       	cpc	r25, r26
     814:	09 f4       	brne	.+2      	; 0x818 <main+0x1ba>
     816:	cd c4       	rjmp	.+2458   	; 0x11b2 <main+0xb54>
     818:	84 3f       	cpi	r24, 0xF4	; 244
     81a:	b1 e0       	ldi	r27, 0x01	; 1
     81c:	9b 07       	cpc	r25, r27
     81e:	09 f4       	brne	.+2      	; 0x822 <main+0x1c4>
     820:	1b c1       	rjmp	.+566    	; 0xa58 <main+0x3fa>
     822:	88 cf       	rjmp	.-240    	; 0x734 <main+0xd6>
     824:	86 3f       	cpi	r24, 0xF6	; 246
     826:	e1 e0       	ldi	r30, 0x01	; 1
     828:	9e 07       	cpc	r25, r30
     82a:	09 f4       	brne	.+2      	; 0x82e <main+0x1d0>
     82c:	15 c1       	rjmp	.+554    	; 0xa58 <main+0x3fa>
     82e:	87 3f       	cpi	r24, 0xF7	; 247
     830:	91 40       	sbci	r25, 0x01	; 1
     832:	09 f4       	brne	.+2      	; 0x836 <main+0x1d8>
     834:	2b c5       	rjmp	.+2646   	; 0x128c <main+0xc2e>
     836:	7e cf       	rjmp	.-260    	; 0x734 <main+0xd6>
			{
				case 0: case 1:
					x = 0;
     838:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <x>
     83c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <x+0x1>
     840:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <x+0x2>
     844:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <x+0x3>
					y = 0;
     848:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <y>
     84c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <y+0x1>
     850:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <y+0x2>
     854:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <y+0x3>
					z = 0;
     858:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <z>
     85c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <z+0x1>
     860:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <z+0x2>
     864:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <z+0x3>
					EX = 0;
     868:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <EX>
     86c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <EX+0x1>
     870:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <EX+0x2>
     874:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <EX+0x3>
					F = 0;
     878:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <F>
     87c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <F+0x1>
     880:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <F+0x2>
     884:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <F+0x3>
					Fe = 0;
     888:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <Fe>
     88c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <Fe+0x1>
     890:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Fe+0x2>
     894:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Fe+0x3>
					SE0 = 0.0;
     898:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SE0>
     89c:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <SE0+0x1>
     8a0:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <SE0+0x2>
     8a4:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <SE0+0x3>
					SB = 0.0;
     8a8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <SB>
     8ac:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <SB+0x1>
     8b0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <SB+0x2>
     8b4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SB+0x3>
					Transmit_Data("ok");
     8b8:	8e eb       	ldi	r24, 0xBE	; 190
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     8c0:	39 cf       	rjmp	.-398    	; 0x734 <main+0xd6>
				case 17:
					motor_init();
     8c2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <motor_init>
					Transmit_Data("ok");
     8c6:	8e eb       	ldi	r24, 0xBE	; 190
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     8ce:	32 cf       	rjmp	.-412    	; 0x734 <main+0xd6>
				case 18: case 84:
					wait = (get_int(String ,'S')*1000);
     8d0:	63 e5       	ldi	r22, 0x53	; 83
     8d2:	8b e6       	ldi	r24, 0x6B	; 107
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 b1 01 	call	0x362	; 0x362 <get_int>
     8da:	9c 01       	movw	r18, r24
     8dc:	48 ee       	ldi	r20, 0xE8	; 232
     8de:	53 e0       	ldi	r21, 0x03	; 3
     8e0:	24 9f       	mul	r18, r20
     8e2:	c0 01       	movw	r24, r0
     8e4:	25 9f       	mul	r18, r21
     8e6:	90 0d       	add	r25, r0
     8e8:	34 9f       	mul	r19, r20
     8ea:	90 0d       	add	r25, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	09 2e       	mov	r0, r25
     8f0:	00 0c       	add	r0, r0
     8f2:	aa 0b       	sbc	r26, r26
     8f4:	bb 0b       	sbc	r27, r27
     8f6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <wait>
     8fa:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <wait+0x1>
     8fe:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <wait+0x2>
     902:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <wait+0x3>
					status = 1;
     906:	51 e0       	ldi	r21, 0x01	; 1
     908:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <status>
					XEN_DES = find(String ,'X');
     90c:	68 e5       	ldi	r22, 0x58	; 88
     90e:	8b e6       	ldi	r24, 0x6B	; 107
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
     916:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <XEN_DES>
					YEN_DES = find(String ,'Y');
     91a:	69 e5       	ldi	r22, 0x59	; 89
     91c:	8b e6       	ldi	r24, 0x6B	; 107
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
     924:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <YEN_DES>
					ZEN_DES = find(String ,'Z');
     928:	6a e5       	ldi	r22, 0x5A	; 90
     92a:	8b e6       	ldi	r24, 0x6B	; 107
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
     932:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ZEN_DES>
					EEN_DES = find(String ,'E');
     936:	65 e4       	ldi	r22, 0x45	; 69
     938:	8b e6       	ldi	r24, 0x6B	; 107
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
     940:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     944:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <XEN_DES>
     948:	88 e5       	ldi	r24, 0x58	; 88
     94a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     94e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <YEN_DES>
     952:	89 e5       	ldi	r24, 0x59	; 89
     954:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     958:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <YEN_DES>
     95c:	8a e5       	ldi	r24, 0x5A	; 90
     95e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     962:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <EEN_DES>
     966:	85 e4       	ldi	r24, 0x45	; 69
     968:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
					if(wait != 0)
     96c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <wait>
     970:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <wait+0x1>
     974:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <wait+0x2>
     978:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <wait+0x3>
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	a1 05       	cpc	r26, r1
     980:	b1 05       	cpc	r27, r1
     982:	09 f1       	breq	.+66     	; 0x9c6 <main+0x368>
					{
						while(wait > 0)
     984:	f4 f0       	brlt	.+60     	; 0x9c2 <main+0x364>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     986:	8f e9       	ldi	r24, 0x9F	; 159
     988:	9f e0       	ldi	r25, 0x0F	; 15
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <main+0x32c>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <main+0x332>
     990:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     992:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <wait>
     996:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <wait+0x1>
     99a:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <wait+0x2>
     99e:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <wait+0x3>
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	a1 09       	sbc	r26, r1
     9a6:	b1 09       	sbc	r27, r1
     9a8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <wait>
     9ac:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <wait+0x1>
     9b0:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <wait+0x2>
     9b4:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     9b8:	18 16       	cp	r1, r24
     9ba:	19 06       	cpc	r1, r25
     9bc:	1a 06       	cpc	r1, r26
     9be:	1b 06       	cpc	r1, r27
     9c0:	14 f3       	brlt	.-60     	; 0x986 <main+0x328>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     9c2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <motor_init>
					}
					status = 0;
     9c6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
					Transmit_Data("ok");
     9ca:	8e eb       	ldi	r24, 0xBE	; 190
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     9d2:	b0 ce       	rjmp	.-672    	; 0x734 <main+0xd6>
				case 82:
					EX = 0;
     9d4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <EX>
     9d8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <EX+0x1>
     9dc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <EX+0x2>
     9e0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <EX+0x3>
					Transmit_Data("ok");
     9e4:	8e eb       	ldi	r24, 0xBE	; 190
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     9ec:	a3 ce       	rjmp	.-698    	; 0x734 <main+0xd6>
				case 83:
					old_val_1 = 0;
     9ee:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <old_val_1.2347>
     9f2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <old_val_1.2347+0x1>
     9f6:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <old_val_1.2347+0x2>
     9fa:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <old_val_1.2347+0x3>
					old_val_2 = 0;
     9fe:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <old_val_2.2348>
     a02:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <old_val_2.2348+0x1>
     a06:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <old_val_2.2348+0x2>
     a0a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <old_val_2.2348+0x3>
					old_val_3 = 0;
     a0e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <old_val_3.2349>
     a12:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <old_val_3.2349+0x1>
     a16:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <old_val_3.2349+0x2>
     a1a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <old_val_3.2349+0x3>
					x = 0;
     a1e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <x>
     a22:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <x+0x1>
     a26:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <x+0x2>
     a2a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <x+0x3>
					y = 0;
     a2e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <y>
     a32:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <y+0x1>
     a36:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <y+0x2>
     a3a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <y+0x3>
					z = 0;
     a3e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <z>
     a42:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <z+0x1>
     a46:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <z+0x2>
     a4a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <z+0x3>
					Transmit_Data("ok");
     a4e:	8e eb       	ldi	r24, 0xBE	; 190
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     a56:	6e ce       	rjmp	.-804    	; 0x734 <main+0xd6>
     a58:	e9 e5       	ldi	r30, 0x59	; 89
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	41 e3       	ldi	r20, 0x31	; 49
     a5e:	51 e0       	ldi	r21, 0x01	; 1
     a60:	23 ec       	ldi	r18, 0xC3	; 195
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	ab e1       	ldi	r26, 0x1B	; 27
     a66:	b1 e0       	ldi	r27, 0x01	; 1
     a68:	7d 01       	movw	r14, r26
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     a6a:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     a6c:	da 01       	movw	r26, r20
     a6e:	1d 92       	st	X+, r1
     a70:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
     a72:	d9 01       	movw	r26, r18
     a74:	1d 92       	st	X+, r1
     a76:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
     a78:	d7 01       	movw	r26, r14
     a7a:	1d 92       	st	X+, r1
     a7c:	7d 01       	movw	r14, r26
					y = 0;
					z = 0;
					Transmit_Data("ok");
					break;
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
     a7e:	b1 e0       	ldi	r27, 0x01	; 1
     a80:	e3 36       	cpi	r30, 0x63	; 99
     a82:	fb 07       	cpc	r31, r27
     a84:	91 f7       	brne	.-28     	; 0xa6a <main+0x40c>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
     a86:	8c 35       	cpi	r24, 0x5C	; 92
     a88:	91 05       	cpc	r25, r1
     a8a:	a9 f5       	brne	.+106    	; 0xaf6 <main+0x498>
					{
						Xspm = get_value(String,'X');
     a8c:	68 e5       	ldi	r22, 0x58	; 88
     a8e:	8b e6       	ldi	r24, 0x6B	; 107
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     a96:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <Xspm>
     a9a:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <Xspm+0x1>
     a9e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <Xspm+0x2>
     aa2:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <Xspm+0x3>
						Yspm = get_value(String,'Y');
     aa6:	69 e5       	ldi	r22, 0x59	; 89
     aa8:	8b e6       	ldi	r24, 0x6B	; 107
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     ab0:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <Yspm>
     ab4:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <Yspm+0x1>
     ab8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Yspm+0x2>
     abc:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <Yspm+0x3>
						Zspm = get_value(String,'Z');
     ac0:	6a e5       	ldi	r22, 0x5A	; 90
     ac2:	8b e6       	ldi	r24, 0x6B	; 107
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     aca:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <Zspm>
     ace:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <Zspm+0x1>
     ad2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Zspm+0x2>
     ad6:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <Zspm+0x3>
						Espm = get_value(String,'E');
     ada:	65 e4       	ldi	r22, 0x45	; 69
     adc:	8b e6       	ldi	r24, 0x6B	; 107
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     ae4:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <Espm>
     ae8:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <Espm+0x1>
     aec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Espm+0x2>
     af0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Espm+0x3>
     af4:	44 c0       	rjmp	.+136    	; 0xb7e <main+0x520>
					}
					if (val == 502)
     af6:	86 3f       	cpi	r24, 0xF6	; 246
     af8:	91 40       	sbci	r25, 0x01	; 1
     afa:	09 f0       	breq	.+2      	; 0xafe <main+0x4a0>
     afc:	40 c0       	rjmp	.+128    	; 0xb7e <main+0x520>
					{
						Xspm = FXspm;
     afe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <FXspm>
     b02:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <FXspm+0x1>
     b06:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <FXspm+0x2>
     b0a:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <FXspm+0x3>
     b0e:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <Xspm>
     b12:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <Xspm+0x1>
     b16:	a0 93 c1 01 	sts	0x01C1, r26	; 0x8001c1 <Xspm+0x2>
     b1a:	b0 93 c2 01 	sts	0x01C2, r27	; 0x8001c2 <Xspm+0x3>
						Yspm = FYspm;
     b1e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <FYspm>
     b22:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <FYspm+0x1>
     b26:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <FYspm+0x2>
     b2a:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <FYspm+0x3>
     b2e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Yspm>
     b32:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Yspm+0x1>
     b36:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <Yspm+0x2>
     b3a:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <Yspm+0x3>
						Zspm = FZspm;
     b3e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <FZspm>
     b42:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <FZspm+0x1>
     b46:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <FZspm+0x2>
     b4a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <FZspm+0x3>
     b4e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Zspm>
     b52:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Zspm+0x1>
     b56:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Zspm+0x2>
     b5a:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Zspm+0x3>
						Espm = FEspm;
     b5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <FEspm>
     b62:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FEspm+0x1>
     b66:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <FEspm+0x2>
     b6a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <FEspm+0x3>
     b6e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Espm>
     b72:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Espm+0x1>
     b76:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <Espm+0x2>
     b7a:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
     b7e:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <Xspm>
     b82:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <Xspm+0x1>
     b86:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Xspm+0x2>
     b8a:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <Xspm+0x3>
     b8e:	01 ec       	ldi	r16, 0xC1	; 193
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	23 e0       	ldi	r18, 0x03	; 3
     b94:	42 e0       	ldi	r20, 0x02	; 2
     b96:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	29 e5       	ldi	r18, 0x59	; 89
     ba0:	31 e0       	ldi	r19, 0x01	; 1
     ba2:	3f 93       	push	r19
     ba4:	2f 93       	push	r18
     ba6:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
     baa:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <Yspm>
     bae:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <Yspm+0x1>
     bb2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Yspm+0x2>
     bb6:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <Yspm+0x3>
     bba:	23 e0       	ldi	r18, 0x03	; 3
     bbc:	42 e0       	ldi	r20, 0x02	; 2
     bbe:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	81 e3       	ldi	r24, 0x31	; 49
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
     bd2:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <Zspm>
     bd6:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <Zspm+0x1>
     bda:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Zspm+0x2>
     bde:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Zspm+0x3>
     be2:	23 e0       	ldi	r18, 0x03	; 3
     be4:	42 e0       	ldi	r20, 0x02	; 2
     be6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	e3 ec       	ldi	r30, 0xC3	; 195
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	ff 93       	push	r31
     bf4:	ef 93       	push	r30
     bf6:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
     bfa:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Espm>
     bfe:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <Espm+0x1>
     c02:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Espm+0x2>
     c06:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Espm+0x3>
     c0a:	23 e0       	ldi	r18, 0x03	; 3
     c0c:	42 e0       	ldi	r20, 0x02	; 2
     c0e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	4b e1       	ldi	r20, 0x1B	; 27
     c18:	51 e0       	ldi	r21, 0x01	; 1
     c1a:	5f 93       	push	r21
     c1c:	4f 93       	push	r20
     c1e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     c22:	45 e0       	ldi	r20, 0x05	; 5
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	69 e5       	ldi	r22, 0x59	; 89
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     c32:	45 e0       	ldi	r20, 0x05	; 5
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	61 e3       	ldi	r22, 0x31	; 49
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	85 e0       	ldi	r24, 0x05	; 5
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     c42:	45 e0       	ldi	r20, 0x05	; 5
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	63 ec       	ldi	r22, 0xC3	; 195
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	8a e0       	ldi	r24, 0x0A	; 10
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     c52:	45 e0       	ldi	r20, 0x05	; 5
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	6b e1       	ldi	r22, 0x1B	; 27
     c58:	71 e0       	ldi	r23, 0x01	; 1
     c5a:	8f e0       	ldi	r24, 0x0F	; 15
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok");
     c62:	8e eb       	ldi	r24, 0xBE	; 190
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	5f cd       	rjmp	.-1346   	; 0x734 <main+0xd6>
				case 104:
					SE0 = get_value(String,'S');
     c76:	63 e5       	ldi	r22, 0x53	; 83
     c78:	8b e6       	ldi	r24, 0x6B	; 107
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     c80:	60 93 fc 00 	sts	0x00FC, r22	; 0x8000fc <SE0>
     c84:	70 93 fd 00 	sts	0x00FD, r23	; 0x8000fd <SE0+0x1>
     c88:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <SE0+0x2>
     c8c:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <SE0+0x3>
					Transmit_Data("ok");
     c90:	8e eb       	ldi	r24, 0xBE	; 190
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     c98:	4d cd       	rjmp	.-1382   	; 0x734 <main+0xd6>
     c9a:	e7 ee       	ldi	r30, 0xE7	; 231
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	a9 e0       	ldi	r26, 0x09	; 9
     ca0:	b1 e0       	ldi	r27, 0x01	; 1
				case 105:
					for (int i = 0 ; i < 10 ; i ++)
					{
						TE[i] = 0;
     ca2:	11 92       	st	Z+, r1
						TB[i] = 0;
     ca4:	1d 92       	st	X+, r1
				case 104:
					SE0 = get_value(String,'S');
					Transmit_Data("ok");
					break;
				case 105:
					for (int i = 0 ; i < 10 ; i ++)
     ca6:	21 ef       	ldi	r18, 0xF1	; 241
     ca8:	31 e0       	ldi	r19, 0x01	; 1
     caa:	2e 17       	cp	r18, r30
     cac:	3f 07       	cpc	r19, r31
     cae:	c9 f7       	brne	.-14     	; 0xca2 <main+0x644>
					{
						TE[i] = 0;
						TB[i] = 0;
					}
					sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
     cb0:	80 e5       	ldi	r24, 0x50	; 80
     cb2:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
     cb6:	01 ec       	ldi	r16, 0xC1	; 193
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	23 e0       	ldi	r18, 0x03	; 3
     cbc:	42 e0       	ldi	r20, 0x02	; 2
     cbe:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	47 ee       	ldi	r20, 0xE7	; 231
     cc8:	51 e0       	ldi	r21, 0x01	; 1
     cca:	5f 93       	push	r21
     ccc:	4f 93       	push	r20
     cce:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
     cd2:	82 e5       	ldi	r24, 0x52	; 82
     cd4:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
     cd8:	23 e0       	ldi	r18, 0x03	; 3
     cda:	42 e0       	ldi	r20, 0x02	; 2
     cdc:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	89 e0       	ldi	r24, 0x09	; 9
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					if (( BED_Activ))
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <BED_Activ>
     cfe:	88 23       	and	r24, r24
     d00:	b1 f1       	breq	.+108    	; 0xd6e <main+0x710>
					{
						char TEMP[20]={'T',':',
     d02:	84 e5       	ldi	r24, 0x54	; 84
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	8a e3       	ldi	r24, 0x3A	; 58
     d08:	8a 83       	std	Y+2, r24	; 0x02
     d0a:	a7 ee       	ldi	r26, 0xE7	; 231
     d0c:	b1 e0       	ldi	r27, 0x01	; 1
     d0e:	9c 91       	ld	r25, X
     d10:	9b 83       	std	Y+3, r25	; 0x03
     d12:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <TE+0x1>
     d16:	9c 83       	std	Y+4, r25	; 0x04
     d18:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <TE+0x2>
     d1c:	9d 83       	std	Y+5, r25	; 0x05
     d1e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <TE+0x3>
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <TE+0x4>
     d28:	9f 83       	std	Y+7, r25	; 0x07
     d2a:	90 e2       	ldi	r25, 0x20	; 32
     d2c:	98 87       	std	Y+8, r25	; 0x08
     d2e:	25 e4       	ldi	r18, 0x45	; 69
     d30:	29 87       	std	Y+9, r18	; 0x09
     d32:	8a 87       	std	Y+10, r24	; 0x0a
     d34:	20 e3       	ldi	r18, 0x30	; 48
     d36:	2b 87       	std	Y+11, r18	; 0x0b
     d38:	9c 87       	std	Y+12, r25	; 0x0c
     d3a:	92 e4       	ldi	r25, 0x42	; 66
     d3c:	9d 87       	std	Y+13, r25	; 0x0d
     d3e:	8e 87       	std	Y+14, r24	; 0x0e
     d40:	e9 e0       	ldi	r30, 0x09	; 9
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	80 81       	ld	r24, Z
     d46:	8f 87       	std	Y+15, r24	; 0x0f
     d48:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TB+0x1>
     d4c:	88 8b       	std	Y+16, r24	; 0x10
     d4e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TB+0x2>
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TB+0x3>
     d58:	8a 8b       	std	Y+18, r24	; 0x12
     d5a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <TB+0x4>
     d5e:	8b 8b       	std	Y+19, r24	; 0x13
     d60:	8d e0       	ldi	r24, 0x0D	; 13
     d62:	8c 8b       	std	Y+20, r24	; 0x14
							TE[0],TE[1],TE[2],TE[3],TE[4],
							' ','E',':','0',' ',
						'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
						Transmit_Data(TEMP);
     d64:	89 a9       	ldd	r24, Y+49	; 0x31
     d66:	9c a5       	ldd	r25, Y+44	; 0x2c
     d68:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
     d6c:	e3 cc       	rjmp	.-1594   	; 0x734 <main+0xd6>
					} 
					else
					{
						char TEMP[12]={'T',':',
     d6e:	84 e5       	ldi	r24, 0x54	; 84
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	8a e3       	ldi	r24, 0x3A	; 58
     d74:	8a 83       	std	Y+2, r24	; 0x02
     d76:	a7 ee       	ldi	r26, 0xE7	; 231
     d78:	b1 e0       	ldi	r27, 0x01	; 1
     d7a:	9c 91       	ld	r25, X
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <TE+0x1>
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <TE+0x2>
     d88:	9d 83       	std	Y+5, r25	; 0x05
     d8a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <TE+0x3>
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <TE+0x4>
     d94:	9f 83       	std	Y+7, r25	; 0x07
     d96:	90 e2       	ldi	r25, 0x20	; 32
     d98:	98 87       	std	Y+8, r25	; 0x08
     d9a:	95 e4       	ldi	r25, 0x45	; 69
     d9c:	99 87       	std	Y+9, r25	; 0x09
     d9e:	8a 87       	std	Y+10, r24	; 0x0a
     da0:	80 e3       	ldi	r24, 0x30	; 48
     da2:	8b 87       	std	Y+11, r24	; 0x0b
     da4:	8d e0       	ldi	r24, 0x0D	; 13
     da6:	8c 87       	std	Y+12, r24	; 0x0c
							TE[0],TE[1],TE[2],TE[3],TE[4],
						' ','E',':','0','\r'};
						Transmit_Data(TEMP);
     da8:	89 a9       	ldd	r24, Y+49	; 0x31
     daa:	9c a5       	ldd	r25, Y+44	; 0x2c
     dac:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
     db0:	c1 cc       	rjmp	.-1662   	; 0x734 <main+0xd6>
					} 
					break;
				case 106:
					OCR2 = get_value(String,'S');
     db2:	63 e5       	ldi	r22, 0x53	; 83
     db4:	8b e6       	ldi	r24, 0x6B	; 107
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     dbc:	0e 94 18 14 	call	0x2830	; 0x2830 <__fixunssfsi>
     dc0:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok");
     dc2:	8e eb       	ldi	r24, 0xBE	; 190
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     dca:	b4 cc       	rjmp	.-1688   	; 0x734 <main+0xd6>
				case 107:
					OCR2 = 0;
     dcc:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok");
     dce:	8e eb       	ldi	r24, 0xBE	; 190
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     dd6:	ae cc       	rjmp	.-1700   	; 0x734 <main+0xd6>
				case 109:
					B = get_value(String,'B');
     dd8:	62 e4       	ldi	r22, 0x42	; 66
     dda:	8b e6       	ldi	r24, 0x6B	; 107
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     de2:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <B>
     de6:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <B+0x1>
     dea:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <B+0x2>
     dee:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <B+0x3>
					if (B == 0)
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	a9 01       	movw	r20, r18
     df8:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
     dfc:	81 11       	cpse	r24, r1
     dfe:	22 c0       	rjmp	.+68     	; 0xe44 <main+0x7e6>
					{
						SE0 = get_value(String,'S');
     e00:	63 e5       	ldi	r22, 0x53	; 83
     e02:	8b e6       	ldi	r24, 0x6B	; 107
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
     e0a:	60 93 fc 00 	sts	0x00FC, r22	; 0x8000fc <SE0>
     e0e:	70 93 fd 00 	sts	0x00FD, r23	; 0x8000fd <SE0+0x1>
     e12:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <SE0+0x2>
     e16:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <SE0+0x3>
						status = 1;
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
     e1c:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <status>
						while(getTemp(T0) < SE0);
     e20:	80 e5       	ldi	r24, 0x50	; 80
     e22:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
     e26:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <SE0>
     e2a:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <SE0+0x1>
     e2e:	40 91 fe 00 	lds	r20, 0x00FE	; 0x8000fe <SE0+0x2>
     e32:	50 91 ff 00 	lds	r21, 0x00FF	; 0x8000ff <SE0+0x3>
     e36:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
     e3a:	88 23       	and	r24, r24
     e3c:	8c f3       	brlt	.-30     	; 0xe20 <main+0x7c2>
						status = 0;
     e3e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
     e42:	14 c0       	rjmp	.+40     	; 0xe6c <main+0x80e>
					} 
					else
					{
						status = 1;
     e44:	e1 e0       	ldi	r30, 0x01	; 1
     e46:	e0 93 45 02 	sts	0x0245, r30	; 0x800245 <status>
						while(getTemp(T0) < B);
     e4a:	80 e5       	ldi	r24, 0x50	; 80
     e4c:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
     e50:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <B>
     e54:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <B+0x1>
     e58:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <B+0x2>
     e5c:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <B+0x3>
     e60:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
     e64:	88 23       	and	r24, r24
     e66:	8c f3       	brlt	.-30     	; 0xe4a <main+0x7ec>
						status = 0;
     e68:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
					}
					
					Transmit_Data("ok");
     e6c:	8e eb       	ldi	r24, 0xBE	; 190
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     e74:	5f cc       	rjmp	.-1858   	; 0x734 <main+0xd6>
				case 112:
					value_1 = 0;  //extract first value
					value_2 = 0; //call function to extract second value
					value_3 = 0; //call function to extract third value
					x = sub_function (&old_val_1, value_1);     //call function to extract first step
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	ba 01       	movw	r22, r20
     e7c:	88 ef       	ldi	r24, 0xF8	; 248
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
     e84:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <x>
     e88:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <x+0x1>
     e8c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <x+0x2>
     e90:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <x+0x3>
					y = sub_function (&old_val_2, value_2);    //call function to extract second step
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	ba 01       	movw	r22, r20
     e9a:	84 ef       	ldi	r24, 0xF4	; 244
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
     ea2:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <y>
     ea6:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <y+0x1>
     eaa:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <y+0x2>
     eae:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <y+0x3>
					z = sub_function (&old_val_3, value_3);    //call function to extract third step
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	ba 01       	movw	r22, r20
     eb8:	80 ef       	ldi	r24, 0xF0	; 240
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
     ec0:	6b 01       	movw	r12, r22
     ec2:	7c 01       	movw	r14, r24
     ec4:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <z>
     ec8:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <z+0x1>
     ecc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <z+0x2>
     ed0:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <z+0x3>
					EX = 0;
     ed4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <EX>
     ed8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <EX+0x1>
     edc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <EX+0x2>
     ee0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <EX+0x3>
					F = 0;
     ee4:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <F>
     ee8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <F+0x1>
     eec:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <F+0x2>
     ef0:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <F+0x3>
					Fe = 0;
     ef4:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <Fe>
     ef8:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <Fe+0x1>
     efc:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Fe+0x2>
     f00:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Fe+0x3>
					SE0 = 0;
     f04:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SE0>
     f08:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <SE0+0x1>
     f0c:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <SE0+0x2>
     f10:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <SE0+0x3>
					SB = 0;
     f14:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <SB>
     f18:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <SB+0x1>
     f1c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <SB+0x2>
     f20:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SB+0x3>
					status = 1;
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <status>
					double step[5]={x*Xspm,y*Yspm,z*Zspm,0};
     f2a:	84 e1       	ldi	r24, 0x14	; 20
     f2c:	aa a1       	ldd	r26, Y+34	; 0x22
     f2e:	bb a1       	ldd	r27, Y+35	; 0x23
     f30:	1d 92       	st	X+, r1
     f32:	8a 95       	dec	r24
     f34:	e9 f7       	brne	.-6      	; 0xf30 <main+0x8d2>
     f36:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
     f3a:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
     f3e:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
     f42:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
     f46:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
     f4a:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
     f4e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
     f52:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
     f56:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     f5a:	69 83       	std	Y+1, r22	; 0x01
     f5c:	7a 83       	std	Y+2, r23	; 0x02
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
     f66:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
     f6a:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
     f6e:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
     f72:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
     f76:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
     f7a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
     f7e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
     f82:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     f86:	6d 83       	std	Y+5, r22	; 0x05
     f88:	7e 83       	std	Y+6, r23	; 0x06
     f8a:	8f 83       	std	Y+7, r24	; 0x07
     f8c:	98 87       	std	Y+8, r25	; 0x08
     f8e:	a7 01       	movw	r20, r14
     f90:	96 01       	movw	r18, r12
     f92:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <Zspm>
     f96:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <Zspm+0x1>
     f9a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Zspm+0x2>
     f9e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Zspm+0x3>
     fa2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
     fa6:	69 87       	std	Y+9, r22	; 0x09
     fa8:	7a 87       	std	Y+10, r23	; 0x0a
     faa:	8b 87       	std	Y+11, r24	; 0x0b
     fac:	9c 87       	std	Y+12, r25	; 0x0c
					motor_movement(step,F,Fe);
     fae:	00 e0       	ldi	r16, 0x00	; 0
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	98 01       	movw	r18, r16
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	ba 01       	movw	r22, r20
     fba:	89 a9       	ldd	r24, Y+49	; 0x31
     fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fbe:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
					status = 0;
     fc2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
					Transmit_Data("ok");
     fc6:	8e eb       	ldi	r24, 0xBE	; 190
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
     fce:	b2 cb       	rjmp	.-2204   	; 0x734 <main+0xd6>
     fd0:	e9 e5       	ldi	r30, 0x59	; 89
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	81 e3       	ldi	r24, 0x31	; 49
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	a3 ec       	ldi	r26, 0xC3	; 195
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	ad 01       	movw	r20, r26
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     fde:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     fe0:	dc 01       	movw	r26, r24
     fe2:	1d 92       	st	X+, r1
     fe4:	cd 01       	movw	r24, r26
						Z_pos[i] = 0;
     fe6:	da 01       	movw	r26, r20
     fe8:	1d 92       	st	X+, r1
     fea:	ad 01       	movw	r20, r26
					motor_movement(step,F,Fe);
					status = 0;
					Transmit_Data("ok");
					break;
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
     fec:	23 e6       	ldi	r18, 0x63	; 99
     fee:	31 e0       	ldi	r19, 0x01	; 1
     ff0:	2e 17       	cp	r18, r30
     ff2:	3f 07       	cpc	r19, r31
     ff4:	a1 f7       	brne	.-24     	; 0xfde <main+0x980>
					{
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(old_val_1, 2,3,"%f"));
     ff6:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <old_val_1.2347>
     ffa:	70 91 f9 00 	lds	r23, 0x00F9	; 0x8000f9 <old_val_1.2347+0x1>
     ffe:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <old_val_1.2347+0x2>
    1002:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <old_val_1.2347+0x3>
    1006:	01 ec       	ldi	r16, 0xC1	; 193
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	23 e0       	ldi	r18, 0x03	; 3
    100c:	42 e0       	ldi	r20, 0x02	; 2
    100e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	49 e5       	ldi	r20, 0x59	; 89
    1018:	51 e0       	ldi	r21, 0x01	; 1
    101a:	5f 93       	push	r21
    101c:	4f 93       	push	r20
    101e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Y_pos,dtostrf(old_val_2, 2,3,"%f"));
    1022:	60 91 f4 00 	lds	r22, 0x00F4	; 0x8000f4 <old_val_2.2348>
    1026:	70 91 f5 00 	lds	r23, 0x00F5	; 0x8000f5 <old_val_2.2348+0x1>
    102a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <old_val_2.2348+0x2>
    102e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <old_val_2.2348+0x3>
    1032:	23 e0       	ldi	r18, 0x03	; 3
    1034:	42 e0       	ldi	r20, 0x02	; 2
    1036:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	81 e3       	ldi	r24, 0x31	; 49
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Z_pos,dtostrf(old_val_3, 2,3,"%f"));
    104a:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <old_val_3.2349>
    104e:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <old_val_3.2349+0x1>
    1052:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <old_val_3.2349+0x2>
    1056:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <old_val_3.2349+0x3>
    105a:	23 e0       	ldi	r18, 0x03	; 3
    105c:	42 e0       	ldi	r20, 0x02	; 2
    105e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	e3 ec       	ldi	r30, 0xC3	; 195
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	ff 93       	push	r31
    106c:	ef 93       	push	r30
    106e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					char pos[21]={'X',
    1072:	88 e5       	ldi	r24, 0x58	; 88
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	a9 e5       	ldi	r26, 0x59	; 89
    1078:	b1 e0       	ldi	r27, 0x01	; 1
    107a:	8c 91       	ld	r24, X
    107c:	8a 83       	std	Y+2, r24	; 0x02
    107e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <X_pos+0x1>
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <X_pos+0x2>
    1088:	8c 83       	std	Y+4, r24	; 0x04
    108a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <X_pos+0x3>
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <X_pos+0x4>
    1094:	8e 83       	std	Y+6, r24	; 0x06
    1096:	80 e2       	ldi	r24, 0x20	; 32
    1098:	8f 83       	std	Y+7, r24	; 0x07
    109a:	99 e5       	ldi	r25, 0x59	; 89
    109c:	98 87       	std	Y+8, r25	; 0x08
    109e:	e1 e3       	ldi	r30, 0x31	; 49
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	90 81       	ld	r25, Z
    10a4:	99 87       	std	Y+9, r25	; 0x09
    10a6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Y_pos+0x1>
    10aa:	9a 87       	std	Y+10, r25	; 0x0a
    10ac:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Y_pos+0x2>
    10b0:	9b 87       	std	Y+11, r25	; 0x0b
    10b2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Y_pos+0x3>
    10b6:	9c 87       	std	Y+12, r25	; 0x0c
    10b8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Y_pos+0x4>
    10bc:	9d 87       	std	Y+13, r25	; 0x0d
    10be:	8e 87       	std	Y+14, r24	; 0x0e
    10c0:	8a e5       	ldi	r24, 0x5A	; 90
    10c2:	8f 87       	std	Y+15, r24	; 0x0f
    10c4:	a3 ec       	ldi	r26, 0xC3	; 195
    10c6:	b1 e0       	ldi	r27, 0x01	; 1
    10c8:	8c 91       	ld	r24, X
    10ca:	88 8b       	std	Y+16, r24	; 0x10
    10cc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Z_pos+0x1>
    10d0:	89 8b       	std	Y+17, r24	; 0x11
    10d2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Z_pos+0x2>
    10d6:	8a 8b       	std	Y+18, r24	; 0x12
    10d8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Z_pos+0x3>
    10dc:	8b 8b       	std	Y+19, r24	; 0x13
    10de:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Z_pos+0x4>
    10e2:	8c 8b       	std	Y+20, r24	; 0x14
    10e4:	8d e0       	ldi	r24, 0x0D	; 13
    10e6:	8d 8b       	std	Y+21, r24	; 0x15
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
					Transmit_Data(pos);
    10e8:	89 a9       	ldd	r24, Y+49	; 0x31
    10ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ec:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	1c cb       	rjmp	.-2504   	; 0x734 <main+0xd6>
				case 140:
					BED_Activ = 1;
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <BED_Activ>
					SB = get_value(String,'S');
    1102:	63 e5       	ldi	r22, 0x53	; 83
    1104:	8b e6       	ldi	r24, 0x6B	; 107
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    110c:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <SB>
    1110:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <SB+0x1>
    1114:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SB+0x2>
    1118:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <SB+0x3>
					Transmit_Data("ok");
    111c:	8e eb       	ldi	r24, 0xBE	; 190
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    1124:	07 cb       	rjmp	.-2546   	; 0x734 <main+0xd6>
				case 190:
					SB = get_value(String,'S');
    1126:	63 e5       	ldi	r22, 0x53	; 83
    1128:	8b e6       	ldi	r24, 0x6B	; 107
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1130:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <SB>
    1134:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <SB+0x1>
    1138:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SB+0x2>
    113c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <SB+0x3>
					status = 1;
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <status>
					while(getTemp(T2) < SB);
    1146:	82 e5       	ldi	r24, 0x52	; 82
    1148:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    114c:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <SB>
    1150:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <SB+0x1>
    1154:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <SB+0x2>
    1158:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <SB+0x3>
    115c:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1160:	88 23       	and	r24, r24
    1162:	8c f3       	brlt	.-30     	; 0x1146 <main+0xae8>
					status = 0;
    1164:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
					Transmit_Data("ok");
    1168:	8e eb       	ldi	r24, 0xBE	; 190
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    1170:	e1 ca       	rjmp	.-2622   	; 0x734 <main+0xd6>
				case 206:
					old_val_1 = 0;
    1172:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <old_val_1.2347>
    1176:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <old_val_1.2347+0x1>
    117a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <old_val_1.2347+0x2>
    117e:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <old_val_1.2347+0x3>
					old_val_2 = 0;
    1182:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <old_val_2.2348>
    1186:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <old_val_2.2348+0x1>
    118a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <old_val_2.2348+0x2>
    118e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <old_val_2.2348+0x3>
					old_val_3 = 0;
    1192:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <old_val_3.2349>
    1196:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <old_val_3.2349+0x1>
    119a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <old_val_3.2349+0x2>
    119e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <old_val_3.2349+0x3>
					homeSet = 1;
    11a2:	31 e0       	ldi	r19, 0x01	; 1
    11a4:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <homeSet>
					Transmit_Data("ok");
    11a8:	8e eb       	ldi	r24, 0xBE	; 190
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    11b0:	c1 ca       	rjmp	.-2686   	; 0x734 <main+0xd6>
				case 302:
					SE0 = get_value(String,'S');
    11b2:	63 e5       	ldi	r22, 0x53	; 83
    11b4:	8b e6       	ldi	r24, 0x6B	; 107
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    11bc:	60 93 fc 00 	sts	0x00FC, r22	; 0x8000fc <SE0>
    11c0:	70 93 fd 00 	sts	0x00FD, r23	; 0x8000fd <SE0+0x1>
    11c4:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <SE0+0x2>
    11c8:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <SE0+0x3>
					if (SE0 <= 25 )
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	48 ec       	ldi	r20, 0xC8	; 200
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	1c f0       	brlt	.+6      	; 0x11e2 <main+0xb84>
					{
						Fextrud = 1;
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <Fextrud>
					}
				case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    11e2:	45 e0       	ldi	r20, 0x05	; 5
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	69 e5       	ldi	r22, 0x59	; 89
    11e8:	71 e0       	ldi	r23, 0x01	; 1
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    11f2:	45 e0       	ldi	r20, 0x05	; 5
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	61 e3       	ldi	r22, 0x31	; 49
    11f8:	71 e0       	ldi	r23, 0x01	; 1
    11fa:	85 e0       	ldi	r24, 0x05	; 5
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    1202:	45 e0       	ldi	r20, 0x05	; 5
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	63 ec       	ldi	r22, 0xC3	; 195
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    1212:	45 e0       	ldi	r20, 0x05	; 5
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	6b e1       	ldi	r22, 0x1B	; 27
    1218:	71 e0       	ldi	r23, 0x01	; 1
    121a:	8f e0       	ldi	r24, 0x0F	; 15
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    1222:	89 e5       	ldi	r24, 0x59	; 89
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
    122a:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <Xspm>
    122e:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <Xspm+0x1>
    1232:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <Xspm+0x2>
    1236:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <Xspm+0x3>
					Yspm = atof(Y_pos);
    123a:	81 e3       	ldi	r24, 0x31	; 49
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
    1242:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <Yspm>
    1246:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <Yspm+0x1>
    124a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Yspm+0x2>
    124e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <Yspm+0x3>
					Zspm = atof(Z_pos);
    1252:	83 ec       	ldi	r24, 0xC3	; 195
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
    125a:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <Zspm>
    125e:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <Zspm+0x1>
    1262:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Zspm+0x2>
    1266:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <Zspm+0x3>
					Espm = atof(E_pos);
    126a:	8b e1       	ldi	r24, 0x1B	; 27
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <atof>
    1272:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <Espm>
    1276:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <Espm+0x1>
    127a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Espm+0x2>
    127e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Espm+0x3>
					Transmit_Data("ok");
    1282:	8e eb       	ldi	r24, 0xBE	; 190
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    128a:	54 ca       	rjmp	.-2904   	; 0x734 <main+0xd6>
    128c:	e9 e5       	ldi	r30, 0x59	; 89
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	21 e3       	ldi	r18, 0x31	; 49
    1292:	31 e0       	ldi	r19, 0x01	; 1
    1294:	83 ec       	ldi	r24, 0xC3	; 195
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	ab e1       	ldi	r26, 0x1B	; 27
    129a:	b1 e0       	ldi	r27, 0x01	; 1
    129c:	bd 01       	movw	r22, r26
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    129e:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    12a0:	d9 01       	movw	r26, r18
    12a2:	1d 92       	st	X+, r1
    12a4:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    12a6:	dc 01       	movw	r26, r24
    12a8:	1d 92       	st	X+, r1
    12aa:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    12ac:	db 01       	movw	r26, r22
    12ae:	1d 92       	st	X+, r1
    12b0:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok");
					break;
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
    12b2:	b1 e0       	ldi	r27, 0x01	; 1
    12b4:	e3 36       	cpi	r30, 0x63	; 99
    12b6:	fb 07       	cpc	r31, r27
    12b8:	91 f7       	brne	.-28     	; 0x129e <main+0xc40>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    12ba:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <Xspm>
    12be:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <Xspm+0x1>
    12c2:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Xspm+0x2>
    12c6:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <Xspm+0x3>
    12ca:	01 ec       	ldi	r16, 0xC1	; 193
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	23 e0       	ldi	r18, 0x03	; 3
    12d0:	42 e0       	ldi	r20, 0x02	; 2
    12d2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    12d6:	9f 93       	push	r25
    12d8:	8f 93       	push	r24
    12da:	e9 e5       	ldi	r30, 0x59	; 89
    12dc:	f1 e0       	ldi	r31, 0x01	; 1
    12de:	ff 93       	push	r31
    12e0:	ef 93       	push	r30
    12e2:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    12e6:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <Yspm>
    12ea:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <Yspm+0x1>
    12ee:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Yspm+0x2>
    12f2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <Yspm+0x3>
    12f6:	23 e0       	ldi	r18, 0x03	; 3
    12f8:	42 e0       	ldi	r20, 0x02	; 2
    12fa:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	41 e3       	ldi	r20, 0x31	; 49
    1304:	51 e0       	ldi	r21, 0x01	; 1
    1306:	5f 93       	push	r21
    1308:	4f 93       	push	r20
    130a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    130e:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <Zspm>
    1312:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <Zspm+0x1>
    1316:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Zspm+0x2>
    131a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Zspm+0x3>
    131e:	23 e0       	ldi	r18, 0x03	; 3
    1320:	42 e0       	ldi	r20, 0x02	; 2
    1322:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    1326:	9f 93       	push	r25
    1328:	8f 93       	push	r24
    132a:	83 ec       	ldi	r24, 0xC3	; 195
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	9f 93       	push	r25
    1330:	8f 93       	push	r24
    1332:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1336:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Espm>
    133a:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <Espm+0x1>
    133e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Espm+0x2>
    1342:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Espm+0x3>
    1346:	23 e0       	ldi	r18, 0x03	; 3
    1348:	42 e0       	ldi	r20, 0x02	; 2
    134a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    134e:	9f 93       	push	r25
    1350:	8f 93       	push	r24
    1352:	eb e1       	ldi	r30, 0x1B	; 27
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	ff 93       	push	r31
    1358:	ef 93       	push	r30
    135a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
					char acc[33]={'X',
    135e:	88 e5       	ldi	r24, 0x58	; 88
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	a9 e5       	ldi	r26, 0x59	; 89
    1364:	b1 e0       	ldi	r27, 0x01	; 1
    1366:	8c 91       	ld	r24, X
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <X_pos+0x1>
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <X_pos+0x2>
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <X_pos+0x3>
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <X_pos+0x4>
    1380:	8e 83       	std	Y+6, r24	; 0x06
    1382:	23 e7       	ldi	r18, 0x73	; 115
    1384:	2f 83       	std	Y+7, r18	; 0x07
    1386:	9f e2       	ldi	r25, 0x2F	; 47
    1388:	98 87       	std	Y+8, r25	; 0x08
    138a:	8d e6       	ldi	r24, 0x6D	; 109
    138c:	89 87       	std	Y+9, r24	; 0x09
    138e:	8a 87       	std	Y+10, r24	; 0x0a
    1390:	30 e2       	ldi	r19, 0x20	; 32
    1392:	3b 87       	std	Y+11, r19	; 0x0b
    1394:	49 e5       	ldi	r20, 0x59	; 89
    1396:	4c 87       	std	Y+12, r20	; 0x0c
    1398:	e1 e3       	ldi	r30, 0x31	; 49
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	40 81       	ld	r20, Z
    139e:	4d 87       	std	Y+13, r20	; 0x0d
    13a0:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <Y_pos+0x1>
    13a4:	4e 87       	std	Y+14, r20	; 0x0e
    13a6:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <Y_pos+0x2>
    13aa:	4f 87       	std	Y+15, r20	; 0x0f
    13ac:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <Y_pos+0x3>
    13b0:	48 8b       	std	Y+16, r20	; 0x10
    13b2:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <Y_pos+0x4>
    13b6:	49 8b       	std	Y+17, r20	; 0x11
    13b8:	2a 8b       	std	Y+18, r18	; 0x12
    13ba:	9b 8b       	std	Y+19, r25	; 0x13
    13bc:	8c 8b       	std	Y+20, r24	; 0x14
    13be:	8d 8b       	std	Y+21, r24	; 0x15
    13c0:	3e 8b       	std	Y+22, r19	; 0x16
    13c2:	3a e5       	ldi	r19, 0x5A	; 90
    13c4:	3f 8b       	std	Y+23, r19	; 0x17
    13c6:	a3 ec       	ldi	r26, 0xC3	; 195
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	3c 91       	ld	r19, X
    13cc:	38 8f       	std	Y+24, r19	; 0x18
    13ce:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <Z_pos+0x1>
    13d2:	39 8f       	std	Y+25, r19	; 0x19
    13d4:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <Z_pos+0x2>
    13d8:	3a 8f       	std	Y+26, r19	; 0x1a
    13da:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <Z_pos+0x3>
    13de:	3b 8f       	std	Y+27, r19	; 0x1b
    13e0:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <Z_pos+0x4>
    13e4:	3c 8f       	std	Y+28, r19	; 0x1c
    13e6:	2d 8f       	std	Y+29, r18	; 0x1d
    13e8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ea:	8f 8f       	std	Y+31, r24	; 0x1f
    13ec:	88 a3       	std	Y+32, r24	; 0x20
    13ee:	8d e0       	ldi	r24, 0x0D	; 13
    13f0:	89 a3       	std	Y+33, r24	; 0x21
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    13f2:	89 a9       	ldd	r24, Y+49	; 0x31
    13f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13f6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break; 				
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	97 c9       	rjmp	.-3282   	; 0x734 <main+0xd6>
			}	
		}
		else if (String[0] == 'G')
    1406:	87 34       	cpi	r24, 0x47	; 71
    1408:	09 f0       	breq	.+2      	; 0x140c <main+0xdae>
    140a:	94 c9       	rjmp	.-3288   	; 0x734 <main+0xd6>
		{
			val = get_int (String,'G');
    140c:	67 e4       	ldi	r22, 0x47	; 71
    140e:	8b e6       	ldi	r24, 0x6B	; 107
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 b1 01 	call	0x362	; 0x362 <get_int>
    1416:	1c 01       	movw	r2, r24
			switch (val)
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	91 05       	cpc	r25, r1
    141c:	3c f4       	brge	.+14     	; 0x142c <main+0xdce>
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	91 05       	cpc	r25, r1
    1422:	0c f0       	brlt	.+2      	; 0x1426 <main+0xdc8>
    1424:	44 c1       	rjmp	.+648    	; 0x16ae <main+0x1050>
    1426:	99 23       	and	r25, r25
    1428:	2c f4       	brge	.+10     	; 0x1434 <main+0xdd6>
    142a:	84 c9       	rjmp	.-3320   	; 0x734 <main+0xd6>
    142c:	4c 97       	sbiw	r24, 0x1c	; 28
    142e:	09 f4       	brne	.+2      	; 0x1432 <main+0xdd4>
    1430:	4b c4       	rjmp	.+2198   	; 0x1cc8 <main+0x166a>
    1432:	80 c9       	rjmp	.-3328   	; 0x734 <main+0xd6>
			{
				case 0:case 1:
					motor_init();
    1434:	0e 94 ff 11 	call	0x23fe	; 0x23fe <motor_init>
					value_1 = get_value(String,'X');           //extract first value
    1438:	68 e5       	ldi	r22, 0x58	; 88
    143a:	8b e6       	ldi	r24, 0x6B	; 107
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
					value_2 = get_value(String,'Y'); //call function to extract second value
    1446:	69 e5       	ldi	r22, 0x59	; 89
    1448:	8b e6       	ldi	r24, 0x6B	; 107
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1450:	4b 01       	movw	r8, r22
    1452:	5c 01       	movw	r10, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
    1454:	6a e5       	ldi	r22, 0x5A	; 90
    1456:	8b e6       	ldi	r24, 0x6B	; 107
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    145e:	1b 01       	movw	r2, r22
    1460:	2c 01       	movw	r4, r24
					EX = get_value(String,'E');
    1462:	65 e4       	ldi	r22, 0x45	; 69
    1464:	8b e6       	ldi	r24, 0x6B	; 107
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    146c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <EX>
    1470:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <EX+0x1>
    1474:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <EX+0x2>
    1478:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <EX+0x3>
					if ((EX && value_1 && value_2 && value_3) == 0)
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <main+0xe2e>
    148a:	61 c4       	rjmp	.+2242   	; 0x1d4e <main+0x16f0>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    149a:	88 23       	and	r24, r24
    149c:	09 f4       	brne	.+2      	; 0x14a0 <main+0xe42>
    149e:	57 c4       	rjmp	.+2222   	; 0x1d4e <main+0x16f0>
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	c5 01       	movw	r24, r10
    14a8:	b4 01       	movw	r22, r8
    14aa:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <main+0xe56>
    14b2:	4d c4       	rjmp	.+2202   	; 0x1d4e <main+0x16f0>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	c2 01       	movw	r24, r4
    14bc:	b1 01       	movw	r22, r2
    14be:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    14c2:	81 11       	cpse	r24, r1
    14c4:	52 c4       	rjmp	.+2212   	; 0x1d6a <main+0x170c>
    14c6:	43 c4       	rjmp	.+2182   	; 0x1d4e <main+0x16f0>
					{
						if (get_value(String,'F') != 0)
						{
							Fe = get_value(String,'F');
    14c8:	66 e4       	ldi	r22, 0x46	; 70
    14ca:	8b e6       	ldi	r24, 0x6B	; 107
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    14d2:	60 93 e3 01 	sts	0x01E3, r22	; 0x8001e3 <Fe>
    14d6:	70 93 e4 01 	sts	0x01E4, r23	; 0x8001e4 <Fe+0x1>
    14da:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Fe+0x2>
    14de:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <Fe+0x3>
    14e2:	0d c0       	rjmp	.+26     	; 0x14fe <main+0xea0>
					}
					else
					{
						if (get_value(String,'F') != 0)
						{
							F = get_value(String,'F');
    14e4:	66 e4       	ldi	r22, 0x46	; 70
    14e6:	8b e6       	ldi	r24, 0x6B	; 107
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    14ee:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <F>
    14f2:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <F+0x1>
    14f6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <F+0x2>
    14fa:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	48 e4       	ldi	r20, 0x48	; 72
    1504:	53 e4       	ldi	r21, 0x43	; 67
    1506:	c7 01       	movw	r24, r14
    1508:	b6 01       	movw	r22, r12
    150a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f4       	brge	.+2      	; 0x1514 <main+0xeb6>
    1512:	10 c9       	rjmp	.-3552   	; 0x734 <main+0xd6>
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	48 e4       	ldi	r20, 0x48	; 72
    151a:	53 e4       	ldi	r21, 0x43	; 67
    151c:	c5 01       	movw	r24, r10
    151e:	b4 01       	movw	r22, r8
    1520:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    1524:	18 16       	cp	r1, r24
    1526:	0c f4       	brge	.+2      	; 0x152a <main+0xecc>
    1528:	05 c9       	rjmp	.-3574   	; 0x734 <main+0xd6>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a ef       	ldi	r20, 0xFA	; 250
    1530:	53 e4       	ldi	r21, 0x43	; 67
    1532:	c2 01       	movw	r24, r4
    1534:	b1 01       	movw	r22, r2
    1536:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f4       	brge	.+2      	; 0x1540 <main+0xee2>
    153e:	fa c8       	rjmp	.-3596   	; 0x734 <main+0xd6>

					{
						x = sub_function (&old_val_1, value_1);     //call function to extract first step
    1540:	b7 01       	movw	r22, r14
    1542:	a6 01       	movw	r20, r12
    1544:	88 ef       	ldi	r24, 0xF8	; 248
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
    154c:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <x>
    1550:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <x+0x1>
    1554:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <x+0x2>
    1558:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <x+0x3>
						y = sub_function (&old_val_2, value_2);    //call function to extract second step
    155c:	b5 01       	movw	r22, r10
    155e:	a4 01       	movw	r20, r8
    1560:	84 ef       	ldi	r24, 0xF4	; 244
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
    1568:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <y>
    156c:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <y+0x1>
    1570:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <y+0x2>
    1574:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <y+0x3>
						z = sub_function (&old_val_3, value_3);    //call function to extract third step
    1578:	b2 01       	movw	r22, r4
    157a:	a1 01       	movw	r20, r2
    157c:	80 ef       	ldi	r24, 0xF0	; 240
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
    1588:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <z>
    158c:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <z+0x1>
    1590:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <z+0x2>
    1594:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <z+0x3>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						status = 1;
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	40 93 45 02 	sts	0x0245, r20	; 0x800245 <status>
						if ((extrud || Fextrud))
    159e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <extrud>
    15a2:	81 11       	cpse	r24, r1
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <main+0xf52>
    15a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Fextrud>
    15aa:	88 23       	and	r24, r24
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <main+0xf52>
    15ae:	73 c0       	rjmp	.+230    	; 0x1696 <main+0x1038>
						{
							double step[4]={x*Xspm,y*Yspm,z*Zspm,EX*Espm};
    15b0:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
    15b4:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
    15b8:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
    15bc:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
    15c0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
    15c4:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
    15c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
    15cc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
    15d0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    15d4:	69 83       	std	Y+1, r22	; 0x01
    15d6:	7a 83       	std	Y+2, r23	; 0x02
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
    15e0:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
    15e4:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
    15e8:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
    15ec:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
    15f0:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
    15f4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
    15f8:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
    15fc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1600:	6d 83       	std	Y+5, r22	; 0x05
    1602:	7e 83       	std	Y+6, r23	; 0x06
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	a7 01       	movw	r20, r14
    160a:	96 01       	movw	r18, r12
    160c:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <Zspm>
    1610:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <Zspm+0x1>
    1614:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Zspm+0x2>
    1618:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Zspm+0x3>
    161c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1620:	69 87       	std	Y+9, r22	; 0x09
    1622:	7a 87       	std	Y+10, r23	; 0x0a
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	9c 87       	std	Y+12, r25	; 0x0c
    1628:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <Espm>
    162c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <Espm+0x1>
    1630:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <Espm+0x2>
    1634:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <Espm+0x3>
    1638:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <EX>
    163c:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <EX+0x1>
    1640:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <EX+0x2>
    1644:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <EX+0x3>
    1648:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    164c:	6d 87       	std	Y+13, r22	; 0x0d
    164e:	7e 87       	std	Y+14, r23	; 0x0e
    1650:	8f 87       	std	Y+15, r24	; 0x0f
    1652:	98 8b       	std	Y+16, r25	; 0x10
							motor_movement(step,F,Fe);
    1654:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    1658:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    165c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    1660:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    1664:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
    166c:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    1670:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    1674:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    1678:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    167c:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1680:	ab 01       	movw	r20, r22
    1682:	bc 01       	movw	r22, r24
    1684:	97 01       	movw	r18, r14
    1686:	86 01       	movw	r16, r12
    1688:	89 a9       	ldd	r24, Y+49	; 0x31
    168a:	9c a5       	ldd	r25, Y+44	; 0x2c
    168c:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
							status = 0;
    1690:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						status = 1;
						if ((extrud || Fextrud))
						{
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <main+0x1046>
							motor_movement(step,F,Fe);
							status = 0;
						} 
						else
						{
							Transmit_Data("error extruder temp.");
    1696:	84 ec       	ldi	r24, 0xC4	; 196
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
							Transmit_Char('\r');
    169e:	8d e0       	ldi	r24, 0x0D	; 13
    16a0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Transmit_Char>
						}
						Transmit_Data("ok");					
    16a4:	8e eb       	ldi	r24, 0xBE	; 190
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
    16ac:	43 c8       	rjmp	.-3962   	; 0x734 <main+0xd6>
					}
					break;
				case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    16ae:	68 e5       	ldi	r22, 0x58	; 88
    16b0:	8b e6       	ldi	r24, 0x6B	; 107
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    16b8:	68 a7       	std	Y+40, r22	; 0x28
    16ba:	79 a7       	std	Y+41, r23	; 0x29
    16bc:	8a a7       	std	Y+42, r24	; 0x2a
    16be:	9b a7       	std	Y+43, r25	; 0x2b
					value_2 = get_value(String,'Y'); //call function to extract second value
    16c0:	69 e5       	ldi	r22, 0x59	; 89
    16c2:	8b e6       	ldi	r24, 0x6B	; 107
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    16ca:	6d a7       	std	Y+45, r22	; 0x2d
    16cc:	7e a7       	std	Y+46, r23	; 0x2e
    16ce:	8f a7       	std	Y+47, r24	; 0x2f
    16d0:	98 ab       	std	Y+48, r25	; 0x30
					I = get_value(String,'I');
    16d2:	69 e4       	ldi	r22, 0x49	; 73
    16d4:	8b e6       	ldi	r24, 0x6B	; 107
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    16dc:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <I>
    16e0:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <I+0x1>
    16e4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <I+0x2>
    16e8:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <I+0x3>
					J = get_value(String,'J');
    16ec:	6a e4       	ldi	r22, 0x4A	; 74
    16ee:	8b e6       	ldi	r24, 0x6B	; 107
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    16f6:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <J>
    16fa:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <J+0x1>
    16fe:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <J+0x2>
    1702:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <J+0x3>
					if (get_value(String,'F') != 0)
    1706:	66 e4       	ldi	r22, 0x46	; 70
    1708:	8b e6       	ldi	r24, 0x6B	; 107
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	a9 01       	movw	r20, r18
    1716:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    171a:	88 23       	and	r24, r24
    171c:	69 f0       	breq	.+26     	; 0x1738 <main+0x10da>
					{
						F = get_value(String,'F');
    171e:	66 e4       	ldi	r22, 0x46	; 70
    1720:	8b e6       	ldi	r24, 0x6B	; 107
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1728:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <F>
    172c:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <F+0x1>
    1730:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <F+0x2>
    1734:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <F+0x3>
					}
					if (get_value(String,'R') != 0)
    1738:	62 e5       	ldi	r22, 0x52	; 82
    173a:	8b e6       	ldi	r24, 0x6B	; 107
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	a9 01       	movw	r20, r18
    1748:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    174c:	88 23       	and	r24, r24
    174e:	71 f0       	breq	.+28     	; 0x176c <main+0x110e>
					{
						R = get_value(String,'R');
    1750:	62 e5       	ldi	r22, 0x52	; 82
    1752:	8b e6       	ldi	r24, 0x6B	; 107
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    175a:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <R>
    175e:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <R+0x1>
    1762:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <R+0x2>
    1766:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <R+0x3>
    176a:	38 c0       	rjmp	.+112    	; 0x17dc <main+0x117e>
					} 
					else
					{
						R = sqrt(pow(I,2)+pow(J,2));
    176c:	c0 90 cd 01 	lds	r12, 0x01CD	; 0x8001cd <I>
    1770:	d0 90 ce 01 	lds	r13, 0x01CE	; 0x8001ce <I+0x1>
    1774:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <I+0x2>
    1778:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <I+0x3>
    177c:	80 90 3f 01 	lds	r8, 0x013F	; 0x80013f <J>
    1780:	90 90 40 01 	lds	r9, 0x0140	; 0x800140 <J+0x1>
    1784:	a0 90 41 01 	lds	r10, 0x0141	; 0x800141 <J+0x2>
    1788:	b0 90 42 01 	lds	r11, 0x0142	; 0x800142 <J+0x3>
    178c:	a5 01       	movw	r20, r10
    178e:	94 01       	movw	r18, r8
    1790:	c5 01       	movw	r24, r10
    1792:	b4 01       	movw	r22, r8
    1794:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1798:	6c a3       	std	Y+36, r22	; 0x24
    179a:	7d a3       	std	Y+37, r23	; 0x25
    179c:	8e a3       	std	Y+38, r24	; 0x26
    179e:	9f a3       	std	Y+39, r25	; 0x27
    17a0:	a5 01       	movw	r20, r10
    17a2:	94 01       	movw	r18, r8
    17a4:	c5 01       	movw	r24, r10
    17a6:	b4 01       	movw	r22, r8
    17a8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    17ac:	4b 01       	movw	r8, r22
    17ae:	5c 01       	movw	r10, r24
    17b0:	a7 01       	movw	r20, r14
    17b2:	96 01       	movw	r18, r12
    17b4:	c7 01       	movw	r24, r14
    17b6:	b6 01       	movw	r22, r12
    17b8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	c5 01       	movw	r24, r10
    17c2:	b4 01       	movw	r22, r8
    17c4:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    17c8:	0e 94 08 16 	call	0x2c10	; 0x2c10 <sqrt>
    17cc:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <R>
    17d0:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <R+0x1>
    17d4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <R+0x2>
    17d8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <R+0x3>
					}
					status = 1;
    17dc:	51 e0       	ldi	r21, 0x01	; 1
    17de:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <status>
					for (int th = 0 ; th <= 360 ; th++)
    17e2:	41 2c       	mov	r4, r1
    17e4:	51 2c       	mov	r5, r1
    17e6:	7b aa       	std	Y+51, r7	; 0x33
    17e8:	6a aa       	std	Y+50, r6	; 0x32
    17ea:	79 a8       	ldd	r7, Y+49	; 0x31
					{
						double xc = R*cos(th)*cos(th);
    17ec:	b2 01       	movw	r22, r4
    17ee:	05 2c       	mov	r0, r5
    17f0:	00 0c       	add	r0, r0
    17f2:	88 0b       	sbc	r24, r24
    17f4:	99 0b       	sbc	r25, r25
    17f6:	0e 94 49 14 	call	0x2892	; 0x2892 <__floatsisf>
    17fa:	6b 01       	movw	r12, r22
    17fc:	7c 01       	movw	r14, r24
    17fe:	0e 94 9a 13 	call	0x2734	; 0x2734 <cos>
    1802:	6c a3       	std	Y+36, r22	; 0x24
    1804:	7d a3       	std	Y+37, r23	; 0x25
    1806:	8e a3       	std	Y+38, r24	; 0x26
    1808:	9f a3       	std	Y+39, r25	; 0x27
    180a:	80 90 67 01 	lds	r8, 0x0167	; 0x800167 <R>
    180e:	90 90 68 01 	lds	r9, 0x0168	; 0x800168 <R+0x1>
    1812:	a0 90 69 01 	lds	r10, 0x0169	; 0x800169 <R+0x2>
    1816:	b0 90 6a 01 	lds	r11, 0x016A	; 0x80016a <R+0x3>
    181a:	a5 01       	movw	r20, r10
    181c:	94 01       	movw	r18, r8
    181e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1822:	2c a1       	ldd	r18, Y+36	; 0x24
    1824:	3d a1       	ldd	r19, Y+37	; 0x25
    1826:	4e a1       	ldd	r20, Y+38	; 0x26
    1828:	5f a1       	ldd	r21, Y+39	; 0x27
    182a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    182e:	6c a3       	std	Y+36, r22	; 0x24
    1830:	7d a3       	std	Y+37, r23	; 0x25
    1832:	8e a3       	std	Y+38, r24	; 0x26
    1834:	9f a3       	std	Y+39, r25	; 0x27
						double yc = R*sin(th)*sin(th);
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sin>
    183e:	6b 01       	movw	r12, r22
    1840:	7c 01       	movw	r14, r24
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	c5 01       	movw	r24, r10
    1848:	b4 01       	movw	r22, r8
    184a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    184e:	a7 01       	movw	r20, r14
    1850:	96 01       	movw	r18, r12
    1852:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1856:	6b 01       	movw	r12, r22
    1858:	7c 01       	movw	r14, r24
						if ((xc >= value_1) && (yc >= value_2))
    185a:	2c a1       	ldd	r18, Y+36	; 0x24
    185c:	3d a1       	ldd	r19, Y+37	; 0x25
    185e:	4e a1       	ldd	r20, Y+38	; 0x26
    1860:	5f a1       	ldd	r21, Y+39	; 0x27
    1862:	68 a5       	ldd	r22, Y+40	; 0x28
    1864:	79 a5       	ldd	r23, Y+41	; 0x29
    1866:	8a a5       	ldd	r24, Y+42	; 0x2a
    1868:	9b a5       	ldd	r25, Y+43	; 0x2b
    186a:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    186e:	18 16       	cp	r1, r24
    1870:	5c f0       	brlt	.+22     	; 0x1888 <main+0x122a>
    1872:	a7 01       	movw	r20, r14
    1874:	96 01       	movw	r18, r12
    1876:	6d a5       	ldd	r22, Y+45	; 0x2d
    1878:	7e a5       	ldd	r23, Y+46	; 0x2e
    187a:	8f a5       	ldd	r24, Y+47	; 0x2f
    187c:	98 a9       	ldd	r25, Y+48	; 0x30
    187e:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1882:	18 16       	cp	r1, r24
    1884:	0c f0       	brlt	.+2      	; 0x1888 <main+0x122a>
    1886:	1a c2       	rjmp	.+1076   	; 0x1cbc <main+0x165e>
							break;
						x = sub_function (&old_val_1, xc);     //call function to extract first step
    1888:	4c a1       	ldd	r20, Y+36	; 0x24
    188a:	5d a1       	ldd	r21, Y+37	; 0x25
    188c:	6e a1       	ldd	r22, Y+38	; 0x26
    188e:	7f a1       	ldd	r23, Y+39	; 0x27
    1890:	88 ef       	ldi	r24, 0xF8	; 248
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
    1898:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <x>
    189c:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <x+0x1>
    18a0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <x+0x2>
    18a4:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <x+0x3>
						y = sub_function (&old_val_2, yc);    //call function to extract second step
    18a8:	b7 01       	movw	r22, r14
    18aa:	a6 01       	movw	r20, r12
    18ac:	84 ef       	ldi	r24, 0xF4	; 244
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 10 02 	call	0x420	; 0x420 <sub_function>
    18b4:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <y>
    18b8:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <y+0x1>
    18bc:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <y+0x2>
    18c0:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <y+0x3>
						if ((extrud || Fextrud))
    18c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <extrud>
    18c8:	81 11       	cpse	r24, r1
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <main+0x1278>
    18cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Fextrud>
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <main+0x1278>
    18d4:	ea c1       	rjmp	.+980    	; 0x1caa <main+0x164c>
						{
							if (val == 2)
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	26 16       	cp	r2, r22
    18da:	31 04       	cpc	r3, r1
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <main+0x1282>
    18de:	f1 c0       	rjmp	.+482    	; 0x1ac2 <main+0x1464>
							{
								if (get_value(String,'R') != 0)
    18e0:	62 e5       	ldi	r22, 0x52	; 82
    18e2:	8b e6       	ldi	r24, 0x6B	; 107
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	09 f4       	brne	.+2      	; 0x18fa <main+0x129c>
    18f8:	5b c0       	rjmp	.+182    	; 0x19b0 <main+0x1352>
								{
									double step[4]={x*Xspm,y*Yspm,0,1*Espm};
    18fa:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
    18fe:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
    1902:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
    1906:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
    190a:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
    190e:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
    1912:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
    1916:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
    191a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    191e:	69 83       	std	Y+1, r22	; 0x01
    1920:	7a 83       	std	Y+2, r23	; 0x02
    1922:	8b 83       	std	Y+3, r24	; 0x03
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
    192a:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
    192e:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
    1932:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
    1936:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
    193a:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
    193e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
    1942:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
    1946:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    194a:	6d 83       	std	Y+5, r22	; 0x05
    194c:	7e 83       	std	Y+6, r23	; 0x06
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	19 86       	std	Y+9, r1	; 0x09
    1954:	1a 86       	std	Y+10, r1	; 0x0a
    1956:	1b 86       	std	Y+11, r1	; 0x0b
    1958:	1c 86       	std	Y+12, r1	; 0x0c
    195a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Espm>
    195e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Espm+0x1>
    1962:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Espm+0x2>
    1966:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Espm+0x3>
    196a:	8d 87       	std	Y+13, r24	; 0x0d
    196c:	9e 87       	std	Y+14, r25	; 0x0e
    196e:	af 87       	std	Y+15, r26	; 0x0f
    1970:	b8 8b       	std	Y+16, r27	; 0x10
									motor_movement(step,F,Fe);
    1972:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    1976:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    197a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    197e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    1982:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1986:	6b 01       	movw	r12, r22
    1988:	7c 01       	movw	r14, r24
    198a:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    198e:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    1992:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    1996:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    199a:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    199e:	ab 01       	movw	r20, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	97 01       	movw	r18, r14
    19a4:	86 01       	movw	r16, r12
    19a6:	87 2d       	mov	r24, r7
    19a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19aa:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
    19ae:	7d c1       	rjmp	.+762    	; 0x1caa <main+0x164c>
								}
								else
								{
									double step[4]={x*Xspm*(-I/I),y*Yspm*(-J/J),0,1*Espm};
    19b0:	c0 90 cd 01 	lds	r12, 0x01CD	; 0x8001cd <I>
    19b4:	d0 90 ce 01 	lds	r13, 0x01CE	; 0x8001ce <I+0x1>
    19b8:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <I+0x2>
    19bc:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <I+0x3>
    19c0:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
    19c4:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
    19c8:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
    19cc:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
    19d0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
    19d4:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
    19d8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
    19dc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
    19e0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    19e4:	4b 01       	movw	r8, r22
    19e6:	5c 01       	movw	r10, r24
    19e8:	c7 01       	movw	r24, r14
    19ea:	b6 01       	movw	r22, r12
    19ec:	90 58       	subi	r25, 0x80	; 128
    19ee:	a7 01       	movw	r20, r14
    19f0:	96 01       	movw	r18, r12
    19f2:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	c5 01       	movw	r24, r10
    19fc:	b4 01       	movw	r22, r8
    19fe:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1a02:	69 83       	std	Y+1, r22	; 0x01
    1a04:	7a 83       	std	Y+2, r23	; 0x02
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	c0 90 3f 01 	lds	r12, 0x013F	; 0x80013f <J>
    1a0e:	d0 90 40 01 	lds	r13, 0x0140	; 0x800140 <J+0x1>
    1a12:	e0 90 41 01 	lds	r14, 0x0141	; 0x800141 <J+0x2>
    1a16:	f0 90 42 01 	lds	r15, 0x0142	; 0x800142 <J+0x3>
    1a1a:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
    1a1e:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
    1a22:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
    1a26:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
    1a2a:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
    1a2e:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
    1a32:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
    1a36:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
    1a3a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1a3e:	4b 01       	movw	r8, r22
    1a40:	5c 01       	movw	r10, r24
    1a42:	c7 01       	movw	r24, r14
    1a44:	b6 01       	movw	r22, r12
    1a46:	90 58       	subi	r25, 0x80	; 128
    1a48:	a7 01       	movw	r20, r14
    1a4a:	96 01       	movw	r18, r12
    1a4c:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
    1a50:	9b 01       	movw	r18, r22
    1a52:	ac 01       	movw	r20, r24
    1a54:	c5 01       	movw	r24, r10
    1a56:	b4 01       	movw	r22, r8
    1a58:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1a5c:	6d 83       	std	Y+5, r22	; 0x05
    1a5e:	7e 83       	std	Y+6, r23	; 0x06
    1a60:	8f 83       	std	Y+7, r24	; 0x07
    1a62:	98 87       	std	Y+8, r25	; 0x08
    1a64:	19 86       	std	Y+9, r1	; 0x09
    1a66:	1a 86       	std	Y+10, r1	; 0x0a
    1a68:	1b 86       	std	Y+11, r1	; 0x0b
    1a6a:	1c 86       	std	Y+12, r1	; 0x0c
    1a6c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Espm>
    1a70:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Espm+0x1>
    1a74:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Espm+0x2>
    1a78:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Espm+0x3>
    1a7c:	8d 87       	std	Y+13, r24	; 0x0d
    1a7e:	9e 87       	std	Y+14, r25	; 0x0e
    1a80:	af 87       	std	Y+15, r26	; 0x0f
    1a82:	b8 8b       	std	Y+16, r27	; 0x10
									motor_movement(step,F,Fe);
    1a84:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    1a88:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    1a8c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    1a90:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    1a94:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1a98:	6b 01       	movw	r12, r22
    1a9a:	7c 01       	movw	r14, r24
    1a9c:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    1aa0:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    1aa4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    1aa8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    1aac:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1ab0:	ab 01       	movw	r20, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	97 01       	movw	r18, r14
    1ab6:	86 01       	movw	r16, r12
    1ab8:	87 2d       	mov	r24, r7
    1aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1abc:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
    1ac0:	f4 c0       	rjmp	.+488    	; 0x1caa <main+0x164c>
								}
							} 
							else
							{
								if (get_value(String,'R') != 0)
    1ac2:	62 e5       	ldi	r22, 0x52	; 82
    1ac4:	8b e6       	ldi	r24, 0x6B	; 107
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <main+0x147e>
    1ada:	61 c0       	rjmp	.+194    	; 0x1b9e <main+0x1540>
								{
									double step[4]={x*Xspm*-1,y*Yspm*-1,0,1*Espm};
    1adc:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
    1ae0:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
    1ae4:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
    1ae8:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
    1aec:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
    1af0:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
    1af4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
    1af8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
    1afc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	b0 58       	subi	r27, 0x80	; 128
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	ab 83       	std	Y+3, r26	; 0x03
    1b0c:	bc 83       	std	Y+4, r27	; 0x04
    1b0e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
    1b12:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
    1b16:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
    1b1a:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
    1b1e:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
    1b22:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
    1b26:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
    1b2a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
    1b2e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	b0 58       	subi	r27, 0x80	; 128
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	af 83       	std	Y+7, r26	; 0x07
    1b3e:	b8 87       	std	Y+8, r27	; 0x08
    1b40:	19 86       	std	Y+9, r1	; 0x09
    1b42:	1a 86       	std	Y+10, r1	; 0x0a
    1b44:	1b 86       	std	Y+11, r1	; 0x0b
    1b46:	1c 86       	std	Y+12, r1	; 0x0c
    1b48:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Espm>
    1b4c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Espm+0x1>
    1b50:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Espm+0x2>
    1b54:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Espm+0x3>
    1b58:	8d 87       	std	Y+13, r24	; 0x0d
    1b5a:	9e 87       	std	Y+14, r25	; 0x0e
    1b5c:	af 87       	std	Y+15, r26	; 0x0f
    1b5e:	b8 8b       	std	Y+16, r27	; 0x10
									motor_movement(step,F,Fe);
    1b60:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    1b64:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    1b68:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    1b6c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    1b70:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1b74:	6b 01       	movw	r12, r22
    1b76:	7c 01       	movw	r14, r24
    1b78:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    1b7c:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    1b80:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    1b84:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    1b88:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1b8c:	ab 01       	movw	r20, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	97 01       	movw	r18, r14
    1b92:	86 01       	movw	r16, r12
    1b94:	87 2d       	mov	r24, r7
    1b96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b98:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
    1b9c:	86 c0       	rjmp	.+268    	; 0x1caa <main+0x164c>
								}
								else
								{
									double step[4]={x*Xspm*(I/I),y*Yspm*(J/J),0,1*Espm};
    1b9e:	c0 90 cd 01 	lds	r12, 0x01CD	; 0x8001cd <I>
    1ba2:	d0 90 ce 01 	lds	r13, 0x01CE	; 0x8001ce <I+0x1>
    1ba6:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <I+0x2>
    1baa:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <I+0x3>
    1bae:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <Xspm>
    1bb2:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <Xspm+0x1>
    1bb6:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <Xspm+0x2>
    1bba:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <Xspm+0x3>
    1bbe:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <x>
    1bc2:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <x+0x1>
    1bc6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <x+0x2>
    1bca:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <x+0x3>
    1bce:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1bd2:	4b 01       	movw	r8, r22
    1bd4:	5c 01       	movw	r10, r24
    1bd6:	a7 01       	movw	r20, r14
    1bd8:	96 01       	movw	r18, r12
    1bda:	c7 01       	movw	r24, r14
    1bdc:	b6 01       	movw	r22, r12
    1bde:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
    1be2:	9b 01       	movw	r18, r22
    1be4:	ac 01       	movw	r20, r24
    1be6:	c5 01       	movw	r24, r10
    1be8:	b4 01       	movw	r22, r8
    1bea:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1bee:	69 83       	std	Y+1, r22	; 0x01
    1bf0:	7a 83       	std	Y+2, r23	; 0x02
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	c0 90 3f 01 	lds	r12, 0x013F	; 0x80013f <J>
    1bfa:	d0 90 40 01 	lds	r13, 0x0140	; 0x800140 <J+0x1>
    1bfe:	e0 90 41 01 	lds	r14, 0x0141	; 0x800141 <J+0x2>
    1c02:	f0 90 42 01 	lds	r15, 0x0142	; 0x800142 <J+0x3>
    1c06:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Yspm>
    1c0a:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Yspm+0x1>
    1c0e:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Yspm+0x2>
    1c12:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Yspm+0x3>
    1c16:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <y>
    1c1a:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <y+0x1>
    1c1e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <y+0x2>
    1c22:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <y+0x3>
    1c26:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1c2a:	4b 01       	movw	r8, r22
    1c2c:	5c 01       	movw	r10, r24
    1c2e:	a7 01       	movw	r20, r14
    1c30:	96 01       	movw	r18, r12
    1c32:	c7 01       	movw	r24, r14
    1c34:	b6 01       	movw	r22, r12
    1c36:	0e 94 9f 13 	call	0x273e	; 0x273e <__divsf3>
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	c5 01       	movw	r24, r10
    1c40:	b4 01       	movw	r22, r8
    1c42:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    1c46:	6d 83       	std	Y+5, r22	; 0x05
    1c48:	7e 83       	std	Y+6, r23	; 0x06
    1c4a:	8f 83       	std	Y+7, r24	; 0x07
    1c4c:	98 87       	std	Y+8, r25	; 0x08
    1c4e:	19 86       	std	Y+9, r1	; 0x09
    1c50:	1a 86       	std	Y+10, r1	; 0x0a
    1c52:	1b 86       	std	Y+11, r1	; 0x0b
    1c54:	1c 86       	std	Y+12, r1	; 0x0c
    1c56:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Espm>
    1c5a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Espm+0x1>
    1c5e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Espm+0x2>
    1c62:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Espm+0x3>
    1c66:	8d 87       	std	Y+13, r24	; 0x0d
    1c68:	9e 87       	std	Y+14, r25	; 0x0e
    1c6a:	af 87       	std	Y+15, r26	; 0x0f
    1c6c:	b8 8b       	std	Y+16, r27	; 0x10
									motor_movement(step,F,Fe);
    1c6e:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    1c72:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    1c76:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    1c7a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    1c7e:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1c82:	6b 01       	movw	r12, r22
    1c84:	7c 01       	movw	r14, r24
    1c86:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    1c8a:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    1c8e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    1c92:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    1c96:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1c9a:	ab 01       	movw	r20, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	97 01       	movw	r18, r14
    1ca0:	86 01       	movw	r16, r12
    1ca2:	87 2d       	mov	r24, r7
    1ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca6:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
					else
					{
						R = sqrt(pow(I,2)+pow(J,2));
					}
					status = 1;
					for (int th = 0 ; th <= 360 ; th++)
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	48 1a       	sub	r4, r24
    1cae:	58 0a       	sbc	r5, r24
    1cb0:	99 e6       	ldi	r25, 0x69	; 105
    1cb2:	49 16       	cp	r4, r25
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	59 06       	cpc	r5, r25
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <main+0x165e>
    1cba:	98 cd       	rjmp	.-1232   	; 0x17ec <main+0x118e>
    1cbc:	6a a8       	ldd	r6, Y+50	; 0x32
    1cbe:	7b a8       	ldd	r7, Y+51	; 0x33
								}
							}
							
						} 
					}
					status = 0;
    1cc0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
					break;
    1cc4:	0c 94 9a 03 	jmp	0x734	; 0x734 <main+0xd6>
				case 28:
					if (!homeSet)
    1cc8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <homeSet>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	39 c0       	rjmp	.+114    	; 0x1d42 <main+0x16e4>
					{
						x = find(String,'X');
    1cd0:	68 e5       	ldi	r22, 0x58	; 88
    1cd2:	8b e6       	ldi	r24, 0x6B	; 107
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
    1cda:	68 2f       	mov	r22, r24
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 47 14 	call	0x288e	; 0x288e <__floatunsisf>
    1ce6:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <x>
    1cea:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <x+0x1>
    1cee:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <x+0x2>
    1cf2:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <x+0x3>
						y = find(String,'Y');
    1cf6:	69 e5       	ldi	r22, 0x59	; 89
    1cf8:	8b e6       	ldi	r24, 0x6B	; 107
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
    1d00:	68 2f       	mov	r22, r24
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 47 14 	call	0x288e	; 0x288e <__floatunsisf>
    1d0c:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <y>
    1d10:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <y+0x1>
    1d14:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <y+0x2>
    1d18:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <y+0x3>
						z = find(String,'Z');
    1d1c:	6a e5       	ldi	r22, 0x5A	; 90
    1d1e:	8b e6       	ldi	r24, 0x6B	; 107
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <find>
    1d26:	68 2f       	mov	r22, r24
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 47 14 	call	0x288e	; 0x288e <__floatunsisf>
    1d32:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <z>
    1d36:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <z+0x1>
    1d3a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <z+0x2>
    1d3e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <z+0x3>
						//make auto home
					} 
					Transmit_Data("ok");
    1d42:	8e eb       	ldi	r24, 0xBE	; 190
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
					break;
    1d4a:	0c 94 9a 03 	jmp	0x734	; 0x734 <main+0xd6>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					EX = get_value(String,'E');
					if ((EX && value_1 && value_2 && value_3) == 0)
					{
						if (get_value(String,'F') != 0)
    1d4e:	66 e4       	ldi	r22, 0x46	; 70
    1d50:	8b e6       	ldi	r24, 0x6B	; 107
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <main+0x170a>
    1d66:	cb cb       	rjmp	.-2154   	; 0x14fe <main+0xea0>
    1d68:	af cb       	rjmp	.-2210   	; 0x14c8 <main+0xe6a>
							Fe = get_value(String,'F');
						}
					}
					else
					{
						if (get_value(String,'F') != 0)
    1d6a:	66 e4       	ldi	r22, 0x46	; 70
    1d6c:	8b e6       	ldi	r24, 0x6B	; 107
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_value>
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a9 01       	movw	r20, r18
    1d7a:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <main+0x1726>
    1d82:	bd cb       	rjmp	.-2182   	; 0x14fe <main+0xea0>
    1d84:	af cb       	rjmp	.-2210   	; 0x14e4 <main+0xe86>

00001d86 <__vector_9>:
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	Tc = T - 273.15;
	return (Tc);
}
ISR(TIMER0_OVF_vect)
{
    1d86:	1f 92       	push	r1
    1d88:	0f 92       	push	r0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	0f 92       	push	r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	ef 93       	push	r30
    1db2:	ff 93       	push	r31
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	64 97       	sbiw	r28, 0x14	; 20
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	cd bf       	out	0x3d, r28	; 61
	static uint16_t i = 0;

	if (i < TIME_INTERVAL) 
    1dc2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__data_end>
    1dc6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__data_end+0x1>
    1dca:	8d 39       	cpi	r24, 0x9D	; 157
    1dcc:	91 05       	cpc	r25, r1
    1dce:	30 f4       	brcc	.+12     	; 0x1ddc <__vector_9+0x56>
	{
		i++;
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__data_end+0x1>
    1dd6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__data_end>
    1dda:	09 c0       	rjmp	.+18     	; 0x1dee <__vector_9+0x68>
		} else {
		gFlags.pidTimer = 1;
    1ddc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gFlags>
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gFlags>
		i               = 0;
    1de6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__data_end+0x1>
    1dea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__data_end>
	}

	if (gFlags.pidTimer == 1 ) 
    1dee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gFlags>
    1df2:	80 ff       	sbrs	r24, 0
    1df4:	d8 c0       	rjmp	.+432    	; 0x1fa6 <__vector_9+0x220>
	{
		OCR0 =	 255 - pid_Controller(SE0,getTemp(T0), &pidData);
    1df6:	80 e5       	ldi	r24, 0x50	; 80
    1df8:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1dfc:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1e00:	6b 01       	movw	r12, r22
    1e02:	7c 01       	movw	r14, r24
    1e04:	60 91 fc 00 	lds	r22, 0x00FC	; 0x8000fc <SE0>
    1e08:	70 91 fd 00 	lds	r23, 0x00FD	; 0x8000fd <SE0+0x1>
    1e0c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <SE0+0x2>
    1e10:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <SE0+0x3>
    1e14:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	41 ed       	ldi	r20, 0xD1	; 209
    1e1e:	51 e0       	ldi	r21, 0x01	; 1
    1e20:	b6 01       	movw	r22, r12
    1e22:	0e 94 45 12 	call	0x248a	; 0x248a <pid_Controller>
    1e26:	80 95       	com	r24
    1e28:	8c bf       	out	0x3c, r24	; 60
		//OCR1A =  255 - pid_Controller(SB,getTemp(T2), &pidData);
		gFlags.pidTimer = FALSE;
    1e2a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gFlags>
    1e2e:	8e 7f       	andi	r24, 0xFE	; 254
    1e30:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gFlags>
    1e34:	e7 ee       	ldi	r30, 0xE7	; 231
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	a9 e0       	ldi	r26, 0x09	; 9
    1e3a:	b1 e0       	ldi	r27, 0x01	; 1
    1e3c:	81 ef       	ldi	r24, 0xF1	; 241
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
		for (int i = 0 ; i < 10 ; i ++)
		{
			TE[i] = 0;
    1e40:	11 92       	st	Z+, r1
			TB[i] = 0;
    1e42:	1d 92       	st	X+, r1
	if (gFlags.pidTimer == 1 ) 
	{
		OCR0 =	 255 - pid_Controller(SE0,getTemp(T0), &pidData);
		//OCR1A =  255 - pid_Controller(SB,getTemp(T2), &pidData);
		gFlags.pidTimer = FALSE;
		for (int i = 0 ; i < 10 ; i ++)
    1e44:	e8 17       	cp	r30, r24
    1e46:	f9 07       	cpc	r31, r25
    1e48:	d9 f7       	brne	.-10     	; 0x1e40 <__vector_9+0xba>
		{
			TE[i] = 0;
			TB[i] = 0;
		}
		sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
    1e4a:	80 e5       	ldi	r24, 0x50	; 80
    1e4c:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1e50:	01 ec       	ldi	r16, 0xC1	; 193
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	23 e0       	ldi	r18, 0x03	; 3
    1e56:	42 e0       	ldi	r20, 0x02	; 2
    1e58:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	87 ee       	ldi	r24, 0xE7	; 231
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
		sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
    1e6c:	82 e5       	ldi	r24, 0x52	; 82
    1e6e:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1e72:	23 e0       	ldi	r18, 0x03	; 3
    1e74:	42 e0       	ldi	r20, 0x02	; 2
    1e76:	0e 94 23 17 	call	0x2e46	; 0x2e46 <dtostrf>
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	89 e0       	ldi	r24, 0x09	; 9
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	9f 93       	push	r25
    1e84:	8f 93       	push	r24
    1e86:	0e 94 6d 17 	call	0x2eda	; 0x2eda <sprintf>
		if (( BED_Activ))
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <BED_Activ>
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <__vector_9+0x118>
    1e9c:	52 c0       	rjmp	.+164    	; 0x1f42 <__vector_9+0x1bc>
		{
			char TEMP[20]={'T',':',
    1e9e:	84 e5       	ldi	r24, 0x54	; 84
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	8a e3       	ldi	r24, 0x3A	; 58
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
				TE[0],TE[1],TE[2],TE[3],TE[4],
    1ea6:	e7 ee       	ldi	r30, 0xE7	; 231
    1ea8:	f1 e0       	ldi	r31, 0x01	; 1
		}
		sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
		sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
		if (( BED_Activ))
		{
			char TEMP[20]={'T',':',
    1eaa:	90 81       	ld	r25, Z
    1eac:	9b 83       	std	Y+3, r25	; 0x03
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	92 81       	ldd	r25, Z+2	; 0x02
    1eb4:	9d 83       	std	Y+5, r25	; 0x05
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	94 81       	ldd	r25, Z+4	; 0x04
    1ebc:	9f 83       	std	Y+7, r25	; 0x07
    1ebe:	90 e2       	ldi	r25, 0x20	; 32
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	25 e4       	ldi	r18, 0x45	; 69
    1ec4:	29 87       	std	Y+9, r18	; 0x09
    1ec6:	8a 87       	std	Y+10, r24	; 0x0a
    1ec8:	20 e3       	ldi	r18, 0x30	; 48
    1eca:	2b 87       	std	Y+11, r18	; 0x0b
    1ecc:	9c 87       	std	Y+12, r25	; 0x0c
    1ece:	92 e4       	ldi	r25, 0x42	; 66
    1ed0:	9d 87       	std	Y+13, r25	; 0x0d
    1ed2:	8e 87       	std	Y+14, r24	; 0x0e
				TE[0],TE[1],TE[2],TE[3],TE[4],
				' ','E',':','0',' ',
			'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
    1ed4:	e9 e0       	ldi	r30, 0x09	; 9
    1ed6:	f1 e0       	ldi	r31, 0x01	; 1
		}
		sprintf(TE,dtostrf(getTemp(T0), 2,3,"%f"));
		sprintf(TB,dtostrf(getTemp(T2), 2,3,"%f"));
		if (( BED_Activ))
		{
			char TEMP[20]={'T',':',
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 87       	std	Y+15, r24	; 0x0f
    1edc:	81 81       	ldd	r24, Z+1	; 0x01
    1ede:	88 8b       	std	Y+16, r24	; 0x10
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	89 8b       	std	Y+17, r24	; 0x11
    1ee4:	83 81       	ldd	r24, Z+3	; 0x03
    1ee6:	8a 8b       	std	Y+18, r24	; 0x12
    1ee8:	84 81       	ldd	r24, Z+4	; 0x04
    1eea:	8b 8b       	std	Y+19, r24	; 0x13
    1eec:	8d e0       	ldi	r24, 0x0D	; 13
    1eee:	8c 8b       	std	Y+20, r24	; 0x14
				TE[0],TE[1],TE[2],TE[3],TE[4],
				' ','E',':','0',' ',
			'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
			if ((SE0 < getTemp(T0)) && (SB < getTemp(T2)))
    1ef0:	80 e5       	ldi	r24, 0x50	; 80
    1ef2:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1ef6:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <SE0>
    1efa:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <SE0+0x1>
    1efe:	40 91 fe 00 	lds	r20, 0x00FE	; 0x8000fe <SE0+0x2>
    1f02:	50 91 ff 00 	lds	r21, 0x00FF	; 0x8000ff <SE0+0x3>
    1f06:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	9c f4       	brge	.+38     	; 0x1f34 <__vector_9+0x1ae>
    1f0e:	82 e5       	ldi	r24, 0x52	; 82
    1f10:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1f14:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <SB>
    1f18:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <SB+0x1>
    1f1c:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <SB+0x2>
    1f20:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <SB+0x3>
    1f24:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	24 f4       	brge	.+8      	; 0x1f34 <__vector_9+0x1ae>
			{
				extrud = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <extrud>
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <__vector_9+0x1b2>
			} 
			else
			{
				extrud = 0;
    1f34:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <extrud>
			}
			Transmit_Data(TEMP);
    1f38:	ce 01       	movw	r24, r28
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
    1f40:	32 c0       	rjmp	.+100    	; 0x1fa6 <__vector_9+0x220>
		}
		else
		{
			char TEMP[12]={'T',':',
    1f42:	84 e5       	ldi	r24, 0x54	; 84
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	8a e3       	ldi	r24, 0x3A	; 58
    1f48:	8a 83       	std	Y+2, r24	; 0x02
				TE[0],TE[1],TE[2],TE[3],TE[4],
    1f4a:	e7 ee       	ldi	r30, 0xE7	; 231
    1f4c:	f1 e0       	ldi	r31, 0x01	; 1
			}
			Transmit_Data(TEMP);
		}
		else
		{
			char TEMP[12]={'T',':',
    1f4e:	90 81       	ld	r25, Z
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	92 81       	ldd	r25, Z+2	; 0x02
    1f58:	9d 83       	std	Y+5, r25	; 0x05
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	94 81       	ldd	r25, Z+4	; 0x04
    1f60:	9f 83       	std	Y+7, r25	; 0x07
    1f62:	90 e2       	ldi	r25, 0x20	; 32
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	95 e4       	ldi	r25, 0x45	; 69
    1f68:	99 87       	std	Y+9, r25	; 0x09
    1f6a:	8a 87       	std	Y+10, r24	; 0x0a
    1f6c:	80 e3       	ldi	r24, 0x30	; 48
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	8d e0       	ldi	r24, 0x0D	; 13
    1f72:	8c 87       	std	Y+12, r24	; 0x0c
				TE[0],TE[1],TE[2],TE[3],TE[4],
			' ','E',':','0','\r'};
			if ((SE0 < getTemp(T0)))
    1f74:	80 e5       	ldi	r24, 0x50	; 80
    1f76:	0e 94 98 02 	call	0x530	; 0x530 <getTemp>
    1f7a:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <SE0>
    1f7e:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <SE0+0x1>
    1f82:	40 91 fe 00 	lds	r20, 0x00FE	; 0x8000fe <SE0+0x2>
    1f86:	50 91 ff 00 	lds	r21, 0x00FF	; 0x8000ff <SE0+0x3>
    1f8a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__gesf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	24 f4       	brge	.+8      	; 0x1f9a <__vector_9+0x214>
			{
				extrud = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <extrud>
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <__vector_9+0x218>
			}
			else
			{
				extrud = 0;
    1f9a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <extrud>
			}
			Transmit_Data(TEMP);
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
		}
	}
}
    1fa6:	64 96       	adiw	r28, 0x14	; 20
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	ff 91       	pop	r31
    1fb8:	ef 91       	pop	r30
    1fba:	bf 91       	pop	r27
    1fbc:	af 91       	pop	r26
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	7f 91       	pop	r23
    1fc4:	6f 91       	pop	r22
    1fc6:	5f 91       	pop	r21
    1fc8:	4f 91       	pop	r20
    1fca:	3f 91       	pop	r19
    1fcc:	2f 91       	pop	r18
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
	if (status == 1 && (UCSRA & (1 << RXC)))
    2006:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <status>
    200a:	88 23       	and	r24, r24
    200c:	91 f0       	breq	.+36     	; 0x2032 <__vector_8+0x4e>
    200e:	5f 9b       	sbis	0x0b, 7	; 11
    2010:	10 c0       	rjmp	.+32     	; 0x2032 <__vector_8+0x4e>
    2012:	eb e6       	ldi	r30, 0x6B	; 107
    2014:	f1 e0       	ldi	r31, 0x01	; 1
    2016:	8b eb       	ldi	r24, 0xBB	; 187
    2018:	91 e0       	ldi	r25, 0x01	; 1
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    201a:	11 92       	st	Z+, r1
}
ISR(TIMER1_OVF_vect)
{
	if (status == 1 && (UCSRA & (1 << RXC)))
	{
		for (int i = 0 ; i < 80 ;i++)
    201c:	e8 17       	cp	r30, r24
    201e:	f9 07       	cpc	r31, r25
    2020:	e1 f7       	brne	.-8      	; 0x201a <__vector_8+0x36>
		{
			String [i] = 0;
		}
		Recive_Data(String);
    2022:	8b e6       	ldi	r24, 0x6B	; 107
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 0d 13 	call	0x261a	; 0x261a <Recive_Data>
		Transmit_Data("the printer is busy");
    202a:	89 ed       	ldi	r24, 0xD9	; 217
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <Transmit_Data>
	} 	
}
    2032:	ff 91       	pop	r31
    2034:	ef 91       	pop	r30
    2036:	bf 91       	pop	r27
    2038:	af 91       	pop	r26
    203a:	9f 91       	pop	r25
    203c:	8f 91       	pop	r24
    203e:	7f 91       	pop	r23
    2040:	6f 91       	pop	r22
    2042:	5f 91       	pop	r21
    2044:	4f 91       	pop	r20
    2046:	3f 91       	pop	r19
    2048:	2f 91       	pop	r18
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
    205e:	8f 92       	push	r8
    2060:	9f 92       	push	r9
    2062:	af 92       	push	r10
    2064:	bf 92       	push	r11
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	2f 93       	push	r18
    2070:	3f 93       	push	r19
    2072:	4f 93       	push	r20
    2074:	5f 93       	push	r21
    2076:	6f 93       	push	r22
    2078:	7f 93       	push	r23
    207a:	8f 93       	push	r24
    207c:	9f 93       	push	r25
    207e:	af 93       	push	r26
    2080:	bf 93       	push	r27
    2082:	ef 93       	push	r30
    2084:	ff 93       	push	r31
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	64 97       	sbiw	r28, 0x14	; 20
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	cd bf       	out	0x3d, r28	; 61
	if ( get_int (String,'M') == 112)
    2094:	6d e4       	ldi	r22, 0x4D	; 77
    2096:	8b e6       	ldi	r24, 0x6B	; 107
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	0e 94 b1 01 	call	0x362	; 0x362 <get_int>
    209e:	80 37       	cpi	r24, 0x70	; 112
    20a0:	91 05       	cpc	r25, r1
    20a2:	39 f5       	brne	.+78     	; 0x20f2 <__vector_4+0x9e>
	{
		double step[5]={0,0,0,0,0};
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	7c 01       	movw	r14, r24
    20aa:	84 e1       	ldi	r24, 0x14	; 20
    20ac:	f7 01       	movw	r30, r14
    20ae:	11 92       	st	Z+, r1
    20b0:	8a 95       	dec	r24
    20b2:	e9 f7       	brne	.-6      	; 0x20ae <__vector_4+0x5a>
		motor_movement(step,F,Fe);
    20b4:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <Fe>
    20b8:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <Fe+0x1>
    20bc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Fe+0x2>
    20c0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <Fe+0x3>
    20c4:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    20c8:	4b 01       	movw	r8, r22
    20ca:	5c 01       	movw	r10, r24
    20cc:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <F>
    20d0:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <F+0x1>
    20d4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <F+0x2>
    20d8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <F+0x3>
    20dc:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    20e0:	ab 01       	movw	r20, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	95 01       	movw	r18, r10
    20e6:	84 01       	movw	r16, r8
    20e8:	c7 01       	movw	r24, r14
    20ea:	0e 94 9a 10 	call	0x2134	; 0x2134 <motor_movement>
		status = 0;
    20ee:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <status>
	}
    20f2:	64 96       	adiw	r28, 0x14	; 20
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	ff 91       	pop	r31
    2104:	ef 91       	pop	r30
    2106:	bf 91       	pop	r27
    2108:	af 91       	pop	r26
    210a:	9f 91       	pop	r25
    210c:	8f 91       	pop	r24
    210e:	7f 91       	pop	r23
    2110:	6f 91       	pop	r22
    2112:	5f 91       	pop	r21
    2114:	4f 91       	pop	r20
    2116:	3f 91       	pop	r19
    2118:	2f 91       	pop	r18
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	bf 90       	pop	r11
    2124:	af 90       	pop	r10
    2126:	9f 90       	pop	r9
    2128:	8f 90       	pop	r8
    212a:	0f 90       	pop	r0
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	0f 90       	pop	r0
    2130:	1f 90       	pop	r1
    2132:	18 95       	reti

00002134 <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],long speed,long exspeed)
{
    2134:	2f 92       	push	r2
    2136:	3f 92       	push	r3
    2138:	4f 92       	push	r4
    213a:	5f 92       	push	r5
    213c:	6f 92       	push	r6
    213e:	7f 92       	push	r7
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	c8 54       	subi	r28, 0x48	; 72
    215e:	d1 09       	sbc	r29, r1
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	6c 01       	movw	r12, r24
    216c:	4a 01       	movw	r8, r20
    216e:	5b 01       	movw	r10, r22
    2170:	29 96       	adiw	r28, 0x09	; 9
    2172:	0c af       	std	Y+60, r16	; 0x3c
    2174:	1d af       	std	Y+61, r17	; 0x3d
    2176:	2e af       	std	Y+62, r18	; 0x3e
    2178:	3f af       	std	Y+63, r19	; 0x3f
    217a:	29 97       	sbiw	r28, 0x09	; 9
	long stepDuration = (1/speed)*60*pow(10,6);
    217c:	41 2c       	mov	r4, r1
    217e:	51 2c       	mov	r5, r1
    2180:	32 01       	movw	r6, r4
    2182:	43 94       	inc	r4
    2184:	c3 01       	movw	r24, r6
    2186:	b2 01       	movw	r22, r4
    2188:	a5 01       	movw	r20, r10
    218a:	94 01       	movw	r18, r8
    218c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__divmodsi4>
    2190:	ac e3       	ldi	r26, 0x3C	; 60
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__muluhisi3>
    2198:	0e 94 49 14 	call	0x2892	; 0x2892 <__floatsisf>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	34 e2       	ldi	r19, 0x24	; 36
    21a0:	44 e7       	ldi	r20, 0x74	; 116
    21a2:	59 e4       	ldi	r21, 0x49	; 73
    21a4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    21a8:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    21ac:	4b 01       	movw	r8, r22
    21ae:	5c 01       	movw	r10, r24
	long exstepDuration = (1/exspeed)*60*pow(10,6);
    21b0:	c3 01       	movw	r24, r6
    21b2:	b2 01       	movw	r22, r4
    21b4:	29 96       	adiw	r28, 0x09	; 9
    21b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    21b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    21ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    21bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    21be:	29 97       	sbiw	r28, 0x09	; 9
    21c0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__divmodsi4>
    21c4:	ac e3       	ldi	r26, 0x3C	; 60
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__muluhisi3>
    21cc:	0e 94 49 14 	call	0x2892	; 0x2892 <__floatsisf>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	34 e2       	ldi	r19, 0x24	; 36
    21d4:	44 e7       	ldi	r20, 0x74	; 116
    21d6:	59 e4       	ldi	r21, 0x49	; 73
    21d8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    21dc:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixsfsi>
    21e0:	2b 01       	movw	r4, r22
    21e2:	3c 01       	movw	r6, r24
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    21e4:	88 e0       	ldi	r24, 0x08	; 8
    21e6:	e0 e8       	ldi	r30, 0x80	; 128
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	de 01       	movw	r26, r28
    21ec:	11 96       	adiw	r26, 0x01	; 1
    21ee:	01 90       	ld	r0, Z+
    21f0:	0d 92       	st	X+, r0
    21f2:	8a 95       	dec	r24
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <motor_movement+0xba>
    21f6:	76 01       	movw	r14, r12
    21f8:	8e 01       	movw	r16, r28
    21fa:	0f 5f       	subi	r16, 0xFF	; 255
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	1e 01       	movw	r2, r28
    2200:	29 e0       	ldi	r18, 0x09	; 9
    2202:	22 0e       	add	r2, r18
    2204:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	f7 01       	movw	r30, r14
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    221a:	88 23       	and	r24, r24
    221c:	8c f4       	brge	.+34     	; 0x2240 <motor_movement+0x10c>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	f8 01       	movw	r30, r16
    2222:	60 81       	ld	r22, Z
    2224:	83 e3       	ldi	r24, 0x33	; 51
    2226:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
			step [i] = step [i] * -1;
    222a:	f7 01       	movw	r30, r14
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	a2 81       	ldd	r26, Z+2	; 0x02
    2232:	b3 81       	ldd	r27, Z+3	; 0x03
    2234:	b0 58       	subi	r27, 0x80	; 128
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
    223e:	06 c0       	rjmp	.+12     	; 0x224c <motor_movement+0x118>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	f8 01       	movw	r30, r16
    2244:	60 81       	ld	r22, Z
    2246:	83 e3       	ldi	r24, 0x33	; 51
    2248:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
    224c:	f4 e0       	ldi	r31, 0x04	; 4
    224e:	ef 0e       	add	r14, r31
    2250:	f1 1c       	adc	r15, r1
    2252:	0e 5f       	subi	r16, 0xFE	; 254
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],long speed,long exspeed)
{
	long stepDuration = (1/speed)*60*pow(10,6);
	long exstepDuration = (1/exspeed)*60*pow(10,6);
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    2256:	20 16       	cp	r2, r16
    2258:	31 06       	cpc	r3, r17
    225a:	a9 f6       	brne	.-86     	; 0x2206 <motor_movement+0xd2>
		   int Out;     // make one step to one motor in one unit of time
		   int Next[8]; 
	    };
	 typedef const struct State STyp; //define STYP from type of struct State 
	 /*{Current state,{next state}} */
	 STyp FSM[3]=
    225c:	86 e3       	ldi	r24, 0x36	; 54
    225e:	e8 e8       	ldi	r30, 0x88	; 136
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	de 01       	movw	r26, r28
    2264:	1f 96       	adiw	r26, 0x0f	; 15
    2266:	01 90       	ld	r0, Z+
    2268:	0d 92       	st	X+, r0
    226a:	8a 95       	dec	r24
    226c:	e1 f7       	brne	.-8      	; 0x2266 <motor_movement+0x132>
		 {Y,{E,X,Y,X,Z,Z,Z,Z}},
		 {Z,{E,X,Y,X,Z,X,Y,X}}
	   };	 
		index = 1;
		S = X;
		 j [0] = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a 87       	std	Y+10, r25	; 0x0a
    2274:	89 87       	std	Y+9, r24	; 0x09
		 j [1] = 1;
    2276:	9c 87       	std	Y+12, r25	; 0x0c
    2278:	8b 87       	std	Y+11, r24	; 0x0b
		 j [2] = 1;
    227a:	9e 87       	std	Y+14, r25	; 0x0e
    227c:	8d 87       	std	Y+13, r24	; 0x0d
		 {X,{E,X,Y,Y,Z,Z,Y,Y}},
		 {Y,{E,X,Y,X,Z,Z,Z,Z}},
		 {Z,{E,X,Y,X,Z,X,Y,X}}
	   };	 
		index = 1;
		S = X;
    227e:	00 e0       	ldi	r16, 0x00	; 0
    2280:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2282:	f8 01       	movw	r30, r16
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	cf 01       	movw	r24, r30
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	e8 0f       	add	r30, r24
    2298:	f9 1f       	adc	r31, r25
    229a:	21 e0       	ldi	r18, 0x01	; 1
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	2c 0f       	add	r18, r28
    22a0:	3d 1f       	adc	r19, r29
    22a2:	e2 0f       	add	r30, r18
    22a4:	f3 1f       	adc	r31, r19
    22a6:	66 85       	ldd	r22, Z+14	; 0x0e
    22a8:	83 e3       	ldi	r24, 0x33	; 51
    22aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <pin_XOR>
			 step[S] = step[S] - 1;
    22ae:	78 01       	movw	r14, r16
    22b0:	ee 0c       	add	r14, r14
    22b2:	ff 1c       	adc	r15, r15
    22b4:	ee 0c       	add	r14, r14
    22b6:	ff 1c       	adc	r15, r15
    22b8:	ec 0c       	add	r14, r12
    22ba:	fd 1c       	adc	r15, r13
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	f7 01       	movw	r30, r14
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0e 94 28 13 	call	0x2650	; 0x2650 <__subsf3>
    22d2:	f7 01       	movw	r30, r14
    22d4:	60 83       	st	Z, r22
    22d6:	71 83       	std	Z+1, r23	; 0x01
    22d8:	82 83       	std	Z+2, r24	; 0x02
    22da:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	5c f0       	brlt	.+22     	; 0x2300 <motor_movement+0x1cc>
			  j[S] = 0;
    22ea:	f8 01       	movw	r30, r16
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	2c 0f       	add	r18, r28
    22f6:	3d 1f       	adc	r19, r29
    22f8:	e2 0f       	add	r30, r18
    22fa:	f3 1f       	adc	r31, r19
    22fc:	11 86       	std	Z+9, r1	; 0x09
    22fe:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    2300:	03 30       	cpi	r16, 0x03	; 3
    2302:	11 05       	cpc	r17, r1
    2304:	59 f4       	brne	.+22     	; 0x231c <motor_movement+0x1e8>
			  {
				  for (int i = exstepDuration ; i>0 ; i-- )
    2306:	c2 01       	movw	r24, r4
    2308:	18 16       	cp	r1, r24
    230a:	19 06       	cpc	r1, r25
    230c:	8c f4       	brge	.+34     	; 0x2330 <motor_movement+0x1fc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    230e:	35 e0       	ldi	r19, 0x05	; 5
    2310:	3a 95       	dec	r19
    2312:	f1 f7       	brne	.-4      	; 0x2310 <motor_movement+0x1dc>
    2314:	00 00       	nop
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	d1 f7       	brne	.-12     	; 0x230e <motor_movement+0x1da>
    231a:	0a c0       	rjmp	.+20     	; 0x2330 <motor_movement+0x1fc>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>0 ; i-- )
    231c:	c4 01       	movw	r24, r8
    231e:	18 16       	cp	r1, r24
    2320:	19 06       	cpc	r1, r25
    2322:	34 f4       	brge	.+12     	; 0x2330 <motor_movement+0x1fc>
    2324:	e5 e0       	ldi	r30, 0x05	; 5
    2326:	ea 95       	dec	r30
    2328:	f1 f7       	brne	.-4      	; 0x2326 <motor_movement+0x1f2>
    232a:	00 00       	nop
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	d1 f7       	brne	.-12     	; 0x2324 <motor_movement+0x1f0>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  =  (j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	9c 01       	movw	r18, r24
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2340:	9c 85       	ldd	r25, Y+12	; 0x0c
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	82 0f       	add	r24, r18
    2348:	93 1f       	adc	r25, r19
    234a:	29 85       	ldd	r18, Y+9	; 0x09
    234c:	3a 85       	ldd	r19, Y+10	; 0x0a
    234e:	82 0f       	add	r24, r18
    2350:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    2352:	f8 01       	movw	r30, r16
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	e0 0f       	add	r30, r16
    2362:	f1 1f       	adc	r31, r17
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	31 96       	adiw	r30, 0x01	; 1
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	2c 0f       	add	r18, r28
    2374:	3d 1f       	adc	r19, r29
    2376:	e2 0f       	add	r30, r18
    2378:	f3 1f       	adc	r31, r19
    237a:	06 85       	ldd	r16, Z+14	; 0x0e
    237c:	17 85       	ldd	r17, Z+15	; 0x0f
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    237e:	89 2b       	or	r24, r25
    2380:	09 f0       	breq	.+2      	; 0x2384 <motor_movement+0x250>
    2382:	7f cf       	rjmp	.-258    	; 0x2282 <motor_movement+0x14e>
				  }
			  } 
			 index  =  (j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    2384:	c8 5b       	subi	r28, 0xB8	; 184
    2386:	df 4f       	sbci	r29, 0xFF	; 255
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	7f 90       	pop	r7
    23ac:	6f 90       	pop	r6
    23ae:	5f 90       	pop	r5
    23b0:	4f 90       	pop	r4
    23b2:	3f 90       	pop	r3
    23b4:	2f 90       	pop	r2
    23b6:	08 95       	ret

000023b8 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    23b8:	88 35       	cpi	r24, 0x58	; 88
    23ba:	49 f0       	breq	.+18     	; 0x23ce <motor_EN_DES+0x16>
    23bc:	18 f4       	brcc	.+6      	; 0x23c4 <motor_EN_DES+0xc>
    23be:	85 34       	cpi	r24, 0x45	; 69
    23c0:	c1 f0       	breq	.+48     	; 0x23f2 <motor_EN_DES+0x3a>
    23c2:	08 95       	ret
    23c4:	89 35       	cpi	r24, 0x59	; 89
    23c6:	49 f0       	breq	.+18     	; 0x23da <motor_EN_DES+0x22>
    23c8:	8a 35       	cpi	r24, 0x5A	; 90
    23ca:	69 f0       	breq	.+26     	; 0x23e6 <motor_EN_DES+0x2e>
    23cc:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    23ce:	46 2f       	mov	r20, r22
    23d0:	64 e0       	ldi	r22, 0x04	; 4
    23d2:	86 e3       	ldi	r24, 0x36	; 54
    23d4:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
			break;
    23d8:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    23da:	46 2f       	mov	r20, r22
    23dc:	65 e0       	ldi	r22, 0x05	; 5
    23de:	86 e3       	ldi	r24, 0x36	; 54
    23e0:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
			break;
    23e4:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    23e6:	46 2f       	mov	r20, r22
    23e8:	66 e0       	ldi	r22, 0x06	; 6
    23ea:	86 e3       	ldi	r24, 0x36	; 54
    23ec:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
			break;
    23f0:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    23f2:	46 2f       	mov	r20, r22
    23f4:	67 e0       	ldi	r22, 0x07	; 7
    23f6:	86 e3       	ldi	r24, 0x36	; 54
    23f8:	0e 94 2c 02 	call	0x458	; 0x458 <pin_write>
    23fc:	08 95       	ret

000023fe <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	83 e3       	ldi	r24, 0x33	; 51
    2402:	0e 94 49 02 	call	0x492	; 0x492 <port_direction>
	port_write(M_PORT,0);
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	83 e3       	ldi	r24, 0x33	; 51
    240a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <port_write>
	motor_EN_DES('X',0);
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	88 e5       	ldi	r24, 0x58	; 88
    2412:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
	motor_EN_DES('Y',0);
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	89 e5       	ldi	r24, 0x59	; 89
    241a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
	motor_EN_DES('Z',0);
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	8a e5       	ldi	r24, 0x5A	; 90
    2422:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
	motor_EN_DES('E',0);
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	85 e4       	ldi	r24, 0x45	; 69
    242a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <motor_EN_DES>
    242e:	08 95       	ret

00002430 <pid_Init>:
 *  \param i_factor  Integral term.
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
{
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	fb 01       	movw	r30, r22
    2436:	e9 01       	movw	r28, r18
	// Start values for PID controller
	pid->sumError         = 0;
    2438:	1a 82       	std	Y+2, r1	; 0x02
    243a:	1b 82       	std	Y+3, r1	; 0x03
    243c:	1c 82       	std	Y+4, r1	; 0x04
    243e:	1d 82       	std	Y+5, r1	; 0x05
	pid->lastProcessValue = 0;
    2440:	19 82       	std	Y+1, r1	; 0x01
    2442:	18 82       	st	Y, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
    2444:	9f 83       	std	Y+7, r25	; 0x07
    2446:	8e 83       	std	Y+6, r24	; 0x06
	pid->I_Factor = i_factor;
    2448:	79 87       	std	Y+9, r23	; 0x09
    244a:	68 87       	std	Y+8, r22	; 0x08
	pid->D_Factor = d_factor;
    244c:	5b 87       	std	Y+11, r21	; 0x0b
    244e:	4a 87       	std	Y+10, r20	; 0x0a
	// Limits to avoid overflow
	pid->maxError    = MAX_INT / (pid->P_Factor + 1);
    2450:	bc 01       	movw	r22, r24
    2452:	6f 5f       	subi	r22, 0xFF	; 255
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f e7       	ldi	r25, 0x7F	; 127
    245a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodhi4>
    245e:	7d 87       	std	Y+13, r23	; 0x0d
    2460:	6c 87       	std	Y+12, r22	; 0x0c
	pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
    2462:	9f 01       	movw	r18, r30
    2464:	2f 5f       	subi	r18, 0xFF	; 255
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	03 2e       	mov	r0, r19
    246a:	00 0c       	add	r0, r0
    246c:	44 0b       	sbc	r20, r20
    246e:	55 0b       	sbc	r21, r21
    2470:	6f ef       	ldi	r22, 0xFF	; 255
    2472:	7f ef       	ldi	r23, 0xFF	; 255
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	9f e3       	ldi	r25, 0x3F	; 63
    2478:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__divmodsi4>
    247c:	2e 87       	std	Y+14, r18	; 0x0e
    247e:	3f 87       	std	Y+15, r19	; 0x0f
    2480:	48 8b       	std	Y+16, r20	; 0x10
    2482:	59 8b       	std	Y+17, r21	; 0x11
}
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	08 95       	ret

0000248a <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	8b 01       	movw	r16, r22
    2498:	fa 01       	movw	r30, r20
	int16_t errors, p_term, d_term;
	int32_t i_term, ret, temp;

	errors = setPoint - processValue;
    249a:	86 1b       	sub	r24, r22
    249c:	97 0b       	sbc	r25, r23

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
    249e:	24 85       	ldd	r18, Z+12	; 0x0c
    24a0:	35 85       	ldd	r19, Z+13	; 0x0d
    24a2:	28 17       	cp	r18, r24
    24a4:	39 07       	cpc	r19, r25
    24a6:	84 f0       	brlt	.+32     	; 0x24c8 <pid_Controller+0x3e>
		p_term = MAX_INT;
	} else if (errors < -pid_st->maxError) {
    24a8:	31 95       	neg	r19
    24aa:	21 95       	neg	r18
    24ac:	31 09       	sbc	r19, r1
    24ae:	82 17       	cp	r24, r18
    24b0:	93 07       	cpc	r25, r19
    24b2:	6c f0       	brlt	.+26     	; 0x24ce <pid_Controller+0x44>
		p_term = -MAX_INT;
	} else {
		p_term = pid_st->P_Factor * errors;
    24b4:	26 81       	ldd	r18, Z+6	; 0x06
    24b6:	37 81       	ldd	r19, Z+7	; 0x07
    24b8:	82 9f       	mul	r24, r18
    24ba:	e0 01       	movw	r28, r0
    24bc:	83 9f       	mul	r24, r19
    24be:	d0 0d       	add	r29, r0
    24c0:	92 9f       	mul	r25, r18
    24c2:	d0 0d       	add	r29, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <pid_Controller+0x48>

	errors = setPoint - processValue;

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
		p_term = MAX_INT;
    24c8:	cf ef       	ldi	r28, 0xFF	; 255
    24ca:	df e7       	ldi	r29, 0x7F	; 127
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <pid_Controller+0x48>
	} else if (errors < -pid_st->maxError) {
		p_term = -MAX_INT;
    24ce:	c1 e0       	ldi	r28, 0x01	; 1
    24d0:	d0 e8       	ldi	r29, 0x80	; 128
	} else {
		p_term = pid_st->P_Factor * errors;
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
    24d2:	09 2e       	mov	r0, r25
    24d4:	00 0c       	add	r0, r0
    24d6:	aa 0b       	sbc	r26, r26
    24d8:	bb 0b       	sbc	r27, r27
    24da:	42 81       	ldd	r20, Z+2	; 0x02
    24dc:	53 81       	ldd	r21, Z+3	; 0x03
    24de:	64 81       	ldd	r22, Z+4	; 0x04
    24e0:	75 81       	ldd	r23, Z+5	; 0x05
    24e2:	9a 01       	movw	r18, r20
    24e4:	ab 01       	movw	r20, r22
    24e6:	28 0f       	add	r18, r24
    24e8:	39 1f       	adc	r19, r25
    24ea:	4a 1f       	adc	r20, r26
    24ec:	5b 1f       	adc	r21, r27
	if (temp > pid_st->maxSumError) {
    24ee:	86 85       	ldd	r24, Z+14	; 0x0e
    24f0:	97 85       	ldd	r25, Z+15	; 0x0f
    24f2:	a0 89       	ldd	r26, Z+16	; 0x10
    24f4:	b1 89       	ldd	r27, Z+17	; 0x11
    24f6:	82 17       	cp	r24, r18
    24f8:	93 07       	cpc	r25, r19
    24fa:	a4 07       	cpc	r26, r20
    24fc:	b5 07       	cpc	r27, r21
    24fe:	4c f4       	brge	.+18     	; 0x2512 <pid_Controller+0x88>
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
    2500:	82 83       	std	Z+2, r24	; 0x02
    2502:	93 83       	std	Z+3, r25	; 0x03
    2504:	a4 83       	std	Z+4, r26	; 0x04
    2506:	b5 83       	std	Z+5, r27	; 0x05
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
    2508:	6f ef       	ldi	r22, 0xFF	; 255
    250a:	7f ef       	ldi	r23, 0xFF	; 255
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	9f e3       	ldi	r25, 0x3F	; 63
    2510:	1d c0       	rjmp	.+58     	; 0x254c <pid_Controller+0xc2>
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
    2512:	b0 95       	com	r27
    2514:	a0 95       	com	r26
    2516:	90 95       	com	r25
    2518:	81 95       	neg	r24
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	af 4f       	sbci	r26, 0xFF	; 255
    251e:	bf 4f       	sbci	r27, 0xFF	; 255
    2520:	28 17       	cp	r18, r24
    2522:	39 07       	cpc	r19, r25
    2524:	4a 07       	cpc	r20, r26
    2526:	5b 07       	cpc	r21, r27
    2528:	4c f4       	brge	.+18     	; 0x253c <pid_Controller+0xb2>
		i_term           = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
    252a:	82 83       	std	Z+2, r24	; 0x02
    252c:	93 83       	std	Z+3, r25	; 0x03
    252e:	a4 83       	std	Z+4, r26	; 0x04
    2530:	b5 83       	std	Z+5, r27	; 0x05
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
		i_term           = -MAX_I_TERM;
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 ec       	ldi	r25, 0xC0	; 192
    253a:	08 c0       	rjmp	.+16     	; 0x254c <pid_Controller+0xc2>
		pid_st->sumError = -pid_st->maxSumError;
	} else {
		pid_st->sumError = temp;
    253c:	22 83       	std	Z+2, r18	; 0x02
    253e:	33 83       	std	Z+3, r19	; 0x03
    2540:	44 83       	std	Z+4, r20	; 0x04
    2542:	55 83       	std	Z+5, r21	; 0x05
		i_term           = pid_st->I_Factor * pid_st->sumError;
    2544:	a0 85       	ldd	r26, Z+8	; 0x08
    2546:	b1 85       	ldd	r27, Z+9	; 0x09
    2548:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__mulshisi3>
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
    254c:	20 81       	ld	r18, Z
    254e:	31 81       	ldd	r19, Z+1	; 0x01
    2550:	20 1b       	sub	r18, r16
    2552:	31 0b       	sbc	r19, r17
    2554:	a2 85       	ldd	r26, Z+10	; 0x0a
    2556:	b3 85       	ldd	r27, Z+11	; 0x0b
    2558:	2a 9f       	mul	r18, r26
    255a:	70 01       	movw	r14, r0
    255c:	2b 9f       	mul	r18, r27
    255e:	f0 0c       	add	r15, r0
    2560:	3a 9f       	mul	r19, r26
    2562:	f0 0c       	add	r15, r0
    2564:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
    2566:	11 83       	std	Z+1, r17	; 0x01
    2568:	00 83       	st	Z, r16

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
    256a:	8e 01       	movw	r16, r28
    256c:	dd 0f       	add	r29, r29
    256e:	22 0b       	sbc	r18, r18
    2570:	33 0b       	sbc	r19, r19
    2572:	ab 01       	movw	r20, r22
    2574:	bc 01       	movw	r22, r24
    2576:	40 0f       	add	r20, r16
    2578:	51 1f       	adc	r21, r17
    257a:	62 1f       	adc	r22, r18
    257c:	73 1f       	adc	r23, r19
    257e:	c7 01       	movw	r24, r14
    2580:	ff 0c       	add	r15, r15
    2582:	aa 0b       	sbc	r26, r26
    2584:	bb 0b       	sbc	r27, r27
    2586:	48 0f       	add	r20, r24
    2588:	59 1f       	adc	r21, r25
    258a:	6a 1f       	adc	r22, r26
    258c:	7b 1f       	adc	r23, r27
    258e:	db 01       	movw	r26, r22
    2590:	ca 01       	movw	r24, r20
    2592:	77 23       	and	r23, r23
    2594:	1c f4       	brge	.+6      	; 0x259c <pid_Controller+0x112>
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	a1 1d       	adc	r26, r1
    259a:	b1 1d       	adc	r27, r1
    259c:	b5 95       	asr	r27
    259e:	a7 95       	ror	r26
    25a0:	97 95       	ror	r25
    25a2:	87 95       	ror	r24
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	20 e8       	ldi	r18, 0x80	; 128
    25a8:	92 07       	cpc	r25, r18
    25aa:	2f ef       	ldi	r18, 0xFF	; 255
    25ac:	a2 07       	cpc	r26, r18
    25ae:	b2 07       	cpc	r27, r18
    25b0:	24 f4       	brge	.+8      	; 0x25ba <pid_Controller+0x130>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e8       	ldi	r25, 0x80	; 128
    25b6:	af ef       	ldi	r26, 0xFF	; 255
    25b8:	bf ef       	ldi	r27, 0xFF	; 255
		ret = MAX_INT;
	} else if (ret < -MAX_INT) {
		ret = -MAX_INT;
	}

	return ((int16_t)ret);
    25ba:	81 15       	cp	r24, r1
    25bc:	20 e8       	ldi	r18, 0x80	; 128
    25be:	92 07       	cpc	r25, r18
    25c0:	a1 05       	cpc	r26, r1
    25c2:	b1 05       	cpc	r27, r1
    25c4:	24 f0       	brlt	.+8      	; 0x25ce <pid_Controller+0x144>
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	9f e7       	ldi	r25, 0x7F	; 127
    25ca:	a0 e0       	ldi	r26, 0x00	; 0
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	08 95       	ret

000025dc <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    25e0:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    25e2:	88 e1       	ldi	r24, 0x18	; 24
    25e4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    25e6:	86 e8       	ldi	r24, 0x86	; 134
    25e8:	80 bd       	out	0x20, r24	; 32
    25ea:	08 95       	ret

000025ec <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    25ec:	5d 9b       	sbis	0x0b, 5	; 11
    25ee:	fe cf       	rjmp	.-4      	; 0x25ec <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    25f0:	8c b9       	out	0x0c, r24	; 12
    25f2:	08 95       	ret

000025f4 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    25f4:	5f 9b       	sbis	0x0b, 7	; 11
    25f6:	fe cf       	rjmp	.-4      	; 0x25f4 <Recive_Char>
	return(UDR); 
    25f8:	8c b1       	in	r24, 0x0c	; 12
}
    25fa:	08 95       	ret

000025fc <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24
	while(*ptr_string)
    2602:	88 81       	ld	r24, Y
    2604:	88 23       	and	r24, r24
    2606:	31 f0       	breq	.+12     	; 0x2614 <Transmit_Data+0x18>
    2608:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    260a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    260e:	89 91       	ld	r24, Y+
    2610:	81 11       	cpse	r24, r1
    2612:	fb cf       	rjmp	.-10     	; 0x260a <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	cf 93       	push	r28
    2620:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    2622:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    2624:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <Recive_Char>
	 		if(( ch == '\n') || (ch == '\r')) //read till enter key is pressed
    2628:	8a 30       	cpi	r24, 0x0A	; 10
    262a:	11 f0       	breq	.+4      	; 0x2630 <Recive_Data+0x16>
    262c:	8d 30       	cpi	r24, 0x0D	; 13
    262e:	31 f4       	brne	.+12     	; 0x263c <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    2630:	f8 01       	movw	r30, r16
    2632:	ec 0f       	add	r30, r28
    2634:	f1 1d       	adc	r31, r1
    2636:	80 e2       	ldi	r24, 0x20	; 32
    2638:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    263a:	06 c0       	rjmp	.+12     	; 0x2648 <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    263c:	f8 01       	movw	r30, r16
    263e:	ec 0f       	add	r30, r28
    2640:	f1 1d       	adc	r31, r1
    2642:	80 83       	st	Z, r24
    2644:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    2646:	ee cf       	rjmp	.-36     	; 0x2624 <Recive_Data+0xa>
}
    2648:	cf 91       	pop	r28
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret

00002650 <__subsf3>:
    2650:	50 58       	subi	r21, 0x80	; 128

00002652 <__addsf3>:
    2652:	bb 27       	eor	r27, r27
    2654:	aa 27       	eor	r26, r26
    2656:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3x>
    265a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__fp_round>
    265e:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fp_pscA>
    2662:	38 f0       	brcs	.+14     	; 0x2672 <__addsf3+0x20>
    2664:	0e 94 b8 14 	call	0x2970	; 0x2970 <__fp_pscB>
    2668:	20 f0       	brcs	.+8      	; 0x2672 <__addsf3+0x20>
    266a:	39 f4       	brne	.+14     	; 0x267a <__addsf3+0x28>
    266c:	9f 3f       	cpi	r25, 0xFF	; 255
    266e:	19 f4       	brne	.+6      	; 0x2676 <__addsf3+0x24>
    2670:	26 f4       	brtc	.+8      	; 0x267a <__addsf3+0x28>
    2672:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>
    2676:	0e f4       	brtc	.+2      	; 0x267a <__addsf3+0x28>
    2678:	e0 95       	com	r30
    267a:	e7 fb       	bst	r30, 7
    267c:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>

00002680 <__addsf3x>:
    2680:	e9 2f       	mov	r30, r25
    2682:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fp_split3>
    2686:	58 f3       	brcs	.-42     	; 0x265e <__addsf3+0xc>
    2688:	ba 17       	cp	r27, r26
    268a:	62 07       	cpc	r22, r18
    268c:	73 07       	cpc	r23, r19
    268e:	84 07       	cpc	r24, r20
    2690:	95 07       	cpc	r25, r21
    2692:	20 f0       	brcs	.+8      	; 0x269c <__addsf3x+0x1c>
    2694:	79 f4       	brne	.+30     	; 0x26b4 <__addsf3x+0x34>
    2696:	a6 f5       	brtc	.+104    	; 0x2700 <__addsf3x+0x80>
    2698:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_zero>
    269c:	0e f4       	brtc	.+2      	; 0x26a0 <__addsf3x+0x20>
    269e:	e0 95       	com	r30
    26a0:	0b 2e       	mov	r0, r27
    26a2:	ba 2f       	mov	r27, r26
    26a4:	a0 2d       	mov	r26, r0
    26a6:	0b 01       	movw	r0, r22
    26a8:	b9 01       	movw	r22, r18
    26aa:	90 01       	movw	r18, r0
    26ac:	0c 01       	movw	r0, r24
    26ae:	ca 01       	movw	r24, r20
    26b0:	a0 01       	movw	r20, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	ff 27       	eor	r31, r31
    26b6:	59 1b       	sub	r21, r25
    26b8:	99 f0       	breq	.+38     	; 0x26e0 <__addsf3x+0x60>
    26ba:	59 3f       	cpi	r21, 0xF9	; 249
    26bc:	50 f4       	brcc	.+20     	; 0x26d2 <__addsf3x+0x52>
    26be:	50 3e       	cpi	r21, 0xE0	; 224
    26c0:	68 f1       	brcs	.+90     	; 0x271c <__addsf3x+0x9c>
    26c2:	1a 16       	cp	r1, r26
    26c4:	f0 40       	sbci	r31, 0x00	; 0
    26c6:	a2 2f       	mov	r26, r18
    26c8:	23 2f       	mov	r18, r19
    26ca:	34 2f       	mov	r19, r20
    26cc:	44 27       	eor	r20, r20
    26ce:	58 5f       	subi	r21, 0xF8	; 248
    26d0:	f3 cf       	rjmp	.-26     	; 0x26b8 <__addsf3x+0x38>
    26d2:	46 95       	lsr	r20
    26d4:	37 95       	ror	r19
    26d6:	27 95       	ror	r18
    26d8:	a7 95       	ror	r26
    26da:	f0 40       	sbci	r31, 0x00	; 0
    26dc:	53 95       	inc	r21
    26de:	c9 f7       	brne	.-14     	; 0x26d2 <__addsf3x+0x52>
    26e0:	7e f4       	brtc	.+30     	; 0x2700 <__addsf3x+0x80>
    26e2:	1f 16       	cp	r1, r31
    26e4:	ba 0b       	sbc	r27, r26
    26e6:	62 0b       	sbc	r22, r18
    26e8:	73 0b       	sbc	r23, r19
    26ea:	84 0b       	sbc	r24, r20
    26ec:	ba f0       	brmi	.+46     	; 0x271c <__addsf3x+0x9c>
    26ee:	91 50       	subi	r25, 0x01	; 1
    26f0:	a1 f0       	breq	.+40     	; 0x271a <__addsf3x+0x9a>
    26f2:	ff 0f       	add	r31, r31
    26f4:	bb 1f       	adc	r27, r27
    26f6:	66 1f       	adc	r22, r22
    26f8:	77 1f       	adc	r23, r23
    26fa:	88 1f       	adc	r24, r24
    26fc:	c2 f7       	brpl	.-16     	; 0x26ee <__addsf3x+0x6e>
    26fe:	0e c0       	rjmp	.+28     	; 0x271c <__addsf3x+0x9c>
    2700:	ba 0f       	add	r27, r26
    2702:	62 1f       	adc	r22, r18
    2704:	73 1f       	adc	r23, r19
    2706:	84 1f       	adc	r24, r20
    2708:	48 f4       	brcc	.+18     	; 0x271c <__addsf3x+0x9c>
    270a:	87 95       	ror	r24
    270c:	77 95       	ror	r23
    270e:	67 95       	ror	r22
    2710:	b7 95       	ror	r27
    2712:	f7 95       	ror	r31
    2714:	9e 3f       	cpi	r25, 0xFE	; 254
    2716:	08 f0       	brcs	.+2      	; 0x271a <__addsf3x+0x9a>
    2718:	b0 cf       	rjmp	.-160    	; 0x267a <__addsf3+0x28>
    271a:	93 95       	inc	r25
    271c:	88 0f       	add	r24, r24
    271e:	08 f0       	brcs	.+2      	; 0x2722 <__addsf3x+0xa2>
    2720:	99 27       	eor	r25, r25
    2722:	ee 0f       	add	r30, r30
    2724:	97 95       	ror	r25
    2726:	87 95       	ror	r24
    2728:	08 95       	ret

0000272a <__cmpsf2>:
    272a:	0e 94 84 14 	call	0x2908	; 0x2908 <__fp_cmp>
    272e:	08 f4       	brcc	.+2      	; 0x2732 <__cmpsf2+0x8>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	08 95       	ret

00002734 <cos>:
    2734:	0e 94 c1 14 	call	0x2982	; 0x2982 <__fp_rempio2>
    2738:	e3 95       	inc	r30
    273a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__fp_sinus>

0000273e <__divsf3>:
    273e:	0e 94 b3 13 	call	0x2766	; 0x2766 <__divsf3x>
    2742:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__fp_round>
    2746:	0e 94 b8 14 	call	0x2970	; 0x2970 <__fp_pscB>
    274a:	58 f0       	brcs	.+22     	; 0x2762 <__divsf3+0x24>
    274c:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fp_pscA>
    2750:	40 f0       	brcs	.+16     	; 0x2762 <__divsf3+0x24>
    2752:	29 f4       	brne	.+10     	; 0x275e <__divsf3+0x20>
    2754:	5f 3f       	cpi	r21, 0xFF	; 255
    2756:	29 f0       	breq	.+10     	; 0x2762 <__divsf3+0x24>
    2758:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>
    275c:	51 11       	cpse	r21, r1
    275e:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_szero>
    2762:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>

00002766 <__divsf3x>:
    2766:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fp_split3>
    276a:	68 f3       	brcs	.-38     	; 0x2746 <__divsf3+0x8>

0000276c <__divsf3_pse>:
    276c:	99 23       	and	r25, r25
    276e:	b1 f3       	breq	.-20     	; 0x275c <__divsf3+0x1e>
    2770:	55 23       	and	r21, r21
    2772:	91 f3       	breq	.-28     	; 0x2758 <__divsf3+0x1a>
    2774:	95 1b       	sub	r25, r21
    2776:	55 0b       	sbc	r21, r21
    2778:	bb 27       	eor	r27, r27
    277a:	aa 27       	eor	r26, r26
    277c:	62 17       	cp	r22, r18
    277e:	73 07       	cpc	r23, r19
    2780:	84 07       	cpc	r24, r20
    2782:	38 f0       	brcs	.+14     	; 0x2792 <__divsf3_pse+0x26>
    2784:	9f 5f       	subi	r25, 0xFF	; 255
    2786:	5f 4f       	sbci	r21, 0xFF	; 255
    2788:	22 0f       	add	r18, r18
    278a:	33 1f       	adc	r19, r19
    278c:	44 1f       	adc	r20, r20
    278e:	aa 1f       	adc	r26, r26
    2790:	a9 f3       	breq	.-22     	; 0x277c <__divsf3_pse+0x10>
    2792:	35 d0       	rcall	.+106    	; 0x27fe <__divsf3_pse+0x92>
    2794:	0e 2e       	mov	r0, r30
    2796:	3a f0       	brmi	.+14     	; 0x27a6 <__divsf3_pse+0x3a>
    2798:	e0 e8       	ldi	r30, 0x80	; 128
    279a:	32 d0       	rcall	.+100    	; 0x2800 <__divsf3_pse+0x94>
    279c:	91 50       	subi	r25, 0x01	; 1
    279e:	50 40       	sbci	r21, 0x00	; 0
    27a0:	e6 95       	lsr	r30
    27a2:	00 1c       	adc	r0, r0
    27a4:	ca f7       	brpl	.-14     	; 0x2798 <__divsf3_pse+0x2c>
    27a6:	2b d0       	rcall	.+86     	; 0x27fe <__divsf3_pse+0x92>
    27a8:	fe 2f       	mov	r31, r30
    27aa:	29 d0       	rcall	.+82     	; 0x27fe <__divsf3_pse+0x92>
    27ac:	66 0f       	add	r22, r22
    27ae:	77 1f       	adc	r23, r23
    27b0:	88 1f       	adc	r24, r24
    27b2:	bb 1f       	adc	r27, r27
    27b4:	26 17       	cp	r18, r22
    27b6:	37 07       	cpc	r19, r23
    27b8:	48 07       	cpc	r20, r24
    27ba:	ab 07       	cpc	r26, r27
    27bc:	b0 e8       	ldi	r27, 0x80	; 128
    27be:	09 f0       	breq	.+2      	; 0x27c2 <__divsf3_pse+0x56>
    27c0:	bb 0b       	sbc	r27, r27
    27c2:	80 2d       	mov	r24, r0
    27c4:	bf 01       	movw	r22, r30
    27c6:	ff 27       	eor	r31, r31
    27c8:	93 58       	subi	r25, 0x83	; 131
    27ca:	5f 4f       	sbci	r21, 0xFF	; 255
    27cc:	3a f0       	brmi	.+14     	; 0x27dc <__divsf3_pse+0x70>
    27ce:	9e 3f       	cpi	r25, 0xFE	; 254
    27d0:	51 05       	cpc	r21, r1
    27d2:	78 f0       	brcs	.+30     	; 0x27f2 <__divsf3_pse+0x86>
    27d4:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>
    27d8:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_szero>
    27dc:	5f 3f       	cpi	r21, 0xFF	; 255
    27de:	e4 f3       	brlt	.-8      	; 0x27d8 <__divsf3_pse+0x6c>
    27e0:	98 3e       	cpi	r25, 0xE8	; 232
    27e2:	d4 f3       	brlt	.-12     	; 0x27d8 <__divsf3_pse+0x6c>
    27e4:	86 95       	lsr	r24
    27e6:	77 95       	ror	r23
    27e8:	67 95       	ror	r22
    27ea:	b7 95       	ror	r27
    27ec:	f7 95       	ror	r31
    27ee:	9f 5f       	subi	r25, 0xFF	; 255
    27f0:	c9 f7       	brne	.-14     	; 0x27e4 <__divsf3_pse+0x78>
    27f2:	88 0f       	add	r24, r24
    27f4:	91 1d       	adc	r25, r1
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	97 f9       	bld	r25, 7
    27fc:	08 95       	ret
    27fe:	e1 e0       	ldi	r30, 0x01	; 1
    2800:	66 0f       	add	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	bb 1f       	adc	r27, r27
    2808:	62 17       	cp	r22, r18
    280a:	73 07       	cpc	r23, r19
    280c:	84 07       	cpc	r24, r20
    280e:	ba 07       	cpc	r27, r26
    2810:	20 f0       	brcs	.+8      	; 0x281a <__divsf3_pse+0xae>
    2812:	62 1b       	sub	r22, r18
    2814:	73 0b       	sbc	r23, r19
    2816:	84 0b       	sbc	r24, r20
    2818:	ba 0b       	sbc	r27, r26
    281a:	ee 1f       	adc	r30, r30
    281c:	88 f7       	brcc	.-30     	; 0x2800 <__divsf3_pse+0x94>
    281e:	e0 95       	com	r30
    2820:	08 95       	ret

00002822 <__fixsfsi>:
    2822:	0e 94 18 14 	call	0x2830	; 0x2830 <__fixunssfsi>
    2826:	68 94       	set
    2828:	b1 11       	cpse	r27, r1
    282a:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_szero>
    282e:	08 95       	ret

00002830 <__fixunssfsi>:
    2830:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__fp_splitA>
    2834:	88 f0       	brcs	.+34     	; 0x2858 <__fixunssfsi+0x28>
    2836:	9f 57       	subi	r25, 0x7F	; 127
    2838:	98 f0       	brcs	.+38     	; 0x2860 <__fixunssfsi+0x30>
    283a:	b9 2f       	mov	r27, r25
    283c:	99 27       	eor	r25, r25
    283e:	b7 51       	subi	r27, 0x17	; 23
    2840:	b0 f0       	brcs	.+44     	; 0x286e <__fixunssfsi+0x3e>
    2842:	e1 f0       	breq	.+56     	; 0x287c <__fixunssfsi+0x4c>
    2844:	66 0f       	add	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	1a f0       	brmi	.+6      	; 0x2854 <__fixunssfsi+0x24>
    284e:	ba 95       	dec	r27
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__fixunssfsi+0x14>
    2852:	14 c0       	rjmp	.+40     	; 0x287c <__fixunssfsi+0x4c>
    2854:	b1 30       	cpi	r27, 0x01	; 1
    2856:	91 f0       	breq	.+36     	; 0x287c <__fixunssfsi+0x4c>
    2858:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__fp_zero>
    285c:	b1 e0       	ldi	r27, 0x01	; 1
    285e:	08 95       	ret
    2860:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_zero>
    2864:	67 2f       	mov	r22, r23
    2866:	78 2f       	mov	r23, r24
    2868:	88 27       	eor	r24, r24
    286a:	b8 5f       	subi	r27, 0xF8	; 248
    286c:	39 f0       	breq	.+14     	; 0x287c <__fixunssfsi+0x4c>
    286e:	b9 3f       	cpi	r27, 0xF9	; 249
    2870:	cc f3       	brlt	.-14     	; 0x2864 <__fixunssfsi+0x34>
    2872:	86 95       	lsr	r24
    2874:	77 95       	ror	r23
    2876:	67 95       	ror	r22
    2878:	b3 95       	inc	r27
    287a:	d9 f7       	brne	.-10     	; 0x2872 <__fixunssfsi+0x42>
    287c:	3e f4       	brtc	.+14     	; 0x288c <__fixunssfsi+0x5c>
    287e:	90 95       	com	r25
    2880:	80 95       	com	r24
    2882:	70 95       	com	r23
    2884:	61 95       	neg	r22
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	8f 4f       	sbci	r24, 0xFF	; 255
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	08 95       	ret

0000288e <__floatunsisf>:
    288e:	e8 94       	clt
    2890:	09 c0       	rjmp	.+18     	; 0x28a4 <__floatsisf+0x12>

00002892 <__floatsisf>:
    2892:	97 fb       	bst	r25, 7
    2894:	3e f4       	brtc	.+14     	; 0x28a4 <__floatsisf+0x12>
    2896:	90 95       	com	r25
    2898:	80 95       	com	r24
    289a:	70 95       	com	r23
    289c:	61 95       	neg	r22
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	8f 4f       	sbci	r24, 0xFF	; 255
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	99 23       	and	r25, r25
    28a6:	a9 f0       	breq	.+42     	; 0x28d2 <__floatsisf+0x40>
    28a8:	f9 2f       	mov	r31, r25
    28aa:	96 e9       	ldi	r25, 0x96	; 150
    28ac:	bb 27       	eor	r27, r27
    28ae:	93 95       	inc	r25
    28b0:	f6 95       	lsr	r31
    28b2:	87 95       	ror	r24
    28b4:	77 95       	ror	r23
    28b6:	67 95       	ror	r22
    28b8:	b7 95       	ror	r27
    28ba:	f1 11       	cpse	r31, r1
    28bc:	f8 cf       	rjmp	.-16     	; 0x28ae <__floatsisf+0x1c>
    28be:	fa f4       	brpl	.+62     	; 0x28fe <__floatsisf+0x6c>
    28c0:	bb 0f       	add	r27, r27
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <__floatsisf+0x36>
    28c4:	60 ff       	sbrs	r22, 0
    28c6:	1b c0       	rjmp	.+54     	; 0x28fe <__floatsisf+0x6c>
    28c8:	6f 5f       	subi	r22, 0xFF	; 255
    28ca:	7f 4f       	sbci	r23, 0xFF	; 255
    28cc:	8f 4f       	sbci	r24, 0xFF	; 255
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	16 c0       	rjmp	.+44     	; 0x28fe <__floatsisf+0x6c>
    28d2:	88 23       	and	r24, r24
    28d4:	11 f0       	breq	.+4      	; 0x28da <__floatsisf+0x48>
    28d6:	96 e9       	ldi	r25, 0x96	; 150
    28d8:	11 c0       	rjmp	.+34     	; 0x28fc <__floatsisf+0x6a>
    28da:	77 23       	and	r23, r23
    28dc:	21 f0       	breq	.+8      	; 0x28e6 <__floatsisf+0x54>
    28de:	9e e8       	ldi	r25, 0x8E	; 142
    28e0:	87 2f       	mov	r24, r23
    28e2:	76 2f       	mov	r23, r22
    28e4:	05 c0       	rjmp	.+10     	; 0x28f0 <__floatsisf+0x5e>
    28e6:	66 23       	and	r22, r22
    28e8:	71 f0       	breq	.+28     	; 0x2906 <__floatsisf+0x74>
    28ea:	96 e8       	ldi	r25, 0x86	; 134
    28ec:	86 2f       	mov	r24, r22
    28ee:	70 e0       	ldi	r23, 0x00	; 0
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	2a f0       	brmi	.+10     	; 0x28fe <__floatsisf+0x6c>
    28f4:	9a 95       	dec	r25
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	da f7       	brpl	.-10     	; 0x28f4 <__floatsisf+0x62>
    28fe:	88 0f       	add	r24, r24
    2900:	96 95       	lsr	r25
    2902:	87 95       	ror	r24
    2904:	97 f9       	bld	r25, 7
    2906:	08 95       	ret

00002908 <__fp_cmp>:
    2908:	99 0f       	add	r25, r25
    290a:	00 08       	sbc	r0, r0
    290c:	55 0f       	add	r21, r21
    290e:	aa 0b       	sbc	r26, r26
    2910:	e0 e8       	ldi	r30, 0x80	; 128
    2912:	fe ef       	ldi	r31, 0xFE	; 254
    2914:	16 16       	cp	r1, r22
    2916:	17 06       	cpc	r1, r23
    2918:	e8 07       	cpc	r30, r24
    291a:	f9 07       	cpc	r31, r25
    291c:	c0 f0       	brcs	.+48     	; 0x294e <__fp_cmp+0x46>
    291e:	12 16       	cp	r1, r18
    2920:	13 06       	cpc	r1, r19
    2922:	e4 07       	cpc	r30, r20
    2924:	f5 07       	cpc	r31, r21
    2926:	98 f0       	brcs	.+38     	; 0x294e <__fp_cmp+0x46>
    2928:	62 1b       	sub	r22, r18
    292a:	73 0b       	sbc	r23, r19
    292c:	84 0b       	sbc	r24, r20
    292e:	95 0b       	sbc	r25, r21
    2930:	39 f4       	brne	.+14     	; 0x2940 <__fp_cmp+0x38>
    2932:	0a 26       	eor	r0, r26
    2934:	61 f0       	breq	.+24     	; 0x294e <__fp_cmp+0x46>
    2936:	23 2b       	or	r18, r19
    2938:	24 2b       	or	r18, r20
    293a:	25 2b       	or	r18, r21
    293c:	21 f4       	brne	.+8      	; 0x2946 <__fp_cmp+0x3e>
    293e:	08 95       	ret
    2940:	0a 26       	eor	r0, r26
    2942:	09 f4       	brne	.+2      	; 0x2946 <__fp_cmp+0x3e>
    2944:	a1 40       	sbci	r26, 0x01	; 1
    2946:	a6 95       	lsr	r26
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	81 1d       	adc	r24, r1
    294c:	81 1d       	adc	r24, r1
    294e:	08 95       	ret

00002950 <__fp_inf>:
    2950:	97 f9       	bld	r25, 7
    2952:	9f 67       	ori	r25, 0x7F	; 127
    2954:	80 e8       	ldi	r24, 0x80	; 128
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	08 95       	ret

0000295c <__fp_nan>:
    295c:	9f ef       	ldi	r25, 0xFF	; 255
    295e:	80 ec       	ldi	r24, 0xC0	; 192
    2960:	08 95       	ret

00002962 <__fp_pscA>:
    2962:	00 24       	eor	r0, r0
    2964:	0a 94       	dec	r0
    2966:	16 16       	cp	r1, r22
    2968:	17 06       	cpc	r1, r23
    296a:	18 06       	cpc	r1, r24
    296c:	09 06       	cpc	r0, r25
    296e:	08 95       	ret

00002970 <__fp_pscB>:
    2970:	00 24       	eor	r0, r0
    2972:	0a 94       	dec	r0
    2974:	12 16       	cp	r1, r18
    2976:	13 06       	cpc	r1, r19
    2978:	14 06       	cpc	r1, r20
    297a:	05 06       	cpc	r0, r21
    297c:	08 95       	ret
    297e:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>

00002982 <__fp_rempio2>:
    2982:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__fp_splitA>
    2986:	d8 f3       	brcs	.-10     	; 0x297e <__fp_pscB+0xe>
    2988:	e8 94       	clt
    298a:	e0 e0       	ldi	r30, 0x00	; 0
    298c:	bb 27       	eor	r27, r27
    298e:	9f 57       	subi	r25, 0x7F	; 127
    2990:	f0 f0       	brcs	.+60     	; 0x29ce <__fp_rempio2+0x4c>
    2992:	2a ed       	ldi	r18, 0xDA	; 218
    2994:	3f e0       	ldi	r19, 0x0F	; 15
    2996:	49 ec       	ldi	r20, 0xC9	; 201
    2998:	06 c0       	rjmp	.+12     	; 0x29a6 <__fp_rempio2+0x24>
    299a:	ee 0f       	add	r30, r30
    299c:	bb 0f       	add	r27, r27
    299e:	66 1f       	adc	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	88 1f       	adc	r24, r24
    29a4:	28 f0       	brcs	.+10     	; 0x29b0 <__fp_rempio2+0x2e>
    29a6:	b2 3a       	cpi	r27, 0xA2	; 162
    29a8:	62 07       	cpc	r22, r18
    29aa:	73 07       	cpc	r23, r19
    29ac:	84 07       	cpc	r24, r20
    29ae:	28 f0       	brcs	.+10     	; 0x29ba <__fp_rempio2+0x38>
    29b0:	b2 5a       	subi	r27, 0xA2	; 162
    29b2:	62 0b       	sbc	r22, r18
    29b4:	73 0b       	sbc	r23, r19
    29b6:	84 0b       	sbc	r24, r20
    29b8:	e3 95       	inc	r30
    29ba:	9a 95       	dec	r25
    29bc:	72 f7       	brpl	.-36     	; 0x299a <__fp_rempio2+0x18>
    29be:	80 38       	cpi	r24, 0x80	; 128
    29c0:	30 f4       	brcc	.+12     	; 0x29ce <__fp_rempio2+0x4c>
    29c2:	9a 95       	dec	r25
    29c4:	bb 0f       	add	r27, r27
    29c6:	66 1f       	adc	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	88 1f       	adc	r24, r24
    29cc:	d2 f7       	brpl	.-12     	; 0x29c2 <__fp_rempio2+0x40>
    29ce:	90 48       	sbci	r25, 0x80	; 128
    29d0:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__fp_mpack_finite>

000029d4 <__fp_round>:
    29d4:	09 2e       	mov	r0, r25
    29d6:	03 94       	inc	r0
    29d8:	00 0c       	add	r0, r0
    29da:	11 f4       	brne	.+4      	; 0x29e0 <__fp_round+0xc>
    29dc:	88 23       	and	r24, r24
    29de:	52 f0       	brmi	.+20     	; 0x29f4 <__fp_round+0x20>
    29e0:	bb 0f       	add	r27, r27
    29e2:	40 f4       	brcc	.+16     	; 0x29f4 <__fp_round+0x20>
    29e4:	bf 2b       	or	r27, r31
    29e6:	11 f4       	brne	.+4      	; 0x29ec <__fp_round+0x18>
    29e8:	60 ff       	sbrs	r22, 0
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <__fp_round+0x20>
    29ec:	6f 5f       	subi	r22, 0xFF	; 255
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	8f 4f       	sbci	r24, 0xFF	; 255
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	08 95       	ret

000029f6 <__fp_sinus>:
    29f6:	ef 93       	push	r30
    29f8:	e0 ff       	sbrs	r30, 0
    29fa:	07 c0       	rjmp	.+14     	; 0x2a0a <__fp_sinus+0x14>
    29fc:	a2 ea       	ldi	r26, 0xA2	; 162
    29fe:	2a ed       	ldi	r18, 0xDA	; 218
    2a00:	3f e0       	ldi	r19, 0x0F	; 15
    2a02:	49 ec       	ldi	r20, 0xC9	; 201
    2a04:	5f eb       	ldi	r21, 0xBF	; 191
    2a06:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3x>
    2a0a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__fp_round>
    2a0e:	0f 90       	pop	r0
    2a10:	03 94       	inc	r0
    2a12:	01 fc       	sbrc	r0, 1
    2a14:	90 58       	subi	r25, 0x80	; 128
    2a16:	e4 e5       	ldi	r30, 0x54	; 84
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_powsodd>

00002a1e <__fp_split3>:
    2a1e:	57 fd       	sbrc	r21, 7
    2a20:	90 58       	subi	r25, 0x80	; 128
    2a22:	44 0f       	add	r20, r20
    2a24:	55 1f       	adc	r21, r21
    2a26:	59 f0       	breq	.+22     	; 0x2a3e <__fp_splitA+0x10>
    2a28:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2a:	71 f0       	breq	.+28     	; 0x2a48 <__fp_splitA+0x1a>
    2a2c:	47 95       	ror	r20

00002a2e <__fp_splitA>:
    2a2e:	88 0f       	add	r24, r24
    2a30:	97 fb       	bst	r25, 7
    2a32:	99 1f       	adc	r25, r25
    2a34:	61 f0       	breq	.+24     	; 0x2a4e <__fp_splitA+0x20>
    2a36:	9f 3f       	cpi	r25, 0xFF	; 255
    2a38:	79 f0       	breq	.+30     	; 0x2a58 <__fp_splitA+0x2a>
    2a3a:	87 95       	ror	r24
    2a3c:	08 95       	ret
    2a3e:	12 16       	cp	r1, r18
    2a40:	13 06       	cpc	r1, r19
    2a42:	14 06       	cpc	r1, r20
    2a44:	55 1f       	adc	r21, r21
    2a46:	f2 cf       	rjmp	.-28     	; 0x2a2c <__fp_split3+0xe>
    2a48:	46 95       	lsr	r20
    2a4a:	f1 df       	rcall	.-30     	; 0x2a2e <__fp_splitA>
    2a4c:	08 c0       	rjmp	.+16     	; 0x2a5e <__fp_splitA+0x30>
    2a4e:	16 16       	cp	r1, r22
    2a50:	17 06       	cpc	r1, r23
    2a52:	18 06       	cpc	r1, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	f1 cf       	rjmp	.-30     	; 0x2a3a <__fp_splitA+0xc>
    2a58:	86 95       	lsr	r24
    2a5a:	71 05       	cpc	r23, r1
    2a5c:	61 05       	cpc	r22, r1
    2a5e:	08 94       	sec
    2a60:	08 95       	ret

00002a62 <__fp_zero>:
    2a62:	e8 94       	clt

00002a64 <__fp_szero>:
    2a64:	bb 27       	eor	r27, r27
    2a66:	66 27       	eor	r22, r22
    2a68:	77 27       	eor	r23, r23
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	97 f9       	bld	r25, 7
    2a6e:	08 95       	ret

00002a70 <__gesf2>:
    2a70:	0e 94 84 14 	call	0x2908	; 0x2908 <__fp_cmp>
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <__gesf2+0x8>
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	08 95       	ret
    2a7a:	16 f0       	brts	.+4      	; 0x2a80 <__gesf2+0x10>
    2a7c:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__fp_mpack>
    2a80:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>
    2a84:	68 94       	set
    2a86:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>

00002a8a <log>:
    2a8a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__fp_splitA>
    2a8e:	a8 f3       	brcs	.-22     	; 0x2a7a <__gesf2+0xa>
    2a90:	99 23       	and	r25, r25
    2a92:	c1 f3       	breq	.-16     	; 0x2a84 <__gesf2+0x14>
    2a94:	ae f3       	brts	.-22     	; 0x2a80 <__gesf2+0x10>
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	1f 93       	push	r17
    2a9c:	0f 93       	push	r16
    2a9e:	ff 92       	push	r15
    2aa0:	c9 2f       	mov	r28, r25
    2aa2:	dd 27       	eor	r29, r29
    2aa4:	88 23       	and	r24, r24
    2aa6:	2a f0       	brmi	.+10     	; 0x2ab2 <log+0x28>
    2aa8:	21 97       	sbiw	r28, 0x01	; 1
    2aaa:	66 0f       	add	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 1f       	adc	r24, r24
    2ab0:	da f7       	brpl	.-10     	; 0x2aa8 <log+0x1e>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f eb       	ldi	r21, 0xBF	; 191
    2aba:	9f e3       	ldi	r25, 0x3F	; 63
    2abc:	88 39       	cpi	r24, 0x98	; 152
    2abe:	20 f0       	brcs	.+8      	; 0x2ac8 <log+0x3e>
    2ac0:	80 3e       	cpi	r24, 0xE0	; 224
    2ac2:	38 f0       	brcs	.+14     	; 0x2ad2 <log+0x48>
    2ac4:	21 96       	adiw	r28, 0x01	; 1
    2ac6:	8f 77       	andi	r24, 0x7F	; 127
    2ac8:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    2acc:	e2 e7       	ldi	r30, 0x72	; 114
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <log+0x50>
    2ad2:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    2ad6:	ef e9       	ldi	r30, 0x9F	; 159
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__fp_powser>
    2ade:	8b 01       	movw	r16, r22
    2ae0:	be 01       	movw	r22, r28
    2ae2:	ec 01       	movw	r28, r24
    2ae4:	fb 2e       	mov	r15, r27
    2ae6:	6f 57       	subi	r22, 0x7F	; 127
    2ae8:	71 09       	sbc	r23, r1
    2aea:	75 95       	asr	r23
    2aec:	77 1f       	adc	r23, r23
    2aee:	88 0b       	sbc	r24, r24
    2af0:	99 0b       	sbc	r25, r25
    2af2:	0e 94 49 14 	call	0x2892	; 0x2892 <__floatsisf>
    2af6:	28 e1       	ldi	r18, 0x18	; 24
    2af8:	32 e7       	ldi	r19, 0x72	; 114
    2afa:	41 e3       	ldi	r20, 0x31	; 49
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3x>
    2b02:	af 2d       	mov	r26, r15
    2b04:	98 01       	movw	r18, r16
    2b06:	ae 01       	movw	r20, r28
    2b08:	ff 90       	pop	r15
    2b0a:	0f 91       	pop	r16
    2b0c:	1f 91       	pop	r17
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3x>
    2b16:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__fp_round>

00002b1a <__mulsf3>:
    2b1a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3x>
    2b1e:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__fp_round>
    2b22:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fp_pscA>
    2b26:	38 f0       	brcs	.+14     	; 0x2b36 <__mulsf3+0x1c>
    2b28:	0e 94 b8 14 	call	0x2970	; 0x2970 <__fp_pscB>
    2b2c:	20 f0       	brcs	.+8      	; 0x2b36 <__mulsf3+0x1c>
    2b2e:	95 23       	and	r25, r21
    2b30:	11 f0       	breq	.+4      	; 0x2b36 <__mulsf3+0x1c>
    2b32:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>
    2b36:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>
    2b3a:	11 24       	eor	r1, r1
    2b3c:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_szero>

00002b40 <__mulsf3x>:
    2b40:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fp_split3>
    2b44:	70 f3       	brcs	.-36     	; 0x2b22 <__mulsf3+0x8>

00002b46 <__mulsf3_pse>:
    2b46:	95 9f       	mul	r25, r21
    2b48:	c1 f3       	breq	.-16     	; 0x2b3a <__mulsf3+0x20>
    2b4a:	95 0f       	add	r25, r21
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	55 1f       	adc	r21, r21
    2b50:	62 9f       	mul	r22, r18
    2b52:	f0 01       	movw	r30, r0
    2b54:	72 9f       	mul	r23, r18
    2b56:	bb 27       	eor	r27, r27
    2b58:	f0 0d       	add	r31, r0
    2b5a:	b1 1d       	adc	r27, r1
    2b5c:	63 9f       	mul	r22, r19
    2b5e:	aa 27       	eor	r26, r26
    2b60:	f0 0d       	add	r31, r0
    2b62:	b1 1d       	adc	r27, r1
    2b64:	aa 1f       	adc	r26, r26
    2b66:	64 9f       	mul	r22, r20
    2b68:	66 27       	eor	r22, r22
    2b6a:	b0 0d       	add	r27, r0
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	66 1f       	adc	r22, r22
    2b70:	82 9f       	mul	r24, r18
    2b72:	22 27       	eor	r18, r18
    2b74:	b0 0d       	add	r27, r0
    2b76:	a1 1d       	adc	r26, r1
    2b78:	62 1f       	adc	r22, r18
    2b7a:	73 9f       	mul	r23, r19
    2b7c:	b0 0d       	add	r27, r0
    2b7e:	a1 1d       	adc	r26, r1
    2b80:	62 1f       	adc	r22, r18
    2b82:	83 9f       	mul	r24, r19
    2b84:	a0 0d       	add	r26, r0
    2b86:	61 1d       	adc	r22, r1
    2b88:	22 1f       	adc	r18, r18
    2b8a:	74 9f       	mul	r23, r20
    2b8c:	33 27       	eor	r19, r19
    2b8e:	a0 0d       	add	r26, r0
    2b90:	61 1d       	adc	r22, r1
    2b92:	23 1f       	adc	r18, r19
    2b94:	84 9f       	mul	r24, r20
    2b96:	60 0d       	add	r22, r0
    2b98:	21 1d       	adc	r18, r1
    2b9a:	82 2f       	mov	r24, r18
    2b9c:	76 2f       	mov	r23, r22
    2b9e:	6a 2f       	mov	r22, r26
    2ba0:	11 24       	eor	r1, r1
    2ba2:	9f 57       	subi	r25, 0x7F	; 127
    2ba4:	50 40       	sbci	r21, 0x00	; 0
    2ba6:	9a f0       	brmi	.+38     	; 0x2bce <__mulsf3_pse+0x88>
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <__mulsf3_pse+0xa0>
    2baa:	88 23       	and	r24, r24
    2bac:	4a f0       	brmi	.+18     	; 0x2bc0 <__mulsf3_pse+0x7a>
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	91 50       	subi	r25, 0x01	; 1
    2bbc:	50 40       	sbci	r21, 0x00	; 0
    2bbe:	a9 f7       	brne	.-22     	; 0x2baa <__mulsf3_pse+0x64>
    2bc0:	9e 3f       	cpi	r25, 0xFE	; 254
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	80 f0       	brcs	.+32     	; 0x2be6 <__mulsf3_pse+0xa0>
    2bc6:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__fp_inf>
    2bca:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_szero>
    2bce:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd0:	e4 f3       	brlt	.-8      	; 0x2bca <__mulsf3_pse+0x84>
    2bd2:	98 3e       	cpi	r25, 0xE8	; 232
    2bd4:	d4 f3       	brlt	.-12     	; 0x2bca <__mulsf3_pse+0x84>
    2bd6:	86 95       	lsr	r24
    2bd8:	77 95       	ror	r23
    2bda:	67 95       	ror	r22
    2bdc:	b7 95       	ror	r27
    2bde:	f7 95       	ror	r31
    2be0:	e7 95       	ror	r30
    2be2:	9f 5f       	subi	r25, 0xFF	; 255
    2be4:	c1 f7       	brne	.-16     	; 0x2bd6 <__mulsf3_pse+0x90>
    2be6:	fe 2b       	or	r31, r30
    2be8:	88 0f       	add	r24, r24
    2bea:	91 1d       	adc	r25, r1
    2bec:	96 95       	lsr	r25
    2bee:	87 95       	ror	r24
    2bf0:	97 f9       	bld	r25, 7
    2bf2:	08 95       	ret

00002bf4 <sin>:
    2bf4:	9f 93       	push	r25
    2bf6:	0e 94 c1 14 	call	0x2982	; 0x2982 <__fp_rempio2>
    2bfa:	0f 90       	pop	r0
    2bfc:	07 fc       	sbrc	r0, 7
    2bfe:	ee 5f       	subi	r30, 0xFE	; 254
    2c00:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__fp_sinus>
    2c04:	19 f4       	brne	.+6      	; 0x2c0c <sin+0x18>
    2c06:	16 f4       	brtc	.+4      	; 0x2c0c <sin+0x18>
    2c08:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__fp_nan>
    2c0c:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__fp_mpack>

00002c10 <sqrt>:
    2c10:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__fp_splitA>
    2c14:	b8 f3       	brcs	.-18     	; 0x2c04 <sin+0x10>
    2c16:	99 23       	and	r25, r25
    2c18:	c9 f3       	breq	.-14     	; 0x2c0c <sin+0x18>
    2c1a:	b6 f3       	brts	.-20     	; 0x2c08 <sin+0x14>
    2c1c:	9f 57       	subi	r25, 0x7F	; 127
    2c1e:	55 0b       	sbc	r21, r21
    2c20:	87 ff       	sbrs	r24, 7
    2c22:	0e 94 56 16 	call	0x2cac	; 0x2cac <__fp_norm2>
    2c26:	00 24       	eor	r0, r0
    2c28:	a0 e6       	ldi	r26, 0x60	; 96
    2c2a:	40 ea       	ldi	r20, 0xA0	; 160
    2c2c:	90 01       	movw	r18, r0
    2c2e:	80 58       	subi	r24, 0x80	; 128
    2c30:	56 95       	lsr	r21
    2c32:	97 95       	ror	r25
    2c34:	28 f4       	brcc	.+10     	; 0x2c40 <sqrt+0x30>
    2c36:	80 5c       	subi	r24, 0xC0	; 192
    2c38:	66 0f       	add	r22, r22
    2c3a:	77 1f       	adc	r23, r23
    2c3c:	88 1f       	adc	r24, r24
    2c3e:	20 f0       	brcs	.+8      	; 0x2c48 <sqrt+0x38>
    2c40:	26 17       	cp	r18, r22
    2c42:	37 07       	cpc	r19, r23
    2c44:	48 07       	cpc	r20, r24
    2c46:	30 f4       	brcc	.+12     	; 0x2c54 <sqrt+0x44>
    2c48:	62 1b       	sub	r22, r18
    2c4a:	73 0b       	sbc	r23, r19
    2c4c:	84 0b       	sbc	r24, r20
    2c4e:	20 29       	or	r18, r0
    2c50:	31 29       	or	r19, r1
    2c52:	4a 2b       	or	r20, r26
    2c54:	a6 95       	lsr	r26
    2c56:	17 94       	ror	r1
    2c58:	07 94       	ror	r0
    2c5a:	20 25       	eor	r18, r0
    2c5c:	31 25       	eor	r19, r1
    2c5e:	4a 27       	eor	r20, r26
    2c60:	58 f7       	brcc	.-42     	; 0x2c38 <sqrt+0x28>
    2c62:	66 0f       	add	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	88 1f       	adc	r24, r24
    2c68:	20 f0       	brcs	.+8      	; 0x2c72 <sqrt+0x62>
    2c6a:	26 17       	cp	r18, r22
    2c6c:	37 07       	cpc	r19, r23
    2c6e:	48 07       	cpc	r20, r24
    2c70:	30 f4       	brcc	.+12     	; 0x2c7e <sqrt+0x6e>
    2c72:	62 0b       	sbc	r22, r18
    2c74:	73 0b       	sbc	r23, r19
    2c76:	84 0b       	sbc	r24, r20
    2c78:	20 0d       	add	r18, r0
    2c7a:	31 1d       	adc	r19, r1
    2c7c:	41 1d       	adc	r20, r1
    2c7e:	a0 95       	com	r26
    2c80:	81 f7       	brne	.-32     	; 0x2c62 <sqrt+0x52>
    2c82:	b9 01       	movw	r22, r18
    2c84:	84 2f       	mov	r24, r20
    2c86:	91 58       	subi	r25, 0x81	; 129
    2c88:	88 0f       	add	r24, r24
    2c8a:	96 95       	lsr	r25
    2c8c:	87 95       	ror	r24
    2c8e:	08 95       	ret

00002c90 <__fp_mpack>:
    2c90:	9f 3f       	cpi	r25, 0xFF	; 255
    2c92:	31 f0       	breq	.+12     	; 0x2ca0 <__fp_mpack_finite+0xc>

00002c94 <__fp_mpack_finite>:
    2c94:	91 50       	subi	r25, 0x01	; 1
    2c96:	20 f4       	brcc	.+8      	; 0x2ca0 <__fp_mpack_finite+0xc>
    2c98:	87 95       	ror	r24
    2c9a:	77 95       	ror	r23
    2c9c:	67 95       	ror	r22
    2c9e:	b7 95       	ror	r27
    2ca0:	88 0f       	add	r24, r24
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	96 95       	lsr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	97 f9       	bld	r25, 7
    2caa:	08 95       	ret

00002cac <__fp_norm2>:
    2cac:	91 50       	subi	r25, 0x01	; 1
    2cae:	50 40       	sbci	r21, 0x00	; 0
    2cb0:	66 0f       	add	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	d2 f7       	brpl	.-12     	; 0x2cac <__fp_norm2>
    2cb8:	08 95       	ret

00002cba <__fp_powser>:
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	1f 93       	push	r17
    2cc0:	0f 93       	push	r16
    2cc2:	ff 92       	push	r15
    2cc4:	ef 92       	push	r14
    2cc6:	df 92       	push	r13
    2cc8:	7b 01       	movw	r14, r22
    2cca:	8c 01       	movw	r16, r24
    2ccc:	68 94       	set
    2cce:	06 c0       	rjmp	.+12     	; 0x2cdc <__fp_powser+0x22>
    2cd0:	da 2e       	mov	r13, r26
    2cd2:	ef 01       	movw	r28, r30
    2cd4:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3x>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e8 94       	clt
    2cdc:	a5 91       	lpm	r26, Z+
    2cde:	25 91       	lpm	r18, Z+
    2ce0:	35 91       	lpm	r19, Z+
    2ce2:	45 91       	lpm	r20, Z+
    2ce4:	55 91       	lpm	r21, Z+
    2ce6:	a6 f3       	brts	.-24     	; 0x2cd0 <__fp_powser+0x16>
    2ce8:	ef 01       	movw	r28, r30
    2cea:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3x>
    2cee:	fe 01       	movw	r30, r28
    2cf0:	97 01       	movw	r18, r14
    2cf2:	a8 01       	movw	r20, r16
    2cf4:	da 94       	dec	r13
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <__fp_powser+0x18>
    2cf8:	df 90       	pop	r13
    2cfa:	ef 90       	pop	r14
    2cfc:	ff 90       	pop	r15
    2cfe:	0f 91       	pop	r16
    2d00:	1f 91       	pop	r17
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <__fp_powsodd>:
    2d08:	9f 93       	push	r25
    2d0a:	8f 93       	push	r24
    2d0c:	7f 93       	push	r23
    2d0e:	6f 93       	push	r22
    2d10:	ff 93       	push	r31
    2d12:	ef 93       	push	r30
    2d14:	9b 01       	movw	r18, r22
    2d16:	ac 01       	movw	r20, r24
    2d18:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    2d1c:	ef 91       	pop	r30
    2d1e:	ff 91       	pop	r31
    2d20:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__fp_powser>
    2d24:	2f 91       	pop	r18
    2d26:	3f 91       	pop	r19
    2d28:	4f 91       	pop	r20
    2d2a:	5f 91       	pop	r21
    2d2c:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__mulsf3>

00002d30 <__divmodhi4>:
    2d30:	97 fb       	bst	r25, 7
    2d32:	07 2e       	mov	r0, r23
    2d34:	16 f4       	brtc	.+4      	; 0x2d3a <__divmodhi4+0xa>
    2d36:	00 94       	com	r0
    2d38:	07 d0       	rcall	.+14     	; 0x2d48 <__divmodhi4_neg1>
    2d3a:	77 fd       	sbrc	r23, 7
    2d3c:	09 d0       	rcall	.+18     	; 0x2d50 <__divmodhi4_neg2>
    2d3e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__udivmodhi4>
    2d42:	07 fc       	sbrc	r0, 7
    2d44:	05 d0       	rcall	.+10     	; 0x2d50 <__divmodhi4_neg2>
    2d46:	3e f4       	brtc	.+14     	; 0x2d56 <__divmodhi4_exit>

00002d48 <__divmodhi4_neg1>:
    2d48:	90 95       	com	r25
    2d4a:	81 95       	neg	r24
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	08 95       	ret

00002d50 <__divmodhi4_neg2>:
    2d50:	70 95       	com	r23
    2d52:	61 95       	neg	r22
    2d54:	7f 4f       	sbci	r23, 0xFF	; 255

00002d56 <__divmodhi4_exit>:
    2d56:	08 95       	ret

00002d58 <__divmodsi4>:
    2d58:	05 2e       	mov	r0, r21
    2d5a:	97 fb       	bst	r25, 7
    2d5c:	1e f4       	brtc	.+6      	; 0x2d64 <__divmodsi4+0xc>
    2d5e:	00 94       	com	r0
    2d60:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__negsi2>
    2d64:	57 fd       	sbrc	r21, 7
    2d66:	07 d0       	rcall	.+14     	; 0x2d76 <__divmodsi4_neg2>
    2d68:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__udivmodsi4>
    2d6c:	07 fc       	sbrc	r0, 7
    2d6e:	03 d0       	rcall	.+6      	; 0x2d76 <__divmodsi4_neg2>
    2d70:	4e f4       	brtc	.+18     	; 0x2d84 <__divmodsi4_exit>
    2d72:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__negsi2>

00002d76 <__divmodsi4_neg2>:
    2d76:	50 95       	com	r21
    2d78:	40 95       	com	r20
    2d7a:	30 95       	com	r19
    2d7c:	21 95       	neg	r18
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	4f 4f       	sbci	r20, 0xFF	; 255
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255

00002d84 <__divmodsi4_exit>:
    2d84:	08 95       	ret

00002d86 <__negsi2>:
    2d86:	90 95       	com	r25
    2d88:	80 95       	com	r24
    2d8a:	70 95       	com	r23
    2d8c:	61 95       	neg	r22
    2d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d90:	8f 4f       	sbci	r24, 0xFF	; 255
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	08 95       	ret

00002d96 <__muluhisi3>:
    2d96:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__umulhisi3>
    2d9a:	a5 9f       	mul	r26, r21
    2d9c:	90 0d       	add	r25, r0
    2d9e:	b4 9f       	mul	r27, r20
    2da0:	90 0d       	add	r25, r0
    2da2:	a4 9f       	mul	r26, r20
    2da4:	80 0d       	add	r24, r0
    2da6:	91 1d       	adc	r25, r1
    2da8:	11 24       	eor	r1, r1
    2daa:	08 95       	ret

00002dac <__mulshisi3>:
    2dac:	b7 ff       	sbrs	r27, 7
    2dae:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__muluhisi3>

00002db2 <__mulohisi3>:
    2db2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__muluhisi3>
    2db6:	82 1b       	sub	r24, r18
    2db8:	93 0b       	sbc	r25, r19
    2dba:	08 95       	ret

00002dbc <__udivmodhi4>:
    2dbc:	aa 1b       	sub	r26, r26
    2dbe:	bb 1b       	sub	r27, r27
    2dc0:	51 e1       	ldi	r21, 0x11	; 17
    2dc2:	07 c0       	rjmp	.+14     	; 0x2dd2 <__udivmodhi4_ep>

00002dc4 <__udivmodhi4_loop>:
    2dc4:	aa 1f       	adc	r26, r26
    2dc6:	bb 1f       	adc	r27, r27
    2dc8:	a6 17       	cp	r26, r22
    2dca:	b7 07       	cpc	r27, r23
    2dcc:	10 f0       	brcs	.+4      	; 0x2dd2 <__udivmodhi4_ep>
    2dce:	a6 1b       	sub	r26, r22
    2dd0:	b7 0b       	sbc	r27, r23

00002dd2 <__udivmodhi4_ep>:
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	5a 95       	dec	r21
    2dd8:	a9 f7       	brne	.-22     	; 0x2dc4 <__udivmodhi4_loop>
    2dda:	80 95       	com	r24
    2ddc:	90 95       	com	r25
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	08 95       	ret

00002de4 <__udivmodsi4>:
    2de4:	a1 e2       	ldi	r26, 0x21	; 33
    2de6:	1a 2e       	mov	r1, r26
    2de8:	aa 1b       	sub	r26, r26
    2dea:	bb 1b       	sub	r27, r27
    2dec:	fd 01       	movw	r30, r26
    2dee:	0d c0       	rjmp	.+26     	; 0x2e0a <__udivmodsi4_ep>

00002df0 <__udivmodsi4_loop>:
    2df0:	aa 1f       	adc	r26, r26
    2df2:	bb 1f       	adc	r27, r27
    2df4:	ee 1f       	adc	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	a2 17       	cp	r26, r18
    2dfa:	b3 07       	cpc	r27, r19
    2dfc:	e4 07       	cpc	r30, r20
    2dfe:	f5 07       	cpc	r31, r21
    2e00:	20 f0       	brcs	.+8      	; 0x2e0a <__udivmodsi4_ep>
    2e02:	a2 1b       	sub	r26, r18
    2e04:	b3 0b       	sbc	r27, r19
    2e06:	e4 0b       	sbc	r30, r20
    2e08:	f5 0b       	sbc	r31, r21

00002e0a <__udivmodsi4_ep>:
    2e0a:	66 1f       	adc	r22, r22
    2e0c:	77 1f       	adc	r23, r23
    2e0e:	88 1f       	adc	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	1a 94       	dec	r1
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <__udivmodsi4_loop>
    2e16:	60 95       	com	r22
    2e18:	70 95       	com	r23
    2e1a:	80 95       	com	r24
    2e1c:	90 95       	com	r25
    2e1e:	9b 01       	movw	r18, r22
    2e20:	ac 01       	movw	r20, r24
    2e22:	bd 01       	movw	r22, r26
    2e24:	cf 01       	movw	r24, r30
    2e26:	08 95       	ret

00002e28 <__umulhisi3>:
    2e28:	a2 9f       	mul	r26, r18
    2e2a:	b0 01       	movw	r22, r0
    2e2c:	b3 9f       	mul	r27, r19
    2e2e:	c0 01       	movw	r24, r0
    2e30:	a3 9f       	mul	r26, r19
    2e32:	70 0d       	add	r23, r0
    2e34:	81 1d       	adc	r24, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	91 1d       	adc	r25, r1
    2e3a:	b2 9f       	mul	r27, r18
    2e3c:	70 0d       	add	r23, r0
    2e3e:	81 1d       	adc	r24, r1
    2e40:	11 24       	eor	r1, r1
    2e42:	91 1d       	adc	r25, r1
    2e44:	08 95       	ret

00002e46 <dtostrf>:
    2e46:	ef 92       	push	r14
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	e8 01       	movw	r28, r16
    2e52:	47 fd       	sbrc	r20, 7
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <dtostrf+0x14>
    2e56:	34 e0       	ldi	r19, 0x04	; 4
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <dtostrf+0x16>
    2e5a:	34 e1       	ldi	r19, 0x14	; 20
    2e5c:	04 2e       	mov	r0, r20
    2e5e:	00 0c       	add	r0, r0
    2e60:	55 0b       	sbc	r21, r21
    2e62:	57 ff       	sbrs	r21, 7
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <dtostrf+0x26>
    2e66:	51 95       	neg	r21
    2e68:	41 95       	neg	r20
    2e6a:	51 09       	sbc	r21, r1
    2e6c:	e3 2e       	mov	r14, r19
    2e6e:	02 2f       	mov	r16, r18
    2e70:	24 2f       	mov	r18, r20
    2e72:	ae 01       	movw	r20, r28
    2e74:	0e 94 70 19 	call	0x32e0	; 0x32e0 <dtoa_prf>
    2e78:	ce 01       	movw	r24, r28
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ef 90       	pop	r14
    2e84:	08 95       	ret

00002e86 <atof>:
    2e86:	66 27       	eor	r22, r22
    2e88:	77 27       	eor	r23, r23
    2e8a:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <strtod>

00002e8e <atoi>:
    2e8e:	fc 01       	movw	r30, r24
    2e90:	88 27       	eor	r24, r24
    2e92:	99 27       	eor	r25, r25
    2e94:	e8 94       	clt
    2e96:	21 91       	ld	r18, Z+
    2e98:	20 32       	cpi	r18, 0x20	; 32
    2e9a:	e9 f3       	breq	.-6      	; 0x2e96 <atoi+0x8>
    2e9c:	29 30       	cpi	r18, 0x09	; 9
    2e9e:	10 f0       	brcs	.+4      	; 0x2ea4 <atoi+0x16>
    2ea0:	2e 30       	cpi	r18, 0x0E	; 14
    2ea2:	c8 f3       	brcs	.-14     	; 0x2e96 <atoi+0x8>
    2ea4:	2b 32       	cpi	r18, 0x2B	; 43
    2ea6:	41 f0       	breq	.+16     	; 0x2eb8 <atoi+0x2a>
    2ea8:	2d 32       	cpi	r18, 0x2D	; 45
    2eaa:	39 f4       	brne	.+14     	; 0x2eba <atoi+0x2c>
    2eac:	68 94       	set
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <atoi+0x2a>
    2eb0:	0e 94 65 17 	call	0x2eca	; 0x2eca <__mulhi_const_10>
    2eb4:	82 0f       	add	r24, r18
    2eb6:	91 1d       	adc	r25, r1
    2eb8:	21 91       	ld	r18, Z+
    2eba:	20 53       	subi	r18, 0x30	; 48
    2ebc:	2a 30       	cpi	r18, 0x0A	; 10
    2ebe:	c0 f3       	brcs	.-16     	; 0x2eb0 <atoi+0x22>
    2ec0:	1e f4       	brtc	.+6      	; 0x2ec8 <atoi+0x3a>
    2ec2:	90 95       	com	r25
    2ec4:	81 95       	neg	r24
    2ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec8:	08 95       	ret

00002eca <__mulhi_const_10>:
    2eca:	7a e0       	ldi	r23, 0x0A	; 10
    2ecc:	97 9f       	mul	r25, r23
    2ece:	90 2d       	mov	r25, r0
    2ed0:	87 9f       	mul	r24, r23
    2ed2:	80 2d       	mov	r24, r0
    2ed4:	91 0d       	add	r25, r1
    2ed6:	11 24       	eor	r1, r1
    2ed8:	08 95       	ret

00002eda <sprintf>:
    2eda:	ae e0       	ldi	r26, 0x0E	; 14
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e3 e7       	ldi	r30, 0x73	; 115
    2ee0:	f7 e1       	ldi	r31, 0x17	; 23
    2ee2:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <__prologue_saves__+0x1c>
    2ee6:	0d 89       	ldd	r16, Y+21	; 0x15
    2ee8:	1e 89       	ldd	r17, Y+22	; 0x16
    2eea:	86 e0       	ldi	r24, 0x06	; 6
    2eec:	8c 83       	std	Y+4, r24	; 0x04
    2eee:	1a 83       	std	Y+2, r17	; 0x02
    2ef0:	09 83       	std	Y+1, r16	; 0x01
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
    2ef4:	9f e7       	ldi	r25, 0x7F	; 127
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	ae 01       	movw	r20, r28
    2efc:	47 5e       	subi	r20, 0xE7	; 231
    2efe:	5f 4f       	sbci	r21, 0xFF	; 255
    2f00:	6f 89       	ldd	r22, Y+23	; 0x17
    2f02:	78 8d       	ldd	r23, Y+24	; 0x18
    2f04:	ce 01       	movw	r24, r28
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <vfprintf>
    2f0c:	ef 81       	ldd	r30, Y+7	; 0x07
    2f0e:	f8 85       	ldd	r31, Y+8	; 0x08
    2f10:	e0 0f       	add	r30, r16
    2f12:	f1 1f       	adc	r31, r17
    2f14:	10 82       	st	Z, r1
    2f16:	2e 96       	adiw	r28, 0x0e	; 14
    2f18:	e4 e0       	ldi	r30, 0x04	; 4
    2f1a:	0c 94 ee 1d 	jmp	0x3bdc	; 0x3bdc <__epilogue_restores__+0x1c>

00002f1e <vfprintf>:
    2f1e:	ab e0       	ldi	r26, 0x0B	; 11
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e9       	ldi	r30, 0x95	; 149
    2f24:	f7 e1       	ldi	r31, 0x17	; 23
    2f26:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__prologue_saves__>
    2f2a:	6c 01       	movw	r12, r24
    2f2c:	7b 01       	movw	r14, r22
    2f2e:	8a 01       	movw	r16, r20
    2f30:	fc 01       	movw	r30, r24
    2f32:	17 82       	std	Z+7, r1	; 0x07
    2f34:	16 82       	std	Z+6, r1	; 0x06
    2f36:	83 81       	ldd	r24, Z+3	; 0x03
    2f38:	81 ff       	sbrs	r24, 1
    2f3a:	cc c1       	rjmp	.+920    	; 0x32d4 <vfprintf+0x3b6>
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	3c 01       	movw	r6, r24
    2f42:	f6 01       	movw	r30, r12
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	f7 01       	movw	r30, r14
    2f48:	93 fd       	sbrc	r25, 3
    2f4a:	85 91       	lpm	r24, Z+
    2f4c:	93 ff       	sbrs	r25, 3
    2f4e:	81 91       	ld	r24, Z+
    2f50:	7f 01       	movw	r14, r30
    2f52:	88 23       	and	r24, r24
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <vfprintf+0x3a>
    2f56:	ba c1       	rjmp	.+884    	; 0x32cc <vfprintf+0x3ae>
    2f58:	85 32       	cpi	r24, 0x25	; 37
    2f5a:	39 f4       	brne	.+14     	; 0x2f6a <vfprintf+0x4c>
    2f5c:	93 fd       	sbrc	r25, 3
    2f5e:	85 91       	lpm	r24, Z+
    2f60:	93 ff       	sbrs	r25, 3
    2f62:	81 91       	ld	r24, Z+
    2f64:	7f 01       	movw	r14, r30
    2f66:	85 32       	cpi	r24, 0x25	; 37
    2f68:	29 f4       	brne	.+10     	; 0x2f74 <vfprintf+0x56>
    2f6a:	b6 01       	movw	r22, r12
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    2f72:	e7 cf       	rjmp	.-50     	; 0x2f42 <vfprintf+0x24>
    2f74:	91 2c       	mov	r9, r1
    2f76:	21 2c       	mov	r2, r1
    2f78:	31 2c       	mov	r3, r1
    2f7a:	ff e1       	ldi	r31, 0x1F	; 31
    2f7c:	f3 15       	cp	r31, r3
    2f7e:	d8 f0       	brcs	.+54     	; 0x2fb6 <vfprintf+0x98>
    2f80:	8b 32       	cpi	r24, 0x2B	; 43
    2f82:	79 f0       	breq	.+30     	; 0x2fa2 <vfprintf+0x84>
    2f84:	38 f4       	brcc	.+14     	; 0x2f94 <vfprintf+0x76>
    2f86:	80 32       	cpi	r24, 0x20	; 32
    2f88:	79 f0       	breq	.+30     	; 0x2fa8 <vfprintf+0x8a>
    2f8a:	83 32       	cpi	r24, 0x23	; 35
    2f8c:	a1 f4       	brne	.+40     	; 0x2fb6 <vfprintf+0x98>
    2f8e:	23 2d       	mov	r18, r3
    2f90:	20 61       	ori	r18, 0x10	; 16
    2f92:	1d c0       	rjmp	.+58     	; 0x2fce <vfprintf+0xb0>
    2f94:	8d 32       	cpi	r24, 0x2D	; 45
    2f96:	61 f0       	breq	.+24     	; 0x2fb0 <vfprintf+0x92>
    2f98:	80 33       	cpi	r24, 0x30	; 48
    2f9a:	69 f4       	brne	.+26     	; 0x2fb6 <vfprintf+0x98>
    2f9c:	23 2d       	mov	r18, r3
    2f9e:	21 60       	ori	r18, 0x01	; 1
    2fa0:	16 c0       	rjmp	.+44     	; 0x2fce <vfprintf+0xb0>
    2fa2:	83 2d       	mov	r24, r3
    2fa4:	82 60       	ori	r24, 0x02	; 2
    2fa6:	38 2e       	mov	r3, r24
    2fa8:	e3 2d       	mov	r30, r3
    2faa:	e4 60       	ori	r30, 0x04	; 4
    2fac:	3e 2e       	mov	r3, r30
    2fae:	2a c0       	rjmp	.+84     	; 0x3004 <vfprintf+0xe6>
    2fb0:	f3 2d       	mov	r31, r3
    2fb2:	f8 60       	ori	r31, 0x08	; 8
    2fb4:	1d c0       	rjmp	.+58     	; 0x2ff0 <vfprintf+0xd2>
    2fb6:	37 fc       	sbrc	r3, 7
    2fb8:	2d c0       	rjmp	.+90     	; 0x3014 <vfprintf+0xf6>
    2fba:	20 ed       	ldi	r18, 0xD0	; 208
    2fbc:	28 0f       	add	r18, r24
    2fbe:	2a 30       	cpi	r18, 0x0A	; 10
    2fc0:	40 f0       	brcs	.+16     	; 0x2fd2 <vfprintf+0xb4>
    2fc2:	8e 32       	cpi	r24, 0x2E	; 46
    2fc4:	b9 f4       	brne	.+46     	; 0x2ff4 <vfprintf+0xd6>
    2fc6:	36 fc       	sbrc	r3, 6
    2fc8:	81 c1       	rjmp	.+770    	; 0x32cc <vfprintf+0x3ae>
    2fca:	23 2d       	mov	r18, r3
    2fcc:	20 64       	ori	r18, 0x40	; 64
    2fce:	32 2e       	mov	r3, r18
    2fd0:	19 c0       	rjmp	.+50     	; 0x3004 <vfprintf+0xe6>
    2fd2:	36 fe       	sbrs	r3, 6
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <vfprintf+0xc4>
    2fd6:	8a e0       	ldi	r24, 0x0A	; 10
    2fd8:	98 9e       	mul	r9, r24
    2fda:	20 0d       	add	r18, r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	92 2e       	mov	r9, r18
    2fe0:	11 c0       	rjmp	.+34     	; 0x3004 <vfprintf+0xe6>
    2fe2:	ea e0       	ldi	r30, 0x0A	; 10
    2fe4:	2e 9e       	mul	r2, r30
    2fe6:	20 0d       	add	r18, r0
    2fe8:	11 24       	eor	r1, r1
    2fea:	22 2e       	mov	r2, r18
    2fec:	f3 2d       	mov	r31, r3
    2fee:	f0 62       	ori	r31, 0x20	; 32
    2ff0:	3f 2e       	mov	r3, r31
    2ff2:	08 c0       	rjmp	.+16     	; 0x3004 <vfprintf+0xe6>
    2ff4:	8c 36       	cpi	r24, 0x6C	; 108
    2ff6:	21 f4       	brne	.+8      	; 0x3000 <vfprintf+0xe2>
    2ff8:	83 2d       	mov	r24, r3
    2ffa:	80 68       	ori	r24, 0x80	; 128
    2ffc:	38 2e       	mov	r3, r24
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <vfprintf+0xe6>
    3000:	88 36       	cpi	r24, 0x68	; 104
    3002:	41 f4       	brne	.+16     	; 0x3014 <vfprintf+0xf6>
    3004:	f7 01       	movw	r30, r14
    3006:	93 fd       	sbrc	r25, 3
    3008:	85 91       	lpm	r24, Z+
    300a:	93 ff       	sbrs	r25, 3
    300c:	81 91       	ld	r24, Z+
    300e:	7f 01       	movw	r14, r30
    3010:	81 11       	cpse	r24, r1
    3012:	b3 cf       	rjmp	.-154    	; 0x2f7a <vfprintf+0x5c>
    3014:	98 2f       	mov	r25, r24
    3016:	9f 7d       	andi	r25, 0xDF	; 223
    3018:	95 54       	subi	r25, 0x45	; 69
    301a:	93 30       	cpi	r25, 0x03	; 3
    301c:	28 f4       	brcc	.+10     	; 0x3028 <vfprintf+0x10a>
    301e:	0c 5f       	subi	r16, 0xFC	; 252
    3020:	1f 4f       	sbci	r17, 0xFF	; 255
    3022:	9f e3       	ldi	r25, 0x3F	; 63
    3024:	99 83       	std	Y+1, r25	; 0x01
    3026:	0d c0       	rjmp	.+26     	; 0x3042 <vfprintf+0x124>
    3028:	83 36       	cpi	r24, 0x63	; 99
    302a:	31 f0       	breq	.+12     	; 0x3038 <vfprintf+0x11a>
    302c:	83 37       	cpi	r24, 0x73	; 115
    302e:	71 f0       	breq	.+28     	; 0x304c <vfprintf+0x12e>
    3030:	83 35       	cpi	r24, 0x53	; 83
    3032:	09 f0       	breq	.+2      	; 0x3036 <vfprintf+0x118>
    3034:	59 c0       	rjmp	.+178    	; 0x30e8 <vfprintf+0x1ca>
    3036:	21 c0       	rjmp	.+66     	; 0x307a <vfprintf+0x15c>
    3038:	f8 01       	movw	r30, r16
    303a:	80 81       	ld	r24, Z
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	0e 5f       	subi	r16, 0xFE	; 254
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	88 24       	eor	r8, r8
    3044:	83 94       	inc	r8
    3046:	91 2c       	mov	r9, r1
    3048:	53 01       	movw	r10, r6
    304a:	13 c0       	rjmp	.+38     	; 0x3072 <vfprintf+0x154>
    304c:	28 01       	movw	r4, r16
    304e:	f2 e0       	ldi	r31, 0x02	; 2
    3050:	4f 0e       	add	r4, r31
    3052:	51 1c       	adc	r5, r1
    3054:	f8 01       	movw	r30, r16
    3056:	a0 80       	ld	r10, Z
    3058:	b1 80       	ldd	r11, Z+1	; 0x01
    305a:	36 fe       	sbrs	r3, 6
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <vfprintf+0x146>
    305e:	69 2d       	mov	r22, r9
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <vfprintf+0x14a>
    3064:	6f ef       	ldi	r22, 0xFF	; 255
    3066:	7f ef       	ldi	r23, 0xFF	; 255
    3068:	c5 01       	movw	r24, r10
    306a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <strnlen>
    306e:	4c 01       	movw	r8, r24
    3070:	82 01       	movw	r16, r4
    3072:	f3 2d       	mov	r31, r3
    3074:	ff 77       	andi	r31, 0x7F	; 127
    3076:	3f 2e       	mov	r3, r31
    3078:	16 c0       	rjmp	.+44     	; 0x30a6 <vfprintf+0x188>
    307a:	28 01       	movw	r4, r16
    307c:	22 e0       	ldi	r18, 0x02	; 2
    307e:	42 0e       	add	r4, r18
    3080:	51 1c       	adc	r5, r1
    3082:	f8 01       	movw	r30, r16
    3084:	a0 80       	ld	r10, Z
    3086:	b1 80       	ldd	r11, Z+1	; 0x01
    3088:	36 fe       	sbrs	r3, 6
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <vfprintf+0x174>
    308c:	69 2d       	mov	r22, r9
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x178>
    3092:	6f ef       	ldi	r22, 0xFF	; 255
    3094:	7f ef       	ldi	r23, 0xFF	; 255
    3096:	c5 01       	movw	r24, r10
    3098:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <strnlen_P>
    309c:	4c 01       	movw	r8, r24
    309e:	f3 2d       	mov	r31, r3
    30a0:	f0 68       	ori	r31, 0x80	; 128
    30a2:	3f 2e       	mov	r3, r31
    30a4:	82 01       	movw	r16, r4
    30a6:	33 fc       	sbrc	r3, 3
    30a8:	1b c0       	rjmp	.+54     	; 0x30e0 <vfprintf+0x1c2>
    30aa:	82 2d       	mov	r24, r2
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	88 16       	cp	r8, r24
    30b0:	99 06       	cpc	r9, r25
    30b2:	b0 f4       	brcc	.+44     	; 0x30e0 <vfprintf+0x1c2>
    30b4:	b6 01       	movw	r22, r12
    30b6:	80 e2       	ldi	r24, 0x20	; 32
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    30be:	2a 94       	dec	r2
    30c0:	f4 cf       	rjmp	.-24     	; 0x30aa <vfprintf+0x18c>
    30c2:	f5 01       	movw	r30, r10
    30c4:	37 fc       	sbrc	r3, 7
    30c6:	85 91       	lpm	r24, Z+
    30c8:	37 fe       	sbrs	r3, 7
    30ca:	81 91       	ld	r24, Z+
    30cc:	5f 01       	movw	r10, r30
    30ce:	b6 01       	movw	r22, r12
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    30d6:	21 10       	cpse	r2, r1
    30d8:	2a 94       	dec	r2
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	82 1a       	sub	r8, r18
    30de:	91 08       	sbc	r9, r1
    30e0:	81 14       	cp	r8, r1
    30e2:	91 04       	cpc	r9, r1
    30e4:	71 f7       	brne	.-36     	; 0x30c2 <vfprintf+0x1a4>
    30e6:	e8 c0       	rjmp	.+464    	; 0x32b8 <vfprintf+0x39a>
    30e8:	84 36       	cpi	r24, 0x64	; 100
    30ea:	11 f0       	breq	.+4      	; 0x30f0 <vfprintf+0x1d2>
    30ec:	89 36       	cpi	r24, 0x69	; 105
    30ee:	41 f5       	brne	.+80     	; 0x3140 <vfprintf+0x222>
    30f0:	f8 01       	movw	r30, r16
    30f2:	37 fe       	sbrs	r3, 7
    30f4:	07 c0       	rjmp	.+14     	; 0x3104 <vfprintf+0x1e6>
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	0c 5f       	subi	r16, 0xFC	; 252
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	08 c0       	rjmp	.+16     	; 0x3114 <vfprintf+0x1f6>
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	07 2e       	mov	r0, r23
    310a:	00 0c       	add	r0, r0
    310c:	88 0b       	sbc	r24, r24
    310e:	99 0b       	sbc	r25, r25
    3110:	0e 5f       	subi	r16, 0xFE	; 254
    3112:	1f 4f       	sbci	r17, 0xFF	; 255
    3114:	f3 2d       	mov	r31, r3
    3116:	ff 76       	andi	r31, 0x6F	; 111
    3118:	3f 2e       	mov	r3, r31
    311a:	97 ff       	sbrs	r25, 7
    311c:	09 c0       	rjmp	.+18     	; 0x3130 <vfprintf+0x212>
    311e:	90 95       	com	r25
    3120:	80 95       	com	r24
    3122:	70 95       	com	r23
    3124:	61 95       	neg	r22
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	8f 4f       	sbci	r24, 0xFF	; 255
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	f0 68       	ori	r31, 0x80	; 128
    312e:	3f 2e       	mov	r3, r31
    3130:	2a e0       	ldi	r18, 0x0A	; 10
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	a3 01       	movw	r20, r6
    3136:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__ultoa_invert>
    313a:	88 2e       	mov	r8, r24
    313c:	86 18       	sub	r8, r6
    313e:	45 c0       	rjmp	.+138    	; 0x31ca <vfprintf+0x2ac>
    3140:	85 37       	cpi	r24, 0x75	; 117
    3142:	31 f4       	brne	.+12     	; 0x3150 <vfprintf+0x232>
    3144:	23 2d       	mov	r18, r3
    3146:	2f 7e       	andi	r18, 0xEF	; 239
    3148:	b2 2e       	mov	r11, r18
    314a:	2a e0       	ldi	r18, 0x0A	; 10
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	25 c0       	rjmp	.+74     	; 0x319a <vfprintf+0x27c>
    3150:	93 2d       	mov	r25, r3
    3152:	99 7f       	andi	r25, 0xF9	; 249
    3154:	b9 2e       	mov	r11, r25
    3156:	8f 36       	cpi	r24, 0x6F	; 111
    3158:	c1 f0       	breq	.+48     	; 0x318a <vfprintf+0x26c>
    315a:	18 f4       	brcc	.+6      	; 0x3162 <vfprintf+0x244>
    315c:	88 35       	cpi	r24, 0x58	; 88
    315e:	79 f0       	breq	.+30     	; 0x317e <vfprintf+0x260>
    3160:	b5 c0       	rjmp	.+362    	; 0x32cc <vfprintf+0x3ae>
    3162:	80 37       	cpi	r24, 0x70	; 112
    3164:	19 f0       	breq	.+6      	; 0x316c <vfprintf+0x24e>
    3166:	88 37       	cpi	r24, 0x78	; 120
    3168:	21 f0       	breq	.+8      	; 0x3172 <vfprintf+0x254>
    316a:	b0 c0       	rjmp	.+352    	; 0x32cc <vfprintf+0x3ae>
    316c:	e9 2f       	mov	r30, r25
    316e:	e0 61       	ori	r30, 0x10	; 16
    3170:	be 2e       	mov	r11, r30
    3172:	b4 fe       	sbrs	r11, 4
    3174:	0d c0       	rjmp	.+26     	; 0x3190 <vfprintf+0x272>
    3176:	fb 2d       	mov	r31, r11
    3178:	f4 60       	ori	r31, 0x04	; 4
    317a:	bf 2e       	mov	r11, r31
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <vfprintf+0x272>
    317e:	34 fe       	sbrs	r3, 4
    3180:	0a c0       	rjmp	.+20     	; 0x3196 <vfprintf+0x278>
    3182:	29 2f       	mov	r18, r25
    3184:	26 60       	ori	r18, 0x06	; 6
    3186:	b2 2e       	mov	r11, r18
    3188:	06 c0       	rjmp	.+12     	; 0x3196 <vfprintf+0x278>
    318a:	28 e0       	ldi	r18, 0x08	; 8
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	05 c0       	rjmp	.+10     	; 0x319a <vfprintf+0x27c>
    3190:	20 e1       	ldi	r18, 0x10	; 16
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	02 c0       	rjmp	.+4      	; 0x319a <vfprintf+0x27c>
    3196:	20 e1       	ldi	r18, 0x10	; 16
    3198:	32 e0       	ldi	r19, 0x02	; 2
    319a:	f8 01       	movw	r30, r16
    319c:	b7 fe       	sbrs	r11, 7
    319e:	07 c0       	rjmp	.+14     	; 0x31ae <vfprintf+0x290>
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	0c 5f       	subi	r16, 0xFC	; 252
    31aa:	1f 4f       	sbci	r17, 0xFF	; 255
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <vfprintf+0x29c>
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 5f       	subi	r16, 0xFE	; 254
    31b8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ba:	a3 01       	movw	r20, r6
    31bc:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__ultoa_invert>
    31c0:	88 2e       	mov	r8, r24
    31c2:	86 18       	sub	r8, r6
    31c4:	fb 2d       	mov	r31, r11
    31c6:	ff 77       	andi	r31, 0x7F	; 127
    31c8:	3f 2e       	mov	r3, r31
    31ca:	36 fe       	sbrs	r3, 6
    31cc:	0d c0       	rjmp	.+26     	; 0x31e8 <vfprintf+0x2ca>
    31ce:	23 2d       	mov	r18, r3
    31d0:	2e 7f       	andi	r18, 0xFE	; 254
    31d2:	a2 2e       	mov	r10, r18
    31d4:	89 14       	cp	r8, r9
    31d6:	58 f4       	brcc	.+22     	; 0x31ee <vfprintf+0x2d0>
    31d8:	34 fe       	sbrs	r3, 4
    31da:	0b c0       	rjmp	.+22     	; 0x31f2 <vfprintf+0x2d4>
    31dc:	32 fc       	sbrc	r3, 2
    31de:	09 c0       	rjmp	.+18     	; 0x31f2 <vfprintf+0x2d4>
    31e0:	83 2d       	mov	r24, r3
    31e2:	8e 7e       	andi	r24, 0xEE	; 238
    31e4:	a8 2e       	mov	r10, r24
    31e6:	05 c0       	rjmp	.+10     	; 0x31f2 <vfprintf+0x2d4>
    31e8:	b8 2c       	mov	r11, r8
    31ea:	a3 2c       	mov	r10, r3
    31ec:	03 c0       	rjmp	.+6      	; 0x31f4 <vfprintf+0x2d6>
    31ee:	b8 2c       	mov	r11, r8
    31f0:	01 c0       	rjmp	.+2      	; 0x31f4 <vfprintf+0x2d6>
    31f2:	b9 2c       	mov	r11, r9
    31f4:	a4 fe       	sbrs	r10, 4
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <vfprintf+0x2f8>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e8 0d       	add	r30, r8
    31fc:	f1 1d       	adc	r31, r1
    31fe:	80 81       	ld	r24, Z
    3200:	80 33       	cpi	r24, 0x30	; 48
    3202:	21 f4       	brne	.+8      	; 0x320c <vfprintf+0x2ee>
    3204:	9a 2d       	mov	r25, r10
    3206:	99 7e       	andi	r25, 0xE9	; 233
    3208:	a9 2e       	mov	r10, r25
    320a:	09 c0       	rjmp	.+18     	; 0x321e <vfprintf+0x300>
    320c:	a2 fe       	sbrs	r10, 2
    320e:	06 c0       	rjmp	.+12     	; 0x321c <vfprintf+0x2fe>
    3210:	b3 94       	inc	r11
    3212:	b3 94       	inc	r11
    3214:	04 c0       	rjmp	.+8      	; 0x321e <vfprintf+0x300>
    3216:	8a 2d       	mov	r24, r10
    3218:	86 78       	andi	r24, 0x86	; 134
    321a:	09 f0       	breq	.+2      	; 0x321e <vfprintf+0x300>
    321c:	b3 94       	inc	r11
    321e:	a3 fc       	sbrc	r10, 3
    3220:	11 c0       	rjmp	.+34     	; 0x3244 <vfprintf+0x326>
    3222:	a0 fe       	sbrs	r10, 0
    3224:	06 c0       	rjmp	.+12     	; 0x3232 <vfprintf+0x314>
    3226:	b2 14       	cp	r11, r2
    3228:	88 f4       	brcc	.+34     	; 0x324c <vfprintf+0x32e>
    322a:	28 0c       	add	r2, r8
    322c:	92 2c       	mov	r9, r2
    322e:	9b 18       	sub	r9, r11
    3230:	0e c0       	rjmp	.+28     	; 0x324e <vfprintf+0x330>
    3232:	b2 14       	cp	r11, r2
    3234:	60 f4       	brcc	.+24     	; 0x324e <vfprintf+0x330>
    3236:	b6 01       	movw	r22, r12
    3238:	80 e2       	ldi	r24, 0x20	; 32
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    3240:	b3 94       	inc	r11
    3242:	f7 cf       	rjmp	.-18     	; 0x3232 <vfprintf+0x314>
    3244:	b2 14       	cp	r11, r2
    3246:	18 f4       	brcc	.+6      	; 0x324e <vfprintf+0x330>
    3248:	2b 18       	sub	r2, r11
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <vfprintf+0x332>
    324c:	98 2c       	mov	r9, r8
    324e:	21 2c       	mov	r2, r1
    3250:	a4 fe       	sbrs	r10, 4
    3252:	10 c0       	rjmp	.+32     	; 0x3274 <vfprintf+0x356>
    3254:	b6 01       	movw	r22, r12
    3256:	80 e3       	ldi	r24, 0x30	; 48
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    325e:	a2 fe       	sbrs	r10, 2
    3260:	17 c0       	rjmp	.+46     	; 0x3290 <vfprintf+0x372>
    3262:	a1 fc       	sbrc	r10, 1
    3264:	03 c0       	rjmp	.+6      	; 0x326c <vfprintf+0x34e>
    3266:	88 e7       	ldi	r24, 0x78	; 120
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <vfprintf+0x352>
    326c:	88 e5       	ldi	r24, 0x58	; 88
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	b6 01       	movw	r22, r12
    3272:	0c c0       	rjmp	.+24     	; 0x328c <vfprintf+0x36e>
    3274:	8a 2d       	mov	r24, r10
    3276:	86 78       	andi	r24, 0x86	; 134
    3278:	59 f0       	breq	.+22     	; 0x3290 <vfprintf+0x372>
    327a:	a1 fe       	sbrs	r10, 1
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <vfprintf+0x364>
    327e:	8b e2       	ldi	r24, 0x2B	; 43
    3280:	01 c0       	rjmp	.+2      	; 0x3284 <vfprintf+0x366>
    3282:	80 e2       	ldi	r24, 0x20	; 32
    3284:	a7 fc       	sbrc	r10, 7
    3286:	8d e2       	ldi	r24, 0x2D	; 45
    3288:	b6 01       	movw	r22, r12
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    3290:	89 14       	cp	r8, r9
    3292:	38 f4       	brcc	.+14     	; 0x32a2 <vfprintf+0x384>
    3294:	b6 01       	movw	r22, r12
    3296:	80 e3       	ldi	r24, 0x30	; 48
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    329e:	9a 94       	dec	r9
    32a0:	f7 cf       	rjmp	.-18     	; 0x3290 <vfprintf+0x372>
    32a2:	8a 94       	dec	r8
    32a4:	f3 01       	movw	r30, r6
    32a6:	e8 0d       	add	r30, r8
    32a8:	f1 1d       	adc	r31, r1
    32aa:	80 81       	ld	r24, Z
    32ac:	b6 01       	movw	r22, r12
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    32b4:	81 10       	cpse	r8, r1
    32b6:	f5 cf       	rjmp	.-22     	; 0x32a2 <vfprintf+0x384>
    32b8:	22 20       	and	r2, r2
    32ba:	09 f4       	brne	.+2      	; 0x32be <vfprintf+0x3a0>
    32bc:	42 ce       	rjmp	.-892    	; 0x2f42 <vfprintf+0x24>
    32be:	b6 01       	movw	r22, r12
    32c0:	80 e2       	ldi	r24, 0x20	; 32
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <fputc>
    32c8:	2a 94       	dec	r2
    32ca:	f6 cf       	rjmp	.-20     	; 0x32b8 <vfprintf+0x39a>
    32cc:	f6 01       	movw	r30, r12
    32ce:	86 81       	ldd	r24, Z+6	; 0x06
    32d0:	97 81       	ldd	r25, Z+7	; 0x07
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <vfprintf+0x3ba>
    32d4:	8f ef       	ldi	r24, 0xFF	; 255
    32d6:	9f ef       	ldi	r25, 0xFF	; 255
    32d8:	2b 96       	adiw	r28, 0x0b	; 11
    32da:	e2 e1       	ldi	r30, 0x12	; 18
    32dc:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__epilogue_restores__>

000032e0 <dtoa_prf>:
    32e0:	a9 e0       	ldi	r26, 0x09	; 9
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e6 e7       	ldi	r30, 0x76	; 118
    32e6:	f9 e1       	ldi	r31, 0x19	; 25
    32e8:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__prologue_saves__+0xc>
    32ec:	6a 01       	movw	r12, r20
    32ee:	12 2f       	mov	r17, r18
    32f0:	b0 2e       	mov	r11, r16
    32f2:	2b e3       	ldi	r18, 0x3B	; 59
    32f4:	20 17       	cp	r18, r16
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <dtoa_prf+0x20>
    32f8:	ff 24       	eor	r15, r15
    32fa:	f3 94       	inc	r15
    32fc:	f0 0e       	add	r15, r16
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <dtoa_prf+0x24>
    3300:	2c e3       	ldi	r18, 0x3C	; 60
    3302:	f2 2e       	mov	r15, r18
    3304:	0f 2d       	mov	r16, r15
    3306:	27 e0       	ldi	r18, 0x07	; 7
    3308:	ae 01       	movw	r20, r28
    330a:	4f 5f       	subi	r20, 0xFF	; 255
    330c:	5f 4f       	sbci	r21, 0xFF	; 255
    330e:	0e 94 18 1c 	call	0x3830	; 0x3830 <__ftoa_engine>
    3312:	bc 01       	movw	r22, r24
    3314:	49 81       	ldd	r20, Y+1	; 0x01
    3316:	84 2f       	mov	r24, r20
    3318:	89 70       	andi	r24, 0x09	; 9
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	31 f0       	breq	.+12     	; 0x332a <dtoa_prf+0x4a>
    331e:	e1 fc       	sbrc	r14, 1
    3320:	06 c0       	rjmp	.+12     	; 0x332e <dtoa_prf+0x4e>
    3322:	e0 fe       	sbrs	r14, 0
    3324:	06 c0       	rjmp	.+12     	; 0x3332 <dtoa_prf+0x52>
    3326:	90 e2       	ldi	r25, 0x20	; 32
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <dtoa_prf+0x54>
    332a:	9d e2       	ldi	r25, 0x2D	; 45
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <dtoa_prf+0x54>
    332e:	9b e2       	ldi	r25, 0x2B	; 43
    3330:	01 c0       	rjmp	.+2      	; 0x3334 <dtoa_prf+0x54>
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	5e 2d       	mov	r21, r14
    3336:	50 71       	andi	r21, 0x10	; 16
    3338:	43 ff       	sbrs	r20, 3
    333a:	3c c0       	rjmp	.+120    	; 0x33b4 <dtoa_prf+0xd4>
    333c:	91 11       	cpse	r25, r1
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <dtoa_prf+0x64>
    3340:	83 e0       	ldi	r24, 0x03	; 3
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <dtoa_prf+0x66>
    3344:	84 e0       	ldi	r24, 0x04	; 4
    3346:	81 17       	cp	r24, r17
    3348:	18 f4       	brcc	.+6      	; 0x3350 <dtoa_prf+0x70>
    334a:	21 2f       	mov	r18, r17
    334c:	28 1b       	sub	r18, r24
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <dtoa_prf+0x72>
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	51 11       	cpse	r21, r1
    3354:	0b c0       	rjmp	.+22     	; 0x336c <dtoa_prf+0x8c>
    3356:	f6 01       	movw	r30, r12
    3358:	82 2f       	mov	r24, r18
    335a:	30 e2       	ldi	r19, 0x20	; 32
    335c:	88 23       	and	r24, r24
    335e:	19 f0       	breq	.+6      	; 0x3366 <dtoa_prf+0x86>
    3360:	31 93       	st	Z+, r19
    3362:	81 50       	subi	r24, 0x01	; 1
    3364:	fb cf       	rjmp	.-10     	; 0x335c <dtoa_prf+0x7c>
    3366:	c2 0e       	add	r12, r18
    3368:	d1 1c       	adc	r13, r1
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	99 23       	and	r25, r25
    336e:	29 f0       	breq	.+10     	; 0x337a <dtoa_prf+0x9a>
    3370:	d6 01       	movw	r26, r12
    3372:	9c 93       	st	X, r25
    3374:	f6 01       	movw	r30, r12
    3376:	31 96       	adiw	r30, 0x01	; 1
    3378:	6f 01       	movw	r12, r30
    337a:	c6 01       	movw	r24, r12
    337c:	03 96       	adiw	r24, 0x03	; 3
    337e:	e2 fe       	sbrs	r14, 2
    3380:	0a c0       	rjmp	.+20     	; 0x3396 <dtoa_prf+0xb6>
    3382:	3e e4       	ldi	r19, 0x4E	; 78
    3384:	d6 01       	movw	r26, r12
    3386:	3c 93       	st	X, r19
    3388:	41 e4       	ldi	r20, 0x41	; 65
    338a:	11 96       	adiw	r26, 0x01	; 1
    338c:	4c 93       	st	X, r20
    338e:	11 97       	sbiw	r26, 0x01	; 1
    3390:	12 96       	adiw	r26, 0x02	; 2
    3392:	3c 93       	st	X, r19
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <dtoa_prf+0xc2>
    3396:	3e e6       	ldi	r19, 0x6E	; 110
    3398:	f6 01       	movw	r30, r12
    339a:	30 83       	st	Z, r19
    339c:	41 e6       	ldi	r20, 0x61	; 97
    339e:	41 83       	std	Z+1, r20	; 0x01
    33a0:	32 83       	std	Z+2, r19	; 0x02
    33a2:	fc 01       	movw	r30, r24
    33a4:	32 2f       	mov	r19, r18
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	33 23       	and	r19, r19
    33aa:	09 f4       	brne	.+2      	; 0x33ae <dtoa_prf+0xce>
    33ac:	42 c0       	rjmp	.+132    	; 0x3432 <dtoa_prf+0x152>
    33ae:	41 93       	st	Z+, r20
    33b0:	31 50       	subi	r19, 0x01	; 1
    33b2:	fa cf       	rjmp	.-12     	; 0x33a8 <dtoa_prf+0xc8>
    33b4:	42 ff       	sbrs	r20, 2
    33b6:	44 c0       	rjmp	.+136    	; 0x3440 <dtoa_prf+0x160>
    33b8:	91 11       	cpse	r25, r1
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <dtoa_prf+0xe0>
    33bc:	83 e0       	ldi	r24, 0x03	; 3
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <dtoa_prf+0xe2>
    33c0:	84 e0       	ldi	r24, 0x04	; 4
    33c2:	81 17       	cp	r24, r17
    33c4:	18 f4       	brcc	.+6      	; 0x33cc <dtoa_prf+0xec>
    33c6:	21 2f       	mov	r18, r17
    33c8:	28 1b       	sub	r18, r24
    33ca:	01 c0       	rjmp	.+2      	; 0x33ce <dtoa_prf+0xee>
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	51 11       	cpse	r21, r1
    33d0:	0b c0       	rjmp	.+22     	; 0x33e8 <dtoa_prf+0x108>
    33d2:	f6 01       	movw	r30, r12
    33d4:	82 2f       	mov	r24, r18
    33d6:	30 e2       	ldi	r19, 0x20	; 32
    33d8:	88 23       	and	r24, r24
    33da:	19 f0       	breq	.+6      	; 0x33e2 <dtoa_prf+0x102>
    33dc:	31 93       	st	Z+, r19
    33de:	81 50       	subi	r24, 0x01	; 1
    33e0:	fb cf       	rjmp	.-10     	; 0x33d8 <dtoa_prf+0xf8>
    33e2:	c2 0e       	add	r12, r18
    33e4:	d1 1c       	adc	r13, r1
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	99 23       	and	r25, r25
    33ea:	29 f0       	breq	.+10     	; 0x33f6 <dtoa_prf+0x116>
    33ec:	d6 01       	movw	r26, r12
    33ee:	9c 93       	st	X, r25
    33f0:	f6 01       	movw	r30, r12
    33f2:	31 96       	adiw	r30, 0x01	; 1
    33f4:	6f 01       	movw	r12, r30
    33f6:	c6 01       	movw	r24, r12
    33f8:	03 96       	adiw	r24, 0x03	; 3
    33fa:	e2 fe       	sbrs	r14, 2
    33fc:	0b c0       	rjmp	.+22     	; 0x3414 <dtoa_prf+0x134>
    33fe:	39 e4       	ldi	r19, 0x49	; 73
    3400:	d6 01       	movw	r26, r12
    3402:	3c 93       	st	X, r19
    3404:	3e e4       	ldi	r19, 0x4E	; 78
    3406:	11 96       	adiw	r26, 0x01	; 1
    3408:	3c 93       	st	X, r19
    340a:	11 97       	sbiw	r26, 0x01	; 1
    340c:	36 e4       	ldi	r19, 0x46	; 70
    340e:	12 96       	adiw	r26, 0x02	; 2
    3410:	3c 93       	st	X, r19
    3412:	07 c0       	rjmp	.+14     	; 0x3422 <dtoa_prf+0x142>
    3414:	39 e6       	ldi	r19, 0x69	; 105
    3416:	f6 01       	movw	r30, r12
    3418:	30 83       	st	Z, r19
    341a:	3e e6       	ldi	r19, 0x6E	; 110
    341c:	31 83       	std	Z+1, r19	; 0x01
    341e:	36 e6       	ldi	r19, 0x66	; 102
    3420:	32 83       	std	Z+2, r19	; 0x02
    3422:	fc 01       	movw	r30, r24
    3424:	32 2f       	mov	r19, r18
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	33 23       	and	r19, r19
    342a:	19 f0       	breq	.+6      	; 0x3432 <dtoa_prf+0x152>
    342c:	41 93       	st	Z+, r20
    342e:	31 50       	subi	r19, 0x01	; 1
    3430:	fb cf       	rjmp	.-10     	; 0x3428 <dtoa_prf+0x148>
    3432:	fc 01       	movw	r30, r24
    3434:	e2 0f       	add	r30, r18
    3436:	f1 1d       	adc	r31, r1
    3438:	10 82       	st	Z, r1
    343a:	8e ef       	ldi	r24, 0xFE	; 254
    343c:	9f ef       	ldi	r25, 0xFF	; 255
    343e:	a6 c0       	rjmp	.+332    	; 0x358c <dtoa_prf+0x2ac>
    3440:	21 e0       	ldi	r18, 0x01	; 1
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	91 11       	cpse	r25, r1
    3446:	02 c0       	rjmp	.+4      	; 0x344c <dtoa_prf+0x16c>
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	16 16       	cp	r1, r22
    344e:	17 06       	cpc	r1, r23
    3450:	1c f4       	brge	.+6      	; 0x3458 <dtoa_prf+0x178>
    3452:	fb 01       	movw	r30, r22
    3454:	31 96       	adiw	r30, 0x01	; 1
    3456:	02 c0       	rjmp	.+4      	; 0x345c <dtoa_prf+0x17c>
    3458:	e1 e0       	ldi	r30, 0x01	; 1
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	2e 0f       	add	r18, r30
    345e:	3f 1f       	adc	r19, r31
    3460:	bb 20       	and	r11, r11
    3462:	21 f0       	breq	.+8      	; 0x346c <dtoa_prf+0x18c>
    3464:	eb 2d       	mov	r30, r11
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	31 96       	adiw	r30, 0x01	; 1
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <dtoa_prf+0x190>
    346c:	e0 e0       	ldi	r30, 0x00	; 0
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	2e 0f       	add	r18, r30
    3472:	3f 1f       	adc	r19, r31
    3474:	e1 2f       	mov	r30, r17
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	2e 17       	cp	r18, r30
    347a:	3f 07       	cpc	r19, r31
    347c:	1c f4       	brge	.+6      	; 0x3484 <dtoa_prf+0x1a4>
    347e:	12 1b       	sub	r17, r18
    3480:	21 2f       	mov	r18, r17
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <dtoa_prf+0x1a6>
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	8e 2d       	mov	r24, r14
    3488:	88 71       	andi	r24, 0x18	; 24
    348a:	59 f4       	brne	.+22     	; 0x34a2 <dtoa_prf+0x1c2>
    348c:	f6 01       	movw	r30, r12
    348e:	82 2f       	mov	r24, r18
    3490:	30 e2       	ldi	r19, 0x20	; 32
    3492:	88 23       	and	r24, r24
    3494:	19 f0       	breq	.+6      	; 0x349c <dtoa_prf+0x1bc>
    3496:	31 93       	st	Z+, r19
    3498:	81 50       	subi	r24, 0x01	; 1
    349a:	fb cf       	rjmp	.-10     	; 0x3492 <dtoa_prf+0x1b2>
    349c:	c2 0e       	add	r12, r18
    349e:	d1 1c       	adc	r13, r1
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	99 23       	and	r25, r25
    34a4:	29 f0       	breq	.+10     	; 0x34b0 <dtoa_prf+0x1d0>
    34a6:	d6 01       	movw	r26, r12
    34a8:	9c 93       	st	X, r25
    34aa:	f6 01       	movw	r30, r12
    34ac:	31 96       	adiw	r30, 0x01	; 1
    34ae:	6f 01       	movw	r12, r30
    34b0:	51 11       	cpse	r21, r1
    34b2:	0b c0       	rjmp	.+22     	; 0x34ca <dtoa_prf+0x1ea>
    34b4:	f6 01       	movw	r30, r12
    34b6:	82 2f       	mov	r24, r18
    34b8:	90 e3       	ldi	r25, 0x30	; 48
    34ba:	88 23       	and	r24, r24
    34bc:	19 f0       	breq	.+6      	; 0x34c4 <dtoa_prf+0x1e4>
    34be:	91 93       	st	Z+, r25
    34c0:	81 50       	subi	r24, 0x01	; 1
    34c2:	fb cf       	rjmp	.-10     	; 0x34ba <dtoa_prf+0x1da>
    34c4:	c2 0e       	add	r12, r18
    34c6:	d1 1c       	adc	r13, r1
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	0f 2d       	mov	r16, r15
    34cc:	06 0f       	add	r16, r22
    34ce:	9a 81       	ldd	r25, Y+2	; 0x02
    34d0:	34 2f       	mov	r19, r20
    34d2:	30 71       	andi	r19, 0x10	; 16
    34d4:	44 ff       	sbrs	r20, 4
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <dtoa_prf+0x1fe>
    34d8:	91 33       	cpi	r25, 0x31	; 49
    34da:	09 f4       	brne	.+2      	; 0x34de <dtoa_prf+0x1fe>
    34dc:	01 50       	subi	r16, 0x01	; 1
    34de:	10 16       	cp	r1, r16
    34e0:	24 f4       	brge	.+8      	; 0x34ea <dtoa_prf+0x20a>
    34e2:	09 30       	cpi	r16, 0x09	; 9
    34e4:	18 f0       	brcs	.+6      	; 0x34ec <dtoa_prf+0x20c>
    34e6:	08 e0       	ldi	r16, 0x08	; 8
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <dtoa_prf+0x20c>
    34ea:	01 e0       	ldi	r16, 0x01	; 1
    34ec:	ab 01       	movw	r20, r22
    34ee:	77 ff       	sbrs	r23, 7
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <dtoa_prf+0x216>
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	fb 01       	movw	r30, r22
    34f8:	e4 1b       	sub	r30, r20
    34fa:	f5 0b       	sbc	r31, r21
    34fc:	a1 e0       	ldi	r26, 0x01	; 1
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	ac 0f       	add	r26, r28
    3502:	bd 1f       	adc	r27, r29
    3504:	ea 0f       	add	r30, r26
    3506:	fb 1f       	adc	r31, r27
    3508:	8e e2       	ldi	r24, 0x2E	; 46
    350a:	a8 2e       	mov	r10, r24
    350c:	4b 01       	movw	r8, r22
    350e:	80 1a       	sub	r8, r16
    3510:	91 08       	sbc	r9, r1
    3512:	0b 2d       	mov	r16, r11
    3514:	10 e0       	ldi	r17, 0x00	; 0
    3516:	11 95       	neg	r17
    3518:	01 95       	neg	r16
    351a:	11 09       	sbc	r17, r1
    351c:	4f 3f       	cpi	r20, 0xFF	; 255
    351e:	bf ef       	ldi	r27, 0xFF	; 255
    3520:	5b 07       	cpc	r21, r27
    3522:	21 f4       	brne	.+8      	; 0x352c <dtoa_prf+0x24c>
    3524:	d6 01       	movw	r26, r12
    3526:	ac 92       	st	X, r10
    3528:	11 96       	adiw	r26, 0x01	; 1
    352a:	6d 01       	movw	r12, r26
    352c:	64 17       	cp	r22, r20
    352e:	75 07       	cpc	r23, r21
    3530:	2c f0       	brlt	.+10     	; 0x353c <dtoa_prf+0x25c>
    3532:	84 16       	cp	r8, r20
    3534:	95 06       	cpc	r9, r21
    3536:	14 f4       	brge	.+4      	; 0x353c <dtoa_prf+0x25c>
    3538:	81 81       	ldd	r24, Z+1	; 0x01
    353a:	01 c0       	rjmp	.+2      	; 0x353e <dtoa_prf+0x25e>
    353c:	80 e3       	ldi	r24, 0x30	; 48
    353e:	41 50       	subi	r20, 0x01	; 1
    3540:	51 09       	sbc	r21, r1
    3542:	31 96       	adiw	r30, 0x01	; 1
    3544:	d6 01       	movw	r26, r12
    3546:	11 96       	adiw	r26, 0x01	; 1
    3548:	7d 01       	movw	r14, r26
    354a:	40 17       	cp	r20, r16
    354c:	51 07       	cpc	r21, r17
    354e:	24 f0       	brlt	.+8      	; 0x3558 <dtoa_prf+0x278>
    3550:	d6 01       	movw	r26, r12
    3552:	8c 93       	st	X, r24
    3554:	67 01       	movw	r12, r14
    3556:	e2 cf       	rjmp	.-60     	; 0x351c <dtoa_prf+0x23c>
    3558:	64 17       	cp	r22, r20
    355a:	75 07       	cpc	r23, r21
    355c:	39 f4       	brne	.+14     	; 0x356c <dtoa_prf+0x28c>
    355e:	96 33       	cpi	r25, 0x36	; 54
    3560:	20 f4       	brcc	.+8      	; 0x356a <dtoa_prf+0x28a>
    3562:	95 33       	cpi	r25, 0x35	; 53
    3564:	19 f4       	brne	.+6      	; 0x356c <dtoa_prf+0x28c>
    3566:	31 11       	cpse	r19, r1
    3568:	01 c0       	rjmp	.+2      	; 0x356c <dtoa_prf+0x28c>
    356a:	81 e3       	ldi	r24, 0x31	; 49
    356c:	f6 01       	movw	r30, r12
    356e:	80 83       	st	Z, r24
    3570:	f7 01       	movw	r30, r14
    3572:	82 2f       	mov	r24, r18
    3574:	90 e2       	ldi	r25, 0x20	; 32
    3576:	88 23       	and	r24, r24
    3578:	19 f0       	breq	.+6      	; 0x3580 <dtoa_prf+0x2a0>
    357a:	91 93       	st	Z+, r25
    357c:	81 50       	subi	r24, 0x01	; 1
    357e:	fb cf       	rjmp	.-10     	; 0x3576 <dtoa_prf+0x296>
    3580:	f7 01       	movw	r30, r14
    3582:	e2 0f       	add	r30, r18
    3584:	f1 1d       	adc	r31, r1
    3586:	10 82       	st	Z, r1
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	29 96       	adiw	r28, 0x09	; 9
    358e:	ec e0       	ldi	r30, 0x0C	; 12
    3590:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__epilogue_restores__+0xc>

00003594 <strtod>:
    3594:	a0 e0       	ldi	r26, 0x00	; 0
    3596:	b0 e0       	ldi	r27, 0x00	; 0
    3598:	e0 ed       	ldi	r30, 0xD0	; 208
    359a:	fa e1       	ldi	r31, 0x1A	; 26
    359c:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__prologue_saves__+0xc>
    35a0:	ec 01       	movw	r28, r24
    35a2:	6b 01       	movw	r12, r22
    35a4:	61 15       	cp	r22, r1
    35a6:	71 05       	cpc	r23, r1
    35a8:	19 f0       	breq	.+6      	; 0x35b0 <strtod+0x1c>
    35aa:	fb 01       	movw	r30, r22
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	7e 01       	movw	r14, r28
    35b2:	ff ef       	ldi	r31, 0xFF	; 255
    35b4:	ef 1a       	sub	r14, r31
    35b6:	ff 0a       	sbc	r15, r31
    35b8:	08 81       	ld	r16, Y
    35ba:	80 2f       	mov	r24, r16
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <isspace>
    35c2:	89 2b       	or	r24, r25
    35c4:	11 f0       	breq	.+4      	; 0x35ca <strtod+0x36>
    35c6:	e7 01       	movw	r28, r14
    35c8:	f3 cf       	rjmp	.-26     	; 0x35b0 <strtod+0x1c>
    35ca:	0d 32       	cpi	r16, 0x2D	; 45
    35cc:	39 f4       	brne	.+14     	; 0x35dc <strtod+0x48>
    35ce:	7e 01       	movw	r14, r28
    35d0:	82 e0       	ldi	r24, 0x02	; 2
    35d2:	e8 0e       	add	r14, r24
    35d4:	f1 1c       	adc	r15, r1
    35d6:	09 81       	ldd	r16, Y+1	; 0x01
    35d8:	11 e0       	ldi	r17, 0x01	; 1
    35da:	08 c0       	rjmp	.+16     	; 0x35ec <strtod+0x58>
    35dc:	0b 32       	cpi	r16, 0x2B	; 43
    35de:	29 f4       	brne	.+10     	; 0x35ea <strtod+0x56>
    35e0:	7e 01       	movw	r14, r28
    35e2:	92 e0       	ldi	r25, 0x02	; 2
    35e4:	e9 0e       	add	r14, r25
    35e6:	f1 1c       	adc	r15, r1
    35e8:	09 81       	ldd	r16, Y+1	; 0x01
    35ea:	10 e0       	ldi	r17, 0x00	; 0
    35ec:	e7 01       	movw	r28, r14
    35ee:	21 97       	sbiw	r28, 0x01	; 1
    35f0:	43 e0       	ldi	r20, 0x03	; 3
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	64 ed       	ldi	r22, 0xD4	; 212
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	ce 01       	movw	r24, r28
    35fa:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <strncasecmp_P>
    35fe:	89 2b       	or	r24, r25
    3600:	c1 f4       	brne	.+48     	; 0x3632 <strtod+0x9e>
    3602:	23 96       	adiw	r28, 0x03	; 3
    3604:	45 e0       	ldi	r20, 0x05	; 5
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	6f ec       	ldi	r22, 0xCF	; 207
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	ce 01       	movw	r24, r28
    360e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <strncasecmp_P>
    3612:	89 2b       	or	r24, r25
    3614:	09 f4       	brne	.+2      	; 0x3618 <strtod+0x84>
    3616:	25 96       	adiw	r28, 0x05	; 5
    3618:	c1 14       	cp	r12, r1
    361a:	d1 04       	cpc	r13, r1
    361c:	19 f0       	breq	.+6      	; 0x3624 <strtod+0x90>
    361e:	f6 01       	movw	r30, r12
    3620:	d1 83       	std	Z+1, r29	; 0x01
    3622:	c0 83       	st	Z, r28
    3624:	11 11       	cpse	r17, r1
    3626:	f6 c0       	rjmp	.+492    	; 0x3814 <strtod+0x280>
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	80 e8       	ldi	r24, 0x80	; 128
    362e:	9f e7       	ldi	r25, 0x7F	; 127
    3630:	fa c0       	rjmp	.+500    	; 0x3826 <strtod+0x292>
    3632:	43 e0       	ldi	r20, 0x03	; 3
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	6c ec       	ldi	r22, 0xCC	; 204
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	ce 01       	movw	r24, r28
    363c:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <strncasecmp_P>
    3640:	89 2b       	or	r24, r25
    3642:	59 f4       	brne	.+22     	; 0x365a <strtod+0xc6>
    3644:	c1 14       	cp	r12, r1
    3646:	d1 04       	cpc	r13, r1
    3648:	09 f4       	brne	.+2      	; 0x364c <strtod+0xb8>
    364a:	e9 c0       	rjmp	.+466    	; 0x381e <strtod+0x28a>
    364c:	f2 e0       	ldi	r31, 0x02	; 2
    364e:	ef 0e       	add	r14, r31
    3650:	f1 1c       	adc	r15, r1
    3652:	f6 01       	movw	r30, r12
    3654:	f1 82       	std	Z+1, r15	; 0x01
    3656:	e0 82       	st	Z, r14
    3658:	e2 c0       	rjmp	.+452    	; 0x381e <strtod+0x28a>
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	a9 01       	movw	r20, r18
    3660:	c0 e0       	ldi	r28, 0x00	; 0
    3662:	d0 e0       	ldi	r29, 0x00	; 0
    3664:	f7 01       	movw	r30, r14
    3666:	80 ed       	ldi	r24, 0xD0	; 208
    3668:	a8 2e       	mov	r10, r24
    366a:	a0 0e       	add	r10, r16
    366c:	89 e0       	ldi	r24, 0x09	; 9
    366e:	8a 15       	cp	r24, r10
    3670:	30 f1       	brcs	.+76     	; 0x36be <strtod+0x12a>
    3672:	91 2f       	mov	r25, r17
    3674:	92 60       	ori	r25, 0x02	; 2
    3676:	b9 2e       	mov	r11, r25
    3678:	81 2f       	mov	r24, r17
    367a:	88 70       	andi	r24, 0x08	; 8
    367c:	12 ff       	sbrs	r17, 2
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <strtod+0xf4>
    3680:	81 11       	cpse	r24, r1
    3682:	24 c0       	rjmp	.+72     	; 0x36cc <strtod+0x138>
    3684:	21 96       	adiw	r28, 0x01	; 1
    3686:	22 c0       	rjmp	.+68     	; 0x36cc <strtod+0x138>
    3688:	81 11       	cpse	r24, r1
    368a:	21 97       	sbiw	r28, 0x01	; 1
    368c:	a5 e0       	ldi	r26, 0x05	; 5
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__muluhisi3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	bb 1f       	adc	r27, r27
    36a0:	9c 01       	movw	r18, r24
    36a2:	ad 01       	movw	r20, r26
    36a4:	2a 0d       	add	r18, r10
    36a6:	31 1d       	adc	r19, r1
    36a8:	41 1d       	adc	r20, r1
    36aa:	51 1d       	adc	r21, r1
    36ac:	28 39       	cpi	r18, 0x98	; 152
    36ae:	89 e9       	ldi	r24, 0x99	; 153
    36b0:	38 07       	cpc	r19, r24
    36b2:	48 07       	cpc	r20, r24
    36b4:	89 e1       	ldi	r24, 0x19	; 25
    36b6:	58 07       	cpc	r21, r24
    36b8:	48 f0       	brcs	.+18     	; 0x36cc <strtod+0x138>
    36ba:	16 60       	ori	r17, 0x06	; 6
    36bc:	06 c0       	rjmp	.+12     	; 0x36ca <strtod+0x136>
    36be:	9e ef       	ldi	r25, 0xFE	; 254
    36c0:	a9 12       	cpse	r10, r25
    36c2:	0a c0       	rjmp	.+20     	; 0x36d8 <strtod+0x144>
    36c4:	13 fd       	sbrc	r17, 3
    36c6:	40 c0       	rjmp	.+128    	; 0x3748 <strtod+0x1b4>
    36c8:	18 60       	ori	r17, 0x08	; 8
    36ca:	b1 2e       	mov	r11, r17
    36cc:	8f ef       	ldi	r24, 0xFF	; 255
    36ce:	e8 1a       	sub	r14, r24
    36d0:	f8 0a       	sbc	r15, r24
    36d2:	00 81       	ld	r16, Z
    36d4:	1b 2d       	mov	r17, r11
    36d6:	c6 cf       	rjmp	.-116    	; 0x3664 <strtod+0xd0>
    36d8:	80 2f       	mov	r24, r16
    36da:	8f 7d       	andi	r24, 0xDF	; 223
    36dc:	85 34       	cpi	r24, 0x45	; 69
    36de:	a1 f5       	brne	.+104    	; 0x3748 <strtod+0x1b4>
    36e0:	80 81       	ld	r24, Z
    36e2:	8d 32       	cpi	r24, 0x2D	; 45
    36e4:	11 f4       	brne	.+4      	; 0x36ea <strtod+0x156>
    36e6:	10 61       	ori	r17, 0x10	; 16
    36e8:	06 c0       	rjmp	.+12     	; 0x36f6 <strtod+0x162>
    36ea:	8b 32       	cpi	r24, 0x2B	; 43
    36ec:	21 f0       	breq	.+8      	; 0x36f6 <strtod+0x162>
    36ee:	31 96       	adiw	r30, 0x01	; 1
    36f0:	61 e0       	ldi	r22, 0x01	; 1
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	04 c0       	rjmp	.+8      	; 0x36fe <strtod+0x16a>
    36f6:	81 81       	ldd	r24, Z+1	; 0x01
    36f8:	32 96       	adiw	r30, 0x02	; 2
    36fa:	62 e0       	ldi	r22, 0x02	; 2
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	80 53       	subi	r24, 0x30	; 48
    3700:	8a 30       	cpi	r24, 0x0A	; 10
    3702:	18 f0       	brcs	.+6      	; 0x370a <strtod+0x176>
    3704:	e6 1b       	sub	r30, r22
    3706:	f7 0b       	sbc	r31, r23
    3708:	1f c0       	rjmp	.+62     	; 0x3748 <strtod+0x1b4>
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	60 38       	cpi	r22, 0x80	; 128
    3710:	9c e0       	ldi	r25, 0x0C	; 12
    3712:	79 07       	cpc	r23, r25
    3714:	5c f4       	brge	.+22     	; 0x372c <strtod+0x198>
    3716:	db 01       	movw	r26, r22
    3718:	aa 0f       	add	r26, r26
    371a:	bb 1f       	adc	r27, r27
    371c:	aa 0f       	add	r26, r26
    371e:	bb 1f       	adc	r27, r27
    3720:	6a 0f       	add	r22, r26
    3722:	7b 1f       	adc	r23, r27
    3724:	66 0f       	add	r22, r22
    3726:	77 1f       	adc	r23, r23
    3728:	68 0f       	add	r22, r24
    372a:	71 1d       	adc	r23, r1
    372c:	31 96       	adiw	r30, 0x01	; 1
    372e:	df 01       	movw	r26, r30
    3730:	11 97       	sbiw	r26, 0x01	; 1
    3732:	8c 91       	ld	r24, X
    3734:	80 53       	subi	r24, 0x30	; 48
    3736:	8a 30       	cpi	r24, 0x0A	; 10
    3738:	50 f3       	brcs	.-44     	; 0x370e <strtod+0x17a>
    373a:	14 ff       	sbrs	r17, 4
    373c:	03 c0       	rjmp	.+6      	; 0x3744 <strtod+0x1b0>
    373e:	71 95       	neg	r23
    3740:	61 95       	neg	r22
    3742:	71 09       	sbc	r23, r1
    3744:	c6 0f       	add	r28, r22
    3746:	d7 1f       	adc	r29, r23
    3748:	11 ff       	sbrs	r17, 1
    374a:	08 c0       	rjmp	.+16     	; 0x375c <strtod+0x1c8>
    374c:	c1 14       	cp	r12, r1
    374e:	d1 04       	cpc	r13, r1
    3750:	29 f0       	breq	.+10     	; 0x375c <strtod+0x1c8>
    3752:	cf 01       	movw	r24, r30
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f6 01       	movw	r30, r12
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	ca 01       	movw	r24, r20
    375e:	b9 01       	movw	r22, r18
    3760:	0e 94 47 14 	call	0x288e	; 0x288e <__floatunsisf>
    3764:	21 2f       	mov	r18, r17
    3766:	23 70       	andi	r18, 0x03	; 3
    3768:	23 30       	cpi	r18, 0x03	; 3
    376a:	19 f0       	breq	.+6      	; 0x3772 <strtod+0x1de>
    376c:	4b 01       	movw	r8, r22
    376e:	5c 01       	movw	r10, r24
    3770:	06 c0       	rjmp	.+12     	; 0x377e <strtod+0x1ea>
    3772:	4b 01       	movw	r8, r22
    3774:	5c 01       	movw	r10, r24
    3776:	b7 fa       	bst	r11, 7
    3778:	b0 94       	com	r11
    377a:	b7 f8       	bld	r11, 7
    377c:	b0 94       	com	r11
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	a9 01       	movw	r20, r18
    3784:	c5 01       	movw	r24, r10
    3786:	b4 01       	movw	r22, r8
    3788:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    378c:	88 23       	and	r24, r24
    378e:	09 f4       	brne	.+2      	; 0x3792 <strtod+0x1fe>
    3790:	3e c0       	rjmp	.+124    	; 0x380e <strtod+0x27a>
    3792:	d7 ff       	sbrs	r29, 7
    3794:	06 c0       	rjmp	.+12     	; 0x37a2 <strtod+0x20e>
    3796:	d1 95       	neg	r29
    3798:	c1 95       	neg	r28
    379a:	d1 09       	sbc	r29, r1
    379c:	0b ee       	ldi	r16, 0xEB	; 235
    379e:	10 e0       	ldi	r17, 0x00	; 0
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <strtod+0x212>
    37a2:	03 e0       	ldi	r16, 0x03	; 3
    37a4:	11 e0       	ldi	r17, 0x01	; 1
    37a6:	68 01       	movw	r12, r16
    37a8:	f8 e1       	ldi	r31, 0x18	; 24
    37aa:	cf 1a       	sub	r12, r31
    37ac:	d1 08       	sbc	r13, r1
    37ae:	90 e2       	ldi	r25, 0x20	; 32
    37b0:	e9 2e       	mov	r14, r25
    37b2:	f1 2c       	mov	r15, r1
    37b4:	ce 15       	cp	r28, r14
    37b6:	df 05       	cpc	r29, r15
    37b8:	74 f0       	brlt	.+28     	; 0x37d6 <strtod+0x242>
    37ba:	f8 01       	movw	r30, r16
    37bc:	25 91       	lpm	r18, Z+
    37be:	35 91       	lpm	r19, Z+
    37c0:	45 91       	lpm	r20, Z+
    37c2:	54 91       	lpm	r21, Z
    37c4:	c5 01       	movw	r24, r10
    37c6:	b4 01       	movw	r22, r8
    37c8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__mulsf3>
    37cc:	4b 01       	movw	r8, r22
    37ce:	5c 01       	movw	r10, r24
    37d0:	ce 19       	sub	r28, r14
    37d2:	df 09       	sbc	r29, r15
    37d4:	ef cf       	rjmp	.-34     	; 0x37b4 <strtod+0x220>
    37d6:	04 50       	subi	r16, 0x04	; 4
    37d8:	11 09       	sbc	r17, r1
    37da:	f5 94       	asr	r15
    37dc:	e7 94       	ror	r14
    37de:	0c 15       	cp	r16, r12
    37e0:	1d 05       	cpc	r17, r13
    37e2:	41 f7       	brne	.-48     	; 0x37b4 <strtod+0x220>
    37e4:	8a 2d       	mov	r24, r10
    37e6:	88 0f       	add	r24, r24
    37e8:	8b 2d       	mov	r24, r11
    37ea:	88 1f       	adc	r24, r24
    37ec:	8f 3f       	cpi	r24, 0xFF	; 255
    37ee:	49 f0       	breq	.+18     	; 0x3802 <strtod+0x26e>
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	a9 01       	movw	r20, r18
    37f6:	c5 01       	movw	r24, r10
    37f8:	b4 01       	movw	r22, r8
    37fa:	0e 94 95 13 	call	0x272a	; 0x272a <__cmpsf2>
    37fe:	81 11       	cpse	r24, r1
    3800:	06 c0       	rjmp	.+12     	; 0x380e <strtod+0x27a>
    3802:	82 e2       	ldi	r24, 0x22	; 34
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <errno+0x1>
    380a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <errno>
    380e:	c5 01       	movw	r24, r10
    3810:	b4 01       	movw	r22, r8
    3812:	09 c0       	rjmp	.+18     	; 0x3826 <strtod+0x292>
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	80 e8       	ldi	r24, 0x80	; 128
    381a:	9f ef       	ldi	r25, 0xFF	; 255
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <strtod+0x292>
    381e:	60 e0       	ldi	r22, 0x00	; 0
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	80 ec       	ldi	r24, 0xC0	; 192
    3824:	9f e7       	ldi	r25, 0x7F	; 127
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	ec e0       	ldi	r30, 0x0C	; 12
    382c:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__epilogue_restores__+0xc>

00003830 <__ftoa_engine>:
    3830:	28 30       	cpi	r18, 0x08	; 8
    3832:	08 f0       	brcs	.+2      	; 0x3836 <__ftoa_engine+0x6>
    3834:	27 e0       	ldi	r18, 0x07	; 7
    3836:	33 27       	eor	r19, r19
    3838:	da 01       	movw	r26, r20
    383a:	99 0f       	add	r25, r25
    383c:	31 1d       	adc	r19, r1
    383e:	87 fd       	sbrc	r24, 7
    3840:	91 60       	ori	r25, 0x01	; 1
    3842:	00 96       	adiw	r24, 0x00	; 0
    3844:	61 05       	cpc	r22, r1
    3846:	71 05       	cpc	r23, r1
    3848:	39 f4       	brne	.+14     	; 0x3858 <__ftoa_engine+0x28>
    384a:	32 60       	ori	r19, 0x02	; 2
    384c:	2e 5f       	subi	r18, 0xFE	; 254
    384e:	3d 93       	st	X+, r19
    3850:	30 e3       	ldi	r19, 0x30	; 48
    3852:	2a 95       	dec	r18
    3854:	e1 f7       	brne	.-8      	; 0x384e <__ftoa_engine+0x1e>
    3856:	08 95       	ret
    3858:	9f 3f       	cpi	r25, 0xFF	; 255
    385a:	30 f0       	brcs	.+12     	; 0x3868 <__ftoa_engine+0x38>
    385c:	80 38       	cpi	r24, 0x80	; 128
    385e:	71 05       	cpc	r23, r1
    3860:	61 05       	cpc	r22, r1
    3862:	09 f0       	breq	.+2      	; 0x3866 <__ftoa_engine+0x36>
    3864:	3c 5f       	subi	r19, 0xFC	; 252
    3866:	3c 5f       	subi	r19, 0xFC	; 252
    3868:	3d 93       	st	X+, r19
    386a:	91 30       	cpi	r25, 0x01	; 1
    386c:	08 f0       	brcs	.+2      	; 0x3870 <__ftoa_engine+0x40>
    386e:	80 68       	ori	r24, 0x80	; 128
    3870:	91 1d       	adc	r25, r1
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	1f 93       	push	r17
    3878:	0f 93       	push	r16
    387a:	ff 92       	push	r15
    387c:	ef 92       	push	r14
    387e:	19 2f       	mov	r17, r25
    3880:	98 7f       	andi	r25, 0xF8	; 248
    3882:	96 95       	lsr	r25
    3884:	e9 2f       	mov	r30, r25
    3886:	96 95       	lsr	r25
    3888:	96 95       	lsr	r25
    388a:	e9 0f       	add	r30, r25
    388c:	ff 27       	eor	r31, r31
    388e:	ef 59       	subi	r30, 0x9F	; 159
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	99 27       	eor	r25, r25
    3894:	33 27       	eor	r19, r19
    3896:	ee 24       	eor	r14, r14
    3898:	ff 24       	eor	r15, r15
    389a:	a7 01       	movw	r20, r14
    389c:	e7 01       	movw	r28, r14
    389e:	05 90       	lpm	r0, Z+
    38a0:	08 94       	sec
    38a2:	07 94       	ror	r0
    38a4:	28 f4       	brcc	.+10     	; 0x38b0 <__ftoa_engine+0x80>
    38a6:	36 0f       	add	r19, r22
    38a8:	e7 1e       	adc	r14, r23
    38aa:	f8 1e       	adc	r15, r24
    38ac:	49 1f       	adc	r20, r25
    38ae:	51 1d       	adc	r21, r1
    38b0:	66 0f       	add	r22, r22
    38b2:	77 1f       	adc	r23, r23
    38b4:	88 1f       	adc	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	06 94       	lsr	r0
    38ba:	a1 f7       	brne	.-24     	; 0x38a4 <__ftoa_engine+0x74>
    38bc:	05 90       	lpm	r0, Z+
    38be:	07 94       	ror	r0
    38c0:	28 f4       	brcc	.+10     	; 0x38cc <__ftoa_engine+0x9c>
    38c2:	e7 0e       	add	r14, r23
    38c4:	f8 1e       	adc	r15, r24
    38c6:	49 1f       	adc	r20, r25
    38c8:	56 1f       	adc	r21, r22
    38ca:	c1 1d       	adc	r28, r1
    38cc:	77 0f       	add	r23, r23
    38ce:	88 1f       	adc	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	66 1f       	adc	r22, r22
    38d4:	06 94       	lsr	r0
    38d6:	a1 f7       	brne	.-24     	; 0x38c0 <__ftoa_engine+0x90>
    38d8:	05 90       	lpm	r0, Z+
    38da:	07 94       	ror	r0
    38dc:	28 f4       	brcc	.+10     	; 0x38e8 <__ftoa_engine+0xb8>
    38de:	f8 0e       	add	r15, r24
    38e0:	49 1f       	adc	r20, r25
    38e2:	56 1f       	adc	r21, r22
    38e4:	c7 1f       	adc	r28, r23
    38e6:	d1 1d       	adc	r29, r1
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	66 1f       	adc	r22, r22
    38ee:	77 1f       	adc	r23, r23
    38f0:	06 94       	lsr	r0
    38f2:	a1 f7       	brne	.-24     	; 0x38dc <__ftoa_engine+0xac>
    38f4:	05 90       	lpm	r0, Z+
    38f6:	07 94       	ror	r0
    38f8:	20 f4       	brcc	.+8      	; 0x3902 <__ftoa_engine+0xd2>
    38fa:	49 0f       	add	r20, r25
    38fc:	56 1f       	adc	r21, r22
    38fe:	c7 1f       	adc	r28, r23
    3900:	d8 1f       	adc	r29, r24
    3902:	99 0f       	add	r25, r25
    3904:	66 1f       	adc	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	06 94       	lsr	r0
    390c:	a9 f7       	brne	.-22     	; 0x38f8 <__ftoa_engine+0xc8>
    390e:	84 91       	lpm	r24, Z
    3910:	10 95       	com	r17
    3912:	17 70       	andi	r17, 0x07	; 7
    3914:	41 f0       	breq	.+16     	; 0x3926 <__ftoa_engine+0xf6>
    3916:	d6 95       	lsr	r29
    3918:	c7 95       	ror	r28
    391a:	57 95       	ror	r21
    391c:	47 95       	ror	r20
    391e:	f7 94       	ror	r15
    3920:	e7 94       	ror	r14
    3922:	1a 95       	dec	r17
    3924:	c1 f7       	brne	.-16     	; 0x3916 <__ftoa_engine+0xe6>
    3926:	e7 e0       	ldi	r30, 0x07	; 7
    3928:	f1 e0       	ldi	r31, 0x01	; 1
    392a:	68 94       	set
    392c:	15 90       	lpm	r1, Z+
    392e:	15 91       	lpm	r17, Z+
    3930:	35 91       	lpm	r19, Z+
    3932:	65 91       	lpm	r22, Z+
    3934:	95 91       	lpm	r25, Z+
    3936:	05 90       	lpm	r0, Z+
    3938:	7f e2       	ldi	r23, 0x2F	; 47
    393a:	73 95       	inc	r23
    393c:	e1 18       	sub	r14, r1
    393e:	f1 0a       	sbc	r15, r17
    3940:	43 0b       	sbc	r20, r19
    3942:	56 0b       	sbc	r21, r22
    3944:	c9 0b       	sbc	r28, r25
    3946:	d0 09       	sbc	r29, r0
    3948:	c0 f7       	brcc	.-16     	; 0x393a <__ftoa_engine+0x10a>
    394a:	e1 0c       	add	r14, r1
    394c:	f1 1e       	adc	r15, r17
    394e:	43 1f       	adc	r20, r19
    3950:	56 1f       	adc	r21, r22
    3952:	c9 1f       	adc	r28, r25
    3954:	d0 1d       	adc	r29, r0
    3956:	7e f4       	brtc	.+30     	; 0x3976 <__ftoa_engine+0x146>
    3958:	70 33       	cpi	r23, 0x30	; 48
    395a:	11 f4       	brne	.+4      	; 0x3960 <__ftoa_engine+0x130>
    395c:	8a 95       	dec	r24
    395e:	e6 cf       	rjmp	.-52     	; 0x392c <__ftoa_engine+0xfc>
    3960:	e8 94       	clt
    3962:	01 50       	subi	r16, 0x01	; 1
    3964:	30 f0       	brcs	.+12     	; 0x3972 <__ftoa_engine+0x142>
    3966:	08 0f       	add	r16, r24
    3968:	0a f4       	brpl	.+2      	; 0x396c <__ftoa_engine+0x13c>
    396a:	00 27       	eor	r16, r16
    396c:	02 17       	cp	r16, r18
    396e:	08 f4       	brcc	.+2      	; 0x3972 <__ftoa_engine+0x142>
    3970:	20 2f       	mov	r18, r16
    3972:	23 95       	inc	r18
    3974:	02 2f       	mov	r16, r18
    3976:	7a 33       	cpi	r23, 0x3A	; 58
    3978:	28 f0       	brcs	.+10     	; 0x3984 <__ftoa_engine+0x154>
    397a:	79 e3       	ldi	r23, 0x39	; 57
    397c:	7d 93       	st	X+, r23
    397e:	2a 95       	dec	r18
    3980:	e9 f7       	brne	.-6      	; 0x397c <__ftoa_engine+0x14c>
    3982:	10 c0       	rjmp	.+32     	; 0x39a4 <__ftoa_engine+0x174>
    3984:	7d 93       	st	X+, r23
    3986:	2a 95       	dec	r18
    3988:	89 f6       	brne	.-94     	; 0x392c <__ftoa_engine+0xfc>
    398a:	06 94       	lsr	r0
    398c:	97 95       	ror	r25
    398e:	67 95       	ror	r22
    3990:	37 95       	ror	r19
    3992:	17 95       	ror	r17
    3994:	17 94       	ror	r1
    3996:	e1 18       	sub	r14, r1
    3998:	f1 0a       	sbc	r15, r17
    399a:	43 0b       	sbc	r20, r19
    399c:	56 0b       	sbc	r21, r22
    399e:	c9 0b       	sbc	r28, r25
    39a0:	d0 09       	sbc	r29, r0
    39a2:	98 f0       	brcs	.+38     	; 0x39ca <__ftoa_engine+0x19a>
    39a4:	23 95       	inc	r18
    39a6:	7e 91       	ld	r23, -X
    39a8:	73 95       	inc	r23
    39aa:	7a 33       	cpi	r23, 0x3A	; 58
    39ac:	08 f0       	brcs	.+2      	; 0x39b0 <__ftoa_engine+0x180>
    39ae:	70 e3       	ldi	r23, 0x30	; 48
    39b0:	7c 93       	st	X, r23
    39b2:	20 13       	cpse	r18, r16
    39b4:	b8 f7       	brcc	.-18     	; 0x39a4 <__ftoa_engine+0x174>
    39b6:	7e 91       	ld	r23, -X
    39b8:	70 61       	ori	r23, 0x10	; 16
    39ba:	7d 93       	st	X+, r23
    39bc:	30 f0       	brcs	.+12     	; 0x39ca <__ftoa_engine+0x19a>
    39be:	83 95       	inc	r24
    39c0:	71 e3       	ldi	r23, 0x31	; 49
    39c2:	7d 93       	st	X+, r23
    39c4:	70 e3       	ldi	r23, 0x30	; 48
    39c6:	2a 95       	dec	r18
    39c8:	e1 f7       	brne	.-8      	; 0x39c2 <__ftoa_engine+0x192>
    39ca:	11 24       	eor	r1, r1
    39cc:	ef 90       	pop	r14
    39ce:	ff 90       	pop	r15
    39d0:	0f 91       	pop	r16
    39d2:	1f 91       	pop	r17
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	99 27       	eor	r25, r25
    39da:	87 fd       	sbrc	r24, 7
    39dc:	90 95       	com	r25
    39de:	08 95       	ret

000039e0 <isspace>:
    39e0:	91 11       	cpse	r25, r1
    39e2:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__ctype_isfalse>
    39e6:	80 32       	cpi	r24, 0x20	; 32
    39e8:	19 f0       	breq	.+6      	; 0x39f0 <isspace+0x10>
    39ea:	89 50       	subi	r24, 0x09	; 9
    39ec:	85 50       	subi	r24, 0x05	; 5
    39ee:	c8 f7       	brcc	.-14     	; 0x39e2 <isspace+0x2>
    39f0:	08 95       	ret

000039f2 <strncasecmp_P>:
    39f2:	fb 01       	movw	r30, r22
    39f4:	dc 01       	movw	r26, r24
    39f6:	41 50       	subi	r20, 0x01	; 1
    39f8:	50 40       	sbci	r21, 0x00	; 0
    39fa:	88 f0       	brcs	.+34     	; 0x3a1e <strncasecmp_P+0x2c>
    39fc:	8d 91       	ld	r24, X+
    39fe:	81 34       	cpi	r24, 0x41	; 65
    3a00:	1c f0       	brlt	.+6      	; 0x3a08 <strncasecmp_P+0x16>
    3a02:	8b 35       	cpi	r24, 0x5B	; 91
    3a04:	0c f4       	brge	.+2      	; 0x3a08 <strncasecmp_P+0x16>
    3a06:	80 5e       	subi	r24, 0xE0	; 224
    3a08:	65 91       	lpm	r22, Z+
    3a0a:	61 34       	cpi	r22, 0x41	; 65
    3a0c:	1c f0       	brlt	.+6      	; 0x3a14 <strncasecmp_P+0x22>
    3a0e:	6b 35       	cpi	r22, 0x5B	; 91
    3a10:	0c f4       	brge	.+2      	; 0x3a14 <strncasecmp_P+0x22>
    3a12:	60 5e       	subi	r22, 0xE0	; 224
    3a14:	86 1b       	sub	r24, r22
    3a16:	61 11       	cpse	r22, r1
    3a18:	71 f3       	breq	.-36     	; 0x39f6 <strncasecmp_P+0x4>
    3a1a:	99 0b       	sbc	r25, r25
    3a1c:	08 95       	ret
    3a1e:	88 1b       	sub	r24, r24
    3a20:	fc cf       	rjmp	.-8      	; 0x3a1a <strncasecmp_P+0x28>

00003a22 <strnlen_P>:
    3a22:	fc 01       	movw	r30, r24
    3a24:	05 90       	lpm	r0, Z+
    3a26:	61 50       	subi	r22, 0x01	; 1
    3a28:	70 40       	sbci	r23, 0x00	; 0
    3a2a:	01 10       	cpse	r0, r1
    3a2c:	d8 f7       	brcc	.-10     	; 0x3a24 <strnlen_P+0x2>
    3a2e:	80 95       	com	r24
    3a30:	90 95       	com	r25
    3a32:	8e 0f       	add	r24, r30
    3a34:	9f 1f       	adc	r25, r31
    3a36:	08 95       	ret

00003a38 <strnlen>:
    3a38:	fc 01       	movw	r30, r24
    3a3a:	61 50       	subi	r22, 0x01	; 1
    3a3c:	70 40       	sbci	r23, 0x00	; 0
    3a3e:	01 90       	ld	r0, Z+
    3a40:	01 10       	cpse	r0, r1
    3a42:	d8 f7       	brcc	.-10     	; 0x3a3a <strnlen+0x2>
    3a44:	80 95       	com	r24
    3a46:	90 95       	com	r25
    3a48:	8e 0f       	add	r24, r30
    3a4a:	9f 1f       	adc	r25, r31
    3a4c:	08 95       	ret

00003a4e <fputc>:
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	fb 01       	movw	r30, r22
    3a58:	23 81       	ldd	r18, Z+3	; 0x03
    3a5a:	21 fd       	sbrc	r18, 1
    3a5c:	03 c0       	rjmp	.+6      	; 0x3a64 <fputc+0x16>
    3a5e:	8f ef       	ldi	r24, 0xFF	; 255
    3a60:	9f ef       	ldi	r25, 0xFF	; 255
    3a62:	2c c0       	rjmp	.+88     	; 0x3abc <fputc+0x6e>
    3a64:	22 ff       	sbrs	r18, 2
    3a66:	16 c0       	rjmp	.+44     	; 0x3a94 <fputc+0x46>
    3a68:	46 81       	ldd	r20, Z+6	; 0x06
    3a6a:	57 81       	ldd	r21, Z+7	; 0x07
    3a6c:	24 81       	ldd	r18, Z+4	; 0x04
    3a6e:	35 81       	ldd	r19, Z+5	; 0x05
    3a70:	42 17       	cp	r20, r18
    3a72:	53 07       	cpc	r21, r19
    3a74:	44 f4       	brge	.+16     	; 0x3a86 <fputc+0x38>
    3a76:	a0 81       	ld	r26, Z
    3a78:	b1 81       	ldd	r27, Z+1	; 0x01
    3a7a:	9d 01       	movw	r18, r26
    3a7c:	2f 5f       	subi	r18, 0xFF	; 255
    3a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a80:	31 83       	std	Z+1, r19	; 0x01
    3a82:	20 83       	st	Z, r18
    3a84:	8c 93       	st	X, r24
    3a86:	26 81       	ldd	r18, Z+6	; 0x06
    3a88:	37 81       	ldd	r19, Z+7	; 0x07
    3a8a:	2f 5f       	subi	r18, 0xFF	; 255
    3a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8e:	37 83       	std	Z+7, r19	; 0x07
    3a90:	26 83       	std	Z+6, r18	; 0x06
    3a92:	14 c0       	rjmp	.+40     	; 0x3abc <fputc+0x6e>
    3a94:	8b 01       	movw	r16, r22
    3a96:	ec 01       	movw	r28, r24
    3a98:	fb 01       	movw	r30, r22
    3a9a:	00 84       	ldd	r0, Z+8	; 0x08
    3a9c:	f1 85       	ldd	r31, Z+9	; 0x09
    3a9e:	e0 2d       	mov	r30, r0
    3aa0:	09 95       	icall
    3aa2:	89 2b       	or	r24, r25
    3aa4:	e1 f6       	brne	.-72     	; 0x3a5e <fputc+0x10>
    3aa6:	d8 01       	movw	r26, r16
    3aa8:	16 96       	adiw	r26, 0x06	; 6
    3aaa:	8d 91       	ld	r24, X+
    3aac:	9c 91       	ld	r25, X
    3aae:	17 97       	sbiw	r26, 0x07	; 7
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	17 96       	adiw	r26, 0x07	; 7
    3ab4:	9c 93       	st	X, r25
    3ab6:	8e 93       	st	-X, r24
    3ab8:	16 97       	sbiw	r26, 0x06	; 6
    3aba:	ce 01       	movw	r24, r28
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	08 95       	ret

00003ac6 <__ultoa_invert>:
    3ac6:	fa 01       	movw	r30, r20
    3ac8:	aa 27       	eor	r26, r26
    3aca:	28 30       	cpi	r18, 0x08	; 8
    3acc:	51 f1       	breq	.+84     	; 0x3b22 <__ultoa_invert+0x5c>
    3ace:	20 31       	cpi	r18, 0x10	; 16
    3ad0:	81 f1       	breq	.+96     	; 0x3b32 <__ultoa_invert+0x6c>
    3ad2:	e8 94       	clt
    3ad4:	6f 93       	push	r22
    3ad6:	6e 7f       	andi	r22, 0xFE	; 254
    3ad8:	6e 5f       	subi	r22, 0xFE	; 254
    3ada:	7f 4f       	sbci	r23, 0xFF	; 255
    3adc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ade:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae0:	af 4f       	sbci	r26, 0xFF	; 255
    3ae2:	b1 e0       	ldi	r27, 0x01	; 1
    3ae4:	3e d0       	rcall	.+124    	; 0x3b62 <__ultoa_invert+0x9c>
    3ae6:	b4 e0       	ldi	r27, 0x04	; 4
    3ae8:	3c d0       	rcall	.+120    	; 0x3b62 <__ultoa_invert+0x9c>
    3aea:	67 0f       	add	r22, r23
    3aec:	78 1f       	adc	r23, r24
    3aee:	89 1f       	adc	r24, r25
    3af0:	9a 1f       	adc	r25, r26
    3af2:	a1 1d       	adc	r26, r1
    3af4:	68 0f       	add	r22, r24
    3af6:	79 1f       	adc	r23, r25
    3af8:	8a 1f       	adc	r24, r26
    3afa:	91 1d       	adc	r25, r1
    3afc:	a1 1d       	adc	r26, r1
    3afe:	6a 0f       	add	r22, r26
    3b00:	71 1d       	adc	r23, r1
    3b02:	81 1d       	adc	r24, r1
    3b04:	91 1d       	adc	r25, r1
    3b06:	a1 1d       	adc	r26, r1
    3b08:	20 d0       	rcall	.+64     	; 0x3b4a <__ultoa_invert+0x84>
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <__ultoa_invert+0x48>
    3b0c:	68 94       	set
    3b0e:	3f 91       	pop	r19
    3b10:	2a e0       	ldi	r18, 0x0A	; 10
    3b12:	26 9f       	mul	r18, r22
    3b14:	11 24       	eor	r1, r1
    3b16:	30 19       	sub	r19, r0
    3b18:	30 5d       	subi	r19, 0xD0	; 208
    3b1a:	31 93       	st	Z+, r19
    3b1c:	de f6       	brtc	.-74     	; 0x3ad4 <__ultoa_invert+0xe>
    3b1e:	cf 01       	movw	r24, r30
    3b20:	08 95       	ret
    3b22:	46 2f       	mov	r20, r22
    3b24:	47 70       	andi	r20, 0x07	; 7
    3b26:	40 5d       	subi	r20, 0xD0	; 208
    3b28:	41 93       	st	Z+, r20
    3b2a:	b3 e0       	ldi	r27, 0x03	; 3
    3b2c:	0f d0       	rcall	.+30     	; 0x3b4c <__ultoa_invert+0x86>
    3b2e:	c9 f7       	brne	.-14     	; 0x3b22 <__ultoa_invert+0x5c>
    3b30:	f6 cf       	rjmp	.-20     	; 0x3b1e <__ultoa_invert+0x58>
    3b32:	46 2f       	mov	r20, r22
    3b34:	4f 70       	andi	r20, 0x0F	; 15
    3b36:	40 5d       	subi	r20, 0xD0	; 208
    3b38:	4a 33       	cpi	r20, 0x3A	; 58
    3b3a:	18 f0       	brcs	.+6      	; 0x3b42 <__ultoa_invert+0x7c>
    3b3c:	49 5d       	subi	r20, 0xD9	; 217
    3b3e:	31 fd       	sbrc	r19, 1
    3b40:	40 52       	subi	r20, 0x20	; 32
    3b42:	41 93       	st	Z+, r20
    3b44:	02 d0       	rcall	.+4      	; 0x3b4a <__ultoa_invert+0x84>
    3b46:	a9 f7       	brne	.-22     	; 0x3b32 <__ultoa_invert+0x6c>
    3b48:	ea cf       	rjmp	.-44     	; 0x3b1e <__ultoa_invert+0x58>
    3b4a:	b4 e0       	ldi	r27, 0x04	; 4
    3b4c:	a6 95       	lsr	r26
    3b4e:	97 95       	ror	r25
    3b50:	87 95       	ror	r24
    3b52:	77 95       	ror	r23
    3b54:	67 95       	ror	r22
    3b56:	ba 95       	dec	r27
    3b58:	c9 f7       	brne	.-14     	; 0x3b4c <__ultoa_invert+0x86>
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	61 05       	cpc	r22, r1
    3b5e:	71 05       	cpc	r23, r1
    3b60:	08 95       	ret
    3b62:	9b 01       	movw	r18, r22
    3b64:	ac 01       	movw	r20, r24
    3b66:	0a 2e       	mov	r0, r26
    3b68:	06 94       	lsr	r0
    3b6a:	57 95       	ror	r21
    3b6c:	47 95       	ror	r20
    3b6e:	37 95       	ror	r19
    3b70:	27 95       	ror	r18
    3b72:	ba 95       	dec	r27
    3b74:	c9 f7       	brne	.-14     	; 0x3b68 <__ultoa_invert+0xa2>
    3b76:	62 0f       	add	r22, r18
    3b78:	73 1f       	adc	r23, r19
    3b7a:	84 1f       	adc	r24, r20
    3b7c:	95 1f       	adc	r25, r21
    3b7e:	a0 1d       	adc	r26, r0
    3b80:	08 95       	ret

00003b82 <__ctype_isfalse>:
    3b82:	99 27       	eor	r25, r25
    3b84:	88 27       	eor	r24, r24

00003b86 <__ctype_istrue>:
    3b86:	08 95       	ret

00003b88 <__prologue_saves__>:
    3b88:	2f 92       	push	r2
    3b8a:	3f 92       	push	r3
    3b8c:	4f 92       	push	r4
    3b8e:	5f 92       	push	r5
    3b90:	6f 92       	push	r6
    3b92:	7f 92       	push	r7
    3b94:	8f 92       	push	r8
    3b96:	9f 92       	push	r9
    3b98:	af 92       	push	r10
    3b9a:	bf 92       	push	r11
    3b9c:	cf 92       	push	r12
    3b9e:	df 92       	push	r13
    3ba0:	ef 92       	push	r14
    3ba2:	ff 92       	push	r15
    3ba4:	0f 93       	push	r16
    3ba6:	1f 93       	push	r17
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	cd b7       	in	r28, 0x3d	; 61
    3bae:	de b7       	in	r29, 0x3e	; 62
    3bb0:	ca 1b       	sub	r28, r26
    3bb2:	db 0b       	sbc	r29, r27
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	09 94       	ijmp

00003bc0 <__epilogue_restores__>:
    3bc0:	2a 88       	ldd	r2, Y+18	; 0x12
    3bc2:	39 88       	ldd	r3, Y+17	; 0x11
    3bc4:	48 88       	ldd	r4, Y+16	; 0x10
    3bc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bca:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bce:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bd2:	b9 84       	ldd	r11, Y+9	; 0x09
    3bd4:	c8 84       	ldd	r12, Y+8	; 0x08
    3bd6:	df 80       	ldd	r13, Y+7	; 0x07
    3bd8:	ee 80       	ldd	r14, Y+6	; 0x06
    3bda:	fd 80       	ldd	r15, Y+5	; 0x05
    3bdc:	0c 81       	ldd	r16, Y+4	; 0x04
    3bde:	1b 81       	ldd	r17, Y+3	; 0x03
    3be0:	aa 81       	ldd	r26, Y+2	; 0x02
    3be2:	b9 81       	ldd	r27, Y+1	; 0x01
    3be4:	ce 0f       	add	r28, r30
    3be6:	d1 1d       	adc	r29, r1
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	ed 01       	movw	r28, r26
    3bf4:	08 95       	ret

00003bf6 <_exit>:
    3bf6:	f8 94       	cli

00003bf8 <__stop_program>:
    3bf8:	ff cf       	rjmp	.-2      	; 0x3bf8 <__stop_program>

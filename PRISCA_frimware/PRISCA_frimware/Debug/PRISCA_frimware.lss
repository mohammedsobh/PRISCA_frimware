
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000181e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000181e  000018b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b5  00800094  00800094  000018e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001851  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  000032b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f3  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00004758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b21  00000000  00000000  00004f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_9>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x449>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	4e 41       	sbci	r20, 0x1E	; 30
      b0:	4e 49       	Address 0x000000b0 is out of bounds.
.word	0xffff	; ????

000000b1 <pstr_inity>:
      b1:	49 4e 49 54 59                                      INITY

000000b6 <pstr_inf>:
      b6:	49 4e 46                                            INF

000000b9 <pwr_m10>:
      b9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000d1 <pwr_p10>:
      d1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf e5       	ldi	r28, 0x5F	; 95
      f0:	d4 e0       	ldi	r29, 0x04	; 4
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	a0 e6       	ldi	r26, 0x60	; 96
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	ee e1       	ldi	r30, 0x1E	; 30
      fe:	f8 e1       	ldi	r31, 0x18	; 24
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a4 39       	cpi	r26, 0x94	; 148
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a4 e9       	ldi	r26, 0x94	; 148
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a9 34       	cpi	r26, 0x49	; 73
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 06 02 	call	0x40c	; 0x40c <main>
     120:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	2a 97       	sbiw	r28, 0x0a	; 10
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	ac 01       	movw	r20, r24
     142:	fe 01       	movw	r30, r28
     144:	31 96       	adiw	r30, 0x01	; 1
     146:	ce 01       	movw	r24, r28
     148:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     14a:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     14c:	e8 17       	cp	r30, r24
     14e:	f9 07       	cpc	r31, r25
     150:	e1 f7       	brne	.-8      	; 0x14a <get_value+0x22>
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     15a:	fa 01       	movw	r30, r20
     15c:	e2 0f       	add	r30, r18
     15e:	f3 1f       	adc	r31, r19
     160:	90 81       	ld	r25, Z
     162:	96 13       	cpse	r25, r22
     164:	17 c0       	rjmp	.+46     	; 0x194 <get_value+0x6c>
			v [j] = String[j+i+1];
     166:	f9 01       	movw	r30, r18
     168:	e0 0f       	add	r30, r16
     16a:	f1 1f       	adc	r31, r17
     16c:	e4 0f       	add	r30, r20
     16e:	f5 1f       	adc	r31, r21
     170:	81 81       	ldd	r24, Z+1	; 0x01
     172:	a1 e0       	ldi	r26, 0x01	; 1
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	ac 0f       	add	r26, r28
     178:	bd 1f       	adc	r27, r29
     17a:	a0 0f       	add	r26, r16
     17c:	b1 1f       	adc	r27, r17
     17e:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r'))
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	80 32       	cpi	r24, 0x20	; 32
     184:	51 f0       	breq	.+20     	; 0x19a <get_value+0x72>
     186:	8a 30       	cpi	r24, 0x0A	; 10
     188:	41 f0       	breq	.+16     	; 0x19a <get_value+0x72>
     18a:	8d 30       	cpi	r24, 0x0D	; 13
     18c:	31 f0       	breq	.+12     	; 0x19a <get_value+0x72>
			break;
			j++;
     18e:	0f 5f       	subi	r16, 0xFF	; 255
     190:	1f 4f       	sbci	r17, 0xFF	; 255
     192:	e3 cf       	rjmp	.-58     	; 0x15a <get_value+0x32>
		}
		else
		i++;
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	e0 cf       	rjmp	.-64     	; 0x15a <get_value+0x32>
	}
	return (atof(v));
     19a:	ce 01       	movw	r24, r28
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	0e 94 05 0a 	call	0x140a	; 0x140a <atof>
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	08 95       	ret

000001b8 <get_int>:
int get_int (char* String,char ch)
{
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	2a 97       	sbiw	r28, 0x0a	; 10
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	ac 01       	movw	r20, r24
     1d2:	fe 01       	movw	r30, r28
     1d4:	31 96       	adiw	r30, 0x01	; 1
     1d6:	ce 01       	movw	r24, r28
     1d8:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     1da:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     1dc:	e8 17       	cp	r30, r24
     1de:	f9 07       	cpc	r31, r25
     1e0:	e1 f7       	brne	.-8      	; 0x1da <get_int+0x22>
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     1ea:	fa 01       	movw	r30, r20
     1ec:	e2 0f       	add	r30, r18
     1ee:	f3 1f       	adc	r31, r19
     1f0:	90 81       	ld	r25, Z
     1f2:	96 13       	cpse	r25, r22
     1f4:	17 c0       	rjmp	.+46     	; 0x224 <get_int+0x6c>
			v [j] = String[j+i+1];
     1f6:	f9 01       	movw	r30, r18
     1f8:	e0 0f       	add	r30, r16
     1fa:	f1 1f       	adc	r31, r17
     1fc:	e4 0f       	add	r30, r20
     1fe:	f5 1f       	adc	r31, r21
     200:	81 81       	ldd	r24, Z+1	; 0x01
     202:	a1 e0       	ldi	r26, 0x01	; 1
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	ac 0f       	add	r26, r28
     208:	bd 1f       	adc	r27, r29
     20a:	a0 0f       	add	r26, r16
     20c:	b1 1f       	adc	r27, r17
     20e:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || ( String [j+i+2] == '\n') || (String [j+i+2] == '\r') )
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	80 32       	cpi	r24, 0x20	; 32
     214:	51 f0       	breq	.+20     	; 0x22a <get_int+0x72>
     216:	8a 30       	cpi	r24, 0x0A	; 10
     218:	41 f0       	breq	.+16     	; 0x22a <get_int+0x72>
     21a:	8d 30       	cpi	r24, 0x0D	; 13
     21c:	31 f0       	breq	.+12     	; 0x22a <get_int+0x72>
			break;
			j++;
     21e:	0f 5f       	subi	r16, 0xFF	; 255
     220:	1f 4f       	sbci	r17, 0xFF	; 255
     222:	e3 cf       	rjmp	.-58     	; 0x1ea <get_int+0x32>
		}
		else
		i++;
     224:	2f 5f       	subi	r18, 0xFF	; 255
     226:	3f 4f       	sbci	r19, 0xFF	; 255
     228:	e0 cf       	rjmp	.-64     	; 0x1ea <get_int+0x32>
	}
	return (atoi(v));
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 09 0a 	call	0x1412	; 0x1412 <atoi>
}
     232:	2a 96       	adiw	r28, 0x0a	; 10
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	6a 01       	movw	r12, r20
     258:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     25a:	28 81       	ld	r18, Y
     25c:	39 81       	ldd	r19, Y+1	; 0x01
     25e:	4a 81       	ldd	r20, Y+2	; 0x02
     260:	5b 81       	ldd	r21, Y+3	; 0x03
     262:	c7 01       	movw	r24, r14
     264:	b6 01       	movw	r22, r12
     266:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__subsf3>
    *current_pos = new_pos;
     26a:	c8 82       	st	Y, r12
     26c:	d9 82       	std	Y+1, r13	; 0x01
     26e:	ea 82       	std	Y+2, r14	; 0x02
     270:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	08 95       	ret

00000280 <Init>:
		}
	}
}
void Init(void){
	
	DDRA &= ~(0<<PA0);// use PA0,1 as input for thermistor 
     280:	8a b3       	in	r24, 0x1a	; 26
     282:	8a bb       	out	0x1a, r24	; 26
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     284:	81 b3       	in	r24, 0x11	; 17
     286:	80 6b       	ori	r24, 0xB0	; 176
     288:	81 bb       	out	0x11, r24	; 17
	ADCSRA = 0x87; //to active A/D pins
     28a:	87 e8       	ldi	r24, 0x87	; 135
     28c:	86 b9       	out	0x06, r24	; 6
	UART_INIT();
     28e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <UART_INIT>
	pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);
     292:	27 e2       	ldi	r18, 0x27	; 39
     294:	31 e0       	ldi	r19, 0x01	; 1
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 a2 05 	call	0xb44	; 0xb44 <pid_Init>
	TCNT0 = 0;
     2a6:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS02) | (1<<CS00); // PRESCALER 1024
     2a8:	83 b7       	in	r24, 0x33	; 51
     2aa:	85 60       	ori	r24, 0x05	; 5
     2ac:	83 bf       	out	0x33, r24	; 51
	/*set fast PWM mode with non-inverted output*/
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     2ae:	83 b7       	in	r24, 0x33	; 51
     2b0:	89 66       	ori	r24, 0x69	; 105
     2b2:	83 bf       	out	0x33, r24	; 51
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
     2b4:	8f b5       	in	r24, 0x2f	; 47
     2b6:	81 6a       	ori	r24, 0xA1	; 161
     2b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10);
     2ba:	8e b5       	in	r24, 0x2e	; 46
     2bc:	81 60       	ori	r24, 0x01	; 1
     2be:	8e bd       	out	0x2e, r24	; 46
	TCCR2 |= (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS20);
     2c0:	85 b5       	in	r24, 0x25	; 37
     2c2:	89 66       	ori	r24, 0x69	; 105
     2c4:	85 bd       	out	0x25, r24	; 37
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
     2c6:	bb 9a       	sbi	0x17, 3	; 23
	TIMSK = (1<<TOIE0);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	89 bf       	out	0x39, r24	; 57
	sei();
     2cc:	78 94       	sei
     2ce:	08 95       	ret

000002d0 <ADC_value>:
}
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = (uint8_t) ADC_pin; // reset MUX0 to select ADC0
     2d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d4:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d6:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d8:	84 b1       	in	r24, 0x04	; 4
     2da:	95 b1       	in	r25, 0x05	; 5
}
     2dc:	08 95       	ret

000002de <getTemp>:
double getTemp(uint8_t ADC_pin)
{
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ee:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_value>
     2f2:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <Vo+0x1>
     2f6:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2fa:	bc 01       	movw	r22, r24
     2fc:	99 0f       	add	r25, r25
     2fe:	88 0b       	sbc	r24, r24
     300:	99 0b       	sbc	r25, r25
     302:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__floatsisf>
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 ec       	ldi	r23, 0xC0	; 192
     30e:	8f e7       	ldi	r24, 0x7F	; 127
     310:	94 e4       	ldi	r25, 0x44	; 68
     312:	0e 94 29 07 	call	0xe52	; 0xe52 <__divsf3>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e8       	ldi	r20, 0x80	; 128
     31c:	5f e3       	ldi	r21, 0x3F	; 63
     31e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__subsf3>
     322:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     326:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     32a:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32e:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     332:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     336:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <R2>
     33a:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <R2+0x1>
     33e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <R2+0x2>
     342:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <R2+0x3>
	logR2 = log(R2);
     346:	0e 94 90 08 	call	0x1120	; 0x1120 <log>
     34a:	6b 01       	movw	r12, r22
     34c:	7c 01       	movw	r14, r24
     34e:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <logR2>
     352:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <logR2+0x1>
     356:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <logR2+0x2>
     35a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
     35e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     362:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     366:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     36a:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     372:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     376:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     37a:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37e:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     382:	0e 94 b8 06 	call	0xd70	; 0xd70 <__addsf3>
     386:	4b 01       	movw	r8, r22
     388:	5c 01       	movw	r10, r24
     38a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     392:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     396:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     39a:	c7 01       	movw	r24, r14
     39c:	b6 01       	movw	r22, r12
     39e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     3a2:	a7 01       	movw	r20, r14
     3a4:	96 01       	movw	r18, r12
     3a6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     3aa:	a7 01       	movw	r20, r14
     3ac:	96 01       	movw	r18, r12
     3ae:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     3b2:	9b 01       	movw	r18, r22
     3b4:	ac 01       	movw	r20, r24
     3b6:	c5 01       	movw	r24, r10
     3b8:	b4 01       	movw	r22, r8
     3ba:	0e 94 b8 06 	call	0xd70	; 0xd70 <__addsf3>
     3be:	9b 01       	movw	r18, r22
     3c0:	ac 01       	movw	r20, r24
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	9f e3       	ldi	r25, 0x3F	; 63
     3ca:	0e 94 29 07 	call	0xe52	; 0xe52 <__divsf3>
     3ce:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <T>
     3d2:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <T+0x1>
     3d6:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <T+0x2>
     3da:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <T+0x3>
	Tc = T - 273.15;
     3de:	23 e3       	ldi	r18, 0x33	; 51
     3e0:	33 e9       	ldi	r19, 0x93	; 147
     3e2:	48 e8       	ldi	r20, 0x88	; 136
     3e4:	53 e4       	ldi	r21, 0x43	; 67
     3e6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__subsf3>
     3ea:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <Tc>
     3ee:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <Tc+0x1>
     3f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Tc+0x2>
     3f6:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Tc+0x3>
	return (Tc);
}
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	bf 90       	pop	r11
     404:	af 90       	pop	r10
     406:	9f 90       	pop	r9
     408:	8f 90       	pop	r8
     40a:	08 95       	ret

0000040c <main>:
char output[10];
uint8_t d = 100; //no. of steps per 1mm
volatile int value; // to storage the instantaneous change in ADC converter
int main(void)
{
    Init();
     40c:	0e 94 40 01 	call	0x280	; 0x280 <Init>
     410:	cf e1       	ldi	r28, 0x1F	; 31
     412:	d1 e0       	ldi	r29, 0x01	; 1
     414:	ef ec       	ldi	r30, 0xCF	; 207
     416:	f0 e0       	ldi	r31, 0x00	; 0
	int val = 0;
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
     418:	11 92       	st	Z+, r1
	double value_2;
	double value_3;
	int val = 0;
	while (1)
	{
		for (int i = 0 ; i < 80 ;i++)
     41a:	ec 17       	cp	r30, r28
     41c:	fd 07       	cpc	r31, r29
     41e:	e1 f7       	brne	.-8      	; 0x418 <main+0xc>
		{
			String [i] = 0;
		}
		Recive_Data(String);
     420:	8f ec       	ldi	r24, 0xCF	; 207
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 9c 06 	call	0xd38	; 0xd38 <Recive_Data>
		if (String[0] == 'M')
     428:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <String>
     42c:	8d 34       	cpi	r24, 0x4D	; 77
     42e:	09 f0       	breq	.+2      	; 0x432 <main+0x26>
     430:	e3 c0       	rjmp	.+454    	; 0x5f8 <__stack+0x199>
		{
			val = get_int (String,'M');
     432:	6d e4       	ldi	r22, 0x4D	; 77
     434:	8f ec       	ldi	r24, 0xCF	; 207
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     43c:	8c 01       	movw	r16, r24
			if (val == 105)
     43e:	89 36       	cpi	r24, 0x69	; 105
     440:	91 05       	cpc	r25, r1
     442:	29 f4       	brne	.+10     	; 0x44e <main+0x42>
			{
				Transmit_Data("ok");
     444:	80 e7       	ldi	r24, 0x70	; 112
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     44c:	8d c0       	rjmp	.+282    	; 0x568 <__stack+0x109>
			}
			if (val == 104)
     44e:	88 36       	cpi	r24, 0x68	; 104
     450:	91 05       	cpc	r25, r1
     452:	b9 f5       	brne	.+110    	; 0x4c2 <__stack+0x63>
			{
				if (get_int (String,'T') == 0)
     454:	64 e5       	ldi	r22, 0x54	; 84
     456:	8f ec       	ldi	r24, 0xCF	; 207
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     45e:	89 2b       	or	r24, r25
     460:	91 f4       	brne	.+36     	; 0x486 <__stack+0x27>
				{
					SE1 = get_value(String,'S');
     462:	63 e5       	ldi	r22, 0x53	; 83
     464:	8f ec       	ldi	r24, 0xCF	; 207
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     46c:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <SE1>
     470:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <SE1+0x1>
     474:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <SE1+0x2>
     478:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <SE1+0x3>
					Transmit_Data("ok");
     47c:	80 e7       	ldi	r24, 0x70	; 112
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     484:	86 c0       	rjmp	.+268    	; 0x592 <__stack+0x133>
				}
				else if (get_int (String,'T') == 1)
     486:	64 e5       	ldi	r22, 0x54	; 84
     488:	8f ec       	ldi	r24, 0xCF	; 207
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	91 f4       	brne	.+36     	; 0x4b8 <__stack+0x59>
				{
					SE2 = get_value(String,'S');
     494:	63 e5       	ldi	r22, 0x53	; 83
     496:	8f ec       	ldi	r24, 0xCF	; 207
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     49e:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <SE2>
     4a2:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <SE2+0x1>
     4a6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <SE2+0x2>
     4aa:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <SE2+0x3>
					Transmit_Data("ok");
     4ae:	80 e7       	ldi	r24, 0x70	; 112
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     4b6:	6d c0       	rjmp	.+218    	; 0x592 <__stack+0x133>
				} 
				else
					Transmit_Data("error extruder temperature");
     4b8:	83 e7       	ldi	r24, 0x73	; 115
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     4c0:	68 c0       	rjmp	.+208    	; 0x592 <__stack+0x133>
			}
			if (val == 109)
     4c2:	8d 36       	cpi	r24, 0x6D	; 109
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f0       	breq	.+2      	; 0x4ca <__stack+0x6b>
     4c8:	4f c0       	rjmp	.+158    	; 0x568 <__stack+0x109>
     4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <__stack+0x95>
			{
				while(pid_Controller(SE1,getTemp(T0), &pidData) >= 0 || pid_Controller(SE2,getTemp(T2), &pidData) >= 0 )
				{
					itoa(getTemp(T0), output, 10);
     4cc:	80 e5       	ldi	r24, 0x50	; 80
     4ce:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4d2:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	67 ea       	ldi	r22, 0xA7	; 167
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 27 0a 	call	0x144e	; 0x144e <__itoa_ncheck>
					Transmit_Data(output);
     4e4:	87 ea       	ldi	r24, 0xA7	; 167
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
					Transmit_Data('\r');
     4ec:	8d e0       	ldi	r24, 0x0D	; 13
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
				else
					Transmit_Data("error extruder temperature");
			}
			if (val == 109)
			{
				while(pid_Controller(SE1,getTemp(T0), &pidData) >= 0 || pid_Controller(SE2,getTemp(T2), &pidData) >= 0 )
     4f4:	80 e5       	ldi	r24, 0x50	; 80
     4f6:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     4fa:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     4fe:	6b 01       	movw	r12, r22
     500:	7c 01       	movw	r14, r24
     502:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <SE1>
     506:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <SE1+0x1>
     50a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <SE1+0x2>
     50e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <SE1+0x3>
     512:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	47 e2       	ldi	r20, 0x27	; 39
     51c:	51 e0       	ldi	r21, 0x01	; 1
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     524:	99 23       	and	r25, r25
     526:	94 f6       	brge	.-92     	; 0x4cc <__stack+0x6d>
     528:	82 e5       	ldi	r24, 0x52	; 82
     52a:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     52e:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     532:	6b 01       	movw	r12, r22
     534:	7c 01       	movw	r14, r24
     536:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <SE2>
     53a:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <SE2+0x1>
     53e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <SE2+0x2>
     542:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <SE2+0x3>
     546:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	47 e2       	ldi	r20, 0x27	; 39
     550:	51 e0       	ldi	r21, 0x01	; 1
     552:	b6 01       	movw	r22, r12
     554:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     558:	99 23       	and	r25, r25
     55a:	0c f0       	brlt	.+2      	; 0x55e <__stack+0xff>
     55c:	b7 cf       	rjmp	.-146    	; 0x4cc <__stack+0x6d>
				{
					itoa(getTemp(T0), output, 10);
					Transmit_Data(output);
					Transmit_Data('\r');
				}
				Transmit_Data("ok");
     55e:	80 e7       	ldi	r24, 0x70	; 112
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     566:	37 c0       	rjmp	.+110    	; 0x5d6 <__stack+0x177>
			}
			if (val == 140)
     568:	0c 38       	cpi	r16, 0x8C	; 140
     56a:	11 05       	cpc	r17, r1
     56c:	91 f4       	brne	.+36     	; 0x592 <__stack+0x133>
			{
				SB = get_value(String,'S');
     56e:	63 e5       	ldi	r22, 0x53	; 83
     570:	8f ec       	ldi	r24, 0xCF	; 207
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     578:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <SB>
     57c:	70 93 c4 00 	sts	0x00C4, r23	; 0x8000c4 <SB+0x1>
     580:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <SB+0x2>
     584:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <SB+0x3>
				Transmit_Data("ok");
     588:	80 e7       	ldi	r24, 0x70	; 112
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     590:	41 cf       	rjmp	.-382    	; 0x414 <main+0x8>
			}
			if (val == 190)
     592:	0e 3b       	cpi	r16, 0xBE	; 190
     594:	11 05       	cpc	r17, r1
     596:	f9 f4       	brne	.+62     	; 0x5d6 <__stack+0x177>
			{
				while(pid_Controller(SB,getTemp(T4), &pidData) >= 0 );
     598:	84 e5       	ldi	r24, 0x54	; 84
     59a:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     59e:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     5a2:	6b 01       	movw	r12, r22
     5a4:	7c 01       	movw	r14, r24
     5a6:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <SB>
     5aa:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <SB+0x1>
     5ae:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <SB+0x2>
     5b2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <SB+0x3>
     5b6:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	47 e2       	ldi	r20, 0x27	; 39
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     5c8:	99 23       	and	r25, r25
     5ca:	34 f7       	brge	.-52     	; 0x598 <__stack+0x139>
				Transmit_Data("ok");
     5cc:	80 e7       	ldi	r24, 0x70	; 112
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     5d4:	1f cf       	rjmp	.-450    	; 0x414 <main+0x8>
			}
			if (val == 106)
     5d6:	0a 36       	cpi	r16, 0x6A	; 106
     5d8:	11 05       	cpc	r17, r1
     5da:	09 f0       	breq	.+2      	; 0x5de <__stack+0x17f>
     5dc:	1b cf       	rjmp	.-458    	; 0x414 <main+0x8>
			{
				OCR2 = get_value(String,'S');
     5de:	63 e5       	ldi	r22, 0x53	; 83
     5e0:	8f ec       	ldi	r24, 0xCF	; 207
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     5e8:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     5ec:	63 bd       	out	0x23, r22	; 35
				Transmit_Data("ok");
     5ee:	80 e7       	ldi	r24, 0x70	; 112
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     5f6:	0e cf       	rjmp	.-484    	; 0x414 <main+0x8>
			}
		}
		else if (String[0] == 'G')
     5f8:	87 34       	cpi	r24, 0x47	; 71
     5fa:	09 f0       	breq	.+2      	; 0x5fe <__stack+0x19f>
     5fc:	0b cf       	rjmp	.-490    	; 0x414 <main+0x8>
		{
			val = get_int (String,'G');
     5fe:	67 e4       	ldi	r22, 0x47	; 71
     600:	8f ec       	ldi	r24, 0xCF	; 207
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_int>
			if (val == '1')
     608:	81 33       	cpi	r24, 0x31	; 49
     60a:	91 05       	cpc	r25, r1
     60c:	09 f0       	breq	.+2      	; 0x610 <__stack+0x1b1>
     60e:	e0 c0       	rjmp	.+448    	; 0x7d0 <__stack+0x371>
			{
				value_1 = get_value(String,'X');           //extract first value
     610:	68 e5       	ldi	r22, 0x58	; 88
     612:	8f ec       	ldi	r24, 0xCF	; 207
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     61a:	6b 01       	movw	r12, r22
     61c:	7c 01       	movw	r14, r24
				value_2 = get_value(String,'Y'); //call function to extract second value
     61e:	69 e5       	ldi	r22, 0x59	; 89
     620:	8f ec       	ldi	r24, 0xCF	; 207
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
				value_3 = get_value(String,'Z'); //call function to extract third value
     62c:	6a e5       	ldi	r22, 0x5A	; 90
     62e:	8f ec       	ldi	r24, 0xCF	; 207
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     636:	2b 01       	movw	r4, r22
     638:	3c 01       	movw	r6, r24
				E = get_value(String,'E');
     63a:	65 e4       	ldi	r22, 0x45	; 69
     63c:	8f ec       	ldi	r24, 0xCF	; 207
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     644:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <E>
     648:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <E+0x1>
     64c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <E+0x2>
     650:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <E+0x3>
				if ((E && value_1 && value_2 && value_3) == 0)
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	a9 01       	movw	r20, r18
     65a:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     65e:	88 23       	and	r24, r24
     660:	09 f4       	brne	.+2      	; 0x664 <__stack+0x205>
     662:	b0 c1       	rjmp	.+864    	; 0x9c4 <__stack+0x565>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     672:	88 23       	and	r24, r24
     674:	09 f4       	brne	.+2      	; 0x678 <__stack+0x219>
     676:	a6 c1       	rjmp	.+844    	; 0x9c4 <__stack+0x565>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8
     682:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     686:	88 23       	and	r24, r24
     688:	09 f4       	brne	.+2      	; 0x68c <__stack+0x22d>
     68a:	9c c1       	rjmp	.+824    	; 0x9c4 <__stack+0x565>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	a9 01       	movw	r20, r18
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     69a:	81 11       	cpse	r24, r1
     69c:	a1 c1       	rjmp	.+834    	; 0x9e0 <__stack+0x581>
     69e:	92 c1       	rjmp	.+804    	; 0x9c4 <__stack+0x565>
				{
					if (get_value(String,'F') != 0)
					{
						Fe = get_value(String,'F');
     6a0:	66 e4       	ldi	r22, 0x46	; 70
     6a2:	8f ec       	ldi	r24, 0xCF	; 207
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6aa:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <Fe>
     6ae:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <Fe+0x1>
     6b2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Fe+0x2>
     6b6:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <Fe+0x3>
     6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <__stack+0x277>
				} 
				else
				{
					if (get_value(String,'F') != 0)
					{
						F = get_value(String,'F');
     6bc:	66 e4       	ldi	r22, 0x46	; 70
     6be:	8f ec       	ldi	r24, 0xCF	; 207
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     6c6:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <F>
     6ca:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <F+0x1>
     6ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <F+0x2>
     6d2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <F+0x3>
					}
				}
				if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	48 e4       	ldi	r20, 0x48	; 72
     6dc:	53 e4       	ldi	r21, 0x43	; 67
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     6e6:	18 16       	cp	r1, r24
     6e8:	0c f4       	brge	.+2      	; 0x6ec <__stack+0x28d>
     6ea:	94 ce       	rjmp	.-728    	; 0x414 <main+0x8>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	48 e4       	ldi	r20, 0x48	; 72
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	c5 01       	movw	r24, r10
     6f6:	b4 01       	movw	r22, r8
     6f8:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	0c f4       	brge	.+2      	; 0x702 <__stack+0x2a3>
     700:	89 ce       	rjmp	.-750    	; 0x414 <main+0x8>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4a ef       	ldi	r20, 0xFA	; 250
     708:	53 e4       	ldi	r21, 0x43	; 67
     70a:	c3 01       	movw	r24, r6
     70c:	b2 01       	movw	r22, r4
     70e:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     712:	18 16       	cp	r1, r24
     714:	0c f4       	brge	.+2      	; 0x718 <__stack+0x2b9>
     716:	7e ce       	rjmp	.-772    	; 0x414 <main+0x8>

				{
					x = sub_function (&old_val_1, value_1);     //call function to extract first step
     718:	b7 01       	movw	r22, r14
     71a:	a6 01       	movw	r20, r12
     71c:	8e e9       	ldi	r24, 0x9E	; 158
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     724:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <x>
     728:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <x+0x1>
     72c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <x+0x2>
     730:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <x+0x3>
					y = sub_function (&old_val_2, value_2);    //call function to extract second step
     734:	b5 01       	movw	r22, r10
     736:	a4 01       	movw	r20, r8
     738:	8a e9       	ldi	r24, 0x9A	; 154
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     740:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <y>
     744:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <y+0x1>
     748:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <y+0x2>
     74c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <y+0x3>
					z = sub_function (&old_val_3, value_3);    //call function to extract third step
     750:	b3 01       	movw	r22, r6
     752:	a2 01       	movw	r20, r4
     754:	86 e9       	ldi	r24, 0x96	; 150
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     75c:	2b 01       	movw	r4, r22
     75e:	3c 01       	movw	r6, r24
     760:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <z>
     764:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <z+0x1>
     768:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <z+0x2>
     76c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <z+0x3>
					value_1 = 0;
					value_2 = 0;
					value_3 = 0;
					while (!(x && y && z == 0));
     770:	c0 90 a3 00 	lds	r12, 0x00A3	; 0x8000a3 <x>
     774:	d0 90 a4 00 	lds	r13, 0x00A4	; 0x8000a4 <x+0x1>
     778:	e0 90 a5 00 	lds	r14, 0x00A5	; 0x8000a5 <x+0x2>
     77c:	f0 90 a6 00 	lds	r15, 0x00A6	; 0x8000a6 <x+0x3>
     780:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <y>
     784:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <y+0x1>
     788:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <y+0x2>
     78c:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <y+0x3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     79e:	88 23       	and	r24, r24
     7a0:	b9 f3       	breq	.-18     	; 0x790 <__stack+0x331>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	a9 01       	movw	r20, r18
     7a8:	c5 01       	movw	r24, r10
     7aa:	b4 01       	movw	r22, r8
     7ac:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     7b0:	88 23       	and	r24, r24
     7b2:	71 f3       	breq	.-36     	; 0x790 <__stack+0x331>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	a9 01       	movw	r20, r18
     7ba:	c3 01       	movw	r24, r6
     7bc:	b2 01       	movw	r22, r4
     7be:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     7c2:	81 11       	cpse	r24, r1
     7c4:	e5 cf       	rjmp	.-54     	; 0x790 <__stack+0x331>
					Transmit_Data("ok");
     7c6:	80 e7       	ldi	r24, 0x70	; 112
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     7ce:	22 ce       	rjmp	.-956    	; 0x414 <main+0x8>
				}
				}
				if (val == '0')
     7d0:	c0 97       	sbiw	r24, 0x30	; 48
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__stack+0x377>
     7d4:	1f ce       	rjmp	.-962    	; 0x414 <main+0x8>
				{
					value_1 = get_value(String,'X');           //extract first value
     7d6:	68 e5       	ldi	r22, 0x58	; 88
     7d8:	8f ec       	ldi	r24, 0xCF	; 207
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
					value_2 = get_value(String,'Y'); //call function to extract second value
     7e4:	69 e5       	ldi	r22, 0x59	; 89
     7e6:	8f ec       	ldi	r24, 0xCF	; 207
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7ee:	4b 01       	movw	r8, r22
     7f0:	5c 01       	movw	r10, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
     7f2:	6a e5       	ldi	r22, 0x5A	; 90
     7f4:	8f ec       	ldi	r24, 0xCF	; 207
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     7fc:	2b 01       	movw	r4, r22
     7fe:	3c 01       	movw	r6, r24
					E = get_value(String,'E');
     800:	65 e4       	ldi	r22, 0x45	; 69
     802:	8f ec       	ldi	r24, 0xCF	; 207
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     80a:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <E>
     80e:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <E+0x1>
     812:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <E+0x2>
     816:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <E+0x3>
					if ((E && value_1 && value_2 && value_3) == 0)
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	a9 01       	movw	r20, r18
     820:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     824:	88 23       	and	r24, r24
     826:	09 f4       	brne	.+2      	; 0x82a <__stack+0x3cb>
     828:	e9 c0       	rjmp	.+466    	; 0x9fc <__stack+0x59d>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <__stack+0x3df>
     83c:	df c0       	rjmp	.+446    	; 0x9fc <__stack+0x59d>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	a9 01       	movw	r20, r18
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	09 f4       	brne	.+2      	; 0x852 <__stack+0x3f3>
     850:	d5 c0       	rjmp	.+426    	; 0x9fc <__stack+0x59d>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	c3 01       	movw	r24, r6
     85a:	b2 01       	movw	r22, r4
     85c:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     860:	81 11       	cpse	r24, r1
     862:	0e c0       	rjmp	.+28     	; 0x880 <__stack+0x421>
     864:	cb c0       	rjmp	.+406    	; 0x9fc <__stack+0x59d>
					{
						if (get_value(String,'F') != 0)
						{
							F = get_value(String,'F');
     866:	66 e4       	ldi	r22, 0x46	; 70
     868:	8f ec       	ldi	r24, 0xCF	; 207
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     870:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <F>
     874:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <F+0x1>
     878:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <F+0x2>
     87c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <F+0x3>
						}
					}
					if (!(value_1>107||value_2>107||value_3>500||value_1<-107||value_2<-107||value_3<0)) // if the values don't skip the plate ,use it
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	46 ed       	ldi	r20, 0xD6	; 214
     886:	52 e4       	ldi	r21, 0x42	; 66
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     890:	18 16       	cp	r1, r24
     892:	0c f4       	brge	.+2      	; 0x896 <__stack+0x437>
     894:	92 c0       	rjmp	.+292    	; 0x9ba <__stack+0x55b>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	46 ed       	ldi	r20, 0xD6	; 214
     89c:	52 e4       	ldi	r21, 0x42	; 66
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	0c f4       	brge	.+2      	; 0x8ac <__stack+0x44d>
     8aa:	87 c0       	rjmp	.+270    	; 0x9ba <__stack+0x55b>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4a ef       	ldi	r20, 0xFA	; 250
     8b2:	53 e4       	ldi	r21, 0x43	; 67
     8b4:	c3 01       	movw	r24, r6
     8b6:	b2 01       	movw	r22, r4
     8b8:	0e 94 83 08 	call	0x1106	; 0x1106 <__gesf2>
     8bc:	18 16       	cp	r1, r24
     8be:	0c f4       	brge	.+2      	; 0x8c2 <__stack+0x463>
     8c0:	7c c0       	rjmp	.+248    	; 0x9ba <__stack+0x55b>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	46 ed       	ldi	r20, 0xD6	; 214
     8c8:	52 ec       	ldi	r21, 0xC2	; 194
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     8d2:	88 23       	and	r24, r24
     8d4:	0c f4       	brge	.+2      	; 0x8d8 <__stack+0x479>
     8d6:	71 c0       	rjmp	.+226    	; 0x9ba <__stack+0x55b>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	46 ed       	ldi	r20, 0xD6	; 214
     8de:	52 ec       	ldi	r21, 0xC2	; 194
     8e0:	c5 01       	movw	r24, r10
     8e2:	b4 01       	movw	r22, r8
     8e4:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     8e8:	88 23       	and	r24, r24
     8ea:	0c f4       	brge	.+2      	; 0x8ee <__stack+0x48f>
     8ec:	66 c0       	rjmp	.+204    	; 0x9ba <__stack+0x55b>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	a9 01       	movw	r20, r18
     8f4:	c3 01       	movw	r24, r6
     8f6:	b2 01       	movw	r22, r4
     8f8:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	0c f4       	brge	.+2      	; 0x902 <__stack+0x4a3>
     900:	5c c0       	rjmp	.+184    	; 0x9ba <__stack+0x55b>

					{
						x = sub_function (&old_val_1, value_1);     //call function to extract first step
     902:	b7 01       	movw	r22, r14
     904:	a6 01       	movw	r20, r12
     906:	8e e9       	ldi	r24, 0x9E	; 158
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     90e:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <x>
     912:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <x+0x1>
     916:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <x+0x2>
     91a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <x+0x3>
						y = sub_function (&old_val_2, value_2);    //call function to extract second step
     91e:	b5 01       	movw	r22, r10
     920:	a4 01       	movw	r20, r8
     922:	8a e9       	ldi	r24, 0x9A	; 154
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     92a:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <y>
     92e:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <y+0x1>
     932:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <y+0x2>
     936:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <y+0x3>
						z = sub_function (&old_val_3, value_3);    //call function to extract third step
     93a:	b3 01       	movw	r22, r6
     93c:	a2 01       	movw	r20, r4
     93e:	86 e9       	ldi	r24, 0x96	; 150
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 24 01 	call	0x248	; 0x248 <sub_function>
     946:	2b 01       	movw	r4, r22
     948:	3c 01       	movw	r6, r24
     94a:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <z>
     94e:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <z+0x1>
     952:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <z+0x2>
     956:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <z+0x3>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						while (!(x && y && z == 0));
     95a:	c0 90 a3 00 	lds	r12, 0x00A3	; 0x8000a3 <x>
     95e:	d0 90 a4 00 	lds	r13, 0x00A4	; 0x8000a4 <x+0x1>
     962:	e0 90 a5 00 	lds	r14, 0x00A5	; 0x8000a5 <x+0x2>
     966:	f0 90 a6 00 	lds	r15, 0x00A6	; 0x8000a6 <x+0x3>
     96a:	80 90 c7 00 	lds	r8, 0x00C7	; 0x8000c7 <y>
     96e:	90 90 c8 00 	lds	r9, 0x00C8	; 0x8000c8 <y+0x1>
     972:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <y+0x2>
     976:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <y+0x3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	a9 01       	movw	r20, r18
     980:	c7 01       	movw	r24, r14
     982:	b6 01       	movw	r22, r12
     984:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	b9 f3       	breq	.-18     	; 0x97a <__stack+0x51b>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	a9 01       	movw	r20, r18
     992:	c5 01       	movw	r24, r10
     994:	b4 01       	movw	r22, r8
     996:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     99a:	88 23       	and	r24, r24
     99c:	71 f3       	breq	.-36     	; 0x97a <__stack+0x51b>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	a9 01       	movw	r20, r18
     9a4:	c3 01       	movw	r24, r6
     9a6:	b2 01       	movw	r22, r4
     9a8:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     9ac:	81 11       	cpse	r24, r1
     9ae:	e5 cf       	rjmp	.-54     	; 0x97a <__stack+0x51b>
						Transmit_Data("ok");
     9b0:	80 e7       	ldi	r24, 0x70	; 112
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     9b8:	2d cd       	rjmp	.-1446   	; 0x414 <main+0x8>
					}
				else
				Transmit_Data("error");
     9ba:	8e e8       	ldi	r24, 0x8E	; 142
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Transmit_Data>
     9c2:	28 cd       	rjmp	.-1456   	; 0x414 <main+0x8>
				value_2 = get_value(String,'Y'); //call function to extract second value
				value_3 = get_value(String,'Z'); //call function to extract third value
				E = get_value(String,'E');
				if ((E && value_1 && value_2 && value_3) == 0)
				{
					if (get_value(String,'F') != 0)
     9c4:	66 e4       	ldi	r22, 0x46	; 70
     9c6:	8f ec       	ldi	r24, 0xCF	; 207
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     9d8:	88 23       	and	r24, r24
     9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0x57f>
     9dc:	7c ce       	rjmp	.-776    	; 0x6d6 <__stack+0x277>
     9de:	60 ce       	rjmp	.-832    	; 0x6a0 <__stack+0x241>
						Fe = get_value(String,'F');
					}
				} 
				else
				{
					if (get_value(String,'F') != 0)
     9e0:	66 e4       	ldi	r22, 0x46	; 70
     9e2:	8f ec       	ldi	r24, 0xCF	; 207
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	a9 01       	movw	r20, r18
     9f0:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0x59b>
     9f8:	6e ce       	rjmp	.-804    	; 0x6d6 <__stack+0x277>
     9fa:	60 ce       	rjmp	.-832    	; 0x6bc <__stack+0x25d>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					E = get_value(String,'E');
					if ((E && value_1 && value_2 && value_3) == 0)
					{
						if (get_value(String,'F') != 0)
     9fc:	66 e4       	ldi	r22, 0x46	; 70
     9fe:	8f ec       	ldi	r24, 0xCF	; 207
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 94 00 	call	0x128	; 0x128 <get_value>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a9 01       	movw	r20, r18
     a0c:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <__stack+0x5b7>
     a14:	35 cf       	rjmp	.-406    	; 0x880 <__stack+0x421>
     a16:	27 cf       	rjmp	.-434    	; 0x866 <__stack+0x407>

00000a18 <__vector_9>:
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	Tc = T - 273.15;
	return (Tc);
}
ISR(TIMER0_OVF_vect)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	2f 93       	push	r18
     a2c:	3f 93       	push	r19
     a2e:	4f 93       	push	r20
     a30:	5f 93       	push	r21
     a32:	6f 93       	push	r22
     a34:	7f 93       	push	r23
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	ef 93       	push	r30
     a40:	ff 93       	push	r31
	static uint16_t i = 0;

	if (i < TIME_INTERVAL) 
     a42:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     a46:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     a4a:	8d 39       	cpi	r24, 0x9D	; 157
     a4c:	91 05       	cpc	r25, r1
     a4e:	30 f4       	brcc	.+12     	; 0xa5c <__vector_9+0x44>
	{
		i++;
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
     a56:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
     a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__vector_9+0x56>
		} else {
		gFlags.pidTimer = 1;
     a5c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <gFlags>
		i               = 0;
     a66:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     a6a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
	}
	if (gFlags.pidTimer == 1) 
     a6e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     a72:	80 ff       	sbrs	r24, 0
     a74:	52 c0       	rjmp	.+164    	; 0xb1a <__vector_9+0x102>
	{
		OCR0 =	pid_Controller(SE1,getTemp(T0), &pidData);
     a76:	80 e5       	ldi	r24, 0x50	; 80
     a78:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     a7c:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     a80:	6b 01       	movw	r12, r22
     a82:	7c 01       	movw	r14, r24
     a84:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <SE1>
     a88:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <SE1+0x1>
     a8c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <SE1+0x2>
     a90:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <SE1+0x3>
     a94:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	47 e2       	ldi	r20, 0x27	; 39
     a9e:	51 e0       	ldi	r21, 0x01	; 1
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     aa6:	8c bf       	out	0x3c, r24	; 60
		OCR1A = pid_Controller(SE2,getTemp(T2), &pidData);
     aa8:	82 e5       	ldi	r24, 0x52	; 82
     aaa:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     aae:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
     ab6:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <SE2>
     aba:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <SE2+0x1>
     abe:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <SE2+0x2>
     ac2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <SE2+0x3>
     ac6:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	47 e2       	ldi	r20, 0x27	; 39
     ad0:	51 e0       	ldi	r21, 0x01	; 1
     ad2:	b6 01       	movw	r22, r12
     ad4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     ad8:	9b bd       	out	0x2b, r25	; 43
     ada:	8a bd       	out	0x2a, r24	; 42
		OCR1B = pid_Controller(SB,getTemp(T3), &pidData);
     adc:	83 e5       	ldi	r24, 0x53	; 83
     ade:	0e 94 6f 01 	call	0x2de	; 0x2de <getTemp>
     ae2:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     ae6:	6b 01       	movw	r12, r22
     ae8:	7c 01       	movw	r14, r24
     aea:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <SB>
     aee:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <SB+0x1>
     af2:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <SB+0x2>
     af6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <SB+0x3>
     afa:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixsfsi>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	47 e2       	ldi	r20, 0x27	; 39
     b04:	51 e0       	ldi	r21, 0x01	; 1
     b06:	b6 01       	movw	r22, r12
     b08:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pid_Controller>
     b0c:	99 bd       	out	0x29, r25	; 41
     b0e:	88 bd       	out	0x28, r24	; 40
		gFlags.pidTimer = FALSE;
     b10:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gFlags>
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <gFlags>
	}
	
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <pid_Init>:
 *  \param i_factor  Integral term.
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
{
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	fb 01       	movw	r30, r22
     b4a:	e9 01       	movw	r28, r18
	// Start values for PID controller
	pid->sumError         = 0;
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	1b 82       	std	Y+3, r1	; 0x03
     b50:	1c 82       	std	Y+4, r1	; 0x04
     b52:	1d 82       	std	Y+5, r1	; 0x05
	pid->lastProcessValue = 0;
     b54:	19 82       	std	Y+1, r1	; 0x01
     b56:	18 82       	st	Y, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
     b58:	9f 83       	std	Y+7, r25	; 0x07
     b5a:	8e 83       	std	Y+6, r24	; 0x06
	pid->I_Factor = i_factor;
     b5c:	79 87       	std	Y+9, r23	; 0x09
     b5e:	68 87       	std	Y+8, r22	; 0x08
	pid->D_Factor = d_factor;
     b60:	5b 87       	std	Y+11, r21	; 0x0b
     b62:	4a 87       	std	Y+10, r20	; 0x0a
	// Limits to avoid overflow
	pid->maxError    = MAX_INT / (pid->P_Factor + 1);
     b64:	bc 01       	movw	r22, r24
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	9f e7       	ldi	r25, 0x7F	; 127
     b6e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__divmodhi4>
     b72:	7d 87       	std	Y+13, r23	; 0x0d
     b74:	6c 87       	std	Y+12, r22	; 0x0c
	pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
     b76:	9f 01       	movw	r18, r30
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	03 2e       	mov	r0, r19
     b7e:	00 0c       	add	r0, r0
     b80:	44 0b       	sbc	r20, r20
     b82:	55 0b       	sbc	r21, r21
     b84:	6f ef       	ldi	r22, 0xFF	; 255
     b86:	7f ef       	ldi	r23, 0xFF	; 255
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	9f e3       	ldi	r25, 0x3F	; 63
     b8c:	0e 94 8e 09 	call	0x131c	; 0x131c <__divmodsi4>
     b90:	2e 87       	std	Y+14, r18	; 0x0e
     b92:	3f 87       	std	Y+15, r19	; 0x0f
     b94:	48 8b       	std	Y+16, r20	; 0x10
     b96:	59 8b       	std	Y+17, r21	; 0x11
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	8b 01       	movw	r16, r22
     bac:	fa 01       	movw	r30, r20
	int16_t errors, p_term, d_term;
	int32_t i_term, ret, temp;

	errors = setPoint - processValue;
     bae:	86 1b       	sub	r24, r22
     bb0:	97 0b       	sbc	r25, r23

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
     bb2:	24 85       	ldd	r18, Z+12	; 0x0c
     bb4:	35 85       	ldd	r19, Z+13	; 0x0d
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	84 f0       	brlt	.+32     	; 0xbdc <pid_Controller+0x3e>
		p_term = MAX_INT;
	} else if (errors < -pid_st->maxError) {
     bbc:	31 95       	neg	r19
     bbe:	21 95       	neg	r18
     bc0:	31 09       	sbc	r19, r1
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	6c f0       	brlt	.+26     	; 0xbe2 <pid_Controller+0x44>
		p_term = -MAX_INT;
	} else {
		p_term = pid_st->P_Factor * errors;
     bc8:	26 81       	ldd	r18, Z+6	; 0x06
     bca:	37 81       	ldd	r19, Z+7	; 0x07
     bcc:	82 9f       	mul	r24, r18
     bce:	e0 01       	movw	r28, r0
     bd0:	83 9f       	mul	r24, r19
     bd2:	d0 0d       	add	r29, r0
     bd4:	92 9f       	mul	r25, r18
     bd6:	d0 0d       	add	r29, r0
     bd8:	11 24       	eor	r1, r1
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <pid_Controller+0x48>

	errors = setPoint - processValue;

	// Calculate Pterm and limit error overflow
	if (errors > pid_st->maxError) {
		p_term = MAX_INT;
     bdc:	cf ef       	ldi	r28, 0xFF	; 255
     bde:	df e7       	ldi	r29, 0x7F	; 127
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <pid_Controller+0x48>
	} else if (errors < -pid_st->maxError) {
		p_term = -MAX_INT;
     be2:	c1 e0       	ldi	r28, 0x01	; 1
     be4:	d0 e8       	ldi	r29, 0x80	; 128
	} else {
		p_term = pid_st->P_Factor * errors;
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
     be6:	09 2e       	mov	r0, r25
     be8:	00 0c       	add	r0, r0
     bea:	aa 0b       	sbc	r26, r26
     bec:	bb 0b       	sbc	r27, r27
     bee:	42 81       	ldd	r20, Z+2	; 0x02
     bf0:	53 81       	ldd	r21, Z+3	; 0x03
     bf2:	64 81       	ldd	r22, Z+4	; 0x04
     bf4:	75 81       	ldd	r23, Z+5	; 0x05
     bf6:	9a 01       	movw	r18, r20
     bf8:	ab 01       	movw	r20, r22
     bfa:	28 0f       	add	r18, r24
     bfc:	39 1f       	adc	r19, r25
     bfe:	4a 1f       	adc	r20, r26
     c00:	5b 1f       	adc	r21, r27
	if (temp > pid_st->maxSumError) {
     c02:	86 85       	ldd	r24, Z+14	; 0x0e
     c04:	97 85       	ldd	r25, Z+15	; 0x0f
     c06:	a0 89       	ldd	r26, Z+16	; 0x10
     c08:	b1 89       	ldd	r27, Z+17	; 0x11
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	a4 07       	cpc	r26, r20
     c10:	b5 07       	cpc	r27, r21
     c12:	4c f4       	brge	.+18     	; 0xc26 <pid_Controller+0x88>
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
     c14:	82 83       	std	Z+2, r24	; 0x02
     c16:	93 83       	std	Z+3, r25	; 0x03
     c18:	a4 83       	std	Z+4, r26	; 0x04
     c1a:	b5 83       	std	Z+5, r27	; 0x05
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	7f ef       	ldi	r23, 0xFF	; 255
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	9f e3       	ldi	r25, 0x3F	; 63
     c24:	1d c0       	rjmp	.+58     	; 0xc60 <pid_Controller+0xc2>
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
     c26:	b0 95       	com	r27
     c28:	a0 95       	com	r26
     c2a:	90 95       	com	r25
     c2c:	81 95       	neg	r24
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	af 4f       	sbci	r26, 0xFF	; 255
     c32:	bf 4f       	sbci	r27, 0xFF	; 255
     c34:	28 17       	cp	r18, r24
     c36:	39 07       	cpc	r19, r25
     c38:	4a 07       	cpc	r20, r26
     c3a:	5b 07       	cpc	r21, r27
     c3c:	4c f4       	brge	.+18     	; 0xc50 <pid_Controller+0xb2>
		i_term           = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
     c3e:	82 83       	std	Z+2, r24	; 0x02
     c40:	93 83       	std	Z+3, r25	; 0x03
     c42:	a4 83       	std	Z+4, r26	; 0x04
     c44:	b5 83       	std	Z+5, r27	; 0x05
	temp = pid_st->sumError + errors;
	if (temp > pid_st->maxSumError) {
		i_term           = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	} else if (temp < -pid_st->maxSumError) {
		i_term           = -MAX_I_TERM;
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 ec       	ldi	r25, 0xC0	; 192
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <pid_Controller+0xc2>
		pid_st->sumError = -pid_st->maxSumError;
	} else {
		pid_st->sumError = temp;
     c50:	22 83       	std	Z+2, r18	; 0x02
     c52:	33 83       	std	Z+3, r19	; 0x03
     c54:	44 83       	std	Z+4, r20	; 0x04
     c56:	55 83       	std	Z+5, r21	; 0x05
		i_term           = pid_st->I_Factor * pid_st->sumError;
     c58:	a0 85       	ldd	r26, Z+8	; 0x08
     c5a:	b1 85       	ldd	r27, Z+9	; 0x09
     c5c:	0e 94 ad 09 	call	0x135a	; 0x135a <__mulshisi3>
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	20 1b       	sub	r18, r16
     c66:	31 0b       	sbc	r19, r17
     c68:	a2 85       	ldd	r26, Z+10	; 0x0a
     c6a:	b3 85       	ldd	r27, Z+11	; 0x0b
     c6c:	2a 9f       	mul	r18, r26
     c6e:	70 01       	movw	r14, r0
     c70:	2b 9f       	mul	r18, r27
     c72:	f0 0c       	add	r15, r0
     c74:	3a 9f       	mul	r19, r26
     c76:	f0 0c       	add	r15, r0
     c78:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
     c7a:	11 83       	std	Z+1, r17	; 0x01
     c7c:	00 83       	st	Z, r16

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     c7e:	8e 01       	movw	r16, r28
     c80:	dd 0f       	add	r29, r29
     c82:	22 0b       	sbc	r18, r18
     c84:	33 0b       	sbc	r19, r19
     c86:	ab 01       	movw	r20, r22
     c88:	bc 01       	movw	r22, r24
     c8a:	40 0f       	add	r20, r16
     c8c:	51 1f       	adc	r21, r17
     c8e:	62 1f       	adc	r22, r18
     c90:	73 1f       	adc	r23, r19
     c92:	c7 01       	movw	r24, r14
     c94:	ff 0c       	add	r15, r15
     c96:	aa 0b       	sbc	r26, r26
     c98:	bb 0b       	sbc	r27, r27
     c9a:	48 0f       	add	r20, r24
     c9c:	59 1f       	adc	r21, r25
     c9e:	6a 1f       	adc	r22, r26
     ca0:	7b 1f       	adc	r23, r27
     ca2:	db 01       	movw	r26, r22
     ca4:	ca 01       	movw	r24, r20
     ca6:	77 23       	and	r23, r23
     ca8:	24 f4       	brge	.+8      	; 0xcb2 <pid_Controller+0x114>
     caa:	81 58       	subi	r24, 0x81	; 129
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	af 4f       	sbci	r26, 0xFF	; 255
     cb0:	bf 4f       	sbci	r27, 0xFF	; 255
     cb2:	68 94       	set
     cb4:	16 f8       	bld	r1, 6
     cb6:	b5 95       	asr	r27
     cb8:	a7 95       	ror	r26
     cba:	97 95       	ror	r25
     cbc:	87 95       	ror	r24
     cbe:	16 94       	lsr	r1
     cc0:	d1 f7       	brne	.-12     	; 0xcb6 <pid_Controller+0x118>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	20 e8       	ldi	r18, 0x80	; 128
     cc6:	92 07       	cpc	r25, r18
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	a2 07       	cpc	r26, r18
     ccc:	b2 07       	cpc	r27, r18
     cce:	24 f4       	brge	.+8      	; 0xcd8 <pid_Controller+0x13a>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e8       	ldi	r25, 0x80	; 128
     cd4:	af ef       	ldi	r26, 0xFF	; 255
     cd6:	bf ef       	ldi	r27, 0xFF	; 255
		ret = MAX_INT;
	} else if (ret < -MAX_INT) {
		ret = -MAX_INT;
	}

	return ((int16_t)ret);
     cd8:	81 15       	cp	r24, r1
     cda:	20 e8       	ldi	r18, 0x80	; 128
     cdc:	92 07       	cpc	r25, r18
     cde:	a1 05       	cpc	r26, r1
     ce0:	b1 05       	cpc	r27, r1
     ce2:	24 f0       	brlt	.+8      	; 0xcec <pid_Controller+0x14e>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	9f e7       	ldi	r25, 0x7F	; 127
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
}
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	08 95       	ret

00000cfa <UART_INIT>:

void UART_INIT()
{
	long t;
	t =Crystal();
	UBRRL =  (uint8_t) (t);
     cfa:	87 e6       	ldi	r24, 0x67	; 103
     cfc:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(t>>8);
     cfe:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
     d00:	88 e1       	ldi	r24, 0x18	; 24
     d02:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
     d04:	86 e8       	ldi	r24, 0x86	; 134
     d06:	80 bd       	out	0x20, r24	; 32
     d08:	08 95       	ret

00000d0a <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (!(UCSRA & (1<<5)));    //waits until 'bin 5' equal to 1, becomes Empty.
     d0a:	5d 9b       	sbis	0x0b, 5	; 11
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
     d0e:	8c b9       	out	0x0c, r24	; 12
     d10:	08 95       	ret

00000d12 <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
     d12:	5f 9b       	sbis	0x0b, 7	; 11
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <Recive_Char>
	return(UDR); 
     d16:	8c b1       	in	r24, 0x0c	; 12
}
     d18:	08 95       	ret

00000d1a <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
	while(*ptr_string)
     d20:	88 81       	ld	r24, Y
     d22:	88 23       	and	r24, r24
     d24:	31 f0       	breq	.+12     	; 0xd32 <Transmit_Data+0x18>
     d26:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
     d28:	0e 94 85 06 	call	0xd0a	; 0xd0a <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
     d2c:	89 91       	ld	r24, Y+
     d2e:	81 11       	cpse	r24, r1
     d30:	fb cf       	rjmp	.-10     	; 0xd28 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
     d40:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
     d42:	0e 94 89 06 	call	0xd12	; 0xd12 <Recive_Char>
	 		if(( ch == '\n') || (ch == '\r')) //read till enter key is pressed
     d46:	8a 30       	cpi	r24, 0x0A	; 10
     d48:	11 f0       	breq	.+4      	; 0xd4e <Recive_Data+0x16>
     d4a:	8d 30       	cpi	r24, 0x0D	; 13
     d4c:	31 f4       	brne	.+12     	; 0xd5a <Recive_Data+0x22>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
     d4e:	f8 01       	movw	r30, r16
     d50:	ec 0f       	add	r30, r28
     d52:	f1 1d       	adc	r31, r1
     d54:	80 e2       	ldi	r24, 0x20	; 32
     d56:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <Recive_Data+0x2e>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
     d5a:	f8 01       	movw	r30, r16
     d5c:	ec 0f       	add	r30, r28
     d5e:	f1 1d       	adc	r31, r1
     d60:	80 83       	st	Z, r24
     d62:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
     d64:	ee cf       	rjmp	.-36     	; 0xd42 <Recive_Data+0xa>
}
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <__subsf3>:
     d6e:	50 58       	subi	r21, 0x80	; 128

00000d70 <__addsf3>:
     d70:	bb 27       	eor	r27, r27
     d72:	aa 27       	eor	r26, r26
     d74:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__addsf3x>
     d78:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_round>
     d7c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
     d80:	38 f0       	brcs	.+14     	; 0xd90 <__addsf3+0x20>
     d82:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
     d86:	20 f0       	brcs	.+8      	; 0xd90 <__addsf3+0x20>
     d88:	39 f4       	brne	.+14     	; 0xd98 <__addsf3+0x28>
     d8a:	9f 3f       	cpi	r25, 0xFF	; 255
     d8c:	19 f4       	brne	.+6      	; 0xd94 <__addsf3+0x24>
     d8e:	26 f4       	brtc	.+8      	; 0xd98 <__addsf3+0x28>
     d90:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
     d94:	0e f4       	brtc	.+2      	; 0xd98 <__addsf3+0x28>
     d96:	e0 95       	com	r30
     d98:	e7 fb       	bst	r30, 7
     d9a:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>

00000d9e <__addsf3x>:
     d9e:	e9 2f       	mov	r30, r25
     da0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_split3>
     da4:	58 f3       	brcs	.-42     	; 0xd7c <__addsf3+0xc>
     da6:	ba 17       	cp	r27, r26
     da8:	62 07       	cpc	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	95 07       	cpc	r25, r21
     db0:	20 f0       	brcs	.+8      	; 0xdba <__addsf3x+0x1c>
     db2:	79 f4       	brne	.+30     	; 0xdd2 <__addsf3x+0x34>
     db4:	a6 f5       	brtc	.+104    	; 0xe1e <__addsf3x+0x80>
     db6:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_zero>
     dba:	0e f4       	brtc	.+2      	; 0xdbe <__addsf3x+0x20>
     dbc:	e0 95       	com	r30
     dbe:	0b 2e       	mov	r0, r27
     dc0:	ba 2f       	mov	r27, r26
     dc2:	a0 2d       	mov	r26, r0
     dc4:	0b 01       	movw	r0, r22
     dc6:	b9 01       	movw	r22, r18
     dc8:	90 01       	movw	r18, r0
     dca:	0c 01       	movw	r0, r24
     dcc:	ca 01       	movw	r24, r20
     dce:	a0 01       	movw	r20, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	ff 27       	eor	r31, r31
     dd4:	59 1b       	sub	r21, r25
     dd6:	99 f0       	breq	.+38     	; 0xdfe <__addsf3x+0x60>
     dd8:	59 3f       	cpi	r21, 0xF9	; 249
     dda:	50 f4       	brcc	.+20     	; 0xdf0 <__addsf3x+0x52>
     ddc:	50 3e       	cpi	r21, 0xE0	; 224
     dde:	68 f1       	brcs	.+90     	; 0xe3a <__addsf3x+0x9c>
     de0:	1a 16       	cp	r1, r26
     de2:	f0 40       	sbci	r31, 0x00	; 0
     de4:	a2 2f       	mov	r26, r18
     de6:	23 2f       	mov	r18, r19
     de8:	34 2f       	mov	r19, r20
     dea:	44 27       	eor	r20, r20
     dec:	58 5f       	subi	r21, 0xF8	; 248
     dee:	f3 cf       	rjmp	.-26     	; 0xdd6 <__addsf3x+0x38>
     df0:	46 95       	lsr	r20
     df2:	37 95       	ror	r19
     df4:	27 95       	ror	r18
     df6:	a7 95       	ror	r26
     df8:	f0 40       	sbci	r31, 0x00	; 0
     dfa:	53 95       	inc	r21
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__addsf3x+0x52>
     dfe:	7e f4       	brtc	.+30     	; 0xe1e <__addsf3x+0x80>
     e00:	1f 16       	cp	r1, r31
     e02:	ba 0b       	sbc	r27, r26
     e04:	62 0b       	sbc	r22, r18
     e06:	73 0b       	sbc	r23, r19
     e08:	84 0b       	sbc	r24, r20
     e0a:	ba f0       	brmi	.+46     	; 0xe3a <__addsf3x+0x9c>
     e0c:	91 50       	subi	r25, 0x01	; 1
     e0e:	a1 f0       	breq	.+40     	; 0xe38 <__addsf3x+0x9a>
     e10:	ff 0f       	add	r31, r31
     e12:	bb 1f       	adc	r27, r27
     e14:	66 1f       	adc	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	88 1f       	adc	r24, r24
     e1a:	c2 f7       	brpl	.-16     	; 0xe0c <__addsf3x+0x6e>
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <__addsf3x+0x9c>
     e1e:	ba 0f       	add	r27, r26
     e20:	62 1f       	adc	r22, r18
     e22:	73 1f       	adc	r23, r19
     e24:	84 1f       	adc	r24, r20
     e26:	48 f4       	brcc	.+18     	; 0xe3a <__addsf3x+0x9c>
     e28:	87 95       	ror	r24
     e2a:	77 95       	ror	r23
     e2c:	67 95       	ror	r22
     e2e:	b7 95       	ror	r27
     e30:	f7 95       	ror	r31
     e32:	9e 3f       	cpi	r25, 0xFE	; 254
     e34:	08 f0       	brcs	.+2      	; 0xe38 <__addsf3x+0x9a>
     e36:	b0 cf       	rjmp	.-160    	; 0xd98 <__addsf3+0x28>
     e38:	93 95       	inc	r25
     e3a:	88 0f       	add	r24, r24
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <__addsf3x+0xa2>
     e3e:	99 27       	eor	r25, r25
     e40:	ee 0f       	add	r30, r30
     e42:	97 95       	ror	r25
     e44:	87 95       	ror	r24
     e46:	08 95       	ret

00000e48 <__cmpsf2>:
     e48:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_cmp>
     e4c:	08 f4       	brcc	.+2      	; 0xe50 <__cmpsf2+0x8>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	08 95       	ret

00000e52 <__divsf3>:
     e52:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__divsf3x>
     e56:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_round>
     e5a:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
     e5e:	58 f0       	brcs	.+22     	; 0xe76 <__divsf3+0x24>
     e60:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
     e64:	40 f0       	brcs	.+16     	; 0xe76 <__divsf3+0x24>
     e66:	29 f4       	brne	.+10     	; 0xe72 <__divsf3+0x20>
     e68:	5f 3f       	cpi	r21, 0xFF	; 255
     e6a:	29 f0       	breq	.+10     	; 0xe76 <__divsf3+0x24>
     e6c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
     e70:	51 11       	cpse	r21, r1
     e72:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_szero>
     e76:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>

00000e7a <__divsf3x>:
     e7a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_split3>
     e7e:	68 f3       	brcs	.-38     	; 0xe5a <__divsf3+0x8>

00000e80 <__divsf3_pse>:
     e80:	99 23       	and	r25, r25
     e82:	b1 f3       	breq	.-20     	; 0xe70 <__divsf3+0x1e>
     e84:	55 23       	and	r21, r21
     e86:	91 f3       	breq	.-28     	; 0xe6c <__divsf3+0x1a>
     e88:	95 1b       	sub	r25, r21
     e8a:	55 0b       	sbc	r21, r21
     e8c:	bb 27       	eor	r27, r27
     e8e:	aa 27       	eor	r26, r26
     e90:	62 17       	cp	r22, r18
     e92:	73 07       	cpc	r23, r19
     e94:	84 07       	cpc	r24, r20
     e96:	38 f0       	brcs	.+14     	; 0xea6 <__divsf3_pse+0x26>
     e98:	9f 5f       	subi	r25, 0xFF	; 255
     e9a:	5f 4f       	sbci	r21, 0xFF	; 255
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	44 1f       	adc	r20, r20
     ea2:	aa 1f       	adc	r26, r26
     ea4:	a9 f3       	breq	.-22     	; 0xe90 <__divsf3_pse+0x10>
     ea6:	35 d0       	rcall	.+106    	; 0xf12 <__divsf3_pse+0x92>
     ea8:	0e 2e       	mov	r0, r30
     eaa:	3a f0       	brmi	.+14     	; 0xeba <__divsf3_pse+0x3a>
     eac:	e0 e8       	ldi	r30, 0x80	; 128
     eae:	32 d0       	rcall	.+100    	; 0xf14 <__divsf3_pse+0x94>
     eb0:	91 50       	subi	r25, 0x01	; 1
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	e6 95       	lsr	r30
     eb6:	00 1c       	adc	r0, r0
     eb8:	ca f7       	brpl	.-14     	; 0xeac <__divsf3_pse+0x2c>
     eba:	2b d0       	rcall	.+86     	; 0xf12 <__divsf3_pse+0x92>
     ebc:	fe 2f       	mov	r31, r30
     ebe:	29 d0       	rcall	.+82     	; 0xf12 <__divsf3_pse+0x92>
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	bb 1f       	adc	r27, r27
     ec8:	26 17       	cp	r18, r22
     eca:	37 07       	cpc	r19, r23
     ecc:	48 07       	cpc	r20, r24
     ece:	ab 07       	cpc	r26, r27
     ed0:	b0 e8       	ldi	r27, 0x80	; 128
     ed2:	09 f0       	breq	.+2      	; 0xed6 <__divsf3_pse+0x56>
     ed4:	bb 0b       	sbc	r27, r27
     ed6:	80 2d       	mov	r24, r0
     ed8:	bf 01       	movw	r22, r30
     eda:	ff 27       	eor	r31, r31
     edc:	93 58       	subi	r25, 0x83	; 131
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	3a f0       	brmi	.+14     	; 0xef0 <__divsf3_pse+0x70>
     ee2:	9e 3f       	cpi	r25, 0xFE	; 254
     ee4:	51 05       	cpc	r21, r1
     ee6:	78 f0       	brcs	.+30     	; 0xf06 <__divsf3_pse+0x86>
     ee8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
     eec:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_szero>
     ef0:	5f 3f       	cpi	r21, 0xFF	; 255
     ef2:	e4 f3       	brlt	.-8      	; 0xeec <__divsf3_pse+0x6c>
     ef4:	98 3e       	cpi	r25, 0xE8	; 232
     ef6:	d4 f3       	brlt	.-12     	; 0xeec <__divsf3_pse+0x6c>
     ef8:	86 95       	lsr	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b7 95       	ror	r27
     f00:	f7 95       	ror	r31
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__divsf3_pse+0x78>
     f06:	88 0f       	add	r24, r24
     f08:	91 1d       	adc	r25, r1
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret
     f12:	e1 e0       	ldi	r30, 0x01	; 1
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	62 17       	cp	r22, r18
     f1e:	73 07       	cpc	r23, r19
     f20:	84 07       	cpc	r24, r20
     f22:	ba 07       	cpc	r27, r26
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__divsf3_pse+0xae>
     f26:	62 1b       	sub	r22, r18
     f28:	73 0b       	sbc	r23, r19
     f2a:	84 0b       	sbc	r24, r20
     f2c:	ba 0b       	sbc	r27, r26
     f2e:	ee 1f       	adc	r30, r30
     f30:	88 f7       	brcc	.-30     	; 0xf14 <__divsf3_pse+0x94>
     f32:	e0 95       	com	r30
     f34:	08 95       	ret

00000f36 <__fixsfsi>:
     f36:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     f3a:	68 94       	set
     f3c:	b1 11       	cpse	r27, r1
     f3e:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_szero>
     f42:	08 95       	ret

00000f44 <__fixunssfsi>:
     f44:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_splitA>
     f48:	88 f0       	brcs	.+34     	; 0xf6c <__fixunssfsi+0x28>
     f4a:	9f 57       	subi	r25, 0x7F	; 127
     f4c:	98 f0       	brcs	.+38     	; 0xf74 <__fixunssfsi+0x30>
     f4e:	b9 2f       	mov	r27, r25
     f50:	99 27       	eor	r25, r25
     f52:	b7 51       	subi	r27, 0x17	; 23
     f54:	b0 f0       	brcs	.+44     	; 0xf82 <__fixunssfsi+0x3e>
     f56:	e1 f0       	breq	.+56     	; 0xf90 <__fixunssfsi+0x4c>
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	1a f0       	brmi	.+6      	; 0xf68 <__fixunssfsi+0x24>
     f62:	ba 95       	dec	r27
     f64:	c9 f7       	brne	.-14     	; 0xf58 <__fixunssfsi+0x14>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <__fixunssfsi+0x4c>
     f68:	b1 30       	cpi	r27, 0x01	; 1
     f6a:	91 f0       	breq	.+36     	; 0xf90 <__fixunssfsi+0x4c>
     f6c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_zero>
     f70:	b1 e0       	ldi	r27, 0x01	; 1
     f72:	08 95       	ret
     f74:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_zero>
     f78:	67 2f       	mov	r22, r23
     f7a:	78 2f       	mov	r23, r24
     f7c:	88 27       	eor	r24, r24
     f7e:	b8 5f       	subi	r27, 0xF8	; 248
     f80:	39 f0       	breq	.+14     	; 0xf90 <__fixunssfsi+0x4c>
     f82:	b9 3f       	cpi	r27, 0xF9	; 249
     f84:	cc f3       	brlt	.-14     	; 0xf78 <__fixunssfsi+0x34>
     f86:	86 95       	lsr	r24
     f88:	77 95       	ror	r23
     f8a:	67 95       	ror	r22
     f8c:	b3 95       	inc	r27
     f8e:	d9 f7       	brne	.-10     	; 0xf86 <__fixunssfsi+0x42>
     f90:	3e f4       	brtc	.+14     	; 0xfa0 <__fixunssfsi+0x5c>
     f92:	90 95       	com	r25
     f94:	80 95       	com	r24
     f96:	70 95       	com	r23
     f98:	61 95       	neg	r22
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	08 95       	ret

00000fa2 <__floatunsisf>:
     fa2:	e8 94       	clt
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <__floatsisf+0x12>

00000fa6 <__floatsisf>:
     fa6:	97 fb       	bst	r25, 7
     fa8:	3e f4       	brtc	.+14     	; 0xfb8 <__floatsisf+0x12>
     faa:	90 95       	com	r25
     fac:	80 95       	com	r24
     fae:	70 95       	com	r23
     fb0:	61 95       	neg	r22
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	99 23       	and	r25, r25
     fba:	a9 f0       	breq	.+42     	; 0xfe6 <__floatsisf+0x40>
     fbc:	f9 2f       	mov	r31, r25
     fbe:	96 e9       	ldi	r25, 0x96	; 150
     fc0:	bb 27       	eor	r27, r27
     fc2:	93 95       	inc	r25
     fc4:	f6 95       	lsr	r31
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f1 11       	cpse	r31, r1
     fd0:	f8 cf       	rjmp	.-16     	; 0xfc2 <__floatsisf+0x1c>
     fd2:	fa f4       	brpl	.+62     	; 0x1012 <__floatsisf+0x6c>
     fd4:	bb 0f       	add	r27, r27
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__floatsisf+0x36>
     fd8:	60 ff       	sbrs	r22, 0
     fda:	1b c0       	rjmp	.+54     	; 0x1012 <__floatsisf+0x6c>
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	16 c0       	rjmp	.+44     	; 0x1012 <__floatsisf+0x6c>
     fe6:	88 23       	and	r24, r24
     fe8:	11 f0       	breq	.+4      	; 0xfee <__floatsisf+0x48>
     fea:	96 e9       	ldi	r25, 0x96	; 150
     fec:	11 c0       	rjmp	.+34     	; 0x1010 <__floatsisf+0x6a>
     fee:	77 23       	and	r23, r23
     ff0:	21 f0       	breq	.+8      	; 0xffa <__floatsisf+0x54>
     ff2:	9e e8       	ldi	r25, 0x8E	; 142
     ff4:	87 2f       	mov	r24, r23
     ff6:	76 2f       	mov	r23, r22
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__floatsisf+0x5e>
     ffa:	66 23       	and	r22, r22
     ffc:	71 f0       	breq	.+28     	; 0x101a <__floatsisf+0x74>
     ffe:	96 e8       	ldi	r25, 0x86	; 134
    1000:	86 2f       	mov	r24, r22
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	2a f0       	brmi	.+10     	; 0x1012 <__floatsisf+0x6c>
    1008:	9a 95       	dec	r25
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	da f7       	brpl	.-10     	; 0x1008 <__floatsisf+0x62>
    1012:	88 0f       	add	r24, r24
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret

0000101c <__fp_cmp>:
    101c:	99 0f       	add	r25, r25
    101e:	00 08       	sbc	r0, r0
    1020:	55 0f       	add	r21, r21
    1022:	aa 0b       	sbc	r26, r26
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	fe ef       	ldi	r31, 0xFE	; 254
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	e8 07       	cpc	r30, r24
    102e:	f9 07       	cpc	r31, r25
    1030:	c0 f0       	brcs	.+48     	; 0x1062 <__fp_cmp+0x46>
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	e4 07       	cpc	r30, r20
    1038:	f5 07       	cpc	r31, r21
    103a:	98 f0       	brcs	.+38     	; 0x1062 <__fp_cmp+0x46>
    103c:	62 1b       	sub	r22, r18
    103e:	73 0b       	sbc	r23, r19
    1040:	84 0b       	sbc	r24, r20
    1042:	95 0b       	sbc	r25, r21
    1044:	39 f4       	brne	.+14     	; 0x1054 <__fp_cmp+0x38>
    1046:	0a 26       	eor	r0, r26
    1048:	61 f0       	breq	.+24     	; 0x1062 <__fp_cmp+0x46>
    104a:	23 2b       	or	r18, r19
    104c:	24 2b       	or	r18, r20
    104e:	25 2b       	or	r18, r21
    1050:	21 f4       	brne	.+8      	; 0x105a <__fp_cmp+0x3e>
    1052:	08 95       	ret
    1054:	0a 26       	eor	r0, r26
    1056:	09 f4       	brne	.+2      	; 0x105a <__fp_cmp+0x3e>
    1058:	a1 40       	sbci	r26, 0x01	; 1
    105a:	a6 95       	lsr	r26
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	81 1d       	adc	r24, r1
    1060:	81 1d       	adc	r24, r1
    1062:	08 95       	ret

00001064 <__fp_inf>:
    1064:	97 f9       	bld	r25, 7
    1066:	9f 67       	ori	r25, 0x7F	; 127
    1068:	80 e8       	ldi	r24, 0x80	; 128
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	08 95       	ret

00001070 <__fp_nan>:
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	80 ec       	ldi	r24, 0xC0	; 192
    1074:	08 95       	ret

00001076 <__fp_pscA>:
    1076:	00 24       	eor	r0, r0
    1078:	0a 94       	dec	r0
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	18 06       	cpc	r1, r24
    1080:	09 06       	cpc	r0, r25
    1082:	08 95       	ret

00001084 <__fp_pscB>:
    1084:	00 24       	eor	r0, r0
    1086:	0a 94       	dec	r0
    1088:	12 16       	cp	r1, r18
    108a:	13 06       	cpc	r1, r19
    108c:	14 06       	cpc	r1, r20
    108e:	05 06       	cpc	r0, r21
    1090:	08 95       	ret

00001092 <__fp_round>:
    1092:	09 2e       	mov	r0, r25
    1094:	03 94       	inc	r0
    1096:	00 0c       	add	r0, r0
    1098:	11 f4       	brne	.+4      	; 0x109e <__fp_round+0xc>
    109a:	88 23       	and	r24, r24
    109c:	52 f0       	brmi	.+20     	; 0x10b2 <__fp_round+0x20>
    109e:	bb 0f       	add	r27, r27
    10a0:	40 f4       	brcc	.+16     	; 0x10b2 <__fp_round+0x20>
    10a2:	bf 2b       	or	r27, r31
    10a4:	11 f4       	brne	.+4      	; 0x10aa <__fp_round+0x18>
    10a6:	60 ff       	sbrs	r22, 0
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <__fp_round+0x20>
    10aa:	6f 5f       	subi	r22, 0xFF	; 255
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	08 95       	ret

000010b4 <__fp_split3>:
    10b4:	57 fd       	sbrc	r21, 7
    10b6:	90 58       	subi	r25, 0x80	; 128
    10b8:	44 0f       	add	r20, r20
    10ba:	55 1f       	adc	r21, r21
    10bc:	59 f0       	breq	.+22     	; 0x10d4 <__fp_splitA+0x10>
    10be:	5f 3f       	cpi	r21, 0xFF	; 255
    10c0:	71 f0       	breq	.+28     	; 0x10de <__fp_splitA+0x1a>
    10c2:	47 95       	ror	r20

000010c4 <__fp_splitA>:
    10c4:	88 0f       	add	r24, r24
    10c6:	97 fb       	bst	r25, 7
    10c8:	99 1f       	adc	r25, r25
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <__fp_splitA+0x20>
    10cc:	9f 3f       	cpi	r25, 0xFF	; 255
    10ce:	79 f0       	breq	.+30     	; 0x10ee <__fp_splitA+0x2a>
    10d0:	87 95       	ror	r24
    10d2:	08 95       	ret
    10d4:	12 16       	cp	r1, r18
    10d6:	13 06       	cpc	r1, r19
    10d8:	14 06       	cpc	r1, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	f2 cf       	rjmp	.-28     	; 0x10c2 <__fp_split3+0xe>
    10de:	46 95       	lsr	r20
    10e0:	f1 df       	rcall	.-30     	; 0x10c4 <__fp_splitA>
    10e2:	08 c0       	rjmp	.+16     	; 0x10f4 <__fp_splitA+0x30>
    10e4:	16 16       	cp	r1, r22
    10e6:	17 06       	cpc	r1, r23
    10e8:	18 06       	cpc	r1, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	f1 cf       	rjmp	.-30     	; 0x10d0 <__fp_splitA+0xc>
    10ee:	86 95       	lsr	r24
    10f0:	71 05       	cpc	r23, r1
    10f2:	61 05       	cpc	r22, r1
    10f4:	08 94       	sec
    10f6:	08 95       	ret

000010f8 <__fp_zero>:
    10f8:	e8 94       	clt

000010fa <__fp_szero>:
    10fa:	bb 27       	eor	r27, r27
    10fc:	66 27       	eor	r22, r22
    10fe:	77 27       	eor	r23, r23
    1100:	cb 01       	movw	r24, r22
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret

00001106 <__gesf2>:
    1106:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_cmp>
    110a:	08 f4       	brcc	.+2      	; 0x110e <__gesf2+0x8>
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	08 95       	ret
    1110:	16 f0       	brts	.+4      	; 0x1116 <__gesf2+0x10>
    1112:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_mpack>
    1116:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
    111a:	68 94       	set
    111c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>

00001120 <log>:
    1120:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_splitA>
    1124:	a8 f3       	brcs	.-22     	; 0x1110 <__gesf2+0xa>
    1126:	99 23       	and	r25, r25
    1128:	c1 f3       	breq	.-16     	; 0x111a <__gesf2+0x14>
    112a:	ae f3       	brts	.-22     	; 0x1116 <__gesf2+0x10>
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	1f 93       	push	r17
    1132:	0f 93       	push	r16
    1134:	ff 92       	push	r15
    1136:	c9 2f       	mov	r28, r25
    1138:	dd 27       	eor	r29, r29
    113a:	88 23       	and	r24, r24
    113c:	2a f0       	brmi	.+10     	; 0x1148 <log+0x28>
    113e:	21 97       	sbiw	r28, 0x01	; 1
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	da f7       	brpl	.-10     	; 0x113e <log+0x1e>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f eb       	ldi	r21, 0xBF	; 191
    1150:	9f e3       	ldi	r25, 0x3F	; 63
    1152:	88 39       	cpi	r24, 0x98	; 152
    1154:	20 f0       	brcs	.+8      	; 0x115e <log+0x3e>
    1156:	80 3e       	cpi	r24, 0xE0	; 224
    1158:	38 f0       	brcs	.+14     	; 0x1168 <log+0x48>
    115a:	21 96       	adiw	r28, 0x01	; 1
    115c:	8f 77       	andi	r24, 0x7F	; 127
    115e:	0e 94 b8 06 	call	0xd70	; 0xd70 <__addsf3>
    1162:	e4 e5       	ldi	r30, 0x54	; 84
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <log+0x50>
    1168:	0e 94 b8 06 	call	0xd70	; 0xd70 <__addsf3>
    116c:	e1 e8       	ldi	r30, 0x81	; 129
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_powser>
    1174:	8b 01       	movw	r16, r22
    1176:	be 01       	movw	r22, r28
    1178:	ec 01       	movw	r28, r24
    117a:	fb 2e       	mov	r15, r27
    117c:	6f 57       	subi	r22, 0x7F	; 127
    117e:	71 09       	sbc	r23, r1
    1180:	75 95       	asr	r23
    1182:	77 1f       	adc	r23, r23
    1184:	88 0b       	sbc	r24, r24
    1186:	99 0b       	sbc	r25, r25
    1188:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__floatsisf>
    118c:	28 e1       	ldi	r18, 0x18	; 24
    118e:	32 e7       	ldi	r19, 0x72	; 114
    1190:	41 e3       	ldi	r20, 0x31	; 49
    1192:	5f e3       	ldi	r21, 0x3F	; 63
    1194:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__mulsf3x>
    1198:	af 2d       	mov	r26, r15
    119a:	98 01       	movw	r18, r16
    119c:	ae 01       	movw	r20, r28
    119e:	ff 90       	pop	r15
    11a0:	0f 91       	pop	r16
    11a2:	1f 91       	pop	r17
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__addsf3x>
    11ac:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_round>

000011b0 <__mulsf3>:
    11b0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__mulsf3x>
    11b4:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_round>
    11b8:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
    11bc:	38 f0       	brcs	.+14     	; 0x11cc <__mulsf3+0x1c>
    11be:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
    11c2:	20 f0       	brcs	.+8      	; 0x11cc <__mulsf3+0x1c>
    11c4:	95 23       	and	r25, r21
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__mulsf3+0x1c>
    11c8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
    11cc:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
    11d0:	11 24       	eor	r1, r1
    11d2:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_szero>

000011d6 <__mulsf3x>:
    11d6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_split3>
    11da:	70 f3       	brcs	.-36     	; 0x11b8 <__mulsf3+0x8>

000011dc <__mulsf3_pse>:
    11dc:	95 9f       	mul	r25, r21
    11de:	c1 f3       	breq	.-16     	; 0x11d0 <__mulsf3+0x20>
    11e0:	95 0f       	add	r25, r21
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	55 1f       	adc	r21, r21
    11e6:	62 9f       	mul	r22, r18
    11e8:	f0 01       	movw	r30, r0
    11ea:	72 9f       	mul	r23, r18
    11ec:	bb 27       	eor	r27, r27
    11ee:	f0 0d       	add	r31, r0
    11f0:	b1 1d       	adc	r27, r1
    11f2:	63 9f       	mul	r22, r19
    11f4:	aa 27       	eor	r26, r26
    11f6:	f0 0d       	add	r31, r0
    11f8:	b1 1d       	adc	r27, r1
    11fa:	aa 1f       	adc	r26, r26
    11fc:	64 9f       	mul	r22, r20
    11fe:	66 27       	eor	r22, r22
    1200:	b0 0d       	add	r27, r0
    1202:	a1 1d       	adc	r26, r1
    1204:	66 1f       	adc	r22, r22
    1206:	82 9f       	mul	r24, r18
    1208:	22 27       	eor	r18, r18
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	62 1f       	adc	r22, r18
    1210:	73 9f       	mul	r23, r19
    1212:	b0 0d       	add	r27, r0
    1214:	a1 1d       	adc	r26, r1
    1216:	62 1f       	adc	r22, r18
    1218:	83 9f       	mul	r24, r19
    121a:	a0 0d       	add	r26, r0
    121c:	61 1d       	adc	r22, r1
    121e:	22 1f       	adc	r18, r18
    1220:	74 9f       	mul	r23, r20
    1222:	33 27       	eor	r19, r19
    1224:	a0 0d       	add	r26, r0
    1226:	61 1d       	adc	r22, r1
    1228:	23 1f       	adc	r18, r19
    122a:	84 9f       	mul	r24, r20
    122c:	60 0d       	add	r22, r0
    122e:	21 1d       	adc	r18, r1
    1230:	82 2f       	mov	r24, r18
    1232:	76 2f       	mov	r23, r22
    1234:	6a 2f       	mov	r22, r26
    1236:	11 24       	eor	r1, r1
    1238:	9f 57       	subi	r25, 0x7F	; 127
    123a:	50 40       	sbci	r21, 0x00	; 0
    123c:	9a f0       	brmi	.+38     	; 0x1264 <__mulsf3_pse+0x88>
    123e:	f1 f0       	breq	.+60     	; 0x127c <__mulsf3_pse+0xa0>
    1240:	88 23       	and	r24, r24
    1242:	4a f0       	brmi	.+18     	; 0x1256 <__mulsf3_pse+0x7a>
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	bb 1f       	adc	r27, r27
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	50 40       	sbci	r21, 0x00	; 0
    1254:	a9 f7       	brne	.-22     	; 0x1240 <__mulsf3_pse+0x64>
    1256:	9e 3f       	cpi	r25, 0xFE	; 254
    1258:	51 05       	cpc	r21, r1
    125a:	80 f0       	brcs	.+32     	; 0x127c <__mulsf3_pse+0xa0>
    125c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__fp_inf>
    1260:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_szero>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	e4 f3       	brlt	.-8      	; 0x1260 <__mulsf3_pse+0x84>
    1268:	98 3e       	cpi	r25, 0xE8	; 232
    126a:	d4 f3       	brlt	.-12     	; 0x1260 <__mulsf3_pse+0x84>
    126c:	86 95       	lsr	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b7 95       	ror	r27
    1274:	f7 95       	ror	r31
    1276:	e7 95       	ror	r30
    1278:	9f 5f       	subi	r25, 0xFF	; 255
    127a:	c1 f7       	brne	.-16     	; 0x126c <__mulsf3_pse+0x90>
    127c:	fe 2b       	or	r31, r30
    127e:	88 0f       	add	r24, r24
    1280:	91 1d       	adc	r25, r1
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	97 f9       	bld	r25, 7
    1288:	08 95       	ret

0000128a <__fp_mpack>:
    128a:	9f 3f       	cpi	r25, 0xFF	; 255
    128c:	31 f0       	breq	.+12     	; 0x129a <__fp_mpack_finite+0xc>

0000128e <__fp_mpack_finite>:
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	20 f4       	brcc	.+8      	; 0x129a <__fp_mpack_finite+0xc>
    1292:	87 95       	ror	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	88 0f       	add	r24, r24
    129c:	91 1d       	adc	r25, r1
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	97 f9       	bld	r25, 7
    12a4:	08 95       	ret

000012a6 <__fp_powser>:
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	1f 93       	push	r17
    12ac:	0f 93       	push	r16
    12ae:	ff 92       	push	r15
    12b0:	ef 92       	push	r14
    12b2:	df 92       	push	r13
    12b4:	7b 01       	movw	r14, r22
    12b6:	8c 01       	movw	r16, r24
    12b8:	68 94       	set
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <__fp_powser+0x22>
    12bc:	da 2e       	mov	r13, r26
    12be:	ef 01       	movw	r28, r30
    12c0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__mulsf3x>
    12c4:	fe 01       	movw	r30, r28
    12c6:	e8 94       	clt
    12c8:	a5 91       	lpm	r26, Z+
    12ca:	25 91       	lpm	r18, Z+
    12cc:	35 91       	lpm	r19, Z+
    12ce:	45 91       	lpm	r20, Z+
    12d0:	55 91       	lpm	r21, Z+
    12d2:	a6 f3       	brts	.-24     	; 0x12bc <__fp_powser+0x16>
    12d4:	ef 01       	movw	r28, r30
    12d6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__addsf3x>
    12da:	fe 01       	movw	r30, r28
    12dc:	97 01       	movw	r18, r14
    12de:	a8 01       	movw	r20, r16
    12e0:	da 94       	dec	r13
    12e2:	69 f7       	brne	.-38     	; 0x12be <__fp_powser+0x18>
    12e4:	df 90       	pop	r13
    12e6:	ef 90       	pop	r14
    12e8:	ff 90       	pop	r15
    12ea:	0f 91       	pop	r16
    12ec:	1f 91       	pop	r17
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <__divmodhi4>:
    12f4:	97 fb       	bst	r25, 7
    12f6:	07 2e       	mov	r0, r23
    12f8:	16 f4       	brtc	.+4      	; 0x12fe <__divmodhi4+0xa>
    12fa:	00 94       	com	r0
    12fc:	07 d0       	rcall	.+14     	; 0x130c <__divmodhi4_neg1>
    12fe:	77 fd       	sbrc	r23, 7
    1300:	09 d0       	rcall	.+18     	; 0x1314 <__divmodhi4_neg2>
    1302:	0e 94 b5 09 	call	0x136a	; 0x136a <__udivmodhi4>
    1306:	07 fc       	sbrc	r0, 7
    1308:	05 d0       	rcall	.+10     	; 0x1314 <__divmodhi4_neg2>
    130a:	3e f4       	brtc	.+14     	; 0x131a <__divmodhi4_exit>

0000130c <__divmodhi4_neg1>:
    130c:	90 95       	com	r25
    130e:	81 95       	neg	r24
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	08 95       	ret

00001314 <__divmodhi4_neg2>:
    1314:	70 95       	com	r23
    1316:	61 95       	neg	r22
    1318:	7f 4f       	sbci	r23, 0xFF	; 255

0000131a <__divmodhi4_exit>:
    131a:	08 95       	ret

0000131c <__divmodsi4>:
    131c:	05 2e       	mov	r0, r21
    131e:	97 fb       	bst	r25, 7
    1320:	1e f4       	brtc	.+6      	; 0x1328 <__divmodsi4+0xc>
    1322:	00 94       	com	r0
    1324:	0e 94 a5 09 	call	0x134a	; 0x134a <__negsi2>
    1328:	57 fd       	sbrc	r21, 7
    132a:	07 d0       	rcall	.+14     	; 0x133a <__divmodsi4_neg2>
    132c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__udivmodsi4>
    1330:	07 fc       	sbrc	r0, 7
    1332:	03 d0       	rcall	.+6      	; 0x133a <__divmodsi4_neg2>
    1334:	4e f4       	brtc	.+18     	; 0x1348 <__divmodsi4_exit>
    1336:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__negsi2>

0000133a <__divmodsi4_neg2>:
    133a:	50 95       	com	r21
    133c:	40 95       	com	r20
    133e:	30 95       	com	r19
    1340:	21 95       	neg	r18
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	4f 4f       	sbci	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255

00001348 <__divmodsi4_exit>:
    1348:	08 95       	ret

0000134a <__negsi2>:
    134a:	90 95       	com	r25
    134c:	80 95       	com	r24
    134e:	70 95       	com	r23
    1350:	61 95       	neg	r22
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	08 95       	ret

0000135a <__mulshisi3>:
    135a:	b7 ff       	sbrs	r27, 7
    135c:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__muluhisi3>

00001360 <__mulohisi3>:
    1360:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__muluhisi3>
    1364:	82 1b       	sub	r24, r18
    1366:	93 0b       	sbc	r25, r19
    1368:	08 95       	ret

0000136a <__udivmodhi4>:
    136a:	aa 1b       	sub	r26, r26
    136c:	bb 1b       	sub	r27, r27
    136e:	51 e1       	ldi	r21, 0x11	; 17
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <__udivmodhi4_ep>

00001372 <__udivmodhi4_loop>:
    1372:	aa 1f       	adc	r26, r26
    1374:	bb 1f       	adc	r27, r27
    1376:	a6 17       	cp	r26, r22
    1378:	b7 07       	cpc	r27, r23
    137a:	10 f0       	brcs	.+4      	; 0x1380 <__udivmodhi4_ep>
    137c:	a6 1b       	sub	r26, r22
    137e:	b7 0b       	sbc	r27, r23

00001380 <__udivmodhi4_ep>:
    1380:	88 1f       	adc	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	5a 95       	dec	r21
    1386:	a9 f7       	brne	.-22     	; 0x1372 <__udivmodhi4_loop>
    1388:	80 95       	com	r24
    138a:	90 95       	com	r25
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	08 95       	ret

00001392 <__udivmodsi4>:
    1392:	a1 e2       	ldi	r26, 0x21	; 33
    1394:	1a 2e       	mov	r1, r26
    1396:	aa 1b       	sub	r26, r26
    1398:	bb 1b       	sub	r27, r27
    139a:	fd 01       	movw	r30, r26
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <__udivmodsi4_ep>

0000139e <__udivmodsi4_loop>:
    139e:	aa 1f       	adc	r26, r26
    13a0:	bb 1f       	adc	r27, r27
    13a2:	ee 1f       	adc	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	a2 17       	cp	r26, r18
    13a8:	b3 07       	cpc	r27, r19
    13aa:	e4 07       	cpc	r30, r20
    13ac:	f5 07       	cpc	r31, r21
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__udivmodsi4_ep>
    13b0:	a2 1b       	sub	r26, r18
    13b2:	b3 0b       	sbc	r27, r19
    13b4:	e4 0b       	sbc	r30, r20
    13b6:	f5 0b       	sbc	r31, r21

000013b8 <__udivmodsi4_ep>:
    13b8:	66 1f       	adc	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	1a 94       	dec	r1
    13c2:	69 f7       	brne	.-38     	; 0x139e <__udivmodsi4_loop>
    13c4:	60 95       	com	r22
    13c6:	70 95       	com	r23
    13c8:	80 95       	com	r24
    13ca:	90 95       	com	r25
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	bd 01       	movw	r22, r26
    13d2:	cf 01       	movw	r24, r30
    13d4:	08 95       	ret

000013d6 <__muluhisi3>:
    13d6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__umulhisi3>
    13da:	a5 9f       	mul	r26, r21
    13dc:	90 0d       	add	r25, r0
    13de:	b4 9f       	mul	r27, r20
    13e0:	90 0d       	add	r25, r0
    13e2:	a4 9f       	mul	r26, r20
    13e4:	80 0d       	add	r24, r0
    13e6:	91 1d       	adc	r25, r1
    13e8:	11 24       	eor	r1, r1
    13ea:	08 95       	ret

000013ec <__umulhisi3>:
    13ec:	a2 9f       	mul	r26, r18
    13ee:	b0 01       	movw	r22, r0
    13f0:	b3 9f       	mul	r27, r19
    13f2:	c0 01       	movw	r24, r0
    13f4:	a3 9f       	mul	r26, r19
    13f6:	70 0d       	add	r23, r0
    13f8:	81 1d       	adc	r24, r1
    13fa:	11 24       	eor	r1, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	b2 9f       	mul	r27, r18
    1400:	70 0d       	add	r23, r0
    1402:	81 1d       	adc	r24, r1
    1404:	11 24       	eor	r1, r1
    1406:	91 1d       	adc	r25, r1
    1408:	08 95       	ret

0000140a <atof>:
    140a:	66 27       	eor	r22, r22
    140c:	77 27       	eor	r23, r23
    140e:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <strtod>

00001412 <atoi>:
    1412:	fc 01       	movw	r30, r24
    1414:	88 27       	eor	r24, r24
    1416:	99 27       	eor	r25, r25
    1418:	e8 94       	clt
    141a:	21 91       	ld	r18, Z+
    141c:	20 32       	cpi	r18, 0x20	; 32
    141e:	e9 f3       	breq	.-6      	; 0x141a <atoi+0x8>
    1420:	29 30       	cpi	r18, 0x09	; 9
    1422:	10 f0       	brcs	.+4      	; 0x1428 <atoi+0x16>
    1424:	2e 30       	cpi	r18, 0x0E	; 14
    1426:	c8 f3       	brcs	.-14     	; 0x141a <atoi+0x8>
    1428:	2b 32       	cpi	r18, 0x2B	; 43
    142a:	41 f0       	breq	.+16     	; 0x143c <atoi+0x2a>
    142c:	2d 32       	cpi	r18, 0x2D	; 45
    142e:	39 f4       	brne	.+14     	; 0x143e <atoi+0x2c>
    1430:	68 94       	set
    1432:	04 c0       	rjmp	.+8      	; 0x143c <atoi+0x2a>
    1434:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulhi_const_10>
    1438:	82 0f       	add	r24, r18
    143a:	91 1d       	adc	r25, r1
    143c:	21 91       	ld	r18, Z+
    143e:	20 53       	subi	r18, 0x30	; 48
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	c0 f3       	brcs	.-16     	; 0x1434 <atoi+0x22>
    1444:	1e f4       	brtc	.+6      	; 0x144c <atoi+0x3a>
    1446:	90 95       	com	r25
    1448:	81 95       	neg	r24
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	08 95       	ret

0000144e <__itoa_ncheck>:
    144e:	bb 27       	eor	r27, r27
    1450:	4a 30       	cpi	r20, 0x0A	; 10
    1452:	31 f4       	brne	.+12     	; 0x1460 <__itoa_ncheck+0x12>
    1454:	99 23       	and	r25, r25
    1456:	22 f4       	brpl	.+8      	; 0x1460 <__itoa_ncheck+0x12>
    1458:	bd e2       	ldi	r27, 0x2D	; 45
    145a:	90 95       	com	r25
    145c:	81 95       	neg	r24
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__utoa_common>

00001464 <__mulhi_const_10>:
    1464:	7a e0       	ldi	r23, 0x0A	; 10
    1466:	97 9f       	mul	r25, r23
    1468:	90 2d       	mov	r25, r0
    146a:	87 9f       	mul	r24, r23
    146c:	80 2d       	mov	r24, r0
    146e:	91 0d       	add	r25, r1
    1470:	11 24       	eor	r1, r1
    1472:	08 95       	ret

00001474 <__utoa_ncheck>:
    1474:	bb 27       	eor	r27, r27

00001476 <__utoa_common>:
    1476:	fb 01       	movw	r30, r22
    1478:	55 27       	eor	r21, r21
    147a:	aa 27       	eor	r26, r26
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	aa 1f       	adc	r26, r26
    1482:	a4 17       	cp	r26, r20
    1484:	10 f0       	brcs	.+4      	; 0x148a <__utoa_common+0x14>
    1486:	a4 1b       	sub	r26, r20
    1488:	83 95       	inc	r24
    148a:	50 51       	subi	r21, 0x10	; 16
    148c:	b9 f7       	brne	.-18     	; 0x147c <__utoa_common+0x6>
    148e:	a0 5d       	subi	r26, 0xD0	; 208
    1490:	aa 33       	cpi	r26, 0x3A	; 58
    1492:	08 f0       	brcs	.+2      	; 0x1496 <__utoa_common+0x20>
    1494:	a9 5d       	subi	r26, 0xD9	; 217
    1496:	a1 93       	st	Z+, r26
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	79 f7       	brne	.-34     	; 0x147a <__utoa_common+0x4>
    149c:	b1 11       	cpse	r27, r1
    149e:	b1 93       	st	Z+, r27
    14a0:	11 92       	st	Z+, r1
    14a2:	cb 01       	movw	r24, r22
    14a4:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <strrev>

000014a8 <strtod>:
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ea e5       	ldi	r30, 0x5A	; 90
    14ae:	fa e0       	ldi	r31, 0x0A	; 10
    14b0:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__prologue_saves__+0xc>
    14b4:	ec 01       	movw	r28, r24
    14b6:	6b 01       	movw	r12, r22
    14b8:	61 15       	cp	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <strtod+0x1c>
    14be:	fb 01       	movw	r30, r22
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
    14c4:	7e 01       	movw	r14, r28
    14c6:	ff ef       	ldi	r31, 0xFF	; 255
    14c8:	ef 1a       	sub	r14, r31
    14ca:	ff 0a       	sbc	r15, r31
    14cc:	08 81       	ld	r16, Y
    14ce:	80 2f       	mov	r24, r16
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <isspace>
    14d6:	89 2b       	or	r24, r25
    14d8:	11 f0       	breq	.+4      	; 0x14de <strtod+0x36>
    14da:	e7 01       	movw	r28, r14
    14dc:	f3 cf       	rjmp	.-26     	; 0x14c4 <strtod+0x1c>
    14de:	0d 32       	cpi	r16, 0x2D	; 45
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <strtod+0x48>
    14e2:	7e 01       	movw	r14, r28
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	e8 0e       	add	r14, r24
    14e8:	f1 1c       	adc	r15, r1
    14ea:	09 81       	ldd	r16, Y+1	; 0x01
    14ec:	11 e0       	ldi	r17, 0x01	; 1
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <strtod+0x58>
    14f0:	0b 32       	cpi	r16, 0x2B	; 43
    14f2:	29 f4       	brne	.+10     	; 0x14fe <strtod+0x56>
    14f4:	7e 01       	movw	r14, r28
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	e9 0e       	add	r14, r25
    14fa:	f1 1c       	adc	r15, r1
    14fc:	09 81       	ldd	r16, Y+1	; 0x01
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	e7 01       	movw	r28, r14
    1502:	21 97       	sbiw	r28, 0x01	; 1
    1504:	43 e0       	ldi	r20, 0x03	; 3
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	66 eb       	ldi	r22, 0xB6	; 182
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	ce 01       	movw	r24, r28
    150e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <strncasecmp_P>
    1512:	89 2b       	or	r24, r25
    1514:	c1 f4       	brne	.+48     	; 0x1546 <strtod+0x9e>
    1516:	23 96       	adiw	r28, 0x03	; 3
    1518:	45 e0       	ldi	r20, 0x05	; 5
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	61 eb       	ldi	r22, 0xB1	; 177
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	ce 01       	movw	r24, r28
    1522:	0e 94 ab 0b 	call	0x1756	; 0x1756 <strncasecmp_P>
    1526:	89 2b       	or	r24, r25
    1528:	09 f4       	brne	.+2      	; 0x152c <strtod+0x84>
    152a:	25 96       	adiw	r28, 0x05	; 5
    152c:	c1 14       	cp	r12, r1
    152e:	d1 04       	cpc	r13, r1
    1530:	19 f0       	breq	.+6      	; 0x1538 <strtod+0x90>
    1532:	f6 01       	movw	r30, r12
    1534:	d1 83       	std	Z+1, r29	; 0x01
    1536:	c0 83       	st	Z, r28
    1538:	11 11       	cpse	r17, r1
    153a:	f6 c0       	rjmp	.+492    	; 0x1728 <strtod+0x280>
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	9f e7       	ldi	r25, 0x7F	; 127
    1544:	fa c0       	rjmp	.+500    	; 0x173a <strtod+0x292>
    1546:	43 e0       	ldi	r20, 0x03	; 3
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	6e ea       	ldi	r22, 0xAE	; 174
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 ab 0b 	call	0x1756	; 0x1756 <strncasecmp_P>
    1554:	89 2b       	or	r24, r25
    1556:	59 f4       	brne	.+22     	; 0x156e <strtod+0xc6>
    1558:	c1 14       	cp	r12, r1
    155a:	d1 04       	cpc	r13, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <strtod+0xb8>
    155e:	e9 c0       	rjmp	.+466    	; 0x1732 <strtod+0x28a>
    1560:	f2 e0       	ldi	r31, 0x02	; 2
    1562:	ef 0e       	add	r14, r31
    1564:	f1 1c       	adc	r15, r1
    1566:	f6 01       	movw	r30, r12
    1568:	f1 82       	std	Z+1, r15	; 0x01
    156a:	e0 82       	st	Z, r14
    156c:	e2 c0       	rjmp	.+452    	; 0x1732 <strtod+0x28a>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	c0 e0       	ldi	r28, 0x00	; 0
    1576:	d0 e0       	ldi	r29, 0x00	; 0
    1578:	f7 01       	movw	r30, r14
    157a:	80 ed       	ldi	r24, 0xD0	; 208
    157c:	a8 2e       	mov	r10, r24
    157e:	a0 0e       	add	r10, r16
    1580:	89 e0       	ldi	r24, 0x09	; 9
    1582:	8a 15       	cp	r24, r10
    1584:	30 f1       	brcs	.+76     	; 0x15d2 <strtod+0x12a>
    1586:	91 2f       	mov	r25, r17
    1588:	92 60       	ori	r25, 0x02	; 2
    158a:	b9 2e       	mov	r11, r25
    158c:	81 2f       	mov	r24, r17
    158e:	88 70       	andi	r24, 0x08	; 8
    1590:	12 ff       	sbrs	r17, 2
    1592:	04 c0       	rjmp	.+8      	; 0x159c <strtod+0xf4>
    1594:	81 11       	cpse	r24, r1
    1596:	24 c0       	rjmp	.+72     	; 0x15e0 <strtod+0x138>
    1598:	21 96       	adiw	r28, 0x01	; 1
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <strtod+0x138>
    159c:	81 11       	cpse	r24, r1
    159e:	21 97       	sbiw	r28, 0x01	; 1
    15a0:	a5 e0       	ldi	r26, 0x05	; 5
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__muluhisi3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	9c 01       	movw	r18, r24
    15b6:	ad 01       	movw	r20, r26
    15b8:	2a 0d       	add	r18, r10
    15ba:	31 1d       	adc	r19, r1
    15bc:	41 1d       	adc	r20, r1
    15be:	51 1d       	adc	r21, r1
    15c0:	28 39       	cpi	r18, 0x98	; 152
    15c2:	89 e9       	ldi	r24, 0x99	; 153
    15c4:	38 07       	cpc	r19, r24
    15c6:	48 07       	cpc	r20, r24
    15c8:	89 e1       	ldi	r24, 0x19	; 25
    15ca:	58 07       	cpc	r21, r24
    15cc:	48 f0       	brcs	.+18     	; 0x15e0 <strtod+0x138>
    15ce:	16 60       	ori	r17, 0x06	; 6
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <strtod+0x136>
    15d2:	9e ef       	ldi	r25, 0xFE	; 254
    15d4:	a9 12       	cpse	r10, r25
    15d6:	0a c0       	rjmp	.+20     	; 0x15ec <strtod+0x144>
    15d8:	13 fd       	sbrc	r17, 3
    15da:	40 c0       	rjmp	.+128    	; 0x165c <strtod+0x1b4>
    15dc:	18 60       	ori	r17, 0x08	; 8
    15de:	b1 2e       	mov	r11, r17
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	e8 1a       	sub	r14, r24
    15e4:	f8 0a       	sbc	r15, r24
    15e6:	00 81       	ld	r16, Z
    15e8:	1b 2d       	mov	r17, r11
    15ea:	c6 cf       	rjmp	.-116    	; 0x1578 <strtod+0xd0>
    15ec:	80 2f       	mov	r24, r16
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	85 34       	cpi	r24, 0x45	; 69
    15f2:	a1 f5       	brne	.+104    	; 0x165c <strtod+0x1b4>
    15f4:	80 81       	ld	r24, Z
    15f6:	8d 32       	cpi	r24, 0x2D	; 45
    15f8:	11 f4       	brne	.+4      	; 0x15fe <strtod+0x156>
    15fa:	10 61       	ori	r17, 0x10	; 16
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <strtod+0x162>
    15fe:	8b 32       	cpi	r24, 0x2B	; 43
    1600:	21 f0       	breq	.+8      	; 0x160a <strtod+0x162>
    1602:	31 96       	adiw	r30, 0x01	; 1
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <strtod+0x16a>
    160a:	81 81       	ldd	r24, Z+1	; 0x01
    160c:	32 96       	adiw	r30, 0x02	; 2
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 53       	subi	r24, 0x30	; 48
    1614:	8a 30       	cpi	r24, 0x0A	; 10
    1616:	18 f0       	brcs	.+6      	; 0x161e <strtod+0x176>
    1618:	e6 1b       	sub	r30, r22
    161a:	f7 0b       	sbc	r31, r23
    161c:	1f c0       	rjmp	.+62     	; 0x165c <strtod+0x1b4>
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	60 38       	cpi	r22, 0x80	; 128
    1624:	9c e0       	ldi	r25, 0x0C	; 12
    1626:	79 07       	cpc	r23, r25
    1628:	5c f4       	brge	.+22     	; 0x1640 <strtod+0x198>
    162a:	db 01       	movw	r26, r22
    162c:	aa 0f       	add	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	aa 0f       	add	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	6a 0f       	add	r22, r26
    1636:	7b 1f       	adc	r23, r27
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	68 0f       	add	r22, r24
    163e:	71 1d       	adc	r23, r1
    1640:	31 96       	adiw	r30, 0x01	; 1
    1642:	df 01       	movw	r26, r30
    1644:	11 97       	sbiw	r26, 0x01	; 1
    1646:	8c 91       	ld	r24, X
    1648:	80 53       	subi	r24, 0x30	; 48
    164a:	8a 30       	cpi	r24, 0x0A	; 10
    164c:	50 f3       	brcs	.-44     	; 0x1622 <strtod+0x17a>
    164e:	14 ff       	sbrs	r17, 4
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <strtod+0x1b0>
    1652:	71 95       	neg	r23
    1654:	61 95       	neg	r22
    1656:	71 09       	sbc	r23, r1
    1658:	c6 0f       	add	r28, r22
    165a:	d7 1f       	adc	r29, r23
    165c:	11 ff       	sbrs	r17, 1
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <strtod+0x1c8>
    1660:	c1 14       	cp	r12, r1
    1662:	d1 04       	cpc	r13, r1
    1664:	29 f0       	breq	.+10     	; 0x1670 <strtod+0x1c8>
    1666:	cf 01       	movw	r24, r30
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f6 01       	movw	r30, r12
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    1670:	ca 01       	movw	r24, r20
    1672:	b9 01       	movw	r22, r18
    1674:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__floatunsisf>
    1678:	21 2f       	mov	r18, r17
    167a:	23 70       	andi	r18, 0x03	; 3
    167c:	23 30       	cpi	r18, 0x03	; 3
    167e:	19 f0       	breq	.+6      	; 0x1686 <strtod+0x1de>
    1680:	4b 01       	movw	r8, r22
    1682:	5c 01       	movw	r10, r24
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <strtod+0x1ea>
    1686:	4b 01       	movw	r8, r22
    1688:	5c 01       	movw	r10, r24
    168a:	b7 fa       	bst	r11, 7
    168c:	b0 94       	com	r11
    168e:	b7 f8       	bld	r11, 7
    1690:	b0 94       	com	r11
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	c5 01       	movw	r24, r10
    169a:	b4 01       	movw	r22, r8
    169c:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <strtod+0x1fe>
    16a4:	3e c0       	rjmp	.+124    	; 0x1722 <strtod+0x27a>
    16a6:	d7 ff       	sbrs	r29, 7
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <strtod+0x20e>
    16aa:	d1 95       	neg	r29
    16ac:	c1 95       	neg	r28
    16ae:	d1 09       	sbc	r29, r1
    16b0:	0d ec       	ldi	r16, 0xCD	; 205
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <strtod+0x212>
    16b6:	05 ee       	ldi	r16, 0xE5	; 229
    16b8:	10 e0       	ldi	r17, 0x00	; 0
    16ba:	68 01       	movw	r12, r16
    16bc:	f8 e1       	ldi	r31, 0x18	; 24
    16be:	cf 1a       	sub	r12, r31
    16c0:	d1 08       	sbc	r13, r1
    16c2:	90 e2       	ldi	r25, 0x20	; 32
    16c4:	e9 2e       	mov	r14, r25
    16c6:	f1 2c       	mov	r15, r1
    16c8:	ce 15       	cp	r28, r14
    16ca:	df 05       	cpc	r29, r15
    16cc:	74 f0       	brlt	.+28     	; 0x16ea <strtod+0x242>
    16ce:	f8 01       	movw	r30, r16
    16d0:	25 91       	lpm	r18, Z+
    16d2:	35 91       	lpm	r19, Z+
    16d4:	45 91       	lpm	r20, Z+
    16d6:	54 91       	lpm	r21, Z
    16d8:	c5 01       	movw	r24, r10
    16da:	b4 01       	movw	r22, r8
    16dc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
    16e0:	4b 01       	movw	r8, r22
    16e2:	5c 01       	movw	r10, r24
    16e4:	ce 19       	sub	r28, r14
    16e6:	df 09       	sbc	r29, r15
    16e8:	ef cf       	rjmp	.-34     	; 0x16c8 <strtod+0x220>
    16ea:	04 50       	subi	r16, 0x04	; 4
    16ec:	11 09       	sbc	r17, r1
    16ee:	f5 94       	asr	r15
    16f0:	e7 94       	ror	r14
    16f2:	0c 15       	cp	r16, r12
    16f4:	1d 05       	cpc	r17, r13
    16f6:	41 f7       	brne	.-48     	; 0x16c8 <strtod+0x220>
    16f8:	8a 2d       	mov	r24, r10
    16fa:	88 0f       	add	r24, r24
    16fc:	8b 2d       	mov	r24, r11
    16fe:	88 1f       	adc	r24, r24
    1700:	8f 3f       	cpi	r24, 0xFF	; 255
    1702:	49 f0       	breq	.+18     	; 0x1716 <strtod+0x26e>
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	c5 01       	movw	r24, r10
    170c:	b4 01       	movw	r22, r8
    170e:	0e 94 24 07 	call	0xe48	; 0xe48 <__cmpsf2>
    1712:	81 11       	cpse	r24, r1
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <strtod+0x27a>
    1716:	82 e2       	ldi	r24, 0x22	; 34
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <errno+0x1>
    171e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <errno>
    1722:	c5 01       	movw	r24, r10
    1724:	b4 01       	movw	r22, r8
    1726:	09 c0       	rjmp	.+18     	; 0x173a <strtod+0x292>
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	80 e8       	ldi	r24, 0x80	; 128
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	04 c0       	rjmp	.+8      	; 0x173a <strtod+0x292>
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	80 ec       	ldi	r24, 0xC0	; 192
    1738:	9f e7       	ldi	r25, 0x7F	; 127
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	ec e0       	ldi	r30, 0x0C	; 12
    1740:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__epilogue_restores__+0xc>

00001744 <isspace>:
    1744:	91 11       	cpse	r25, r1
    1746:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__ctype_isfalse>
    174a:	80 32       	cpi	r24, 0x20	; 32
    174c:	19 f0       	breq	.+6      	; 0x1754 <isspace+0x10>
    174e:	89 50       	subi	r24, 0x09	; 9
    1750:	85 50       	subi	r24, 0x05	; 5
    1752:	c8 f7       	brcc	.-14     	; 0x1746 <isspace+0x2>
    1754:	08 95       	ret

00001756 <strncasecmp_P>:
    1756:	fb 01       	movw	r30, r22
    1758:	dc 01       	movw	r26, r24
    175a:	41 50       	subi	r20, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	88 f0       	brcs	.+34     	; 0x1782 <strncasecmp_P+0x2c>
    1760:	8d 91       	ld	r24, X+
    1762:	81 34       	cpi	r24, 0x41	; 65
    1764:	1c f0       	brlt	.+6      	; 0x176c <strncasecmp_P+0x16>
    1766:	8b 35       	cpi	r24, 0x5B	; 91
    1768:	0c f4       	brge	.+2      	; 0x176c <strncasecmp_P+0x16>
    176a:	80 5e       	subi	r24, 0xE0	; 224
    176c:	65 91       	lpm	r22, Z+
    176e:	61 34       	cpi	r22, 0x41	; 65
    1770:	1c f0       	brlt	.+6      	; 0x1778 <strncasecmp_P+0x22>
    1772:	6b 35       	cpi	r22, 0x5B	; 91
    1774:	0c f4       	brge	.+2      	; 0x1778 <strncasecmp_P+0x22>
    1776:	60 5e       	subi	r22, 0xE0	; 224
    1778:	86 1b       	sub	r24, r22
    177a:	61 11       	cpse	r22, r1
    177c:	71 f3       	breq	.-36     	; 0x175a <strncasecmp_P+0x4>
    177e:	99 0b       	sbc	r25, r25
    1780:	08 95       	ret
    1782:	88 1b       	sub	r24, r24
    1784:	fc cf       	rjmp	.-8      	; 0x177e <strncasecmp_P+0x28>

00001786 <strrev>:
    1786:	dc 01       	movw	r26, r24
    1788:	fc 01       	movw	r30, r24
    178a:	67 2f       	mov	r22, r23
    178c:	71 91       	ld	r23, Z+
    178e:	77 23       	and	r23, r23
    1790:	e1 f7       	brne	.-8      	; 0x178a <strrev+0x4>
    1792:	32 97       	sbiw	r30, 0x02	; 2
    1794:	04 c0       	rjmp	.+8      	; 0x179e <strrev+0x18>
    1796:	7c 91       	ld	r23, X
    1798:	6d 93       	st	X+, r22
    179a:	70 83       	st	Z, r23
    179c:	62 91       	ld	r22, -Z
    179e:	ae 17       	cp	r26, r30
    17a0:	bf 07       	cpc	r27, r31
    17a2:	c8 f3       	brcs	.-14     	; 0x1796 <strrev+0x10>
    17a4:	08 95       	ret

000017a6 <__ctype_isfalse>:
    17a6:	99 27       	eor	r25, r25
    17a8:	88 27       	eor	r24, r24

000017aa <__ctype_istrue>:
    17aa:	08 95       	ret

000017ac <__prologue_saves__>:
    17ac:	2f 92       	push	r2
    17ae:	3f 92       	push	r3
    17b0:	4f 92       	push	r4
    17b2:	5f 92       	push	r5
    17b4:	6f 92       	push	r6
    17b6:	7f 92       	push	r7
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	ca 1b       	sub	r28, r26
    17d6:	db 0b       	sbc	r29, r27
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	09 94       	ijmp

000017e4 <__epilogue_restores__>:
    17e4:	2a 88       	ldd	r2, Y+18	; 0x12
    17e6:	39 88       	ldd	r3, Y+17	; 0x11
    17e8:	48 88       	ldd	r4, Y+16	; 0x10
    17ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    17ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    17f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17f6:	b9 84       	ldd	r11, Y+9	; 0x09
    17f8:	c8 84       	ldd	r12, Y+8	; 0x08
    17fa:	df 80       	ldd	r13, Y+7	; 0x07
    17fc:	ee 80       	ldd	r14, Y+6	; 0x06
    17fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1800:	0c 81       	ldd	r16, Y+4	; 0x04
    1802:	1b 81       	ldd	r17, Y+3	; 0x03
    1804:	aa 81       	ldd	r26, Y+2	; 0x02
    1806:	b9 81       	ldd	r27, Y+1	; 0x01
    1808:	ce 0f       	add	r28, r30
    180a:	d1 1d       	adc	r29, r1
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	ed 01       	movw	r28, r26
    1818:	08 95       	ret

0000181a <_exit>:
    181a:	f8 94       	cli

0000181c <__stop_program>:
    181c:	ff cf       	rjmp	.-2      	; 0x181c <__stop_program>

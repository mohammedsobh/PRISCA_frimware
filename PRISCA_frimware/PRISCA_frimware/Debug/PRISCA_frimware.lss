
PRISCA_frimware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00003a40  00003ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013d  008000ee  008000ee  00003b62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030b2  00000000  00000000  00003dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef8  00000000  00000000  00006e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001516  00000000  00000000  00007d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00009284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  000097a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f8  00000000  00000000  00009f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000b681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_9>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <main+0x322>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240
      72:	08 00       	.word	0x0008	; ????
      74:	00 00       	nop
      76:	be 92       	st	-X, r11
      78:	24 49       	sbci	r18, 0x94	; 148
      7a:	12 3e       	cpi	r17, 0xE2	; 226
      7c:	ab aa       	std	Y+51, r10	; 0x33
      7e:	aa 2a       	or	r10, r26
      80:	be cd       	rjmp	.-1156   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      82:	cc cc       	rjmp	.-1640   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      84:	4c 3e       	cpi	r20, 0xEC	; 236
      86:	00 00       	nop
      88:	00 80       	ld	r0, Z
      8a:	be ab       	std	Y+54, r27	; 0x36
      8c:	aa aa       	std	Y+50, r10	; 0x32
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	00 00       	nop
      92:	00 00       	nop
      94:	bf 00       	.word	0x00bf	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	41 78       	andi	r20, 0x81	; 129
      a2:	d3 bb       	out	0x13, r29	; 19
      a4:	43 87       	std	Z+11, r20	; 0x0b
      a6:	d1 13       	cpse	r29, r17
      a8:	3d 19       	sub	r19, r13
      aa:	0e 3c       	cpi	r16, 0xCE	; 206
      ac:	c3 bd       	out	0x23, r28	; 35
      ae:	42 82       	std	Z+2, r4	; 0x02
      b0:	ad 2b       	or	r26, r29
      b2:	3e 68       	ori	r19, 0x8E	; 142
      b4:	ec 82       	std	Y+4, r14	; 0x04
      b6:	76 be       	out	0x36, r7	; 54
      b8:	d9 8f       	std	Y+25, r29	; 0x19
      ba:	e1 a9       	ldd	r30, Z+49	; 0x31
      bc:	3e 4c       	sbci	r19, 0xCE	; 206
      be:	80 ef       	ldi	r24, 0xF0	; 240
      c0:	ff be       	out	0x3f, r15	; 63
      c2:	01 c4       	rjmp	.+2050   	; 0x8c6 <main+0x22a>
      c4:	ff 7f       	andi	r31, 0xFF	; 255
      c6:	3f 00       	.word	0x003f	; ????
      c8:	00 00       	nop
	...

000000cc <__trampolines_end>:
      cc:	4e 41       	sbci	r20, 0x1E	; 30
      ce:	4e 49       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <pstr_inity>:
      cf:	49 4e 49 54 59                                      INITY

000000d4 <pstr_inf>:
      d4:	49 4e 46                                            INF

000000d7 <pwr_m10>:
      d7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ef <pwr_p10>:
      ef:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ff:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     10f:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     11f:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     12f:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     13f:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     14f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     15f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     16f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     17f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     18f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     19f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     1af:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1bf:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1cf:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1df:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1ef:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ff:	3d 27 00                                            ='.

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf e5       	ldi	r28, 0x5F	; 95
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	a0 e6       	ldi	r26, 0x60	; 96
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e0 e4       	ldi	r30, 0x40	; 64
     216:	fa e3       	ldi	r31, 0x3A	; 58
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	ae 3e       	cpi	r26, 0xEE	; 238
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	22 e0       	ldi	r18, 0x02	; 2
     226:	ae ee       	ldi	r26, 0xEE	; 238
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ab 32       	cpi	r26, 0x2B	; 43
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
     238:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <EEPROM_write>:
#include "eeprom.h"
#include <avr/eeprom.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     240:	e1 99       	sbic	0x1c, 1	; 28
     242:	fe cf       	rjmp	.-4      	; 0x240 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     244:	9f bb       	out	0x1f, r25	; 31
     246:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     248:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     24a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     24c:	e1 9a       	sbi	0x1c, 1	; 28
     24e:	08 95       	ret

00000250 <EEPROM_WriteNBytes>:
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
     25e:	7b 01       	movw	r14, r22
     260:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     266:	f7 01       	movw	r30, r14
     268:	61 91       	ld	r22, Z+
     26a:	7f 01       	movw	r14, r30
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 20 01 	call	0x240	; 0x240 <EEPROM_write>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     276:	21 97       	sbiw	r28, 0x01	; 1
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_WriteNBytes+0x16>
		EEPROM_write(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <EEPROM_read>:
unsigned char EEPROM_read(unsigned int uiAddress)
{
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EEWE));
     288:	e1 99       	sbic	0x1c, 1	; 28
     28a:	fe cf       	rjmp	.-4      	; 0x288 <EEPROM_read>
		/* Set up address register */
		EEAR = uiAddress;
     28c:	9f bb       	out	0x1f, r25	; 31
     28e:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
     290:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return data from data register */
		return EEDR;	
     292:	8d b3       	in	r24, 0x1d	; 29
	}
}
     294:	08 95       	ret

00000296 <EEPROM_ReadNBytes>:
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	7b 01       	movw	r14, r22
     2a6:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_read(v_eepromAddress_16);//Read a byte from EEPROM to RAM
     2ac:	c8 01       	movw	r24, r16
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_read>
     2b2:	f7 01       	movw	r30, r14
     2b4:	81 93       	st	Z+, r24
     2b6:	7f 01       	movw	r14, r30
		v_eepromAddress_16++;						//Increment the EEPROM Address
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
     2bc:	21 97       	sbiw	r28, 0x01	; 1
		return EEDR;	
	}
}
void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, char *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     2be:	b1 f7       	brne	.-20     	; 0x2ac <EEPROM_ReadNBytes+0x16>
		v_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		v_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <ADC_value>:
float logR2, R2, T, Tc;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
/**************************************************************************/
int ADC_value(uint8_t ADC_pin)
{
	ADMUX = ADC_pin; // reset MUX0 to select ADC0
     2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		  //active reading
     2d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA && (1<<ADSC)==0);	 // wait the A/D to complete reading and converting
     2d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |=(1<<ADIF);
     2d4:	34 9a       	sbi	0x06, 4	; 6
	return ADC;                // the output of lm35 is vt = T/100 => T = vt*100 ==>so the value = (the analoge volt)*0.00488*100
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	95 b1       	in	r25, 0x05	; 5
}
     2da:	08 95       	ret

000002dc <getTemp>:
/*! \brief Resets the integrator.
 *	from the data sheet of ntc thermistor the output temperature is calculated 
 *  by these way
 */
double getTemp(uint8_t ADC_pin)
{
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	Vo = ADC_value(ADC_pin);
     2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_value>
     2f0:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Vo+0x1>
     2f4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Vo>
	R2 = R1 * ((1023.0 / (float)Vo) - 1.0);
     2f8:	bc 01       	movw	r22, r24
     2fa:	99 0f       	add	r25, r25
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 ec       	ldi	r23, 0xC0	; 192
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
     320:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <R1>
     324:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <R1+0x1>
     328:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <R1+0x2>
     32c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <R1+0x3>
     330:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     334:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <R2>
     338:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <R2+0x1>
     33c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <R2+0x2>
     340:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <R2+0x3>
	logR2 = log(R2);
     344:	0e 94 98 14 	call	0x2930	; 0x2930 <log>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
     34c:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <logR2>
     350:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <logR2+0x1>
     354:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <logR2+0x2>
     358:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <logR2+0x3>
	T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)); // the temperature in kelvin
     35c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <c2>
     360:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <c2+0x1>
     364:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <c2+0x2>
     368:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <c2+0x3>
     36c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     370:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <c1>
     374:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <c1+0x1>
     378:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <c1+0x2>
     37c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <c1+0x3>
     380:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     38c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     390:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     394:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
     3cc:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <T>
     3d0:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <T+0x1>
     3d4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <T+0x2>
     3d8:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <T+0x3>
	Tc = T - 273.15;									// the temperature in c
     3dc:	23 e3       	ldi	r18, 0x33	; 51
     3de:	33 e9       	ldi	r19, 0x93	; 147
     3e0:	48 e8       	ldi	r20, 0x88	; 136
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
     3e8:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <Tc>
     3ec:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <Tc+0x1>
     3f0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Tc+0x2>
     3f4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <Tc+0x3>
	return (Tc);
}
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <get_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	2a 97       	sbiw	r28, 0x0a	; 10
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	ac 01       	movw	r20, r24
     424:	fe 01       	movw	r30, r28
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     42c:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
double get_value (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <get_value+0x22>
     434:	00 e0       	ldi	r16, 0x00	; 0
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     43c:	fa 01       	movw	r30, r20
     43e:	e2 0f       	add	r30, r18
     440:	f3 1f       	adc	r31, r19
     442:	90 81       	ld	r25, Z
     444:	96 13       	cpse	r25, r22
     446:	15 c0       	rjmp	.+42     	; 0x472 <__stack+0x13>
			v [j] = String[j+i+1];
     448:	f9 01       	movw	r30, r18
     44a:	e0 0f       	add	r30, r16
     44c:	f1 1f       	adc	r31, r17
     44e:	e4 0f       	add	r30, r20
     450:	f5 1f       	adc	r31, r21
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	a1 e0       	ldi	r26, 0x01	; 1
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	ac 0f       	add	r26, r28
     45a:	bd 1f       	adc	r27, r29
     45c:	a0 0f       	add	r26, r16
     45e:	b1 1f       	adc	r27, r17
     460:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     462:	82 81       	ldd	r24, Z+2	; 0x02
     464:	80 32       	cpi	r24, 0x20	; 32
     466:	41 f0       	breq	.+16     	; 0x478 <__stack+0x19>
     468:	8d 30       	cpi	r24, 0x0D	; 13
     46a:	31 f0       	breq	.+12     	; 0x478 <__stack+0x19>
			break;
			j++;
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	e5 cf       	rjmp	.-54     	; 0x43c <get_value+0x32>
		}
		else
			i++;
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	e2 cf       	rjmp	.-60     	; 0x43c <get_value+0x32>
	}
	return (atof(v));
     478:	ce 01       	movw	r24, r28
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
}
     480:	2a 96       	adiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	08 95       	ret

00000496 <get_int>:
int get_int (char* String,char ch)
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	2a 97       	sbiw	r28, 0x0a	; 10
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	ac 01       	movw	r20, r24
     4b0:	fe 01       	movw	r30, r28
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	ce 01       	movw	r24, r28
     4b6:	0b 96       	adiw	r24, 0x0b	; 11
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
	{
		v [i] = 0;
     4b8:	11 92       	st	Z+, r1
}
int get_int (char* String,char ch)
{
	int i = 0,j=0;
	char v[10];
	for (int i = 0 ; i < 10 ;i++)
     4ba:	e8 17       	cp	r30, r24
     4bc:	f9 07       	cpc	r31, r25
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <get_int+0x22>
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		v [i] = 0;
	}
	while(1)
	{
		if (String [i] == ch){
     4c8:	fa 01       	movw	r30, r20
     4ca:	e2 0f       	add	r30, r18
     4cc:	f3 1f       	adc	r31, r19
     4ce:	90 81       	ld	r25, Z
     4d0:	96 13       	cpse	r25, r22
     4d2:	15 c0       	rjmp	.+42     	; 0x4fe <get_int+0x68>
			v [j] = String[j+i+1];
     4d4:	f9 01       	movw	r30, r18
     4d6:	e0 0f       	add	r30, r16
     4d8:	f1 1f       	adc	r31, r17
     4da:	e4 0f       	add	r30, r20
     4dc:	f5 1f       	adc	r31, r21
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	a1 e0       	ldi	r26, 0x01	; 1
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	ac 0f       	add	r26, r28
     4e6:	bd 1f       	adc	r27, r29
     4e8:	a0 0f       	add	r26, r16
     4ea:	b1 1f       	adc	r27, r17
     4ec:	8c 93       	st	X, r24
			if ((String [j+i+2] == ' ') || (String [j+i+2] == '\r'))
     4ee:	82 81       	ldd	r24, Z+2	; 0x02
     4f0:	80 32       	cpi	r24, 0x20	; 32
     4f2:	41 f0       	breq	.+16     	; 0x504 <get_int+0x6e>
     4f4:	8d 30       	cpi	r24, 0x0D	; 13
     4f6:	31 f0       	breq	.+12     	; 0x504 <get_int+0x6e>
			break;
			j++;
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	1f 4f       	sbci	r17, 0xFF	; 255
     4fc:	e5 cf       	rjmp	.-54     	; 0x4c8 <get_int+0x32>
		}
		else
			i++;
     4fe:	2f 5f       	subi	r18, 0xFF	; 255
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	e2 cf       	rjmp	.-60     	; 0x4c8 <get_int+0x32>
	}
	return (atoi(v));
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <atoi>
}
     50c:	2a 96       	adiw	r28, 0x0a	; 10
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <find>:
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     522:	fc 01       	movw	r30, r24
     524:	20 81       	ld	r18, Z
     526:	62 17       	cp	r22, r18
     528:	59 f0       	breq	.+22     	; 0x540 <find+0x1e>
			f = 1;
			break;
		}
		else if (String [i] == '\r')
     52a:	2d 30       	cpi	r18, 0x0D	; 13
     52c:	59 f0       	breq	.+22     	; 0x544 <find+0x22>
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	02 c0       	rjmp	.+4      	; 0x536 <find+0x14>
     532:	9d 30       	cpi	r25, 0x0D	; 13
     534:	49 f0       	breq	.+18     	; 0x548 <find+0x26>
{
	int i = 0;
	bool f  = 0;
	while(1)
	{
		if (String [i] == ch){
     536:	91 91       	ld	r25, Z+
     538:	96 13       	cpse	r25, r22
     53a:	fb cf       	rjmp	.-10     	; 0x532 <find+0x10>
			f = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret
	return (atoi(v));
}
bool find (char* String,char ch)
{
	int i = 0;
	bool f  = 0;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	08 95       	ret
     548:	80 e0       	ldi	r24, 0x00	; 0
			break;
		else
			i++;
	}
	return (f);
}
     54a:	08 95       	ret

0000054c <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double *current_pos, double new_pos)
{
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
     55a:	6a 01       	movw	r12, r20
     55c:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     55e:	28 81       	ld	r18, Y
     560:	39 81       	ldd	r19, Y+1	; 0x01
     562:	4a 81       	ldd	r20, Y+2	; 0x02
     564:	5b 81       	ldd	r21, Y+3	; 0x03
     566:	c7 01       	movw	r24, r14
     568:	b6 01       	movw	r22, r12
     56a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
    *current_pos = new_pos;
     56e:	c8 82       	st	Y, r12
     570:	d9 82       	std	Y+1, r13	; 0x01
     572:	ea 82       	std	Y+2, r14	; 0x02
     574:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <pin_write>:
char port_Read(char base)
{
	char t ;
	t = Casting(base) ;
	return t;
}
     584:	41 11       	cpse	r20, r1
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <pin_write+0x1e>
     588:	e8 2f       	mov	r30, r24
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	22 81       	ldd	r18, Z+2	; 0x02
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 c0       	rjmp	.+4      	; 0x598 <pin_write+0x14>
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <pin_write+0x10>
     59c:	82 2b       	or	r24, r18
     59e:	82 83       	std	Z+2, r24	; 0x02
     5a0:	08 95       	ret
     5a2:	e8 2f       	mov	r30, r24
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	22 81       	ldd	r18, Z+2	; 0x02
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <pin_write+0x2e>
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	6a 95       	dec	r22
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <pin_write+0x2a>
     5b6:	80 95       	com	r24
     5b8:	82 23       	and	r24, r18
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	08 95       	ret

000005be <port_direction>:
     5be:	61 11       	cpse	r22, r1
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <port_direction+0xe>
     5c2:	e8 2f       	mov	r30, r24
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	81 83       	std	Z+1, r24	; 0x01
     5ca:	08 95       	ret
     5cc:	e8 2f       	mov	r30, r24
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	11 82       	std	Z+1, r1	; 0x01
     5d2:	08 95       	ret

000005d4 <port_write>:

void port_write (char base, bool p )
{
	(*(volatile char*) (base+2)) = p ;
     5d4:	e8 2f       	mov	r30, r24
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	62 83       	std	Z+2, r22	; 0x02
     5da:	08 95       	ret

000005dc <pin_XOR>:
}

void pin_XOR (char base, char bin  )
{
	XOR((base+2) , bin);
     5dc:	e8 2f       	mov	r30, r24
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	82 81       	ldd	r24, Z+2	; 0x02
     5e2:	21 e0       	ldi	r18, 0x01	; 1
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <pin_XOR+0x10>
     5e8:	22 0f       	add	r18, r18
     5ea:	33 1f       	adc	r19, r19
     5ec:	6a 95       	dec	r22
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <pin_XOR+0xc>
     5f0:	28 27       	eor	r18, r24
     5f2:	22 83       	std	Z+2, r18	; 0x02
     5f4:	08 95       	ret

000005f6 <Init>:
					break;
			}
		}
	}
}
void Init(void){
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD7);
     602:	81 b3       	in	r24, 0x11	; 17
     604:	80 6b       	ori	r24, 0xB0	; 176
     606:	81 bb       	out	0x11, r24	; 17
	DDRC = 0XFF;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
     60c:	8a b3       	in	r24, 0x1a	; 26
     60e:	80 6f       	ori	r24, 0xF0	; 240
     610:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0) | (1<<PB1);
     612:	87 b3       	in	r24, 0x17	; 23
     614:	83 60       	ori	r24, 0x03	; 3
     616:	87 bb       	out	0x17, r24	; 23
	ADCSRA = 0x87; //to active A/D pins
     618:	87 e8       	ldi	r24, 0x87	; 135
     61a:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);// external reference volt is selected
     61c:	3e 9a       	sbi	0x07, 6	; 7
	UART_INIT();
     61e:	0e 94 43 12 	call	0x2486	; 0x2486 <UART_INIT>
	motor_init();
     622:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &BpidData);
     626:	0f 2e       	mov	r0, r31
     628:	f9 e8       	ldi	r31, 0x89	; 137
     62a:	cf 2e       	mov	r12, r31
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	df 2e       	mov	r13, r31
     630:	f0 2d       	mov	r31, r0
     632:	17 e6       	ldi	r17, 0x67	; 103
     634:	e1 2e       	mov	r14, r17
     636:	16 e6       	ldi	r17, 0x66	; 102
     638:	f1 2e       	mov	r15, r17
     63a:	06 ec       	ldi	r16, 0xC6	; 198
     63c:	10 e4       	ldi	r17, 0x40	; 64
     63e:	a8 01       	movw	r20, r16
     640:	97 01       	movw	r18, r14
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	88 e7       	ldi	r24, 0x78	; 120
     648:	93 e4       	ldi	r25, 0x43	; 67
     64a:	0e 94 ef 10 	call	0x21de	; 0x21de <Pid_init>
	Pid_init(K_P * Scaling, K_I * Scaling, K_D * Scaling, &SpidData);
     64e:	0f 2e       	mov	r0, r31
     650:	fd e6       	ldi	r31, 0x6D	; 109
     652:	cf 2e       	mov	r12, r31
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	df 2e       	mov	r13, r31
     658:	f0 2d       	mov	r31, r0
     65a:	a8 01       	movw	r20, r16
     65c:	97 01       	movw	r18, r14
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	88 e7       	ldi	r24, 0x78	; 120
     664:	93 e4       	ldi	r25, 0x43	; 67
     666:	0e 94 ef 10 	call	0x21de	; 0x21de <Pid_init>
	/*set fast PWM mode with non-inverted output*/
	cli();
     66a:	f8 94       	cli
	TCCR1A |=(1<<COM1A1)  | (1<<COM1B1) | (1<<WGM10);
     66c:	8f b5       	in	r24, 0x2f	; 47
     66e:	81 6a       	ori	r24, 0xA1	; 161
     670:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<CS10) | (1<<WGM20);
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	81 64       	ori	r24, 0x41	; 65
     676:	8e bd       	out	0x2e, r24	; 46
	TCCR2	|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21)|(1<<CS22);
     678:	85 b5       	in	r24, 0x25	; 37
     67a:	8e 66       	ori	r24, 0x6E	; 110
     67c:	85 bd       	out	0x25, r24	; 37
	// Set up timer, enable timer/counter 0 overflow interrupt
	TCCR0 |= (1 << CS00) | (1<< FOC0); // clock source to be used by the Timer/Counter clkI/O
     67e:	83 b7       	in	r24, 0x33	; 51
     680:	81 68       	ori	r24, 0x81	; 129
     682:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     684:	89 b7       	in	r24, 0x39	; 57
     686:	81 60       	ori	r24, 0x01	; 1
     688:	89 bf       	out	0x39, r24	; 57
	TCNT0  = 0;
     68a:	12 be       	out	0x32, r1	; 50
	sei();
     68c:	78 94       	sei

}
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	08 95       	ret

0000069c <main>:
double R	= 0.00;		//variable to store the radius of circular motion
long wait	= 0;		//variable to store the time that the printer is sleep
int val		= 0;		//variable to store the number of control gcode
int SUBval	= 0;		//variable to store the number of control gcode for some codes
int main(void)
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	ea 97       	sbiw	r28, 0x3a	; 58
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
    Init();
     6b0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Init>
	double value_1;
	double value_2;
	double value_3;
	//to get the s/mm that stored in eeprom
	/*****************************************************/
	EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
     6b4:	45 e0       	ldi	r20, 0x05	; 5
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	67 eb       	ldi	r22, 0xB7	; 183
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
     6c4:	45 e0       	ldi	r20, 0x05	; 5
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	69 ea       	ldi	r22, 0xA9	; 169
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	85 e0       	ldi	r24, 0x05	; 5
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
     6d4:	45 e0       	ldi	r20, 0x05	; 5
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	65 e1       	ldi	r22, 0x15	; 21
     6da:	72 e0       	ldi	r23, 0x02	; 2
     6dc:	8a e0       	ldi	r24, 0x0A	; 10
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
     6e4:	45 e0       	ldi	r20, 0x05	; 5
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	63 e6       	ldi	r22, 0x63	; 99
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	8f e0       	ldi	r24, 0x0F	; 15
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
	Xspm = atof(X_pos);
     6f4:	87 eb       	ldi	r24, 0xB7	; 183
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
     6fc:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <Xspm>
     700:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <Xspm+0x1>
     704:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Xspm+0x2>
     708:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <Xspm+0x3>
	Yspm = atof(Y_pos);
     70c:	89 ea       	ldi	r24, 0xA9	; 169
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
     714:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <Yspm>
     718:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <Yspm+0x1>
     71c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Yspm+0x2>
     720:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <Yspm+0x3>
	Zspm = atof(Z_pos);
     724:	85 e1       	ldi	r24, 0x15	; 21
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
     72c:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <Zspm>
     730:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <Zspm+0x1>
     734:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Zspm+0x2>
     738:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <Zspm+0x3>
	Espm = atof(E_pos);
     73c:	83 e6       	ldi	r24, 0x63	; 99
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
     744:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <Espm>
     748:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <Espm+0x1>
     74c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <Espm+0x2>
     750:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <Espm+0x3>
     754:	0f 2e       	mov	r0, r31
     756:	f1 e1       	ldi	r31, 0x11	; 17
     758:	6f 2e       	mov	r6, r31
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	7f 2e       	mov	r7, r31
     75e:	f0 2d       	mov	r31, r0
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
								}
							}
							STEP[2] = 0;
     760:	25 e4       	ldi	r18, 0x45	; 69
     762:	31 e0       	ldi	r19, 0x01	; 1
     764:	29 af       	std	Y+57, r18	; 0x39
     766:	3a af       	std	Y+58, r19	; 0x3a
	Zspm = atof(Z_pos);
	Espm = atof(E_pos);
	/****************************************************/
	while (1)
	{
		if (status == 0)
     768:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <status>
     76c:	81 11       	cpse	r24, r1
     76e:	0a c0       	rjmp	.+20     	; 0x784 <main+0xe8>
     770:	e1 ec       	ldi	r30, 0xC1	; 193
     772:	f1 e0       	ldi	r31, 0x01	; 1
		{
			for (int i = 0 ; i < 80 ;i++)
			{
		 		String [i] = 0;
     774:	11 92       	st	Z+, r1
	/****************************************************/
	while (1)
	{
		if (status == 0)
		{
			for (int i = 0 ; i < 80 ;i++)
     776:	e6 15       	cp	r30, r6
     778:	f7 05       	cpc	r31, r7
     77a:	e1 f7       	brne	.-8      	; 0x774 <main+0xd8>
			{
		 		String [i] = 0;
			}
			Recive_Data(String); // receive uart data and store it in variable (string)
     77c:	81 ec       	ldi	r24, 0xC1	; 193
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Recive_Data>
		}
		// this code for run the Gcode depending on codes that in https://docs.google.com/document/d/1-IXL4SPSpeL7-teKqPJBG51-9jkx55wjBWgZDoANAug/edit?usp=sharing&fbclid=IwAR3pC85grjWT5KBqa4N7_nx4Ls8xZIw1vQixjXgDGBRfcvUnp72kgWrgpcQ
		if (String[0] == 'M')
     784:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <String>
     788:	8d 34       	cpi	r24, 0x4D	; 77
     78a:	09 f0       	breq	.+2      	; 0x78e <main+0xf2>
     78c:	cd c5       	rjmp	.+2970   	; 0x1328 <main+0xc8c>
		{
			val = get_int (String,'M');
     78e:	6d e4       	ldi	r22, 0x4D	; 77
     790:	81 ec       	ldi	r24, 0xC1	; 193
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 4b 02 	call	0x496	; 0x496 <get_int>
     798:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <val+0x1>
     79c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <val>
			switch (val)
     7a0:	8b 36       	cpi	r24, 0x6B	; 107
     7a2:	91 05       	cpc	r25, r1
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <main+0x10c>
     7a6:	aa c2       	rjmp	.+1364   	; 0xcfc <main+0x660>
     7a8:	74 f5       	brge	.+92     	; 0x806 <main+0x16a>
     7aa:	83 35       	cpi	r24, 0x53	; 83
     7ac:	91 05       	cpc	r25, r1
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <main+0x116>
     7b0:	3b c1       	rjmp	.+630    	; 0xa28 <main+0x38c>
     7b2:	94 f4       	brge	.+36     	; 0x7d8 <main+0x13c>
     7b4:	81 31       	cpi	r24, 0x11	; 17
     7b6:	91 05       	cpc	r25, r1
     7b8:	09 f4       	brne	.+2      	; 0x7bc <main+0x120>
     7ba:	a0 c0       	rjmp	.+320    	; 0x8fc <main+0x260>
     7bc:	24 f4       	brge	.+8      	; 0x7c6 <main+0x12a>
     7be:	02 97       	sbiw	r24, 0x02	; 2
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <main+0x128>
     7c2:	58 c0       	rjmp	.+176    	; 0x874 <main+0x1d8>
     7c4:	d1 cf       	rjmp	.-94     	; 0x768 <main+0xcc>
     7c6:	82 31       	cpi	r24, 0x12	; 18
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f4       	brne	.+2      	; 0x7ce <main+0x132>
     7cc:	9e c0       	rjmp	.+316    	; 0x90a <main+0x26e>
     7ce:	82 35       	cpi	r24, 0x52	; 82
     7d0:	91 05       	cpc	r25, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <main+0x13a>
     7d4:	1c c1       	rjmp	.+568    	; 0xa0e <main+0x372>
     7d6:	c8 cf       	rjmp	.-112    	; 0x768 <main+0xcc>
     7d8:	88 36       	cpi	r24, 0x68	; 104
     7da:	91 05       	cpc	r25, r1
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <main+0x144>
     7de:	6b c2       	rjmp	.+1238   	; 0xcb6 <main+0x61a>
     7e0:	4c f4       	brge	.+18     	; 0x7f4 <main+0x158>
     7e2:	84 35       	cpi	r24, 0x54	; 84
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <main+0x14e>
     7e8:	90 c0       	rjmp	.+288    	; 0x90a <main+0x26e>
     7ea:	8c 35       	cpi	r24, 0x5C	; 92
     7ec:	91 05       	cpc	r25, r1
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <main+0x156>
     7f0:	4f c1       	rjmp	.+670    	; 0xa90 <main+0x3f4>
     7f2:	ba cf       	rjmp	.-140    	; 0x768 <main+0xcc>
     7f4:	89 36       	cpi	r24, 0x69	; 105
     7f6:	91 05       	cpc	r25, r1
     7f8:	09 f4       	brne	.+2      	; 0x7fc <main+0x160>
     7fa:	6f c2       	rjmp	.+1246   	; 0xcda <main+0x63e>
     7fc:	8a 36       	cpi	r24, 0x6A	; 106
     7fe:	91 05       	cpc	r25, r1
     800:	09 f4       	brne	.+2      	; 0x804 <main+0x168>
     802:	6f c2       	rjmp	.+1246   	; 0xce2 <main+0x646>
     804:	b1 cf       	rjmp	.-158    	; 0x768 <main+0xcc>
     806:	8e 3c       	cpi	r24, 0xCE	; 206
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <main+0x172>
     80c:	29 c4       	rjmp	.+2130   	; 0x1060 <main+0x9c4>
     80e:	bc f4       	brge	.+46     	; 0x83e <main+0x1a2>
     810:	82 37       	cpi	r24, 0x72	; 114
     812:	91 05       	cpc	r25, r1
     814:	09 f4       	brne	.+2      	; 0x818 <main+0x17c>
     816:	53 c3       	rjmp	.+1702   	; 0xebe <main+0x822>
     818:	4c f4       	brge	.+18     	; 0x82c <main+0x190>
     81a:	8d 36       	cpi	r24, 0x6D	; 109
     81c:	91 05       	cpc	r25, r1
     81e:	09 f4       	brne	.+2      	; 0x822 <main+0x186>
     820:	73 c2       	rjmp	.+1254   	; 0xd08 <main+0x66c>
     822:	80 37       	cpi	r24, 0x70	; 112
     824:	91 05       	cpc	r25, r1
     826:	09 f4       	brne	.+2      	; 0x82a <main+0x18e>
     828:	be c2       	rjmp	.+1404   	; 0xda6 <main+0x70a>
     82a:	9e cf       	rjmp	.-196    	; 0x768 <main+0xcc>
     82c:	8c 38       	cpi	r24, 0x8C	; 140
     82e:	91 05       	cpc	r25, r1
     830:	09 f4       	brne	.+2      	; 0x834 <main+0x198>
     832:	db c3       	rjmp	.+1974   	; 0xfea <main+0x94e>
     834:	8e 3b       	cpi	r24, 0xBE	; 190
     836:	91 05       	cpc	r25, r1
     838:	09 f4       	brne	.+2      	; 0x83c <main+0x1a0>
     83a:	ec c3       	rjmp	.+2008   	; 0x1014 <main+0x978>
     83c:	95 cf       	rjmp	.-214    	; 0x768 <main+0xcc>
     83e:	85 3f       	cpi	r24, 0xF5	; 245
     840:	51 e0       	ldi	r21, 0x01	; 1
     842:	95 07       	cpc	r25, r21
     844:	09 f4       	brne	.+2      	; 0x848 <main+0x1ac>
     846:	44 c4       	rjmp	.+2184   	; 0x10d0 <main+0xa34>
     848:	5c f4       	brge	.+22     	; 0x860 <main+0x1c4>
     84a:	8e 32       	cpi	r24, 0x2E	; 46
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	97 07       	cpc	r25, r23
     850:	09 f4       	brne	.+2      	; 0x854 <main+0x1b8>
     852:	26 c4       	rjmp	.+2124   	; 0x10a0 <main+0xa04>
     854:	84 3f       	cpi	r24, 0xF4	; 244
     856:	a1 e0       	ldi	r26, 0x01	; 1
     858:	9a 07       	cpc	r25, r26
     85a:	09 f4       	brne	.+2      	; 0x85e <main+0x1c2>
     85c:	19 c1       	rjmp	.+562    	; 0xa90 <main+0x3f4>
     85e:	84 cf       	rjmp	.-248    	; 0x768 <main+0xcc>
     860:	86 3f       	cpi	r24, 0xF6	; 246
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	9b 07       	cpc	r25, r27
     866:	09 f4       	brne	.+2      	; 0x86a <main+0x1ce>
     868:	13 c1       	rjmp	.+550    	; 0xa90 <main+0x3f4>
     86a:	87 3f       	cpi	r24, 0xF7	; 247
     86c:	91 40       	sbci	r25, 0x01	; 1
     86e:	09 f4       	brne	.+2      	; 0x872 <main+0x1d6>
     870:	84 c4       	rjmp	.+2312   	; 0x117a <main+0xade>
     872:	7a cf       	rjmp	.-268    	; 0x768 <main+0xcc>
			{
				case 0: case 1:
					STEP[0] = 0;
     874:	a5 e4       	ldi	r26, 0x45	; 69
     876:	b1 e0       	ldi	r27, 0x01	; 1
     878:	1d 92       	st	X+, r1
     87a:	1d 92       	st	X+, r1
     87c:	1d 92       	st	X+, r1
     87e:	1c 92       	st	X, r1
     880:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     882:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <STEP+0x4>
     886:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <STEP+0x5>
     88a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <STEP+0x6>
     88e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <STEP+0x7>
					STEP[2] = 0;
     892:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <STEP+0x8>
     896:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <STEP+0x9>
     89a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <STEP+0xa>
     89e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <STEP+0xb>
					STEP[3] = 0;
     8a2:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <STEP+0xc>
     8a6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <STEP+0xd>
     8aa:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <STEP+0xe>
     8ae:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STEP+0xf>
					F = 0;
     8b2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <F>
     8b6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <F+0x1>
     8ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <F+0x2>
     8be:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <F+0x3>
					Fe = 0;
     8c2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Fe>
     8c6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Fe+0x1>
     8ca:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Fe+0x2>
     8ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Fe+0x3>
					SE0 = 0.0;
     8d2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <SE0>
     8d6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <SE0+0x1>
     8da:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <SE0+0x2>
     8de:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <SE0+0x3>
					SB = 0.0;
     8e2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SB>
     8e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <SB+0x1>
     8ea:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SB+0x2>
     8ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <SB+0x3>
					Transmit_Data("ok");
     8f2:	8e eb       	ldi	r24, 0xBE	; 190
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     8fa:	36 cf       	rjmp	.-404    	; 0x768 <main+0xcc>
				case 17:
					motor_init();
     8fc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
					Transmit_Data("ok");
     900:	8e eb       	ldi	r24, 0xBE	; 190
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     908:	2f cf       	rjmp	.-418    	; 0x768 <main+0xcc>
				case 18: case 84:
					wait = (get_int(String ,'S')*1000);
     90a:	63 e5       	ldi	r22, 0x53	; 83
     90c:	81 ec       	ldi	r24, 0xC1	; 193
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 4b 02 	call	0x496	; 0x496 <get_int>
     914:	fc 01       	movw	r30, r24
     916:	28 ee       	ldi	r18, 0xE8	; 232
     918:	33 e0       	ldi	r19, 0x03	; 3
     91a:	e2 9f       	mul	r30, r18
     91c:	c0 01       	movw	r24, r0
     91e:	e3 9f       	mul	r30, r19
     920:	90 0d       	add	r25, r0
     922:	f2 9f       	mul	r31, r18
     924:	90 0d       	add	r25, r0
     926:	11 24       	eor	r1, r1
     928:	09 2e       	mov	r0, r25
     92a:	00 0c       	add	r0, r0
     92c:	aa 0b       	sbc	r26, r26
     92e:	bb 0b       	sbc	r27, r27
     930:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <wait>
     934:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <wait+0x1>
     938:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <wait+0x2>
     93c:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <wait+0x3>
					status = 1;
     940:	31 e0       	ldi	r19, 0x01	; 1
     942:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <status>
					XEN_DES = find(String ,'X');
     946:	68 e5       	ldi	r22, 0x58	; 88
     948:	81 ec       	ldi	r24, 0xC1	; 193
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	0e 94 91 02 	call	0x522	; 0x522 <find>
     950:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <XEN_DES>
					YEN_DES = find(String ,'Y');
     954:	69 e5       	ldi	r22, 0x59	; 89
     956:	81 ec       	ldi	r24, 0xC1	; 193
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 91 02 	call	0x522	; 0x522 <find>
     95e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <YEN_DES>
					ZEN_DES = find(String ,'Z');
     962:	6a e5       	ldi	r22, 0x5A	; 90
     964:	81 ec       	ldi	r24, 0xC1	; 193
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 91 02 	call	0x522	; 0x522 <find>
     96c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ZEN_DES>
					EEN_DES = find(String ,'E');
     970:	65 e4       	ldi	r22, 0x45	; 69
     972:	81 ec       	ldi	r24, 0xC1	; 193
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 91 02 	call	0x522	; 0x522 <find>
     97a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <EEN_DES>
					motor_EN_DES('X',XEN_DES);
     97e:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <XEN_DES>
     982:	88 e5       	ldi	r24, 0x58	; 88
     984:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
					motor_EN_DES('Y',YEN_DES);
     988:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <YEN_DES>
     98c:	89 e5       	ldi	r24, 0x59	; 89
     98e:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
					motor_EN_DES('Z',YEN_DES);
     992:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <YEN_DES>
     996:	8a e5       	ldi	r24, 0x5A	; 90
     998:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
					motor_EN_DES('E',EEN_DES);
     99c:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <EEN_DES>
     9a0:	85 e4       	ldi	r24, 0x45	; 69
     9a2:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
					if(wait != 0)
     9a6:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <wait>
     9aa:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <wait+0x1>
     9ae:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <wait+0x2>
     9b2:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <wait+0x3>
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	a1 05       	cpc	r26, r1
     9ba:	b1 05       	cpc	r27, r1
     9bc:	09 f1       	breq	.+66     	; 0xa00 <main+0x364>
					{
						while(wait > 0)
     9be:	f4 f0       	brlt	.+60     	; 0x9fc <main+0x360>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c0:	8f e9       	ldi	r24, 0x9F	; 159
     9c2:	9f e0       	ldi	r25, 0x0F	; 15
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <main+0x328>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x32e>
     9ca:	00 00       	nop
						{
							_delay_ms(1);
							wait --;
     9cc:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <wait>
     9d0:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <wait+0x1>
     9d4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <wait+0x2>
     9d8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <wait+0x3>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	a1 09       	sbc	r26, r1
     9e0:	b1 09       	sbc	r27, r1
     9e2:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <wait>
     9e6:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <wait+0x1>
     9ea:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <wait+0x2>
     9ee:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <wait+0x3>
					motor_EN_DES('Y',YEN_DES);
					motor_EN_DES('Z',YEN_DES);
					motor_EN_DES('E',EEN_DES);
					if(wait != 0)
					{
						while(wait > 0)
     9f2:	18 16       	cp	r1, r24
     9f4:	19 06       	cpc	r1, r25
     9f6:	1a 06       	cpc	r1, r26
     9f8:	1b 06       	cpc	r1, r27
     9fa:	14 f3       	brlt	.-60     	; 0x9c0 <main+0x324>
						{
							_delay_ms(1);
							wait --;
						}
						motor_init();
     9fc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
					}
					status = 0;
     a00:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
					Transmit_Data("ok");
     a04:	8e eb       	ldi	r24, 0xBE	; 190
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     a0c:	ad ce       	rjmp	.-678    	; 0x768 <main+0xcc>
				case 82:
					STEP[3] = 0;
     a0e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <STEP+0xc>
     a12:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <STEP+0xd>
     a16:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <STEP+0xe>
     a1a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STEP+0xf>
					Transmit_Data("ok");
     a1e:	8e eb       	ldi	r24, 0xBE	; 190
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     a26:	a0 ce       	rjmp	.-704    	; 0x768 <main+0xcc>
				case 83:
					old_val_1 = 0;
     a28:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <old_val_1.2340>
     a2c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <old_val_1.2340+0x1>
     a30:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <old_val_1.2340+0x2>
     a34:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <old_val_1.2340+0x3>
					old_val_2 = 0;
     a38:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <old_val_2.2341>
     a3c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <old_val_2.2341+0x1>
     a40:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <old_val_2.2341+0x2>
     a44:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <old_val_2.2341+0x3>
					old_val_3 = 0;
     a48:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__data_end>
     a4c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__data_end+0x1>
     a50:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__data_end+0x2>
     a54:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__data_end+0x3>
					STEP[0] = 0;
     a58:	a5 e4       	ldi	r26, 0x45	; 69
     a5a:	b1 e0       	ldi	r27, 0x01	; 1
     a5c:	1d 92       	st	X+, r1
     a5e:	1d 92       	st	X+, r1
     a60:	1d 92       	st	X+, r1
     a62:	1c 92       	st	X, r1
     a64:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = 0;
     a66:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <STEP+0x4>
     a6a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <STEP+0x5>
     a6e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <STEP+0x6>
     a72:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <STEP+0x7>
					STEP[2] = 0;
     a76:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <STEP+0x8>
     a7a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <STEP+0x9>
     a7e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <STEP+0xa>
     a82:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <STEP+0xb>
					Transmit_Data("ok");
     a86:	8e eb       	ldi	r24, 0xBE	; 190
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     a8e:	6c ce       	rjmp	.-808    	; 0x768 <main+0xcc>
     a90:	e7 eb       	ldi	r30, 0xB7	; 183
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	49 ea       	ldi	r20, 0xA9	; 169
     a96:	51 e0       	ldi	r21, 0x01	; 1
     a98:	25 e1       	ldi	r18, 0x15	; 21
     a9a:	32 e0       	ldi	r19, 0x02	; 2
     a9c:	a3 e6       	ldi	r26, 0x63	; 99
     a9e:	b1 e0       	ldi	r27, 0x01	; 1
     aa0:	7d 01       	movw	r14, r26
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     aa2:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     aa4:	da 01       	movw	r26, r20
     aa6:	1d 92       	st	X+, r1
     aa8:	ad 01       	movw	r20, r26
						Z_pos[i] = 0;
     aaa:	d9 01       	movw	r26, r18
     aac:	1d 92       	st	X+, r1
     aae:	9d 01       	movw	r18, r26
						E_pos[i] = 0;
     ab0:	d7 01       	movw	r26, r14
     ab2:	1d 92       	st	X+, r1
     ab4:	7d 01       	movw	r14, r26
					STEP[1] = 0;
					STEP[2] = 0;
					Transmit_Data("ok");
					break;
				case 92:case 500:case 502:
					for (int i = 0 ; i < 10 ; i ++)
     ab6:	61 ec       	ldi	r22, 0xC1	; 193
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	6e 17       	cp	r22, r30
     abc:	7f 07       	cpc	r23, r31
     abe:	89 f7       	brne	.-30     	; 0xaa2 <main+0x406>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					if (val == 92)
     ac0:	8c 35       	cpi	r24, 0x5C	; 92
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 f5       	brne	.+104    	; 0xb2e <main+0x492>
					{
						Xspm = get_value(String,'X');
     ac6:	68 e5       	ldi	r22, 0x58	; 88
     ac8:	81 ec       	ldi	r24, 0xC1	; 193
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ad0:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <Xspm>
     ad4:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <Xspm+0x1>
     ad8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Xspm+0x2>
     adc:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <Xspm+0x3>
						Yspm = get_value(String,'Y');
     ae0:	69 e5       	ldi	r22, 0x59	; 89
     ae2:	81 ec       	ldi	r24, 0xC1	; 193
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     aea:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <Yspm>
     aee:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <Yspm+0x1>
     af2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Yspm+0x2>
     af6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <Yspm+0x3>
						Zspm = get_value(String,'Z');
     afa:	6a e5       	ldi	r22, 0x5A	; 90
     afc:	81 ec       	ldi	r24, 0xC1	; 193
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b04:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <Zspm>
     b08:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <Zspm+0x1>
     b0c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Zspm+0x2>
     b10:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <Zspm+0x3>
						Espm = get_value(String,'E');
     b14:	65 e4       	ldi	r22, 0x45	; 69
     b16:	81 ec       	ldi	r24, 0xC1	; 193
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     b1e:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <Espm>
     b22:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <Espm+0x1>
     b26:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <Espm+0x2>
     b2a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <Espm+0x3>
					}
					if (val == 502)
     b2e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <val>
     b32:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <val+0x1>
     b36:	86 3f       	cpi	r24, 0xF6	; 246
     b38:	91 40       	sbci	r25, 0x01	; 1
     b3a:	09 f0       	breq	.+2      	; 0xb3e <main+0x4a2>
     b3c:	40 c0       	rjmp	.+128    	; 0xbbe <main+0x522>
					{
						Xspm = FXspm;
     b3e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <FXspm>
     b42:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <FXspm+0x1>
     b46:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <FXspm+0x2>
     b4a:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <FXspm+0x3>
     b4e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Xspm>
     b52:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Xspm+0x1>
     b56:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <Xspm+0x2>
     b5a:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <Xspm+0x3>
						Yspm = FYspm;
     b5e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <FYspm>
     b62:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <FYspm+0x1>
     b66:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <FYspm+0x2>
     b6a:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <FYspm+0x3>
     b6e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Yspm>
     b72:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Yspm+0x1>
     b76:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <Yspm+0x2>
     b7a:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <Yspm+0x3>
						Zspm = FZspm;
     b7e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <FZspm>
     b82:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <FZspm+0x1>
     b86:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <FZspm+0x2>
     b8a:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <FZspm+0x3>
     b8e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Zspm>
     b92:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <Zspm+0x1>
     b96:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <Zspm+0x2>
     b9a:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <Zspm+0x3>
						Espm = FEspm;
     b9e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <FEspm>
     ba2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <FEspm+0x1>
     ba6:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <FEspm+0x2>
     baa:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <FEspm+0x3>
     bae:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <Espm>
     bb2:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <Espm+0x1>
     bb6:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <Espm+0x2>
     bba:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <Espm+0x3>
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
     bbe:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <Xspm>
     bc2:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <Xspm+0x1>
     bc6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Xspm+0x2>
     bca:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Xspm+0x3>
     bce:	01 ec       	ldi	r16, 0xC1	; 193
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	23 e0       	ldi	r18, 0x03	; 3
     bd4:	42 e0       	ldi	r20, 0x02	; 2
     bd6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	87 eb       	ldi	r24, 0xB7	; 183
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
     bea:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <Yspm>
     bee:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <Yspm+0x1>
     bf2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Yspm+0x2>
     bf6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <Yspm+0x3>
     bfa:	23 e0       	ldi	r18, 0x03	; 3
     bfc:	42 e0       	ldi	r20, 0x02	; 2
     bfe:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     c02:	9f 93       	push	r25
     c04:	8f 93       	push	r24
     c06:	e9 ea       	ldi	r30, 0xA9	; 169
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	ff 93       	push	r31
     c0c:	ef 93       	push	r30
     c0e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
     c12:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <Zspm>
     c16:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <Zspm+0x1>
     c1a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Zspm+0x2>
     c1e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <Zspm+0x3>
     c22:	23 e0       	ldi	r18, 0x03	; 3
     c24:	42 e0       	ldi	r20, 0x02	; 2
     c26:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	45 e1       	ldi	r20, 0x15	; 21
     c30:	52 e0       	ldi	r21, 0x02	; 2
     c32:	5f 93       	push	r21
     c34:	4f 93       	push	r20
     c36:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
     c3a:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <Espm>
     c3e:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <Espm+0x1>
     c42:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <Espm+0x2>
     c46:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <Espm+0x3>
     c4a:	23 e0       	ldi	r18, 0x03	; 3
     c4c:	42 e0       	ldi	r20, 0x02	; 2
     c4e:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	83 e6       	ldi	r24, 0x63	; 99
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					EEPROM_WriteNBytes(XSTEP_PER_mm_address,X_pos,5); //write 2-bytes of data(Xspm) at 0x00.
     c62:	45 e0       	ldi	r20, 0x05	; 5
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	67 eb       	ldi	r22, 0xB7	; 183
     c68:	71 e0       	ldi	r23, 0x01	; 1
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(YSTEP_PER_mm_address,Y_pos,5); //write 2-bytes of data(Yspm) at 0x02.
     c72:	45 e0       	ldi	r20, 0x05	; 5
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	69 ea       	ldi	r22, 0xA9	; 169
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ZSTEP_PER_mm_address,Z_pos,5); //write 2-bytes of data(Zspm) at 0x04.
     c82:	45 e0       	ldi	r20, 0x05	; 5
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	65 e1       	ldi	r22, 0x15	; 21
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					EEPROM_WriteNBytes(ESTEP_PER_mm_address,E_pos,5); //write 2-bytes of data(E0spm) at 0x06.
     c92:	45 e0       	ldi	r20, 0x05	; 5
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	63 e6       	ldi	r22, 0x63	; 99
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	8f e0       	ldi	r24, 0x0F	; 15
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_WriteNBytes>
					Transmit_Data("ok");
     ca2:	8e eb       	ldi	r24, 0xBE	; 190
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	59 cd       	rjmp	.-1358   	; 0x768 <main+0xcc>
				case 104:
					SE0 = get_value(String,'S');
     cb6:	63 e5       	ldi	r22, 0x53	; 83
     cb8:	81 ec       	ldi	r24, 0xC1	; 193
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     cc0:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <SE0>
     cc4:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <SE0+0x1>
     cc8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <SE0+0x2>
     ccc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <SE0+0x3>
					Transmit_Data("ok");
     cd0:	8e eb       	ldi	r24, 0xBE	; 190
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     cd8:	47 cd       	rjmp	.-1394   	; 0x768 <main+0xcc>
				case 105:
					ReadTemp = 1;
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	f0 93 26 01 	sts	0x0126, r31	; 0x800126 <ReadTemp>
					break;
     ce0:	43 cd       	rjmp	.-1402   	; 0x768 <main+0xcc>
				case 106:
					OCR2 = get_value(String,'S');
     ce2:	63 e5       	ldi	r22, 0x53	; 83
     ce4:	81 ec       	ldi	r24, 0xC1	; 193
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     cec:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixunssfsi>
     cf0:	63 bd       	out	0x23, r22	; 35
					Transmit_Data("ok");
     cf2:	8e eb       	ldi	r24, 0xBE	; 190
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     cfa:	36 cd       	rjmp	.-1428   	; 0x768 <main+0xcc>
				case 107:
					OCR2 = 0;
     cfc:	13 bc       	out	0x23, r1	; 35
					Transmit_Data("ok");
     cfe:	8e eb       	ldi	r24, 0xBE	; 190
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     d06:	30 cd       	rjmp	.-1440   	; 0x768 <main+0xcc>
				case 109:
					B = get_value(String,'B');
     d08:	62 e4       	ldi	r22, 0x42	; 66
     d0a:	81 ec       	ldi	r24, 0xC1	; 193
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d12:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <B>
     d16:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <B+0x1>
     d1a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <B+0x2>
     d1e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <B+0x3>
					if (B == 0)
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
     d2c:	81 11       	cpse	r24, r1
     d2e:	22 c0       	rjmp	.+68     	; 0xd74 <main+0x6d8>
					{
						SE0 = get_value(String,'S');
     d30:	63 e5       	ldi	r22, 0x53	; 83
     d32:	81 ec       	ldi	r24, 0xC1	; 193
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     d3a:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <SE0>
     d3e:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <SE0+0x1>
     d42:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <SE0+0x2>
     d46:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <SE0+0x3>
						status = 1;
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <status>
						while(getTemp(T0) < SE0);
     d50:	80 e5       	ldi	r24, 0x50	; 80
     d52:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     d56:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <SE0>
     d5a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <SE0+0x1>
     d5e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <SE0+0x2>
     d62:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <SE0+0x3>
     d66:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	8c f3       	brlt	.-30     	; 0xd50 <main+0x6b4>
						status = 0;
     d6e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <main+0x700>
					} 
					else
					{
						status = 1;
     d74:	31 e0       	ldi	r19, 0x01	; 1
     d76:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <status>
						while(getTemp(T0) < B);
     d7a:	80 e5       	ldi	r24, 0x50	; 80
     d7c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     d80:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <B>
     d84:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <B+0x1>
     d88:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <B+0x2>
     d8c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <B+0x3>
     d90:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
     d94:	88 23       	and	r24, r24
     d96:	8c f3       	brlt	.-30     	; 0xd7a <main+0x6de>
						status = 0;
     d98:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
					}
					
					Transmit_Data("ok");
     d9c:	8e eb       	ldi	r24, 0xBE	; 190
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     da4:	e1 cc       	rjmp	.-1598   	; 0x768 <main+0xcc>
				case 112:
					value_1 = 0;  //extract first value
					value_2 = 0; //call function to extract second value
					value_3 = 0; //call function to extract third value
					STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	ba 01       	movw	r22, r20
     dac:	86 ef       	ldi	r24, 0xF6	; 246
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <Xspm>
     dbc:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <Xspm+0x1>
     dc0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Xspm+0x2>
     dc4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Xspm+0x3>
     dc8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     dcc:	a5 e4       	ldi	r26, 0x45	; 69
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	6d 93       	st	X+, r22
     dd2:	7d 93       	st	X+, r23
     dd4:	8d 93       	st	X+, r24
     dd6:	9c 93       	st	X, r25
     dd8:	13 97       	sbiw	r26, 0x03	; 3
					STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	ba 01       	movw	r22, r20
     de0:	82 ef       	ldi	r24, 0xF2	; 242
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <Yspm>
     df0:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <Yspm+0x1>
     df4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Yspm+0x2>
     df8:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <Yspm+0x3>
     dfc:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     e00:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
     e04:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
     e08:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
     e0c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
					STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	ba 01       	movw	r22, r20
     e16:	8e ee       	ldi	r24, 0xEE	; 238
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <Zspm>
     e26:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <Zspm+0x1>
     e2a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Zspm+0x2>
     e2e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <Zspm+0x3>
     e32:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
     e36:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <STEP+0x8>
     e3a:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <STEP+0x9>
     e3e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <STEP+0xa>
     e42:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <STEP+0xb>
					STEP[3] = 0;
     e46:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <STEP+0xc>
     e4a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <STEP+0xd>
     e4e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <STEP+0xe>
     e52:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STEP+0xf>
					F = 0;
     e56:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <F>
     e5a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <F+0x1>
     e5e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <F+0x2>
     e62:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <F+0x3>
					Fe = 0;
     e66:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Fe>
     e6a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Fe+0x1>
     e6e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Fe+0x2>
     e72:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Fe+0x3>
					SE0 = 0;
     e76:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <SE0>
     e7a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <SE0+0x1>
     e7e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <SE0+0x2>
     e82:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <SE0+0x3>
					SB = 0;
     e86:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SB>
     e8a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <SB+0x1>
     e8e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SB+0x2>
     e92:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <SB+0x3>
					status = 1;
     e96:	b1 e0       	ldi	r27, 0x01	; 1
     e98:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <status>
					motor_movement(STEP,F,Fe);
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	98 01       	movw	r18, r16
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	ba 01       	movw	r22, r20
     ea8:	85 e4       	ldi	r24, 0x45	; 69
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <motor_movement>
					status = 0;
     eb0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
					Transmit_Data("ok");
     eb4:	8e eb       	ldi	r24, 0xBE	; 190
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     ebc:	55 cc       	rjmp	.-1878   	; 0x768 <main+0xcc>
     ebe:	e7 eb       	ldi	r30, 0xB7	; 183
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
     ec2:	89 ea       	ldi	r24, 0xA9	; 169
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	a5 e1       	ldi	r26, 0x15	; 21
     ec8:	b2 e0       	ldi	r27, 0x02	; 2
     eca:	ad 01       	movw	r20, r26
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
     ecc:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
     ece:	dc 01       	movw	r26, r24
     ed0:	1d 92       	st	X+, r1
     ed2:	cd 01       	movw	r24, r26
						Z_pos[i] = 0;
     ed4:	da 01       	movw	r26, r20
     ed6:	1d 92       	st	X+, r1
     ed8:	ad 01       	movw	r20, r26
					motor_movement(STEP,F,Fe);
					status = 0;
					Transmit_Data("ok");
					break;
				case 114:
					for (int i = 0 ; i < 10 ; i ++)
     eda:	21 ec       	ldi	r18, 0xC1	; 193
     edc:	31 e0       	ldi	r19, 0x01	; 1
     ede:	2e 17       	cp	r18, r30
     ee0:	3f 07       	cpc	r19, r31
     ee2:	a1 f7       	brne	.-24     	; 0xecc <main+0x830>
					{
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(old_val_1, 2,3,"%f"));
     ee4:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <old_val_1.2340>
     ee8:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <old_val_1.2340+0x1>
     eec:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <old_val_1.2340+0x2>
     ef0:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <old_val_1.2340+0x3>
     ef4:	01 ec       	ldi	r16, 0xC1	; 193
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	23 e0       	ldi	r18, 0x03	; 3
     efa:	42 e0       	ldi	r20, 0x02	; 2
     efc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	47 eb       	ldi	r20, 0xB7	; 183
     f06:	51 e0       	ldi	r21, 0x01	; 1
     f08:	5f 93       	push	r21
     f0a:	4f 93       	push	r20
     f0c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Y_pos,dtostrf(old_val_2, 2,3,"%f"));
     f10:	60 91 f2 00 	lds	r22, 0x00F2	; 0x8000f2 <old_val_2.2341>
     f14:	70 91 f3 00 	lds	r23, 0x00F3	; 0x8000f3 <old_val_2.2341+0x1>
     f18:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <old_val_2.2341+0x2>
     f1c:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <old_val_2.2341+0x3>
     f20:	23 e0       	ldi	r18, 0x03	; 3
     f22:	42 e0       	ldi	r20, 0x02	; 2
     f24:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	89 ea       	ldi	r24, 0xA9	; 169
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Z_pos,dtostrf(old_val_3, 2,3,"%f"));
     f38:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__data_end>
     f3c:	70 91 ef 00 	lds	r23, 0x00EF	; 0x8000ef <__data_end+0x1>
     f40:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__data_end+0x2>
     f44:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__data_end+0x3>
     f48:	23 e0       	ldi	r18, 0x03	; 3
     f4a:	42 e0       	ldi	r20, 0x02	; 2
     f4c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	e5 e1       	ldi	r30, 0x15	; 21
     f56:	f2 e0       	ldi	r31, 0x02	; 2
     f58:	ff 93       	push	r31
     f5a:	ef 93       	push	r30
     f5c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					char pos[21]={'X',
     f60:	88 e5       	ldi	r24, 0x58	; 88
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	a7 eb       	ldi	r26, 0xB7	; 183
     f66:	b1 e0       	ldi	r27, 0x01	; 1
     f68:	8c 91       	ld	r24, X
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <X_pos+0x1>
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <X_pos+0x2>
     f76:	8c 83       	std	Y+4, r24	; 0x04
     f78:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <X_pos+0x3>
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <X_pos+0x4>
     f82:	8e 83       	std	Y+6, r24	; 0x06
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	8f 83       	std	Y+7, r24	; 0x07
     f88:	99 e5       	ldi	r25, 0x59	; 89
     f8a:	98 87       	std	Y+8, r25	; 0x08
     f8c:	e9 ea       	ldi	r30, 0xA9	; 169
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	90 81       	ld	r25, Z
     f92:	99 87       	std	Y+9, r25	; 0x09
     f94:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Y_pos+0x1>
     f98:	9a 87       	std	Y+10, r25	; 0x0a
     f9a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <Y_pos+0x2>
     f9e:	9b 87       	std	Y+11, r25	; 0x0b
     fa0:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <Y_pos+0x3>
     fa4:	9c 87       	std	Y+12, r25	; 0x0c
     fa6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <Y_pos+0x4>
     faa:	9d 87       	std	Y+13, r25	; 0x0d
     fac:	8e 87       	std	Y+14, r24	; 0x0e
     fae:	8a e5       	ldi	r24, 0x5A	; 90
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
     fb2:	a5 e1       	ldi	r26, 0x15	; 21
     fb4:	b2 e0       	ldi	r27, 0x02	; 2
     fb6:	8c 91       	ld	r24, X
     fb8:	88 8b       	std	Y+16, r24	; 0x10
     fba:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Z_pos+0x1>
     fbe:	89 8b       	std	Y+17, r24	; 0x11
     fc0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Z_pos+0x2>
     fc4:	8a 8b       	std	Y+18, r24	; 0x12
     fc6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Z_pos+0x3>
     fca:	8b 8b       	std	Y+19, r24	; 0x13
     fcc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Z_pos+0x4>
     fd0:	8c 8b       	std	Y+20, r24	; 0x14
     fd2:	8d e0       	ldi	r24, 0x0D	; 13
     fd4:	8d 8b       	std	Y+21, r24	; 0x15
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
						' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'\r'};
					Transmit_Data(pos);
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	bf cb       	rjmp	.-2178   	; 0x768 <main+0xcc>
				case 140:
					SB = get_value(String,'S');
     fea:	63 e5       	ldi	r22, 0x53	; 83
     fec:	81 ec       	ldi	r24, 0xC1	; 193
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
     ff4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <SB>
     ff8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <SB+0x1>
     ffc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SB+0x2>
    1000:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <SB+0x3>
					BED_Activ = 1;
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <BED_Activ>
					Transmit_Data("ok");
    100a:	8e eb       	ldi	r24, 0xBE	; 190
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
    1012:	aa cb       	rjmp	.-2220   	; 0x768 <main+0xcc>
				case 190:
					SB = get_value(String,'S');
    1014:	63 e5       	ldi	r22, 0x53	; 83
    1016:	81 ec       	ldi	r24, 0xC1	; 193
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    101e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <SB>
    1022:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <SB+0x1>
    1026:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SB+0x2>
    102a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <SB+0x3>
					status = 1;
    102e:	21 e0       	ldi	r18, 0x01	; 1
    1030:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <status>
					while(getTemp(T2) < SB);
    1034:	82 e5       	ldi	r24, 0x52	; 82
    1036:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    103a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <SB>
    103e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <SB+0x1>
    1042:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <SB+0x2>
    1046:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <SB+0x3>
    104a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    104e:	88 23       	and	r24, r24
    1050:	8c f3       	brlt	.-30     	; 0x1034 <main+0x998>
					status = 0;
    1052:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
					Transmit_Data("ok");
    1056:	8e eb       	ldi	r24, 0xBE	; 190
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
    105e:	84 cb       	rjmp	.-2296   	; 0x768 <main+0xcc>
				case 206:
					old_val_1 = 0;
    1060:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <old_val_1.2340>
    1064:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <old_val_1.2340+0x1>
    1068:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <old_val_1.2340+0x2>
    106c:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <old_val_1.2340+0x3>
					old_val_2 = 0;
    1070:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <old_val_2.2341>
    1074:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <old_val_2.2341+0x1>
    1078:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <old_val_2.2341+0x2>
    107c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <old_val_2.2341+0x3>
					old_val_3 = 0;
    1080:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__data_end>
    1084:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__data_end+0x1>
    1088:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__data_end+0x2>
    108c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__data_end+0x3>
					homeSet = 1;
    1090:	31 e0       	ldi	r19, 0x01	; 1
    1092:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <homeSet>
					Transmit_Data("ok");
    1096:	8e eb       	ldi	r24, 0xBE	; 190
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
    109e:	64 cb       	rjmp	.-2360   	; 0x768 <main+0xcc>
				case 302:
					SE0 = get_value(String,'S');
    10a0:	63 e5       	ldi	r22, 0x53	; 83
    10a2:	81 ec       	ldi	r24, 0xC1	; 193
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    10aa:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <SE0>
    10ae:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <SE0+0x1>
    10b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <SE0+0x2>
    10b6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <SE0+0x3>
					if (SE0 <= 25 )
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	48 ec       	ldi	r20, 0xC8	; 200
    10c0:	51 e4       	ldi	r21, 0x41	; 65
    10c2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	1c f0       	brlt	.+6      	; 0x10d0 <main+0xa34>
					{
						Fextrud = 1;
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <Fextrud>
					}
				case 501:
					EEPROM_ReadNBytes(XSTEP_PER_mm_address,X_pos,5);
    10d0:	45 e0       	ldi	r20, 0x05	; 5
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	67 eb       	ldi	r22, 0xB7	; 183
    10d6:	71 e0       	ldi	r23, 0x01	; 1
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(YSTEP_PER_mm_address,Y_pos,5);
    10e0:	45 e0       	ldi	r20, 0x05	; 5
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	69 ea       	ldi	r22, 0xA9	; 169
    10e6:	71 e0       	ldi	r23, 0x01	; 1
    10e8:	85 e0       	ldi	r24, 0x05	; 5
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ZSTEP_PER_mm_address,Z_pos,5);
    10f0:	45 e0       	ldi	r20, 0x05	; 5
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	65 e1       	ldi	r22, 0x15	; 21
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					EEPROM_ReadNBytes(ESTEP_PER_mm_address,E_pos,5);
    1100:	45 e0       	ldi	r20, 0x05	; 5
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	63 e6       	ldi	r22, 0x63	; 99
    1106:	71 e0       	ldi	r23, 0x01	; 1
    1108:	8f e0       	ldi	r24, 0x0F	; 15
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 4b 01 	call	0x296	; 0x296 <EEPROM_ReadNBytes>
					Xspm = atof(X_pos);
    1110:	87 eb       	ldi	r24, 0xB7	; 183
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
    1118:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <Xspm>
    111c:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <Xspm+0x1>
    1120:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Xspm+0x2>
    1124:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <Xspm+0x3>
					Yspm = atof(Y_pos);
    1128:	89 ea       	ldi	r24, 0xA9	; 169
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
    1130:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <Yspm>
    1134:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <Yspm+0x1>
    1138:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Yspm+0x2>
    113c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <Yspm+0x3>
					Zspm = atof(Z_pos);
    1140:	85 e1       	ldi	r24, 0x15	; 21
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
    1148:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <Zspm>
    114c:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <Zspm+0x1>
    1150:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Zspm+0x2>
    1154:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <Zspm+0x3>
					Espm = atof(E_pos);
    1158:	83 e6       	ldi	r24, 0x63	; 99
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <atof>
    1160:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <Espm>
    1164:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <Espm+0x1>
    1168:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <Espm+0x2>
    116c:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <Espm+0x3>
					Transmit_Data("ok");
    1170:	8e eb       	ldi	r24, 0xBE	; 190
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
    1178:	f7 ca       	rjmp	.-2578   	; 0x768 <main+0xcc>
    117a:	e7 eb       	ldi	r30, 0xB7	; 183
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	29 ea       	ldi	r18, 0xA9	; 169
    1180:	31 e0       	ldi	r19, 0x01	; 1
    1182:	85 e1       	ldi	r24, 0x15	; 21
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	a3 e6       	ldi	r26, 0x63	; 99
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	bd 01       	movw	r22, r26
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
					{
						X_pos[i] = 0;
    118c:	11 92       	st	Z+, r1
						Y_pos[i] = 0;
    118e:	d9 01       	movw	r26, r18
    1190:	1d 92       	st	X+, r1
    1192:	9d 01       	movw	r18, r26
						Z_pos[i] = 0;
    1194:	dc 01       	movw	r26, r24
    1196:	1d 92       	st	X+, r1
    1198:	cd 01       	movw	r24, r26
						E_pos[i] = 0;
    119a:	db 01       	movw	r26, r22
    119c:	1d 92       	st	X+, r1
    119e:	bd 01       	movw	r22, r26
					Zspm = atof(Z_pos);
					Espm = atof(E_pos);
					Transmit_Data("ok");
					break;
				case 503:
					for (int i = 0 ; i < 10 ; i ++)
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	e1 3c       	cpi	r30, 0xC1	; 193
    11a4:	fb 07       	cpc	r31, r27
    11a6:	91 f7       	brne	.-28     	; 0x118c <main+0xaf0>
						X_pos[i] = 0;
						Y_pos[i] = 0;
						Z_pos[i] = 0;
						E_pos[i] = 0;
					}
					sprintf(X_pos,dtostrf(Xspm, 2,3,"%f"));
    11a8:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <Xspm>
    11ac:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <Xspm+0x1>
    11b0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Xspm+0x2>
    11b4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Xspm+0x3>
    11b8:	01 ec       	ldi	r16, 0xC1	; 193
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	23 e0       	ldi	r18, 0x03	; 3
    11be:	42 e0       	ldi	r20, 0x02	; 2
    11c0:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	e7 eb       	ldi	r30, 0xB7	; 183
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	ff 93       	push	r31
    11ce:	ef 93       	push	r30
    11d0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Y_pos,dtostrf(Yspm, 2,3,"%f"));
    11d4:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <Yspm>
    11d8:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <Yspm+0x1>
    11dc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Yspm+0x2>
    11e0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <Yspm+0x3>
    11e4:	23 e0       	ldi	r18, 0x03	; 3
    11e6:	42 e0       	ldi	r20, 0x02	; 2
    11e8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	49 ea       	ldi	r20, 0xA9	; 169
    11f2:	51 e0       	ldi	r21, 0x01	; 1
    11f4:	5f 93       	push	r21
    11f6:	4f 93       	push	r20
    11f8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(Z_pos,dtostrf(Zspm, 2,3,"%f"));
    11fc:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <Zspm>
    1200:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <Zspm+0x1>
    1204:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Zspm+0x2>
    1208:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <Zspm+0x3>
    120c:	23 e0       	ldi	r18, 0x03	; 3
    120e:	42 e0       	ldi	r20, 0x02	; 2
    1210:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    1214:	9f 93       	push	r25
    1216:	8f 93       	push	r24
    1218:	85 e1       	ldi	r24, 0x15	; 21
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	9f 93       	push	r25
    121e:	8f 93       	push	r24
    1220:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					sprintf(E_pos,dtostrf(Espm, 2,3,"%f"));
    1224:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <Espm>
    1228:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <Espm+0x1>
    122c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <Espm+0x2>
    1230:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <Espm+0x3>
    1234:	23 e0       	ldi	r18, 0x03	; 3
    1236:	42 e0       	ldi	r20, 0x02	; 2
    1238:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    123c:	9f 93       	push	r25
    123e:	8f 93       	push	r24
    1240:	e3 e6       	ldi	r30, 0x63	; 99
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	ff 93       	push	r31
    1246:	ef 93       	push	r30
    1248:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
					char acc[44]={'X',
    124c:	88 e5       	ldi	r24, 0x58	; 88
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	a7 eb       	ldi	r26, 0xB7	; 183
    1252:	b1 e0       	ldi	r27, 0x01	; 1
    1254:	8c 91       	ld	r24, X
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <X_pos+0x1>
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <X_pos+0x2>
    1262:	8c 83       	std	Y+4, r24	; 0x04
    1264:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <X_pos+0x3>
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <X_pos+0x4>
    126e:	8e 83       	std	Y+6, r24	; 0x06
    1270:	b3 e7       	ldi	r27, 0x73	; 115
    1272:	bf 83       	std	Y+7, r27	; 0x07
    1274:	ef e2       	ldi	r30, 0x2F	; 47
    1276:	e8 87       	std	Y+8, r30	; 0x08
    1278:	8d e6       	ldi	r24, 0x6D	; 109
    127a:	89 87       	std	Y+9, r24	; 0x09
    127c:	8a 87       	std	Y+10, r24	; 0x0a
    127e:	90 e2       	ldi	r25, 0x20	; 32
    1280:	9b 87       	std	Y+11, r25	; 0x0b
    1282:	29 e5       	ldi	r18, 0x59	; 89
    1284:	2c 87       	std	Y+12, r18	; 0x0c
    1286:	a9 ea       	ldi	r26, 0xA9	; 169
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	2c 91       	ld	r18, X
    128c:	2d 87       	std	Y+13, r18	; 0x0d
    128e:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <Y_pos+0x1>
    1292:	2e 87       	std	Y+14, r18	; 0x0e
    1294:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <Y_pos+0x2>
    1298:	2f 87       	std	Y+15, r18	; 0x0f
    129a:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <Y_pos+0x3>
    129e:	28 8b       	std	Y+16, r18	; 0x10
    12a0:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <Y_pos+0x4>
    12a4:	29 8b       	std	Y+17, r18	; 0x11
    12a6:	b3 e7       	ldi	r27, 0x73	; 115
    12a8:	ba 8b       	std	Y+18, r27	; 0x12
    12aa:	eb 8b       	std	Y+19, r30	; 0x13
    12ac:	8c 8b       	std	Y+20, r24	; 0x14
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	2a e5       	ldi	r18, 0x5A	; 90
    12b4:	2f 8b       	std	Y+23, r18	; 0x17
    12b6:	e5 e1       	ldi	r30, 0x15	; 21
    12b8:	f2 e0       	ldi	r31, 0x02	; 2
    12ba:	20 81       	ld	r18, Z
    12bc:	28 8f       	std	Y+24, r18	; 0x18
    12be:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <Z_pos+0x1>
    12c2:	29 8f       	std	Y+25, r18	; 0x19
    12c4:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <Z_pos+0x2>
    12c8:	2a 8f       	std	Y+26, r18	; 0x1a
    12ca:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <Z_pos+0x3>
    12ce:	2b 8f       	std	Y+27, r18	; 0x1b
    12d0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <Z_pos+0x4>
    12d4:	2c 8f       	std	Y+28, r18	; 0x1c
    12d6:	bd 8f       	std	Y+29, r27	; 0x1d
    12d8:	ff e2       	ldi	r31, 0x2F	; 47
    12da:	fe 8f       	std	Y+30, r31	; 0x1e
    12dc:	8f 8f       	std	Y+31, r24	; 0x1f
    12de:	88 a3       	std	Y+32, r24	; 0x20
    12e0:	99 a3       	std	Y+33, r25	; 0x21
    12e2:	95 e4       	ldi	r25, 0x45	; 69
    12e4:	9a a3       	std	Y+34, r25	; 0x22
    12e6:	a3 e6       	ldi	r26, 0x63	; 99
    12e8:	b1 e0       	ldi	r27, 0x01	; 1
    12ea:	9c 91       	ld	r25, X
    12ec:	9b a3       	std	Y+35, r25	; 0x23
    12ee:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <E_pos+0x1>
    12f2:	9c a3       	std	Y+36, r25	; 0x24
    12f4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <E_pos+0x2>
    12f8:	9d a3       	std	Y+37, r25	; 0x25
    12fa:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <E_pos+0x3>
    12fe:	9e a3       	std	Y+38, r25	; 0x26
    1300:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <E_pos+0x4>
    1304:	9f a3       	std	Y+39, r25	; 0x27
    1306:	b3 e7       	ldi	r27, 0x73	; 115
    1308:	b8 a7       	std	Y+40, r27	; 0x28
    130a:	f9 a7       	std	Y+41, r31	; 0x29
    130c:	8a a7       	std	Y+42, r24	; 0x2a
    130e:	8b a7       	std	Y+43, r24	; 0x2b
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	8c a7       	std	Y+44, r24	; 0x2c
						X_pos[0],X_pos[1],X_pos[2],X_pos[3],X_pos[4],'s','/','m','m',
						' ','Y',
						Y_pos[0],Y_pos[1],Y_pos[2],Y_pos[3],Y_pos[4],
					's','/','m','m',' ','Z',Z_pos[0],Z_pos[1],Z_pos[2],Z_pos[3],Z_pos[4],'s','/','m','m',
					' ','E',E_pos[0],E_pos[1],E_pos[2],E_pos[3],E_pos[4],'s','/','m','m','\r'};
					Transmit_Data(acc);
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break; 				
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	20 ca       	rjmp	.-3008   	; 0x768 <main+0xcc>
			}	
		}
		else if (String[0] == 'G')
    1328:	87 34       	cpi	r24, 0x47	; 71
    132a:	09 f0       	breq	.+2      	; 0x132e <main+0xc92>
    132c:	1d ca       	rjmp	.-3014   	; 0x768 <main+0xcc>
		{
			val = get_int (String,'G');
    132e:	67 e4       	ldi	r22, 0x47	; 71
    1330:	81 ec       	ldi	r24, 0xC1	; 193
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	0e 94 4b 02 	call	0x496	; 0x496 <get_int>
    1338:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <val+0x1>
    133c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <val>
			switch (val)
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	91 05       	cpc	r25, r1
    1344:	3c f4       	brge	.+14     	; 0x1354 <main+0xcb8>
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	91 05       	cpc	r25, r1
    134a:	0c f0       	brlt	.+2      	; 0x134e <main+0xcb2>
    134c:	10 c1       	rjmp	.+544    	; 0x156e <main+0xed2>
    134e:	99 23       	and	r25, r25
    1350:	2c f4       	brge	.+10     	; 0x135c <main+0xcc0>
    1352:	0a ca       	rjmp	.-3052   	; 0x768 <main+0xcc>
    1354:	4c 97       	sbiw	r24, 0x1c	; 28
    1356:	09 f4       	brne	.+2      	; 0x135a <main+0xcbe>
    1358:	af c3       	rjmp	.+1886   	; 0x1ab8 <main+0x141c>
    135a:	06 ca       	rjmp	.-3060   	; 0x768 <main+0xcc>
			{
				case 0:case 1:
					motor_init();
    135c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
					value_1 = get_value(String,'X');           //extract first value
    1360:	68 e5       	ldi	r22, 0x58	; 88
    1362:	81 ec       	ldi	r24, 0xC1	; 193
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    136a:	6d a7       	std	Y+45, r22	; 0x2d
    136c:	7e a7       	std	Y+46, r23	; 0x2e
    136e:	8f a7       	std	Y+47, r24	; 0x2f
    1370:	98 ab       	std	Y+48, r25	; 0x30
					value_2 = get_value(String,'Y'); //call function to extract second value
    1372:	69 e5       	ldi	r22, 0x59	; 89
    1374:	81 ec       	ldi	r24, 0xC1	; 193
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    137c:	6b 01       	movw	r12, r22
    137e:	7c 01       	movw	r14, r24
					value_3 = get_value(String,'Z'); //call function to extract third value
    1380:	6a e5       	ldi	r22, 0x5A	; 90
    1382:	81 ec       	ldi	r24, 0xC1	; 193
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    138a:	4b 01       	movw	r8, r22
    138c:	5c 01       	movw	r10, r24
					STEP[3] = get_value(String,'E');
    138e:	65 e4       	ldi	r22, 0x45	; 69
    1390:	81 ec       	ldi	r24, 0xC1	; 193
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1398:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <STEP+0xc>
    139c:	70 93 52 01 	sts	0x0152, r23	; 0x800152 <STEP+0xd>
    13a0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <STEP+0xe>
    13a4:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <STEP+0xf>
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <main+0xd1c>
    13b6:	d9 c3       	rjmp	.+1970   	; 0x1b6a <main+0x14ce>
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	6d a5       	ldd	r22, Y+45	; 0x2d
    13c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    13c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c4:	98 a9       	ldd	r25, Y+48	; 0x30
    13c6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <main+0xd34>
    13ce:	cd c3       	rjmp	.+1946   	; 0x1b6a <main+0x14ce>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <main+0xd48>
    13e2:	c3 c3       	rjmp	.+1926   	; 0x1b6a <main+0x14ce>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	c5 01       	movw	r24, r10
    13ec:	b4 01       	movw	r22, r8
    13ee:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    13f2:	81 11       	cpse	r24, r1
    13f4:	a3 c3       	rjmp	.+1862   	; 0x1b3c <main+0x14a0>
    13f6:	b9 c3       	rjmp	.+1906   	; 0x1b6a <main+0x14ce>
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							Fe = FN;
    13f8:	20 92 16 01 	sts	0x0116, r2	; 0x800116 <Fe>
    13fc:	30 92 17 01 	sts	0x0117, r3	; 0x800117 <Fe+0x1>
    1400:	40 92 18 01 	sts	0x0118, r4	; 0x800118 <Fe+0x2>
    1404:	50 92 19 01 	sts	0x0119, r5	; 0x800119 <Fe+0x3>
    1408:	08 c0       	rjmp	.+16     	; 0x141a <main+0xd7e>
					else
					{
						FN = get_value(String,'F');
						if (FN != 0)
						{
							F = FN;
    140a:	20 92 1e 01 	sts	0x011E, r2	; 0x80011e <F>
    140e:	30 92 1f 01 	sts	0x011F, r3	; 0x80011f <F+0x1>
    1412:	40 92 20 01 	sts	0x0120, r4	; 0x800120 <F+0x2>
    1416:	50 92 21 01 	sts	0x0121, r5	; 0x800121 <F+0x3>
						}
					}
					if (!(value_1>200||value_2>200||value_3>500)) // if the values don't skip the plate ,use it
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	48 e4       	ldi	r20, 0x48	; 72
    1420:	53 e4       	ldi	r21, 0x43	; 67
    1422:	6d a5       	ldd	r22, Y+45	; 0x2d
    1424:	7e a5       	ldd	r23, Y+46	; 0x2e
    1426:	8f a5       	ldd	r24, Y+47	; 0x2f
    1428:	98 a9       	ldd	r25, Y+48	; 0x30
    142a:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    142e:	18 16       	cp	r1, r24
    1430:	0c f4       	brge	.+2      	; 0x1434 <main+0xd98>
    1432:	9a c9       	rjmp	.-3276   	; 0x768 <main+0xcc>
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	48 e4       	ldi	r20, 0x48	; 72
    143a:	53 e4       	ldi	r21, 0x43	; 67
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    1444:	18 16       	cp	r1, r24
    1446:	0c f4       	brge	.+2      	; 0x144a <main+0xdae>
    1448:	8f c9       	rjmp	.-3298   	; 0x768 <main+0xcc>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a ef       	ldi	r20, 0xFA	; 250
    1450:	53 e4       	ldi	r21, 0x43	; 67
    1452:	c5 01       	movw	r24, r10
    1454:	b4 01       	movw	r22, r8
    1456:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    145a:	18 16       	cp	r1, r24
    145c:	0c f4       	brge	.+2      	; 0x1460 <main+0xdc4>
    145e:	84 c9       	rjmp	.-3320   	; 0x768 <main+0xcc>

					{
						STEP[0] = sub_function (&old_val_1, value_1)*Xspm;     //call function to extract first step
    1460:	4d a5       	ldd	r20, Y+45	; 0x2d
    1462:	5e a5       	ldd	r21, Y+46	; 0x2e
    1464:	6f a5       	ldd	r22, Y+47	; 0x2f
    1466:	78 a9       	ldd	r23, Y+48	; 0x30
    1468:	86 ef       	ldi	r24, 0xF6	; 246
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    1470:	9b 01       	movw	r18, r22
    1472:	ac 01       	movw	r20, r24
    1474:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <Xspm>
    1478:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <Xspm+0x1>
    147c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Xspm+0x2>
    1480:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Xspm+0x3>
    1484:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1488:	a5 e4       	ldi	r26, 0x45	; 69
    148a:	b1 e0       	ldi	r27, 0x01	; 1
    148c:	6d 93       	st	X+, r22
    148e:	7d 93       	st	X+, r23
    1490:	8d 93       	st	X+, r24
    1492:	9c 93       	st	X, r25
    1494:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = sub_function (&old_val_2, value_2)*Yspm;    //call function to extract second step
    1496:	b7 01       	movw	r22, r14
    1498:	a6 01       	movw	r20, r12
    149a:	82 ef       	ldi	r24, 0xF2	; 242
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <Yspm>
    14aa:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <Yspm+0x1>
    14ae:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Yspm+0x2>
    14b2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <Yspm+0x3>
    14b6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    14ba:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    14be:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    14c2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    14c6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
						STEP[2] = sub_function (&old_val_3, value_3)*Zspm;    //call function to extract third step
    14ca:	b5 01       	movw	r22, r10
    14cc:	a4 01       	movw	r20, r8
    14ce:	8e ee       	ldi	r24, 0xEE	; 238
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <Zspm>
    14de:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <Zspm+0x1>
    14e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Zspm+0x2>
    14e6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <Zspm+0x3>
    14ea:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    14ee:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <STEP+0x8>
    14f2:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <STEP+0x9>
    14f6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <STEP+0xa>
    14fa:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <STEP+0xb>
						value_1 = 0;
						value_2 = 0;
						value_3 = 0;
						status = 1;
    14fe:	b1 e0       	ldi	r27, 0x01	; 1
    1500:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <status>
						if ((extrud || Fextrud))
    1504:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <extrud>
    1508:	81 11       	cpse	r24, r1
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <main+0xe78>
    150c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Fextrud>
    1510:	88 23       	and	r24, r24
    1512:	09 f1       	breq	.+66     	; 0x1556 <main+0xeba>
						{
							motor_movement(STEP,F,Fe);
    1514:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Fe>
    1518:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Fe+0x1>
    151c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Fe+0x2>
    1520:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Fe+0x3>
    1524:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1528:	6b 01       	movw	r12, r22
    152a:	7c 01       	movw	r14, r24
    152c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <F>
    1530:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <F+0x1>
    1534:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <F+0x2>
    1538:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <F+0x3>
    153c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1540:	ab 01       	movw	r20, r22
    1542:	bc 01       	movw	r22, r24
    1544:	97 01       	movw	r18, r14
    1546:	86 01       	movw	r16, r12
    1548:	85 e4       	ldi	r24, 0x45	; 69
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <motor_movement>
							status = 0;
    1550:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <main+0xec8>
						} 
						else
						{
							Transmit_Data("error extruder temp.");
    1556:	84 ec       	ldi	r24, 0xC4	; 196
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
							Transmit_Char('\r');
    155e:	8d e0       	ldi	r24, 0x0D	; 13
    1560:	0e 94 4b 12 	call	0x2496	; 0x2496 <Transmit_Char>
						}
						Transmit_Data("ok");					
    1564:	8e eb       	ldi	r24, 0xBE	; 190
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
    156c:	fd c8       	rjmp	.-3590   	; 0x768 <main+0xcc>
					}
					break;
				case 2:case 3:
					value_1 = get_value(String,'X');  //extract first value
    156e:	68 e5       	ldi	r22, 0x58	; 88
    1570:	81 ec       	ldi	r24, 0xC1	; 193
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1578:	69 ab       	std	Y+49, r22	; 0x31
    157a:	7a ab       	std	Y+50, r23	; 0x32
    157c:	8b ab       	std	Y+51, r24	; 0x33
    157e:	9c ab       	std	Y+52, r25	; 0x34
					value_2 = get_value(String,'Y'); //call function to extract second value
    1580:	69 e5       	ldi	r22, 0x59	; 89
    1582:	81 ec       	ldi	r24, 0xC1	; 193
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    158a:	6d ab       	std	Y+53, r22	; 0x35
    158c:	7e ab       	std	Y+54, r23	; 0x36
    158e:	8f ab       	std	Y+55, r24	; 0x37
    1590:	98 af       	std	Y+56, r25	; 0x38
					I = get_value(String,'I');
    1592:	69 e4       	ldi	r22, 0x49	; 73
    1594:	81 ec       	ldi	r24, 0xC1	; 193
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    159c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <I>
    15a0:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <I+0x1>
    15a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I+0x2>
    15a8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <I+0x3>
					J = get_value(String,'J');
    15ac:	6a e4       	ldi	r22, 0x4A	; 74
    15ae:	81 ec       	ldi	r24, 0xC1	; 193
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15b6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <J>
    15ba:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <J+0x1>
    15be:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <J+0x2>
    15c2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <J+0x3>
					FN = get_value(String,'F');
    15c6:	66 e4       	ldi	r22, 0x46	; 70
    15c8:	81 ec       	ldi	r24, 0xC1	; 193
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    15d0:	6b 01       	movw	r12, r22
    15d2:	7c 01       	movw	r14, r24
    15d4:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <FN>
    15d8:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <FN+0x1>
    15dc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <FN+0x2>
    15e0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <FN+0x3>
					if (FN != 0)
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	41 f0       	breq	.+16     	; 0x1602 <main+0xf66>
					{
						F = FN;
    15f2:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <F>
    15f6:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <F+0x1>
    15fa:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <F+0x2>
    15fe:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <F+0x3>
					}
					R = get_value(String,'R');
    1602:	62 e5       	ldi	r22, 0x52	; 82
    1604:	81 ec       	ldi	r24, 0xC1	; 193
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    160c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <R>
    1610:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <R+0x1>
    1614:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <R+0x2>
    1618:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <R+0x3>
					if (R == 0)
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1626:	81 11       	cpse	r24, r1
    1628:	2e c0       	rjmp	.+92     	; 0x1686 <main+0xfea>
					{
						R = sqrt(pow(I,2)+pow(J,2));
    162a:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <I>
    162e:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <I+0x1>
    1632:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <I+0x2>
    1636:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <I+0x3>
    163a:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <J>
    163e:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <J+0x1>
    1642:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <J+0x2>
    1646:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <J+0x3>
    164a:	a5 01       	movw	r20, r10
    164c:	94 01       	movw	r18, r8
    164e:	c5 01       	movw	r24, r10
    1650:	b4 01       	movw	r22, r8
    1652:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1656:	4b 01       	movw	r8, r22
    1658:	5c 01       	movw	r10, r24
    165a:	a7 01       	movw	r20, r14
    165c:	96 01       	movw	r18, r12
    165e:	c7 01       	movw	r24, r14
    1660:	b6 01       	movw	r22, r12
    1662:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	c5 01       	movw	r24, r10
    166c:	b4 01       	movw	r22, r8
    166e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    1672:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <sqrt>
    1676:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <R>
    167a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <R+0x1>
    167e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <R+0x2>
    1682:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <R+0x3>
					} 
					status = 1;
    1686:	e1 e0       	ldi	r30, 0x01	; 1
    1688:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <status>
					for (int th = 0 ; th <= 360 ; th++)
    168c:	41 2c       	mov	r4, r1
    168e:	51 2c       	mov	r5, r1
    1690:	29 ac       	ldd	r2, Y+57	; 0x39
    1692:	3a ac       	ldd	r3, Y+58	; 0x3a
					{
						double xc = R*cos(th)*cos(th);
    1694:	b2 01       	movw	r22, r4
    1696:	05 2c       	mov	r0, r5
    1698:	00 0c       	add	r0, r0
    169a:	88 0b       	sbc	r24, r24
    169c:	99 0b       	sbc	r25, r25
    169e:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
    16a2:	6b 01       	movw	r12, r22
    16a4:	7c 01       	movw	r14, r24
    16a6:	0e 94 ed 12 	call	0x25da	; 0x25da <cos>
    16aa:	6d a7       	std	Y+45, r22	; 0x2d
    16ac:	7e a7       	std	Y+46, r23	; 0x2e
    16ae:	8f a7       	std	Y+47, r24	; 0x2f
    16b0:	98 ab       	std	Y+48, r25	; 0x30
    16b2:	80 90 02 01 	lds	r8, 0x0102	; 0x800102 <R>
    16b6:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <R+0x1>
    16ba:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <R+0x2>
    16be:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <R+0x3>
    16c2:	a5 01       	movw	r20, r10
    16c4:	94 01       	movw	r18, r8
    16c6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    16ca:	2d a5       	ldd	r18, Y+45	; 0x2d
    16cc:	3e a5       	ldd	r19, Y+46	; 0x2e
    16ce:	4f a5       	ldd	r20, Y+47	; 0x2f
    16d0:	58 a9       	ldd	r21, Y+48	; 0x30
    16d2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    16d6:	6d a7       	std	Y+45, r22	; 0x2d
    16d8:	7e a7       	std	Y+46, r23	; 0x2e
    16da:	8f a7       	std	Y+47, r24	; 0x2f
    16dc:	98 ab       	std	Y+48, r25	; 0x30
						double yc = R*sin(th)*sin(th);
    16de:	c7 01       	movw	r24, r14
    16e0:	b6 01       	movw	r22, r12
    16e2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <sin>
    16e6:	6b 01       	movw	r12, r22
    16e8:	7c 01       	movw	r14, r24
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	c5 01       	movw	r24, r10
    16f0:	b4 01       	movw	r22, r8
    16f2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    16f6:	a7 01       	movw	r20, r14
    16f8:	96 01       	movw	r18, r12
    16fa:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    16fe:	6b 01       	movw	r12, r22
    1700:	7c 01       	movw	r14, r24
						if ((xc >= value_1) && (yc >= value_2))
    1702:	2d a5       	ldd	r18, Y+45	; 0x2d
    1704:	3e a5       	ldd	r19, Y+46	; 0x2e
    1706:	4f a5       	ldd	r20, Y+47	; 0x2f
    1708:	58 a9       	ldd	r21, Y+48	; 0x30
    170a:	69 a9       	ldd	r22, Y+49	; 0x31
    170c:	7a a9       	ldd	r23, Y+50	; 0x32
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1716:	18 16       	cp	r1, r24
    1718:	5c f0       	brlt	.+22     	; 0x1730 <main+0x1094>
    171a:	a7 01       	movw	r20, r14
    171c:	96 01       	movw	r18, r12
    171e:	6d a9       	ldd	r22, Y+53	; 0x35
    1720:	7e a9       	ldd	r23, Y+54	; 0x36
    1722:	8f a9       	ldd	r24, Y+55	; 0x37
    1724:	98 ad       	ldd	r25, Y+56	; 0x38
    1726:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    172a:	18 16       	cp	r1, r24
    172c:	0c f0       	brlt	.+2      	; 0x1730 <main+0x1094>
    172e:	c0 c1       	rjmp	.+896    	; 0x1ab0 <main+0x1414>
							break;
						if ((extrud || Fextrud))
    1730:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <extrud>
    1734:	81 11       	cpse	r24, r1
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <main+0x10a6>
    1738:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Fextrud>
    173c:	88 23       	and	r24, r24
    173e:	09 f4       	brne	.+2      	; 0x1742 <main+0x10a6>
    1740:	ae c1       	rjmp	.+860    	; 0x1a9e <main+0x1402>
						{
							if (val == 2)
    1742:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <val>
    1746:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <val+0x1>
    174a:	02 97       	sbiw	r24, 0x02	; 2
    174c:	09 f0       	breq	.+2      	; 0x1750 <main+0x10b4>
    174e:	b7 c0       	rjmp	.+366    	; 0x18be <main+0x1222>
							{
								if ((I == 0) && (J == 0))
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	a9 01       	movw	r20, r18
    1756:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <I>
    175a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <I+0x1>
    175e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I+0x2>
    1762:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <I+0x3>
    1766:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    176a:	81 11       	cpse	r24, r1
    176c:	45 c0       	rjmp	.+138    	; 0x17f8 <main+0x115c>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <J>
    1778:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <J+0x1>
    177c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <J+0x2>
    1780:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <J+0x3>
    1784:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1788:	81 11       	cpse	r24, r1
    178a:	36 c0       	rjmp	.+108    	; 0x17f8 <main+0x115c>
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm;     //call function to extract first step
    178c:	4d a5       	ldd	r20, Y+45	; 0x2d
    178e:	5e a5       	ldd	r21, Y+46	; 0x2e
    1790:	6f a5       	ldd	r22, Y+47	; 0x2f
    1792:	78 a9       	ldd	r23, Y+48	; 0x30
    1794:	86 ef       	ldi	r24, 0xF6	; 246
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <Xspm>
    17a4:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <Xspm+0x1>
    17a8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Xspm+0x2>
    17ac:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Xspm+0x3>
    17b0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    17b4:	a5 e4       	ldi	r26, 0x45	; 69
    17b6:	b1 e0       	ldi	r27, 0x01	; 1
    17b8:	6d 93       	st	X+, r22
    17ba:	7d 93       	st	X+, r23
    17bc:	8d 93       	st	X+, r24
    17be:	9c 93       	st	X, r25
    17c0:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*Yspm;    //call function to extract second step
    17c2:	b7 01       	movw	r22, r14
    17c4:	a6 01       	movw	r20, r12
    17c6:	82 ef       	ldi	r24, 0xF2	; 242
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <Yspm>
    17d6:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <Yspm+0x1>
    17da:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Yspm+0x2>
    17de:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <Yspm+0x3>
    17e2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    17e6:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    17ea:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    17ee:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    17f2:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
    17f6:	1d c1       	rjmp	.+570    	; 0x1a32 <main+0x1396>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(-I/I);     //call function to extract first step
    17f8:	4d a5       	ldd	r20, Y+45	; 0x2d
    17fa:	5e a5       	ldd	r21, Y+46	; 0x2e
    17fc:	6f a5       	ldd	r22, Y+47	; 0x2f
    17fe:	78 a9       	ldd	r23, Y+48	; 0x30
    1800:	86 ef       	ldi	r24, 0xF6	; 246
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    1808:	80 90 0a 01 	lds	r8, 0x010A	; 0x80010a <I>
    180c:	90 90 0b 01 	lds	r9, 0x010B	; 0x80010b <I+0x1>
    1810:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <I+0x2>
    1814:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <I+0x3>
    1818:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Xspm>
    181c:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <Xspm+0x1>
    1820:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Xspm+0x2>
    1824:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <Xspm+0x3>
    1828:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    182c:	6d a7       	std	Y+45, r22	; 0x2d
    182e:	7e a7       	std	Y+46, r23	; 0x2e
    1830:	8f a7       	std	Y+47, r24	; 0x2f
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	c5 01       	movw	r24, r10
    1836:	b4 01       	movw	r22, r8
    1838:	90 58       	subi	r25, 0x80	; 128
    183a:	a5 01       	movw	r20, r10
    183c:	94 01       	movw	r18, r8
    183e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	6d a5       	ldd	r22, Y+45	; 0x2d
    1848:	7e a5       	ldd	r23, Y+46	; 0x2e
    184a:	8f a5       	ldd	r24, Y+47	; 0x2f
    184c:	98 a9       	ldd	r25, Y+48	; 0x30
    184e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1852:	e5 e4       	ldi	r30, 0x45	; 69
    1854:	f1 e0       	ldi	r31, 0x01	; 1
    1856:	60 83       	st	Z, r22
    1858:	71 83       	std	Z+1, r23	; 0x01
    185a:	82 83       	std	Z+2, r24	; 0x02
    185c:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(-J/J);    //call function to extract second step
    185e:	b7 01       	movw	r22, r14
    1860:	a6 01       	movw	r20, r12
    1862:	82 ef       	ldi	r24, 0xF2	; 242
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    186a:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <J>
    186e:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <J+0x1>
    1872:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <J+0x2>
    1876:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <J+0x3>
    187a:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <Yspm>
    187e:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <Yspm+0x1>
    1882:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <Yspm+0x2>
    1886:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <Yspm+0x3>
    188a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    188e:	4b 01       	movw	r8, r22
    1890:	5c 01       	movw	r10, r24
    1892:	c7 01       	movw	r24, r14
    1894:	b6 01       	movw	r22, r12
    1896:	90 58       	subi	r25, 0x80	; 128
    1898:	a7 01       	movw	r20, r14
    189a:	96 01       	movw	r18, r12
    189c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    18a0:	9b 01       	movw	r18, r22
    18a2:	ac 01       	movw	r20, r24
    18a4:	c5 01       	movw	r24, r10
    18a6:	b4 01       	movw	r22, r8
    18a8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    18ac:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    18b0:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    18b4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    18b8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
    18bc:	ba c0       	rjmp	.+372    	; 0x1a32 <main+0x1396>
								}
							} 
							else
							{
								if ((I == 0) && (J == 0))
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <I>
    18c8:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <I+0x1>
    18cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I+0x2>
    18d0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <I+0x3>
    18d4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    18d8:	81 11       	cpse	r24, r1
    18da:	4b c0       	rjmp	.+150    	; 0x1972 <main+0x12d6>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <J>
    18e6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <J+0x1>
    18ea:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <J+0x2>
    18ee:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <J+0x3>
    18f2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    18f6:	81 11       	cpse	r24, r1
    18f8:	3c c0       	rjmp	.+120    	; 0x1972 <main+0x12d6>
								{
									STEP[0] = sub_function (&old_val_1, xc)*-Xspm;     //call function to extract first step
    18fa:	4d a5       	ldd	r20, Y+45	; 0x2d
    18fc:	5e a5       	ldd	r21, Y+46	; 0x2e
    18fe:	6f a5       	ldd	r22, Y+47	; 0x2f
    1900:	78 a9       	ldd	r23, Y+48	; 0x30
    1902:	86 ef       	ldi	r24, 0xF6	; 246
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
    190e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Xspm>
    1912:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Xspm+0x1>
    1916:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <Xspm+0x2>
    191a:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <Xspm+0x3>
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	90 58       	subi	r25, 0x80	; 128
    1924:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1928:	a5 e4       	ldi	r26, 0x45	; 69
    192a:	b1 e0       	ldi	r27, 0x01	; 1
    192c:	6d 93       	st	X+, r22
    192e:	7d 93       	st	X+, r23
    1930:	8d 93       	st	X+, r24
    1932:	9c 93       	st	X, r25
    1934:	13 97       	sbiw	r26, 0x03	; 3
									STEP[1] = sub_function (&old_val_2, yc)*-Yspm;    //call function to extract second step
    1936:	b7 01       	movw	r22, r14
    1938:	a6 01       	movw	r20, r12
    193a:	82 ef       	ldi	r24, 0xF2	; 242
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    1942:	9b 01       	movw	r18, r22
    1944:	ac 01       	movw	r20, r24
    1946:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Yspm>
    194a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Yspm+0x1>
    194e:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <Yspm+0x2>
    1952:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <Yspm+0x3>
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	90 58       	subi	r25, 0x80	; 128
    195c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1960:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    1964:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    1968:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    196c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
    1970:	60 c0       	rjmp	.+192    	; 0x1a32 <main+0x1396>
								}
								else
								{
									STEP[0] = sub_function (&old_val_1, xc)*Xspm*(I/I);     //call function to extract first step
    1972:	4d a5       	ldd	r20, Y+45	; 0x2d
    1974:	5e a5       	ldd	r21, Y+46	; 0x2e
    1976:	6f a5       	ldd	r22, Y+47	; 0x2f
    1978:	78 a9       	ldd	r23, Y+48	; 0x30
    197a:	86 ef       	ldi	r24, 0xF6	; 246
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    1982:	80 90 0a 01 	lds	r8, 0x010A	; 0x80010a <I>
    1986:	90 90 0b 01 	lds	r9, 0x010B	; 0x80010b <I+0x1>
    198a:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <I+0x2>
    198e:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <I+0x3>
    1992:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Xspm>
    1996:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <Xspm+0x1>
    199a:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Xspm+0x2>
    199e:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <Xspm+0x3>
    19a2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    19a6:	6d a7       	std	Y+45, r22	; 0x2d
    19a8:	7e a7       	std	Y+46, r23	; 0x2e
    19aa:	8f a7       	std	Y+47, r24	; 0x2f
    19ac:	98 ab       	std	Y+48, r25	; 0x30
    19ae:	a5 01       	movw	r20, r10
    19b0:	94 01       	movw	r18, r8
    19b2:	c5 01       	movw	r24, r10
    19b4:	b4 01       	movw	r22, r8
    19b6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    19ba:	9b 01       	movw	r18, r22
    19bc:	ac 01       	movw	r20, r24
    19be:	6d a5       	ldd	r22, Y+45	; 0x2d
    19c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    19c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c4:	98 a9       	ldd	r25, Y+48	; 0x30
    19c6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    19ca:	e5 e4       	ldi	r30, 0x45	; 69
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	60 83       	st	Z, r22
    19d0:	71 83       	std	Z+1, r23	; 0x01
    19d2:	82 83       	std	Z+2, r24	; 0x02
    19d4:	93 83       	std	Z+3, r25	; 0x03
									STEP[1] = sub_function (&old_val_2, yc)*Yspm*(J/J);    //call function to extract second step
    19d6:	b7 01       	movw	r22, r14
    19d8:	a6 01       	movw	r20, r12
    19da:	82 ef       	ldi	r24, 0xF2	; 242
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 a6 02 	call	0x54c	; 0x54c <sub_function>
    19e2:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <J>
    19e6:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <J+0x1>
    19ea:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <J+0x2>
    19ee:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <J+0x3>
    19f2:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <Yspm>
    19f6:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <Yspm+0x1>
    19fa:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <Yspm+0x2>
    19fe:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <Yspm+0x3>
    1a02:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1a06:	4b 01       	movw	r8, r22
    1a08:	5c 01       	movw	r10, r24
    1a0a:	a7 01       	movw	r20, r14
    1a0c:	96 01       	movw	r18, r12
    1a0e:	c7 01       	movw	r24, r14
    1a10:	b6 01       	movw	r22, r12
    1a12:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	c5 01       	movw	r24, r10
    1a1c:	b4 01       	movw	r22, r8
    1a1e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1a22:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    1a26:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    1a2a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    1a2e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
								}
							}
							STEP[2] = 0;
    1a32:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <STEP+0x8>
    1a36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <STEP+0x9>
    1a3a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <STEP+0xa>
    1a3e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <STEP+0xb>
							STEP[3] = Espm;
    1a42:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <Espm>
    1a46:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <Espm+0x1>
    1a4a:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <Espm+0x2>
    1a4e:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <Espm+0x3>
    1a52:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <STEP+0xc>
    1a56:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <STEP+0xd>
    1a5a:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <STEP+0xe>
    1a5e:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <STEP+0xf>
							motor_movement(STEP,F,Fe);
    1a62:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Fe>
    1a66:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Fe+0x1>
    1a6a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Fe+0x2>
    1a6e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Fe+0x3>
    1a72:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1a76:	6b 01       	movw	r12, r22
    1a78:	7c 01       	movw	r14, r24
    1a7a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <F>
    1a7e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <F+0x1>
    1a82:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <F+0x2>
    1a86:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <F+0x3>
    1a8a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1a8e:	ab 01       	movw	r20, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	97 01       	movw	r18, r14
    1a94:	86 01       	movw	r16, r12
    1a96:	82 2d       	mov	r24, r2
    1a98:	93 2d       	mov	r25, r3
    1a9a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <motor_movement>
					if (R == 0)
					{
						R = sqrt(pow(I,2)+pow(J,2));
					} 
					status = 1;
					for (int th = 0 ; th <= 360 ; th++)
    1a9e:	ff ef       	ldi	r31, 0xFF	; 255
    1aa0:	4f 1a       	sub	r4, r31
    1aa2:	5f 0a       	sbc	r5, r31
    1aa4:	29 e6       	ldi	r18, 0x69	; 105
    1aa6:	42 16       	cp	r4, r18
    1aa8:	21 e0       	ldi	r18, 0x01	; 1
    1aaa:	52 06       	cpc	r5, r18
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <main+0x1414>
    1aae:	f2 cd       	rjmp	.-1052   	; 0x1694 <main+0xff8>
							STEP[2] = 0;
							STEP[3] = Espm;
							motor_movement(STEP,F,Fe);
						} 
					}
					status = 0;
    1ab0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
					break;
    1ab4:	0c 94 b4 03 	jmp	0x768	; 0x768 <main+0xcc>
				case 28:
					if (!homeSet)
    1ab8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <homeSet>
    1abc:	81 11       	cpse	r24, r1
    1abe:	38 c0       	rjmp	.+112    	; 0x1b30 <main+0x1494>
					{
						STEP[0] = find(String,'X');
    1ac0:	68 e5       	ldi	r22, 0x58	; 88
    1ac2:	81 ec       	ldi	r24, 0xC1	; 193
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 91 02 	call	0x522	; 0x522 <find>
    1aca:	68 2f       	mov	r22, r24
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 9a 13 	call	0x2734	; 0x2734 <__floatunsisf>
    1ad6:	a5 e4       	ldi	r26, 0x45	; 69
    1ad8:	b1 e0       	ldi	r27, 0x01	; 1
    1ada:	6d 93       	st	X+, r22
    1adc:	7d 93       	st	X+, r23
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
    1ae2:	13 97       	sbiw	r26, 0x03	; 3
						STEP[1] = find(String,'Y');
    1ae4:	69 e5       	ldi	r22, 0x59	; 89
    1ae6:	81 ec       	ldi	r24, 0xC1	; 193
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	0e 94 91 02 	call	0x522	; 0x522 <find>
    1aee:	68 2f       	mov	r22, r24
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 9a 13 	call	0x2734	; 0x2734 <__floatunsisf>
    1afa:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <STEP+0x4>
    1afe:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <STEP+0x5>
    1b02:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STEP+0x6>
    1b06:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <STEP+0x7>
						STEP[2] = find(String,'Z');
    1b0a:	6a e5       	ldi	r22, 0x5A	; 90
    1b0c:	81 ec       	ldi	r24, 0xC1	; 193
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	0e 94 91 02 	call	0x522	; 0x522 <find>
    1b14:	68 2f       	mov	r22, r24
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__floatunsisf>
    1b20:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <STEP+0x8>
    1b24:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <STEP+0x9>
    1b28:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <STEP+0xa>
    1b2c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <STEP+0xb>
						//make auto home
					} 
					Transmit_Data("ok");
    1b30:	8e eb       	ldi	r24, 0xBE	; 190
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
					break;
    1b38:	0c 94 b4 03 	jmp	0x768	; 0x768 <main+0xcc>
							Fe = FN;
						}
					}
					else
					{
						FN = get_value(String,'F');
    1b3c:	66 e4       	ldi	r22, 0x46	; 70
    1b3e:	81 ec       	ldi	r24, 0xC1	; 193
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1b46:	1b 01       	movw	r2, r22
    1b48:	2c 01       	movw	r4, r24
    1b4a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <FN>
    1b4e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <FN+0x1>
    1b52:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <FN+0x2>
    1b56:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <FN+0x3>
						if (FN != 0)
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1b64:	81 11       	cpse	r24, r1
    1b66:	51 cc       	rjmp	.-1886   	; 0x140a <main+0xd6e>
    1b68:	58 cc       	rjmp	.-1872   	; 0x141a <main+0xd7e>
					value_2 = get_value(String,'Y'); //call function to extract second value
					value_3 = get_value(String,'Z'); //call function to extract third value
					STEP[3] = get_value(String,'E');
					if ((STEP[3] && value_1 && value_2 && value_3) == 0)
					{
						FN = get_value(String,'F');
    1b6a:	66 e4       	ldi	r22, 0x46	; 70
    1b6c:	81 ec       	ldi	r24, 0xC1	; 193
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 05 02 	call	0x40a	; 0x40a <get_value>
    1b74:	1b 01       	movw	r2, r22
    1b76:	2c 01       	movw	r4, r24
    1b78:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <FN>
    1b7c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <FN+0x1>
    1b80:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <FN+0x2>
    1b84:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <FN+0x3>
						if (FN != 0)
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	a9 01       	movw	r20, r18
    1b8e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1b92:	81 11       	cpse	r24, r1
    1b94:	31 cc       	rjmp	.-1950   	; 0x13f8 <main+0xd5c>
    1b96:	41 cc       	rjmp	.-1918   	; 0x141a <main+0xd7e>

00001b98 <__vector_9>:
	TCNT0  = 0;
	sei();

}
ISR(TIMER0_OVF_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	2f 93       	push	r18
    1bb0:	3f 93       	push	r19
    1bb2:	4f 93       	push	r20
    1bb4:	5f 93       	push	r21
    1bb6:	6f 93       	push	r22
    1bb8:	7f 93       	push	r23
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	af 93       	push	r26
    1bc0:	bf 93       	push	r27
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	64 97       	sbiw	r28, 0x14	; 20
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	cd bf       	out	0x3d, r28	; 61
	if (tcon < Time_Interval) //CONTROL THE INTERVAL BETWEEN EACH PID PROCESSES
    1bd4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <tcon>
    1bd8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <tcon+0x1>
    1bdc:	8d 39       	cpi	r24, 0x9D	; 157
    1bde:	91 05       	cpc	r25, r1
    1be0:	30 f4       	brcc	.+12     	; 0x1bee <__vector_9+0x56>
	{
		tcon++;
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <tcon+0x1>
    1be8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tcon>
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <__vector_9+0x68>
		} else {
		gFlags.pidTimer = 1;
    1bee:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gFlags>
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <gFlags>
		tcon            = 0;
    1bf8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <tcon+0x1>
    1bfc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <tcon>
		
	}
	if (gFlags.pidTimer == 1 ) 
    1c00:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gFlags>
    1c04:	80 ff       	sbrs	r24, 0
    1c06:	e9 c0       	rjmp	.+466    	; 0x1dda <__vector_9+0x242>
	{
 		OCR1A =	pid_Controller(SE0	,getTemp(T2), &SpidData); //out the pid value to control the temperature of extruder
    1c08:	82 e5       	ldi	r24, 0x52	; 82
    1c0a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c0e:	9b 01       	movw	r18, r22
    1c10:	ac 01       	movw	r20, r24
    1c12:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <SE0>
    1c16:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <SE0+0x1>
    1c1a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SE0+0x2>
    1c1e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <SE0+0x3>
    1c22:	0d e6       	ldi	r16, 0x6D	; 109
    1c24:	11 e0       	ldi	r17, 0x01	; 1
    1c26:	0e 94 49 11 	call	0x2292	; 0x2292 <pid_Controller>
    1c2a:	9b bd       	out	0x2b, r25	; 43
    1c2c:	8a bd       	out	0x2a, r24	; 42
  		OCR1B = pid_Controller(SB	,getTemp(T0), &BpidData); //out the pid value to control the temperature of heat bed
    1c2e:	80 e5       	ldi	r24, 0x50	; 80
    1c30:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c34:	9b 01       	movw	r18, r22
    1c36:	ac 01       	movw	r20, r24
    1c38:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <SB>
    1c3c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <SB+0x1>
    1c40:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SB+0x2>
    1c44:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <SB+0x3>
    1c48:	09 e8       	ldi	r16, 0x89	; 137
    1c4a:	11 e0       	ldi	r17, 0x01	; 1
    1c4c:	0e 94 49 11 	call	0x2292	; 0x2292 <pid_Controller>
    1c50:	99 bd       	out	0x29, r25	; 41
    1c52:	88 bd       	out	0x28, r24	; 40
		gFlags.pidTimer = 0;
    1c54:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gFlags>
    1c58:	8e 7f       	andi	r24, 0xFE	; 254
    1c5a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <gFlags>
    1c5e:	ef e1       	ldi	r30, 0x1F	; 31
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	a5 e5       	ldi	r26, 0x55	; 85
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	89 e2       	ldi	r24, 0x29	; 41
    1c68:	92 e0       	ldi	r25, 0x02	; 2
		for (int x = 0 ; x < 10 ; x ++)
		{
			TE[x] = 0;
    1c6a:	11 92       	st	Z+, r1
			TB[x] = 0;
    1c6c:	1d 92       	st	X+, r1
	if (gFlags.pidTimer == 1 ) 
	{
 		OCR1A =	pid_Controller(SE0	,getTemp(T2), &SpidData); //out the pid value to control the temperature of extruder
  		OCR1B = pid_Controller(SB	,getTemp(T0), &BpidData); //out the pid value to control the temperature of heat bed
		gFlags.pidTimer = 0;
		for (int x = 0 ; x < 10 ; x ++)
    1c6e:	e8 17       	cp	r30, r24
    1c70:	f9 07       	cpc	r31, r25
    1c72:	d9 f7       	brne	.-10     	; 0x1c6a <__vector_9+0xd2>
		{
			TE[x] = 0;
			TB[x] = 0;
		}
		if (ReadTemp) //send the temperature to uart
    1c74:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ReadTemp>
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <__vector_9+0xe6>
    1c7c:	ae c0       	rjmp	.+348    	; 0x1dda <__vector_9+0x242>
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
    1c7e:	82 e5       	ldi	r24, 0x52	; 82
    1c80:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1c84:	01 ec       	ldi	r16, 0xC1	; 193
    1c86:	10 e0       	ldi	r17, 0x00	; 0
    1c88:	23 e0       	ldi	r18, 0x03	; 3
    1c8a:	42 e0       	ldi	r20, 0x02	; 2
    1c8c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	8f e1       	ldi	r24, 0x1F	; 31
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	9f 93       	push	r25
    1c9a:	8f 93       	push	r24
    1c9c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
    1ca0:	80 e5       	ldi	r24, 0x50	; 80
    1ca2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1ca6:	23 e0       	ldi	r18, 0x03	; 3
    1ca8:	42 e0       	ldi	r20, 0x02	; 2
    1caa:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <dtostrf>
    1cae:	9f 93       	push	r25
    1cb0:	8f 93       	push	r24
    1cb2:	85 e5       	ldi	r24, 0x55	; 85
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	9f 93       	push	r25
    1cb8:	8f 93       	push	r24
    1cba:	0e 94 90 16 	call	0x2d20	; 0x2d20 <sprintf>
			if ((BED_Activ == 1))
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <BED_Activ>
    1ccc:	88 23       	and	r24, r24
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <__vector_9+0x13a>
    1cd0:	52 c0       	rjmp	.+164    	; 0x1d76 <__vector_9+0x1de>
			{
				char TEMP[20]={'T',':',
    1cd2:	84 e5       	ldi	r24, 0x54	; 84
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	8a e3       	ldi	r24, 0x3A	; 58
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
					TE[0],TE[1],TE[2],TE[3],TE[4],
    1cda:	ef e1       	ldi	r30, 0x1F	; 31
    1cdc:	f2 e0       	ldi	r31, 0x02	; 2
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    1cde:	90 81       	ld	r25, Z
    1ce0:	9b 83       	std	Y+3, r25	; 0x03
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	92 81       	ldd	r25, Z+2	; 0x02
    1ce8:	9d 83       	std	Y+5, r25	; 0x05
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	94 81       	ldd	r25, Z+4	; 0x04
    1cf0:	9f 83       	std	Y+7, r25	; 0x07
    1cf2:	90 e2       	ldi	r25, 0x20	; 32
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	25 e4       	ldi	r18, 0x45	; 69
    1cf8:	29 87       	std	Y+9, r18	; 0x09
    1cfa:	8a 87       	std	Y+10, r24	; 0x0a
    1cfc:	20 e3       	ldi	r18, 0x30	; 48
    1cfe:	2b 87       	std	Y+11, r18	; 0x0b
    1d00:	9c 87       	std	Y+12, r25	; 0x0c
    1d02:	92 e4       	ldi	r25, 0x42	; 66
    1d04:	9d 87       	std	Y+13, r25	; 0x0d
    1d06:	8e 87       	std	Y+14, r24	; 0x0e
					TE[0],TE[1],TE[2],TE[3],TE[4],
					' ','E',':','0',' ',
				'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
    1d08:	e5 e5       	ldi	r30, 0x55	; 85
    1d0a:	f1 e0       	ldi	r31, 0x01	; 1
		{
			sprintf(TE,dtostrf(getTemp(T2), 2,3,"%f"));
			sprintf(TB,dtostrf(getTemp(T0), 2,3,"%f"));
			if ((BED_Activ == 1))
			{
				char TEMP[20]={'T',':',
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f
    1d10:	81 81       	ldd	r24, Z+1	; 0x01
    1d12:	88 8b       	std	Y+16, r24	; 0x10
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	83 81       	ldd	r24, Z+3	; 0x03
    1d1a:	8a 8b       	std	Y+18, r24	; 0x12
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	8d e0       	ldi	r24, 0x0D	; 13
    1d22:	8c 8b       	std	Y+20, r24	; 0x14
					TE[0],TE[1],TE[2],TE[3],TE[4],
					' ','E',':','0',' ',
				'B',':',TB[0],TB[1],TB[2],TB[3],TB[4],'\r'};
				if ((SE0 < getTemp(T0)) && (SB < getTemp(T2))) //enable extrude filament
    1d24:	80 e5       	ldi	r24, 0x50	; 80
    1d26:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1d2a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <SE0>
    1d2e:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <SE0+0x1>
    1d32:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <SE0+0x2>
    1d36:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <SE0+0x3>
    1d3a:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	9c f4       	brge	.+38     	; 0x1d68 <__vector_9+0x1d0>
    1d42:	82 e5       	ldi	r24, 0x52	; 82
    1d44:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1d48:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <SB>
    1d4c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <SB+0x1>
    1d50:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <SB+0x2>
    1d54:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <SB+0x3>
    1d58:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	24 f4       	brge	.+8      	; 0x1d68 <__vector_9+0x1d0>
				{
					extrud = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <extrud>
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <__vector_9+0x1d4>
				}
				else
				{
					extrud = 0;
    1d68:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <extrud>
				}
				Transmit_Data(TEMP);
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
    1d74:	32 c0       	rjmp	.+100    	; 0x1dda <__vector_9+0x242>
			}
			else
			{
				char TEMP[12]={'T',':',
    1d76:	84 e5       	ldi	r24, 0x54	; 84
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	8a e3       	ldi	r24, 0x3A	; 58
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
					TE[0],TE[1],TE[2],TE[3],TE[4],
    1d7e:	ef e1       	ldi	r30, 0x1F	; 31
    1d80:	f2 e0       	ldi	r31, 0x02	; 2
				}
				Transmit_Data(TEMP);
			}
			else
			{
				char TEMP[12]={'T',':',
    1d82:	90 81       	ld	r25, Z
    1d84:	9b 83       	std	Y+3, r25	; 0x03
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	92 81       	ldd	r25, Z+2	; 0x02
    1d8c:	9d 83       	std	Y+5, r25	; 0x05
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	94 81       	ldd	r25, Z+4	; 0x04
    1d94:	9f 83       	std	Y+7, r25	; 0x07
    1d96:	90 e2       	ldi	r25, 0x20	; 32
    1d98:	98 87       	std	Y+8, r25	; 0x08
    1d9a:	95 e4       	ldi	r25, 0x45	; 69
    1d9c:	99 87       	std	Y+9, r25	; 0x09
    1d9e:	8a 87       	std	Y+10, r24	; 0x0a
    1da0:	80 e3       	ldi	r24, 0x30	; 48
    1da2:	8b 87       	std	Y+11, r24	; 0x0b
    1da4:	8d e0       	ldi	r24, 0x0D	; 13
    1da6:	8c 87       	std	Y+12, r24	; 0x0c
					TE[0],TE[1],TE[2],TE[3],TE[4],
				' ','E',':','0','\r'};
				if ((SE0 < getTemp(T0)))
    1da8:	80 e5       	ldi	r24, 0x50	; 80
    1daa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
    1dae:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <SE0>
    1db2:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <SE0+0x1>
    1db6:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <SE0+0x2>
    1dba:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <SE0+0x3>
    1dbe:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	24 f4       	brge	.+8      	; 0x1dce <__vector_9+0x236>
				{
					extrud = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <extrud>
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <__vector_9+0x23a>
				}
				else
				{
					extrud = 0;
    1dce:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <extrud>
				}
				Transmit_Data(TEMP);
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
			}
		}
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
    1dda:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <status>
    1dde:	88 23       	and	r24, r24
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <__vector_9+0x24c>
    1de2:	60 c0       	rjmp	.+192    	; 0x1ea4 <__vector_9+0x30c>
    1de4:	5f 9b       	sbis	0x0b, 7	; 11
    1de6:	59 c0       	rjmp	.+178    	; 0x1e9a <__vector_9+0x302>
    1de8:	e1 ec       	ldi	r30, 0xC1	; 193
    1dea:	f1 e0       	ldi	r31, 0x01	; 1
    1dec:	81 e1       	ldi	r24, 0x11	; 17
    1dee:	92 e0       	ldi	r25, 0x02	; 2
	{
		for (int i = 0 ; i < 80 ;i++)
		{
			String [i] = 0;
    1df0:	11 92       	st	Z+, r1
		}
		
	}
	if (status == 1 && (UCSRA & (1 << RXC))) //if the printer busy send ack.
	{
		for (int i = 0 ; i < 80 ;i++)
    1df2:	8e 17       	cp	r24, r30
    1df4:	9f 07       	cpc	r25, r31
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <__vector_9+0x258>
		{
			String [i] = 0;
		}
		Recive_Data(String);
    1df8:	81 ec       	ldi	r24, 0xC1	; 193
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Recive_Data>
		Transmit_Data("the printer is busy");
    1e00:	89 ed       	ldi	r24, 0xD9	; 217
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 53 12 	call	0x24a6	; 0x24a6 <Transmit_Data>
	}
	if (String[0] == 'M' && status == 1)
    1e08:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <String>
    1e0c:	8d 34       	cpi	r24, 0x4D	; 77
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <__vector_9+0x27a>
    1e10:	49 c0       	rjmp	.+146    	; 0x1ea4 <__vector_9+0x30c>
    1e12:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <status>
    1e16:	88 23       	and	r24, r24
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <__vector_9+0x284>
    1e1a:	44 c0       	rjmp	.+136    	; 0x1ea4 <__vector_9+0x30c>
	{
		SUBval = get_int(String,'M');
    1e1c:	6d e4       	ldi	r22, 0x4D	; 77
    1e1e:	81 ec       	ldi	r24, 0xC1	; 193
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0e 94 4b 02 	call	0x496	; 0x496 <get_int>
    1e26:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <SUBval+0x1>
    1e2a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <SUBval>
		if (SUBval == 112)
    1e2e:	80 37       	cpi	r24, 0x70	; 112
    1e30:	91 05       	cpc	r25, r1
    1e32:	c1 f5       	brne	.+112    	; 0x1ea4 <__vector_9+0x30c>
		{
			STEP[0] = 0;
    1e34:	e5 e4       	ldi	r30, 0x45	; 69
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	10 82       	st	Z, r1
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	12 82       	std	Z+2, r1	; 0x02
    1e3e:	13 82       	std	Z+3, r1	; 0x03
			STEP[1] = 0;
    1e40:	14 82       	std	Z+4, r1	; 0x04
    1e42:	15 82       	std	Z+5, r1	; 0x05
    1e44:	16 82       	std	Z+6, r1	; 0x06
    1e46:	17 82       	std	Z+7, r1	; 0x07
			STEP[2] = 0;
    1e48:	10 86       	std	Z+8, r1	; 0x08
    1e4a:	11 86       	std	Z+9, r1	; 0x09
    1e4c:	12 86       	std	Z+10, r1	; 0x0a
    1e4e:	13 86       	std	Z+11, r1	; 0x0b
			STEP[3] = 0;
    1e50:	14 86       	std	Z+12, r1	; 0x0c
    1e52:	15 86       	std	Z+13, r1	; 0x0d
    1e54:	16 86       	std	Z+14, r1	; 0x0e
    1e56:	17 86       	std	Z+15, r1	; 0x0f
			motor_movement(STEP,F,Fe);
    1e58:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Fe>
    1e5c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Fe+0x1>
    1e60:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Fe+0x2>
    1e64:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Fe+0x3>
    1e68:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1e6c:	6b 01       	movw	r12, r22
    1e6e:	7c 01       	movw	r14, r24
    1e70:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <F>
    1e74:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <F+0x1>
    1e78:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <F+0x2>
    1e7c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <F+0x3>
    1e80:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1e84:	ab 01       	movw	r20, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	97 01       	movw	r18, r14
    1e8a:	86 01       	movw	r16, r12
    1e8c:	85 e4       	ldi	r24, 0x45	; 69
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <motor_movement>
			status = 0;
    1e94:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <status>
		}
	}
    1e98:	05 c0       	rjmp	.+10     	; 0x1ea4 <__vector_9+0x30c>
			String [i] = 0;
		}
		Recive_Data(String);
		Transmit_Data("the printer is busy");
	}
	if (String[0] == 'M' && status == 1)
    1e9a:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <String>
    1e9e:	8d 34       	cpi	r24, 0x4D	; 77
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <__vector_9+0x30c>
    1ea2:	bc cf       	rjmp	.-136    	; 0x1e1c <__vector_9+0x284>
			STEP[3] = 0;
			motor_movement(STEP,F,Fe);
			status = 0;
		}
	}
    1ea4:	64 96       	adiw	r28, 0x14	; 20
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	0f 90       	pop	r0
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	0f 90       	pop	r0
    1ede:	1f 90       	pop	r1
    1ee0:	18 95       	reti

00001ee2 <motor_movement>:
	motor_EN_DES('Y',0);
	motor_EN_DES('Z',0);
	motor_EN_DES('E',0);
}
void motor_movement(double step[4],long speed,long exspeed)
{
    1ee2:	2f 92       	push	r2
    1ee4:	3f 92       	push	r3
    1ee6:	4f 92       	push	r4
    1ee8:	5f 92       	push	r5
    1eea:	6f 92       	push	r6
    1eec:	7f 92       	push	r7
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	c8 54       	subi	r28, 0x48	; 72
    1f0c:	d1 09       	sbc	r29, r1
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	6c 01       	movw	r12, r24
    1f1a:	4a 01       	movw	r8, r20
    1f1c:	5b 01       	movw	r10, r22
    1f1e:	29 96       	adiw	r28, 0x09	; 9
    1f20:	0c af       	std	Y+60, r16	; 0x3c
    1f22:	1d af       	std	Y+61, r17	; 0x3d
    1f24:	2e af       	std	Y+62, r18	; 0x3e
    1f26:	3f af       	std	Y+63, r19	; 0x3f
    1f28:	29 97       	sbiw	r28, 0x09	; 9
	long stepDuration = (1/speed)*60*pow(10,6);
    1f2a:	41 2c       	mov	r4, r1
    1f2c:	51 2c       	mov	r5, r1
    1f2e:	32 01       	movw	r6, r4
    1f30:	43 94       	inc	r4
    1f32:	c3 01       	movw	r24, r6
    1f34:	b2 01       	movw	r22, r4
    1f36:	a5 01       	movw	r20, r10
    1f38:	94 01       	movw	r18, r8
    1f3a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__divmodsi4>
    1f3e:	ac e3       	ldi	r26, 0x3C	; 60
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__muluhisi3>
    1f46:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	34 e2       	ldi	r19, 0x24	; 36
    1f4e:	44 e7       	ldi	r20, 0x74	; 116
    1f50:	59 e4       	ldi	r21, 0x49	; 73
    1f52:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1f56:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1f5a:	4b 01       	movw	r8, r22
    1f5c:	5c 01       	movw	r10, r24
	long exstepDuration = (1/exspeed)*60*pow(10,6);
    1f5e:	c3 01       	movw	r24, r6
    1f60:	b2 01       	movw	r22, r4
    1f62:	29 96       	adiw	r28, 0x09	; 9
    1f64:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f66:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f68:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f6c:	29 97       	sbiw	r28, 0x09	; 9
    1f6e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__divmodsi4>
    1f72:	ac e3       	ldi	r26, 0x3C	; 60
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__muluhisi3>
    1f7a:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	34 e2       	ldi	r19, 0x24	; 36
    1f82:	44 e7       	ldi	r20, 0x74	; 116
    1f84:	59 e4       	ldi	r21, 0x49	; 73
    1f86:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    1f8a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    1f8e:	2b 01       	movw	r4, r22
    1f90:	3c 01       	movw	r6, r24
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
    1f92:	88 e0       	ldi	r24, 0x08	; 8
    1f94:	e0 e8       	ldi	r30, 0x80	; 128
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	de 01       	movw	r26, r28
    1f9a:	11 96       	adiw	r26, 0x01	; 1
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	0d 92       	st	X+, r0
    1fa0:	8a 95       	dec	r24
    1fa2:	e1 f7       	brne	.-8      	; 0x1f9c <motor_movement+0xba>
    1fa4:	76 01       	movw	r14, r12
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0f 5f       	subi	r16, 0xFF	; 255
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	1e 01       	movw	r2, r28
    1fae:	29 e0       	ldi	r18, 0x09	; 9
    1fb0:	22 0e       	add	r2, r18
    1fb2:	31 1c       	adc	r3, r1
	for (int i = 0; i < 4 ; i++)
	{
		if (step[i]<0)
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18
    1fba:	f7 01       	movw	r30, r14
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	8c f4       	brge	.+34     	; 0x1fee <motor_movement+0x10c>
		{
			pin_write (M_PORT, DIR_pin[i] ,1);
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	f8 01       	movw	r30, r16
    1fd0:	60 81       	ld	r22, Z
    1fd2:	83 e3       	ldi	r24, 0x33	; 51
    1fd4:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
			step [i] = step [i] * -1;
    1fd8:	f7 01       	movw	r30, r14
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe2:	b0 58       	subi	r27, 0x80	; 128
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <motor_movement+0x118>
		}
		else
		pin_write (M_PORT, DIR_pin[i] ,0);
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	60 81       	ld	r22, Z
    1ff4:	83 e3       	ldi	r24, 0x33	; 51
    1ff6:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
    1ffa:	f4 e0       	ldi	r31, 0x04	; 4
    1ffc:	ef 0e       	add	r14, r31
    1ffe:	f1 1c       	adc	r15, r1
    2000:	0e 5f       	subi	r16, 0xFE	; 254
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
void motor_movement(double step[4],long speed,long exspeed)
{
	long stepDuration = (1/speed)*60*pow(10,6);
	long exstepDuration = (1/exspeed)*60*pow(10,6);
	int DIR_pin[4] = {X_DIR_PIN,Y_DIR_PIN,Z_DIR_PIN,E_DIR_PIN};
	for (int i = 0; i < 4 ; i++)
    2004:	20 16       	cp	r2, r16
    2006:	31 06       	cpc	r3, r17
    2008:	a9 f6       	brne	.-86     	; 0x1fb4 <motor_movement+0xd2>
		   int Out;     // make one step to one motor in one unit of time
		   int Next[8]; 
	    };
	 typedef const struct State STyp; //define STYP from type of struct State 
	 /*{Current state,{next state}} */
	 STyp FSM[3]=
    200a:	86 e3       	ldi	r24, 0x36	; 54
    200c:	e8 e8       	ldi	r30, 0x88	; 136
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	de 01       	movw	r26, r28
    2012:	1f 96       	adiw	r26, 0x0f	; 15
    2014:	01 90       	ld	r0, Z+
    2016:	0d 92       	st	X+, r0
    2018:	8a 95       	dec	r24
    201a:	e1 f7       	brne	.-8      	; 0x2014 <motor_movement+0x132>
		 {Y,{E,X,Y,X,Z,Z,Z,Z}},
		 {Z,{E,X,Y,X,Z,X,Y,X}}
	   };	 
		index = 1;
		S = X;
		 j [0] = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9a 87       	std	Y+10, r25	; 0x0a
    2022:	89 87       	std	Y+9, r24	; 0x09
		 j [1] = 1;
    2024:	9c 87       	std	Y+12, r25	; 0x0c
    2026:	8b 87       	std	Y+11, r24	; 0x0b
		 j [2] = 1;
    2028:	9e 87       	std	Y+14, r25	; 0x0e
    202a:	8d 87       	std	Y+13, r24	; 0x0d
		 {X,{E,X,Y,Y,Z,Z,Y,Y}},
		 {Y,{E,X,Y,X,Z,Z,Z,Z}},
		 {Z,{E,X,Y,X,Z,X,Y,X}}
	   };	 
		index = 1;
		S = X;
    202c:	00 e0       	ldi	r16, 0x00	; 0
    202e:	10 e0       	ldi	r17, 0x00	; 0
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
		    {  
			 pin_XOR(M_PORT,FSM[S].Out);
    2030:	f8 01       	movw	r30, r16
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	cf 01       	movw	r24, r30
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	e8 0f       	add	r30, r24
    2046:	f9 1f       	adc	r31, r25
    2048:	21 e0       	ldi	r18, 0x01	; 1
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	2c 0f       	add	r18, r28
    204e:	3d 1f       	adc	r19, r29
    2050:	e2 0f       	add	r30, r18
    2052:	f3 1f       	adc	r31, r19
    2054:	66 85       	ldd	r22, Z+14	; 0x0e
    2056:	83 e3       	ldi	r24, 0x33	; 51
    2058:	0e 94 ee 02 	call	0x5dc	; 0x5dc <pin_XOR>
			 step[S] = step[S] - 1;
    205c:	78 01       	movw	r14, r16
    205e:	ee 0c       	add	r14, r14
    2060:	ff 1c       	adc	r15, r15
    2062:	ee 0c       	add	r14, r14
    2064:	ff 1c       	adc	r15, r15
    2066:	ec 0c       	add	r14, r12
    2068:	fd 1c       	adc	r15, r13
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	f7 01       	movw	r30, r14
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
    2080:	f7 01       	movw	r30, r14
    2082:	60 83       	st	Z, r22
    2084:	71 83       	std	Z+1, r23	; 0x01
    2086:	82 83       	std	Z+2, r24	; 0x02
    2088:	93 83       	std	Z+3, r25	; 0x03
			 if (step [S] <= 0)
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	a9 01       	movw	r20, r18
    2090:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    2094:	18 16       	cp	r1, r24
    2096:	5c f0       	brlt	.+22     	; 0x20ae <motor_movement+0x1cc>
			  j[S] = 0;
    2098:	f8 01       	movw	r30, r16
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	2c 0f       	add	r18, r28
    20a4:	3d 1f       	adc	r19, r29
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	11 86       	std	Z+9, r1	; 0x09
    20ac:	10 86       	std	Z+8, r1	; 0x08
			  if (S == 3 )
    20ae:	03 30       	cpi	r16, 0x03	; 3
    20b0:	11 05       	cpc	r17, r1
    20b2:	59 f4       	brne	.+22     	; 0x20ca <motor_movement+0x1e8>
			  {
				  for (int i = exstepDuration ; i>0 ; i-- )
    20b4:	c2 01       	movw	r24, r4
    20b6:	18 16       	cp	r1, r24
    20b8:	19 06       	cpc	r1, r25
    20ba:	8c f4       	brge	.+34     	; 0x20de <motor_movement+0x1fc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20bc:	35 e0       	ldi	r19, 0x05	; 5
    20be:	3a 95       	dec	r19
    20c0:	f1 f7       	brne	.-4      	; 0x20be <motor_movement+0x1dc>
    20c2:	00 00       	nop
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	d1 f7       	brne	.-12     	; 0x20bc <motor_movement+0x1da>
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <motor_movement+0x1fc>
				  }
				  
			  } 
			  else
			  {
				  for (int i = stepDuration ; i>0 ; i-- )
    20ca:	c4 01       	movw	r24, r8
    20cc:	18 16       	cp	r1, r24
    20ce:	19 06       	cpc	r1, r25
    20d0:	34 f4       	brge	.+12     	; 0x20de <motor_movement+0x1fc>
    20d2:	e5 e0       	ldi	r30, 0x05	; 5
    20d4:	ea 95       	dec	r30
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <motor_movement+0x1f2>
    20d8:	00 00       	nop
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	d1 f7       	brne	.-12     	; 0x20d2 <motor_movement+0x1f0>
				  {
					  _delay_us(1);
				  }
			  } 
			 index  =  (j[2]<<2) +(j[1]<<1) +(j[0]<<0);
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	9c 01       	movw	r18, r24
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	22 0f       	add	r18, r18
    20ea:	33 1f       	adc	r19, r19
    20ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	29 85       	ldd	r18, Y+9	; 0x09
    20fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    20fc:	82 0f       	add	r24, r18
    20fe:	93 1f       	adc	r25, r19
			 S = FSM[S].Next[index];
    2100:	f8 01       	movw	r30, r16
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e0 0f       	add	r30, r16
    2110:	f1 1f       	adc	r31, r17
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	31 96       	adiw	r30, 0x01	; 1
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	2c 0f       	add	r18, r28
    2122:	3d 1f       	adc	r19, r29
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	06 85       	ldd	r16, Z+14	; 0x0e
    212a:	17 85       	ldd	r17, Z+15	; 0x0f
		//starting with X as the beginning state and make it execute one step 
		//decreases one from the step [X]
		//check if step [X] reaches to 0 make J[S] = 0, else J[S] = 1
		//wait, then calculate index that realize the input from 0 to 7
	    //move to the next state depending on input and current state  
		while ((index != 0 ))  
    212c:	89 2b       	or	r24, r25
    212e:	09 f0       	breq	.+2      	; 0x2132 <motor_movement+0x250>
    2130:	7f cf       	rjmp	.-258    	; 0x2030 <motor_movement+0x14e>
				  }
			  } 
			 index  =  (j[2]<<2) +(j[1]<<1) +(j[0]<<0);
			 S = FSM[S].Next[index];
		    }
    }
    2132:	c8 5b       	subi	r28, 0xB8	; 184
    2134:	df 4f       	sbci	r29, 0xFF	; 255
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	bf 90       	pop	r11
    2152:	af 90       	pop	r10
    2154:	9f 90       	pop	r9
    2156:	8f 90       	pop	r8
    2158:	7f 90       	pop	r7
    215a:	6f 90       	pop	r6
    215c:	5f 90       	pop	r5
    215e:	4f 90       	pop	r4
    2160:	3f 90       	pop	r3
    2162:	2f 90       	pop	r2
    2164:	08 95       	ret

00002166 <motor_EN_DES>:
void motor_EN_DES(char motor,bool stu)
{
	switch (motor)
    2166:	88 35       	cpi	r24, 0x58	; 88
    2168:	49 f0       	breq	.+18     	; 0x217c <motor_EN_DES+0x16>
    216a:	18 f4       	brcc	.+6      	; 0x2172 <motor_EN_DES+0xc>
    216c:	85 34       	cpi	r24, 0x45	; 69
    216e:	c1 f0       	breq	.+48     	; 0x21a0 <motor_EN_DES+0x3a>
    2170:	08 95       	ret
    2172:	89 35       	cpi	r24, 0x59	; 89
    2174:	49 f0       	breq	.+18     	; 0x2188 <motor_EN_DES+0x22>
    2176:	8a 35       	cpi	r24, 0x5A	; 90
    2178:	69 f0       	breq	.+26     	; 0x2194 <motor_EN_DES+0x2e>
    217a:	08 95       	ret
	{
		case 'X':
			pin_write(EN_DES_PORT,EN_DES_XPIN,stu);
    217c:	46 2f       	mov	r20, r22
    217e:	64 e0       	ldi	r22, 0x04	; 4
    2180:	86 e3       	ldi	r24, 0x36	; 54
    2182:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
			break;
    2186:	08 95       	ret
		case 'Y':
			pin_write(EN_DES_PORT,EN_DES_YPIN,stu);
    2188:	46 2f       	mov	r20, r22
    218a:	65 e0       	ldi	r22, 0x05	; 5
    218c:	86 e3       	ldi	r24, 0x36	; 54
    218e:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
			break;
    2192:	08 95       	ret
		case 'Z':
			pin_write(EN_DES_PORT,EN_DES_ZPIN,stu);
    2194:	46 2f       	mov	r20, r22
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	86 e3       	ldi	r24, 0x36	; 54
    219a:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
			break;
    219e:	08 95       	ret
		case 'E':
			pin_write(EN_DES_PORT,EN_DES_EPIN,stu);
    21a0:	46 2f       	mov	r20, r22
    21a2:	67 e0       	ldi	r22, 0x07	; 7
    21a4:	86 e3       	ldi	r24, 0x36	; 54
    21a6:	0e 94 c2 02 	call	0x584	; 0x584 <pin_write>
    21aa:	08 95       	ret

000021ac <motor_init>:
//check the steps of x, y, z 
//if they have a negative number, make the motors move in anti_clock_wise
//if they have a positive number, make the motors move in clock_wise
void motor_init ()
{	
	port_direction(M_PORT,output);
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	83 e3       	ldi	r24, 0x33	; 51
    21b0:	0e 94 df 02 	call	0x5be	; 0x5be <port_direction>
	port_write(M_PORT,0);
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	83 e3       	ldi	r24, 0x33	; 51
    21b8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <port_write>
	motor_EN_DES('X',0);
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	88 e5       	ldi	r24, 0x58	; 88
    21c0:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
	motor_EN_DES('Y',0);
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	89 e5       	ldi	r24, 0x59	; 89
    21c8:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
	motor_EN_DES('Z',0);
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	8a e5       	ldi	r24, 0x5A	; 90
    21d0:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
	motor_EN_DES('E',0);
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	85 e4       	ldi	r24, 0x45	; 69
    21d8:	0e 94 b3 10 	call	0x2166	; 0x2166 <motor_EN_DES>
    21dc:	08 95       	ret

000021de <Pid_init>:
 *  \param i  Integral term.
 *  \param d  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Pid_init(double P, double I, double D, struct pid_data *pid)
{
    21de:	8f 92       	push	r8
    21e0:	9f 92       	push	r9
    21e2:	af 92       	push	r10
    21e4:	bf 92       	push	r11
    21e6:	cf 92       	push	r12
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	49 01       	movw	r8, r18
    21f8:	5a 01       	movw	r10, r20
    21fa:	e6 01       	movw	r28, r12
	// Tuning constants for PID loop
	pid->pid_P = P;
    21fc:	6c 83       	std	Y+4, r22	; 0x04
    21fe:	7d 83       	std	Y+5, r23	; 0x05
    2200:	8e 83       	std	Y+6, r24	; 0x06
    2202:	9f 83       	std	Y+7, r25	; 0x07
	pid->pid_I = I;
    2204:	28 87       	std	Y+8, r18	; 0x08
    2206:	39 87       	std	Y+9, r19	; 0x09
    2208:	4a 87       	std	Y+10, r20	; 0x0a
    220a:	5b 87       	std	Y+11, r21	; 0x0b
	pid->pid_D = D;
    220c:	ec 86       	std	Y+12, r14	; 0x0c
    220e:	fd 86       	std	Y+13, r15	; 0x0d
    2210:	0e 87       	std	Y+14, r16	; 0x0e
    2212:	1f 87       	std	Y+15, r17	; 0x0f
	// Limits to avoid overflow
	pid->MaxError = INT16_MAX/(pid->pid_P + 1);
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	7e ef       	ldi	r23, 0xFE	; 254
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	96 e4       	ldi	r25, 0x46	; 70
    222c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    2230:	6c 8b       	std	Y+20, r22	; 0x14
    2232:	7d 8b       	std	Y+21, r23	; 0x15
    2234:	8e 8b       	std	Y+22, r24	; 0x16
    2236:	9f 8b       	std	Y+23, r25	; 0x17
	pid->MaxSumError = INT32_MAX/(2*(pid->pid_I + 1));
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	c5 01       	movw	r24, r10
    2242:	b4 01       	movw	r22, r8
    2244:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    2250:	9b 01       	movw	r18, r22
    2252:	ac 01       	movw	r20, r24
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	9f e4       	ldi	r25, 0x4F	; 79
    225c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    2260:	68 8f       	std	Y+24, r22	; 0x18
    2262:	79 8f       	std	Y+25, r23	; 0x19
    2264:	8a 8f       	std	Y+26, r24	; 0x1a
    2266:	9b 8f       	std	Y+27, r25	; 0x1b
	// Start values for PID controller
	pid->last_error = 0;
    2268:	18 82       	st	Y, r1
    226a:	19 82       	std	Y+1, r1	; 0x01
    226c:	1a 82       	std	Y+2, r1	; 0x02
    226e:	1b 82       	std	Y+3, r1	; 0x03
	pid->SumError = 0;
    2270:	18 8a       	std	Y+16, r1	; 0x10
    2272:	19 8a       	std	Y+17, r1	; 0x11
    2274:	1a 8a       	std	Y+18, r1	; 0x12
    2276:	1b 8a       	std	Y+19, r1	; 0x13
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	08 95       	ret

00002292 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
    2292:	4f 92       	push	r4
    2294:	5f 92       	push	r5
    2296:	6f 92       	push	r6
    2298:	7f 92       	push	r7
    229a:	8f 92       	push	r8
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	2a 97       	sbiw	r28, 0x0a	; 10
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	1a 87       	std	Y+10, r17	; 0x0a
    22c4:	09 87       	std	Y+9, r16	; 0x09
	double error = setPoint - processValue;
    22c6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
    22ca:	69 83       	std	Y+1, r22	; 0x01
    22cc:	7a 83       	std	Y+2, r23	; 0x02
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	9c 83       	std	Y+4, r25	; 0x04
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    22d2:	f8 01       	movw	r30, r16
    22d4:	c4 84       	ldd	r12, Z+12	; 0x0c
    22d6:	d5 84       	ldd	r13, Z+13	; 0x0d
    22d8:	e6 84       	ldd	r14, Z+14	; 0x0e
    22da:	f7 84       	ldd	r15, Z+15	; 0x0f
	pid_st ->SumError = pid_st ->SumError + error ;
    22dc:	20 89       	ldd	r18, Z+16	; 0x10
    22de:	31 89       	ldd	r19, Z+17	; 0x11
    22e0:	42 89       	ldd	r20, Z+18	; 0x12
    22e2:	53 89       	ldd	r21, Z+19	; 0x13
    22e4:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    22e8:	4b 01       	movw	r8, r22
    22ea:	5c 01       	movw	r10, r24
    22ec:	f8 01       	movw	r30, r16
    22ee:	60 8b       	std	Z+16, r22	; 0x10
    22f0:	71 8b       	std	Z+17, r23	; 0x11
    22f2:	82 8b       	std	Z+18, r24	; 0x12
    22f4:	93 8b       	std	Z+19, r25	; 0x13
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
    22f6:	20 81       	ld	r18, Z
    22f8:	31 81       	ldd	r19, Z+1	; 0x01
    22fa:	42 81       	ldd	r20, Z+2	; 0x02
    22fc:	53 81       	ldd	r21, Z+3	; 0x03
    22fe:	69 81       	ldd	r22, Y+1	; 0x01
    2300:	7a 81       	ldd	r23, Y+2	; 0x02
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__subsf3>
    230a:	a7 01       	movw	r20, r14
    230c:	96 01       	movw	r18, r12
    230e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    2312:	6d 83       	std	Y+5, r22	; 0x05
    2314:	7e 83       	std	Y+6, r23	; 0x06
    2316:	8f 83       	std	Y+7, r24	; 0x07
    2318:	98 87       	std	Y+8, r25	; 0x08
	if (error > (pid_st ->MaxError))
    231a:	f8 01       	movw	r30, r16
    231c:	44 88       	ldd	r4, Z+20	; 0x14
    231e:	55 88       	ldd	r5, Z+21	; 0x15
    2320:	66 88       	ldd	r6, Z+22	; 0x16
    2322:	77 88       	ldd	r7, Z+23	; 0x17
    2324:	a3 01       	movw	r20, r6
    2326:	92 01       	movw	r18, r4
    2328:	69 81       	ldd	r22, Y+1	; 0x01
    232a:	7a 81       	ldd	r23, Y+2	; 0x02
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    2334:	18 16       	cp	r1, r24
    2336:	b4 f0       	brlt	.+44     	; 0x2364 <pid_Controller+0xd2>
	{
		P_value = INT16_MAX;
	}
	else if(error < -(pid_st ->MaxError))
    2338:	a3 01       	movw	r20, r6
    233a:	92 01       	movw	r18, r4
    233c:	50 58       	subi	r21, 0x80	; 128
    233e:	69 81       	ldd	r22, Y+1	; 0x01
    2340:	7a 81       	ldd	r23, Y+2	; 0x02
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    234a:	88 23       	and	r24, r24
    234c:	ac f0       	brlt	.+42     	; 0x2378 <pid_Controller+0xe6>
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
    234e:	a7 01       	movw	r20, r14
    2350:	96 01       	movw	r18, r12
    2352:	69 81       	ldd	r22, Y+1	; 0x01
    2354:	7a 81       	ldd	r23, Y+2	; 0x02
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    235e:	2b 01       	movw	r4, r22
    2360:	3c 01       	movw	r6, r24
    2362:	13 c0       	rjmp	.+38     	; 0x238a <pid_Controller+0xf8>
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
	long double D_value = (pid_st ->pid_D)*((error - (pid_st ->last_error)));	// Calculate Dterm
	if (error > (pid_st ->MaxError))
	{
		P_value = INT16_MAX;
    2364:	0f 2e       	mov	r0, r31
    2366:	41 2c       	mov	r4, r1
    2368:	fe ef       	ldi	r31, 0xFE	; 254
    236a:	5f 2e       	mov	r5, r31
    236c:	66 24       	eor	r6, r6
    236e:	6a 94       	dec	r6
    2370:	f6 e4       	ldi	r31, 0x46	; 70
    2372:	7f 2e       	mov	r7, r31
    2374:	f0 2d       	mov	r31, r0
    2376:	09 c0       	rjmp	.+18     	; 0x238a <pid_Controller+0xf8>
	}
	else if(error < -(pid_st ->MaxError))
	{
		P_value = -INT16_MAX;
    2378:	0f 2e       	mov	r0, r31
    237a:	41 2c       	mov	r4, r1
    237c:	fe ef       	ldi	r31, 0xFE	; 254
    237e:	5f 2e       	mov	r5, r31
    2380:	66 24       	eor	r6, r6
    2382:	6a 94       	dec	r6
    2384:	f6 ec       	ldi	r31, 0xC6	; 198
    2386:	7f 2e       	mov	r7, r31
    2388:	f0 2d       	mov	r31, r0
	}
	if (pid_st ->SumError > (pid_st ->MaxSumError))
    238a:	e9 85       	ldd	r30, Y+9	; 0x09
    238c:	fa 85       	ldd	r31, Y+10	; 0x0a
    238e:	c0 8c       	ldd	r12, Z+24	; 0x18
    2390:	d1 8c       	ldd	r13, Z+25	; 0x19
    2392:	e2 8c       	ldd	r14, Z+26	; 0x1a
    2394:	f3 8c       	ldd	r15, Z+27	; 0x1b
    2396:	a7 01       	movw	r20, r14
    2398:	96 01       	movw	r18, r12
    239a:	c5 01       	movw	r24, r10
    239c:	b4 01       	movw	r22, r8
    239e:	0e 94 8b 14 	call	0x2916	; 0x2916 <__gesf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	5c f4       	brge	.+22     	; 0x23bc <pid_Controller+0x12a>
	{
		pid_st ->SumError = pid_st ->MaxSumError;
    23a6:	e9 85       	ldd	r30, Y+9	; 0x09
    23a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23aa:	c0 8a       	std	Z+16, r12	; 0x10
    23ac:	d1 8a       	std	Z+17, r13	; 0x11
    23ae:	e2 8a       	std	Z+18, r14	; 0x12
    23b0:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = INT32_MAX/2;
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5e e4       	ldi	r21, 0x4E	; 78
    23ba:	23 c0       	rjmp	.+70     	; 0x2402 <pid_Controller+0x170>
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
    23bc:	f7 fa       	bst	r15, 7
    23be:	f0 94       	com	r15
    23c0:	f7 f8       	bld	r15, 7
    23c2:	f0 94       	com	r15
    23c4:	a7 01       	movw	r20, r14
    23c6:	96 01       	movw	r18, r12
    23c8:	c5 01       	movw	r24, r10
    23ca:	b4 01       	movw	r22, r8
    23cc:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	6c f0       	brlt	.+26     	; 0x23ee <pid_Controller+0x15c>
int16_t pid_Controller(double setPoint, double processValue, struct pid_data *pid_st)
{
	double error = setPoint - processValue;
	double P_value = error * (pid_st ->pid_D);									// Calculate Pterm and limit error overflow
	pid_st ->SumError = pid_st ->SumError + error ;
	double I_value = pid_st ->SumError * pid_st->pid_I;							// Calculate Iterm and limit integral runaway
    23d4:	e9 85       	ldd	r30, Y+9	; 0x09
    23d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    23d8:	20 85       	ldd	r18, Z+8	; 0x08
    23da:	31 85       	ldd	r19, Z+9	; 0x09
    23dc:	42 85       	ldd	r20, Z+10	; 0x0a
    23de:	53 85       	ldd	r21, Z+11	; 0x0b
    23e0:	c5 01       	movw	r24, r10
    23e2:	b4 01       	movw	r22, r8
    23e4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    23e8:	9b 01       	movw	r18, r22
    23ea:	ac 01       	movw	r20, r24
    23ec:	0a c0       	rjmp	.+20     	; 0x2402 <pid_Controller+0x170>
		pid_st ->SumError = pid_st ->MaxSumError;
		I_value = INT32_MAX/2;
	}
	else if(pid_st ->SumError < -(pid_st ->MaxSumError))
	{
		pid_st ->SumError = -pid_st ->MaxSumError;
    23ee:	e9 85       	ldd	r30, Y+9	; 0x09
    23f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    23f2:	c0 8a       	std	Z+16, r12	; 0x10
    23f4:	d1 8a       	std	Z+17, r13	; 0x11
    23f6:	e2 8a       	std	Z+18, r14	; 0x12
    23f8:	f3 8a       	std	Z+19, r15	; 0x13
		I_value = -INT32_MAX/2;
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5e ec       	ldi	r21, 0xCE	; 206
	}
	int16_t PID_value = (P_value + I_value + D_value)/Scaling ;
    2402:	c3 01       	movw	r24, r6
    2404:	b2 01       	movw	r22, r4
    2406:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    240a:	2d 81       	ldd	r18, Y+5	; 0x05
    240c:	3e 81       	ldd	r19, Y+6	; 0x06
    240e:	4f 81       	ldd	r20, Y+7	; 0x07
    2410:	58 85       	ldd	r21, Y+8	; 0x08
    2412:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	48 ef       	ldi	r20, 0xF8	; 248
    241c:	52 e4       	ldi	r21, 0x42	; 66
    241e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__divsf3>
    2422:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fixsfsi>
    2426:	77 23       	and	r23, r23
    2428:	14 f4       	brge	.+4      	; 0x242e <pid_Controller+0x19c>
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8b 01       	movw	r16, r22
    2430:	6f 3f       	cpi	r22, 0xFF	; 255
    2432:	71 05       	cpc	r23, r1
    2434:	19 f0       	breq	.+6      	; 0x243c <pid_Controller+0x1aa>
    2436:	14 f0       	brlt	.+4      	; 0x243c <pid_Controller+0x1aa>
    2438:	0f ef       	ldi	r16, 0xFF	; 255
    243a:	10 e0       	ldi	r17, 0x00	; 0
	if(PID_value < 0)
	{    PID_value = 0;    }
	if(PID_value > 255)
	{    PID_value = 255;} 	
	pid_st->last_error = PID_value;
    243c:	b8 01       	movw	r22, r16
    243e:	01 2e       	mov	r0, r17
    2440:	00 0c       	add	r0, r0
    2442:	88 0b       	sbc	r24, r24
    2444:	99 0b       	sbc	r25, r25
    2446:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
    244a:	e9 85       	ldd	r30, Y+9	; 0x09
    244c:	fa 85       	ldd	r31, Y+10	; 0x0a
    244e:	60 83       	st	Z, r22
    2450:	71 83       	std	Z+1, r23	; 0x01
    2452:	82 83       	std	Z+2, r24	; 0x02
    2454:	93 83       	std	Z+3, r25	; 0x03
	return(PID_value);
}
    2456:	c8 01       	movw	r24, r16
    2458:	2a 96       	adiw	r28, 0x0a	; 10
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	bf 90       	pop	r11
    2476:	af 90       	pop	r10
    2478:	9f 90       	pop	r9
    247a:	8f 90       	pop	r8
    247c:	7f 90       	pop	r7
    247e:	6f 90       	pop	r6
    2480:	5f 90       	pop	r5
    2482:	4f 90       	pop	r4
    2484:	08 95       	ret

00002486 <UART_INIT>:

void UART_INIT()
{
	uint32_t t;
	t =Crystal();
	UBRRL =  (uint8_t) ((t)& 0xFFu);
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((t>>8)& 0xFFu);
    248a:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<4) | (1<<3));     //Enable transmitter and Receiver
    248c:	88 e1       	ldi	r24, 0x18	; 24
    248e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1 << URSEL) |(1<<2) | (1<<1));     //Character size is 8_bits
    2490:	86 e8       	ldi	r24, 0x86	; 134
    2492:	80 bd       	out	0x20, r24	; 32
    2494:	08 95       	ret

00002496 <Transmit_Char>:
	
}

void Transmit_Char(char ptr_char)
{
	while (! (UCSRA & (1<<UDRE) ));    //waits until 'bin 5' equal to 1, becomes Empty.
    2496:	5d 9b       	sbis	0x0b, 5	; 11
    2498:	fe cf       	rjmp	.-4      	; 0x2496 <Transmit_Char>
	UDR = ptr_char;                   //transmits one character.
    249a:	8c b9       	out	0x0c, r24	; 12
    249c:	08 95       	ret

0000249e <Recive_Char>:
}

char Recive_Char(void)
{
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
    249e:	5f 9b       	sbis	0x0b, 7	; 11
    24a0:	fe cf       	rjmp	.-4      	; 0x249e <Recive_Char>
	return(UDR); 
    24a2:	8c b1       	in	r24, 0x0c	; 12
}
    24a4:	08 95       	ret

000024a6 <Transmit_Data>:
void Transmit_Data(char *ptr_string)
{
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
	while(*ptr_string)
    24ac:	88 81       	ld	r24, Y
    24ae:	88 23       	and	r24, r24
    24b0:	31 f0       	breq	.+12     	; 0x24be <Transmit_Data+0x18>
    24b2:	21 96       	adiw	r28, 0x01	; 1
	Transmit_Char(*ptr_string++);
    24b4:	0e 94 4b 12 	call	0x2496	; 0x2496 <Transmit_Char>
	while (! (UCSRA & (1 << RXC)));  //waits until 'bin7' equal to 1, have unread data in the receive buffer
	return(UDR); 
}
void Transmit_Data(char *ptr_string)
{
	while(*ptr_string)
    24b8:	89 91       	ld	r24, Y+
    24ba:	81 11       	cpse	r24, r1
    24bc:	fb cf       	rjmp	.-10     	; 0x24b4 <Transmit_Data+0xe>
	Transmit_Char(*ptr_string++);
}
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	08 95       	ret

000024c4 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	8c 01       	movw	r16, r24
	 	char ch;
	    uint8_t len = 0;
    24cc:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
    24ce:	0e 94 4f 12 	call	0x249e	; 0x249e <Recive_Char>
	 		if((ch == '\r')) //read till enter key is pressed
    24d2:	8d 30       	cpi	r24, 0x0D	; 13
    24d4:	31 f4       	brne	.+12     	; 0x24e2 <Recive_Data+0x1e>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=' ';
    24d6:	f8 01       	movw	r30, r16
    24d8:	ec 0f       	add	r30, r28
    24da:	f1 1d       	adc	r31, r1
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	80 83       	st	Z, r24
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
	         }
	 	}	
}
    24e0:	06 c0       	rjmp	.+12     	; 0x24ee <Recive_Data+0x2a>
	 			ptr_string[len]=' ';
	 			break;           //and break the loop
	 		}
	        else
	         {
	             ptr_string[len++]=ch; //copy the char into string and increment the index
    24e2:	f8 01       	movw	r30, r16
    24e4:	ec 0f       	add	r30, r28
    24e6:	f1 1d       	adc	r31, r1
    24e8:	80 83       	st	Z, r24
    24ea:	cf 5f       	subi	r28, 0xFF	; 255
	         }
	 	}	
    24ec:	f0 cf       	rjmp	.-32     	; 0x24ce <Recive_Data+0xa>
}
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <__subsf3>:
    24f6:	50 58       	subi	r21, 0x80	; 128

000024f8 <__addsf3>:
    24f8:	bb 27       	eor	r27, r27
    24fa:	aa 27       	eor	r26, r26
    24fc:	0e 94 93 12 	call	0x2526	; 0x2526 <__addsf3x>
    2500:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_round>
    2504:	0e 94 04 14 	call	0x2808	; 0x2808 <__fp_pscA>
    2508:	38 f0       	brcs	.+14     	; 0x2518 <__addsf3+0x20>
    250a:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fp_pscB>
    250e:	20 f0       	brcs	.+8      	; 0x2518 <__addsf3+0x20>
    2510:	39 f4       	brne	.+14     	; 0x2520 <__addsf3+0x28>
    2512:	9f 3f       	cpi	r25, 0xFF	; 255
    2514:	19 f4       	brne	.+6      	; 0x251c <__addsf3+0x24>
    2516:	26 f4       	brtc	.+8      	; 0x2520 <__addsf3+0x28>
    2518:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>
    251c:	0e f4       	brtc	.+2      	; 0x2520 <__addsf3+0x28>
    251e:	e0 95       	com	r30
    2520:	e7 fb       	bst	r30, 7
    2522:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>

00002526 <__addsf3x>:
    2526:	e9 2f       	mov	r30, r25
    2528:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__fp_split3>
    252c:	58 f3       	brcs	.-42     	; 0x2504 <__addsf3+0xc>
    252e:	ba 17       	cp	r27, r26
    2530:	62 07       	cpc	r22, r18
    2532:	73 07       	cpc	r23, r19
    2534:	84 07       	cpc	r24, r20
    2536:	95 07       	cpc	r25, r21
    2538:	20 f0       	brcs	.+8      	; 0x2542 <__addsf3x+0x1c>
    253a:	79 f4       	brne	.+30     	; 0x255a <__addsf3x+0x34>
    253c:	a6 f5       	brtc	.+104    	; 0x25a6 <__addsf3x+0x80>
    253e:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__fp_zero>
    2542:	0e f4       	brtc	.+2      	; 0x2546 <__addsf3x+0x20>
    2544:	e0 95       	com	r30
    2546:	0b 2e       	mov	r0, r27
    2548:	ba 2f       	mov	r27, r26
    254a:	a0 2d       	mov	r26, r0
    254c:	0b 01       	movw	r0, r22
    254e:	b9 01       	movw	r22, r18
    2550:	90 01       	movw	r18, r0
    2552:	0c 01       	movw	r0, r24
    2554:	ca 01       	movw	r24, r20
    2556:	a0 01       	movw	r20, r0
    2558:	11 24       	eor	r1, r1
    255a:	ff 27       	eor	r31, r31
    255c:	59 1b       	sub	r21, r25
    255e:	99 f0       	breq	.+38     	; 0x2586 <__addsf3x+0x60>
    2560:	59 3f       	cpi	r21, 0xF9	; 249
    2562:	50 f4       	brcc	.+20     	; 0x2578 <__addsf3x+0x52>
    2564:	50 3e       	cpi	r21, 0xE0	; 224
    2566:	68 f1       	brcs	.+90     	; 0x25c2 <__addsf3x+0x9c>
    2568:	1a 16       	cp	r1, r26
    256a:	f0 40       	sbci	r31, 0x00	; 0
    256c:	a2 2f       	mov	r26, r18
    256e:	23 2f       	mov	r18, r19
    2570:	34 2f       	mov	r19, r20
    2572:	44 27       	eor	r20, r20
    2574:	58 5f       	subi	r21, 0xF8	; 248
    2576:	f3 cf       	rjmp	.-26     	; 0x255e <__addsf3x+0x38>
    2578:	46 95       	lsr	r20
    257a:	37 95       	ror	r19
    257c:	27 95       	ror	r18
    257e:	a7 95       	ror	r26
    2580:	f0 40       	sbci	r31, 0x00	; 0
    2582:	53 95       	inc	r21
    2584:	c9 f7       	brne	.-14     	; 0x2578 <__addsf3x+0x52>
    2586:	7e f4       	brtc	.+30     	; 0x25a6 <__addsf3x+0x80>
    2588:	1f 16       	cp	r1, r31
    258a:	ba 0b       	sbc	r27, r26
    258c:	62 0b       	sbc	r22, r18
    258e:	73 0b       	sbc	r23, r19
    2590:	84 0b       	sbc	r24, r20
    2592:	ba f0       	brmi	.+46     	; 0x25c2 <__addsf3x+0x9c>
    2594:	91 50       	subi	r25, 0x01	; 1
    2596:	a1 f0       	breq	.+40     	; 0x25c0 <__addsf3x+0x9a>
    2598:	ff 0f       	add	r31, r31
    259a:	bb 1f       	adc	r27, r27
    259c:	66 1f       	adc	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	88 1f       	adc	r24, r24
    25a2:	c2 f7       	brpl	.-16     	; 0x2594 <__addsf3x+0x6e>
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <__addsf3x+0x9c>
    25a6:	ba 0f       	add	r27, r26
    25a8:	62 1f       	adc	r22, r18
    25aa:	73 1f       	adc	r23, r19
    25ac:	84 1f       	adc	r24, r20
    25ae:	48 f4       	brcc	.+18     	; 0x25c2 <__addsf3x+0x9c>
    25b0:	87 95       	ror	r24
    25b2:	77 95       	ror	r23
    25b4:	67 95       	ror	r22
    25b6:	b7 95       	ror	r27
    25b8:	f7 95       	ror	r31
    25ba:	9e 3f       	cpi	r25, 0xFE	; 254
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <__addsf3x+0x9a>
    25be:	b0 cf       	rjmp	.-160    	; 0x2520 <__addsf3+0x28>
    25c0:	93 95       	inc	r25
    25c2:	88 0f       	add	r24, r24
    25c4:	08 f0       	brcs	.+2      	; 0x25c8 <__addsf3x+0xa2>
    25c6:	99 27       	eor	r25, r25
    25c8:	ee 0f       	add	r30, r30
    25ca:	97 95       	ror	r25
    25cc:	87 95       	ror	r24
    25ce:	08 95       	ret

000025d0 <__cmpsf2>:
    25d0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_cmp>
    25d4:	08 f4       	brcc	.+2      	; 0x25d8 <__cmpsf2+0x8>
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	08 95       	ret

000025da <cos>:
    25da:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_rempio2>
    25de:	e3 95       	inc	r30
    25e0:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__fp_sinus>

000025e4 <__divsf3>:
    25e4:	0e 94 06 13 	call	0x260c	; 0x260c <__divsf3x>
    25e8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_round>
    25ec:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fp_pscB>
    25f0:	58 f0       	brcs	.+22     	; 0x2608 <__divsf3+0x24>
    25f2:	0e 94 04 14 	call	0x2808	; 0x2808 <__fp_pscA>
    25f6:	40 f0       	brcs	.+16     	; 0x2608 <__divsf3+0x24>
    25f8:	29 f4       	brne	.+10     	; 0x2604 <__divsf3+0x20>
    25fa:	5f 3f       	cpi	r21, 0xFF	; 255
    25fc:	29 f0       	breq	.+10     	; 0x2608 <__divsf3+0x24>
    25fe:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>
    2602:	51 11       	cpse	r21, r1
    2604:	0c 94 85 14 	jmp	0x290a	; 0x290a <__fp_szero>
    2608:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>

0000260c <__divsf3x>:
    260c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__fp_split3>
    2610:	68 f3       	brcs	.-38     	; 0x25ec <__divsf3+0x8>

00002612 <__divsf3_pse>:
    2612:	99 23       	and	r25, r25
    2614:	b1 f3       	breq	.-20     	; 0x2602 <__divsf3+0x1e>
    2616:	55 23       	and	r21, r21
    2618:	91 f3       	breq	.-28     	; 0x25fe <__divsf3+0x1a>
    261a:	95 1b       	sub	r25, r21
    261c:	55 0b       	sbc	r21, r21
    261e:	bb 27       	eor	r27, r27
    2620:	aa 27       	eor	r26, r26
    2622:	62 17       	cp	r22, r18
    2624:	73 07       	cpc	r23, r19
    2626:	84 07       	cpc	r24, r20
    2628:	38 f0       	brcs	.+14     	; 0x2638 <__divsf3_pse+0x26>
    262a:	9f 5f       	subi	r25, 0xFF	; 255
    262c:	5f 4f       	sbci	r21, 0xFF	; 255
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	44 1f       	adc	r20, r20
    2634:	aa 1f       	adc	r26, r26
    2636:	a9 f3       	breq	.-22     	; 0x2622 <__divsf3_pse+0x10>
    2638:	35 d0       	rcall	.+106    	; 0x26a4 <__divsf3_pse+0x92>
    263a:	0e 2e       	mov	r0, r30
    263c:	3a f0       	brmi	.+14     	; 0x264c <__divsf3_pse+0x3a>
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	32 d0       	rcall	.+100    	; 0x26a6 <__divsf3_pse+0x94>
    2642:	91 50       	subi	r25, 0x01	; 1
    2644:	50 40       	sbci	r21, 0x00	; 0
    2646:	e6 95       	lsr	r30
    2648:	00 1c       	adc	r0, r0
    264a:	ca f7       	brpl	.-14     	; 0x263e <__divsf3_pse+0x2c>
    264c:	2b d0       	rcall	.+86     	; 0x26a4 <__divsf3_pse+0x92>
    264e:	fe 2f       	mov	r31, r30
    2650:	29 d0       	rcall	.+82     	; 0x26a4 <__divsf3_pse+0x92>
    2652:	66 0f       	add	r22, r22
    2654:	77 1f       	adc	r23, r23
    2656:	88 1f       	adc	r24, r24
    2658:	bb 1f       	adc	r27, r27
    265a:	26 17       	cp	r18, r22
    265c:	37 07       	cpc	r19, r23
    265e:	48 07       	cpc	r20, r24
    2660:	ab 07       	cpc	r26, r27
    2662:	b0 e8       	ldi	r27, 0x80	; 128
    2664:	09 f0       	breq	.+2      	; 0x2668 <__divsf3_pse+0x56>
    2666:	bb 0b       	sbc	r27, r27
    2668:	80 2d       	mov	r24, r0
    266a:	bf 01       	movw	r22, r30
    266c:	ff 27       	eor	r31, r31
    266e:	93 58       	subi	r25, 0x83	; 131
    2670:	5f 4f       	sbci	r21, 0xFF	; 255
    2672:	3a f0       	brmi	.+14     	; 0x2682 <__divsf3_pse+0x70>
    2674:	9e 3f       	cpi	r25, 0xFE	; 254
    2676:	51 05       	cpc	r21, r1
    2678:	78 f0       	brcs	.+30     	; 0x2698 <__divsf3_pse+0x86>
    267a:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>
    267e:	0c 94 85 14 	jmp	0x290a	; 0x290a <__fp_szero>
    2682:	5f 3f       	cpi	r21, 0xFF	; 255
    2684:	e4 f3       	brlt	.-8      	; 0x267e <__divsf3_pse+0x6c>
    2686:	98 3e       	cpi	r25, 0xE8	; 232
    2688:	d4 f3       	brlt	.-12     	; 0x267e <__divsf3_pse+0x6c>
    268a:	86 95       	lsr	r24
    268c:	77 95       	ror	r23
    268e:	67 95       	ror	r22
    2690:	b7 95       	ror	r27
    2692:	f7 95       	ror	r31
    2694:	9f 5f       	subi	r25, 0xFF	; 255
    2696:	c9 f7       	brne	.-14     	; 0x268a <__divsf3_pse+0x78>
    2698:	88 0f       	add	r24, r24
    269a:	91 1d       	adc	r25, r1
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	97 f9       	bld	r25, 7
    26a2:	08 95       	ret
    26a4:	e1 e0       	ldi	r30, 0x01	; 1
    26a6:	66 0f       	add	r22, r22
    26a8:	77 1f       	adc	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	bb 1f       	adc	r27, r27
    26ae:	62 17       	cp	r22, r18
    26b0:	73 07       	cpc	r23, r19
    26b2:	84 07       	cpc	r24, r20
    26b4:	ba 07       	cpc	r27, r26
    26b6:	20 f0       	brcs	.+8      	; 0x26c0 <__divsf3_pse+0xae>
    26b8:	62 1b       	sub	r22, r18
    26ba:	73 0b       	sbc	r23, r19
    26bc:	84 0b       	sbc	r24, r20
    26be:	ba 0b       	sbc	r27, r26
    26c0:	ee 1f       	adc	r30, r30
    26c2:	88 f7       	brcc	.-30     	; 0x26a6 <__divsf3_pse+0x94>
    26c4:	e0 95       	com	r30
    26c6:	08 95       	ret

000026c8 <__fixsfsi>:
    26c8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixunssfsi>
    26cc:	68 94       	set
    26ce:	b1 11       	cpse	r27, r1
    26d0:	0c 94 85 14 	jmp	0x290a	; 0x290a <__fp_szero>
    26d4:	08 95       	ret

000026d6 <__fixunssfsi>:
    26d6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_splitA>
    26da:	88 f0       	brcs	.+34     	; 0x26fe <__fixunssfsi+0x28>
    26dc:	9f 57       	subi	r25, 0x7F	; 127
    26de:	98 f0       	brcs	.+38     	; 0x2706 <__fixunssfsi+0x30>
    26e0:	b9 2f       	mov	r27, r25
    26e2:	99 27       	eor	r25, r25
    26e4:	b7 51       	subi	r27, 0x17	; 23
    26e6:	b0 f0       	brcs	.+44     	; 0x2714 <__fixunssfsi+0x3e>
    26e8:	e1 f0       	breq	.+56     	; 0x2722 <__fixunssfsi+0x4c>
    26ea:	66 0f       	add	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	1a f0       	brmi	.+6      	; 0x26fa <__fixunssfsi+0x24>
    26f4:	ba 95       	dec	r27
    26f6:	c9 f7       	brne	.-14     	; 0x26ea <__fixunssfsi+0x14>
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <__fixunssfsi+0x4c>
    26fa:	b1 30       	cpi	r27, 0x01	; 1
    26fc:	91 f0       	breq	.+36     	; 0x2722 <__fixunssfsi+0x4c>
    26fe:	0e 94 84 14 	call	0x2908	; 0x2908 <__fp_zero>
    2702:	b1 e0       	ldi	r27, 0x01	; 1
    2704:	08 95       	ret
    2706:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__fp_zero>
    270a:	67 2f       	mov	r22, r23
    270c:	78 2f       	mov	r23, r24
    270e:	88 27       	eor	r24, r24
    2710:	b8 5f       	subi	r27, 0xF8	; 248
    2712:	39 f0       	breq	.+14     	; 0x2722 <__fixunssfsi+0x4c>
    2714:	b9 3f       	cpi	r27, 0xF9	; 249
    2716:	cc f3       	brlt	.-14     	; 0x270a <__fixunssfsi+0x34>
    2718:	86 95       	lsr	r24
    271a:	77 95       	ror	r23
    271c:	67 95       	ror	r22
    271e:	b3 95       	inc	r27
    2720:	d9 f7       	brne	.-10     	; 0x2718 <__fixunssfsi+0x42>
    2722:	3e f4       	brtc	.+14     	; 0x2732 <__fixunssfsi+0x5c>
    2724:	90 95       	com	r25
    2726:	80 95       	com	r24
    2728:	70 95       	com	r23
    272a:	61 95       	neg	r22
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	8f 4f       	sbci	r24, 0xFF	; 255
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	08 95       	ret

00002734 <__floatunsisf>:
    2734:	e8 94       	clt
    2736:	09 c0       	rjmp	.+18     	; 0x274a <__floatsisf+0x12>

00002738 <__floatsisf>:
    2738:	97 fb       	bst	r25, 7
    273a:	3e f4       	brtc	.+14     	; 0x274a <__floatsisf+0x12>
    273c:	90 95       	com	r25
    273e:	80 95       	com	r24
    2740:	70 95       	com	r23
    2742:	61 95       	neg	r22
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	8f 4f       	sbci	r24, 0xFF	; 255
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	99 23       	and	r25, r25
    274c:	a9 f0       	breq	.+42     	; 0x2778 <__floatsisf+0x40>
    274e:	f9 2f       	mov	r31, r25
    2750:	96 e9       	ldi	r25, 0x96	; 150
    2752:	bb 27       	eor	r27, r27
    2754:	93 95       	inc	r25
    2756:	f6 95       	lsr	r31
    2758:	87 95       	ror	r24
    275a:	77 95       	ror	r23
    275c:	67 95       	ror	r22
    275e:	b7 95       	ror	r27
    2760:	f1 11       	cpse	r31, r1
    2762:	f8 cf       	rjmp	.-16     	; 0x2754 <__floatsisf+0x1c>
    2764:	fa f4       	brpl	.+62     	; 0x27a4 <__floatsisf+0x6c>
    2766:	bb 0f       	add	r27, r27
    2768:	11 f4       	brne	.+4      	; 0x276e <__floatsisf+0x36>
    276a:	60 ff       	sbrs	r22, 0
    276c:	1b c0       	rjmp	.+54     	; 0x27a4 <__floatsisf+0x6c>
    276e:	6f 5f       	subi	r22, 0xFF	; 255
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	8f 4f       	sbci	r24, 0xFF	; 255
    2774:	9f 4f       	sbci	r25, 0xFF	; 255
    2776:	16 c0       	rjmp	.+44     	; 0x27a4 <__floatsisf+0x6c>
    2778:	88 23       	and	r24, r24
    277a:	11 f0       	breq	.+4      	; 0x2780 <__floatsisf+0x48>
    277c:	96 e9       	ldi	r25, 0x96	; 150
    277e:	11 c0       	rjmp	.+34     	; 0x27a2 <__floatsisf+0x6a>
    2780:	77 23       	and	r23, r23
    2782:	21 f0       	breq	.+8      	; 0x278c <__floatsisf+0x54>
    2784:	9e e8       	ldi	r25, 0x8E	; 142
    2786:	87 2f       	mov	r24, r23
    2788:	76 2f       	mov	r23, r22
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <__floatsisf+0x5e>
    278c:	66 23       	and	r22, r22
    278e:	71 f0       	breq	.+28     	; 0x27ac <__floatsisf+0x74>
    2790:	96 e8       	ldi	r25, 0x86	; 134
    2792:	86 2f       	mov	r24, r22
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	2a f0       	brmi	.+10     	; 0x27a4 <__floatsisf+0x6c>
    279a:	9a 95       	dec	r25
    279c:	66 0f       	add	r22, r22
    279e:	77 1f       	adc	r23, r23
    27a0:	88 1f       	adc	r24, r24
    27a2:	da f7       	brpl	.-10     	; 0x279a <__floatsisf+0x62>
    27a4:	88 0f       	add	r24, r24
    27a6:	96 95       	lsr	r25
    27a8:	87 95       	ror	r24
    27aa:	97 f9       	bld	r25, 7
    27ac:	08 95       	ret

000027ae <__fp_cmp>:
    27ae:	99 0f       	add	r25, r25
    27b0:	00 08       	sbc	r0, r0
    27b2:	55 0f       	add	r21, r21
    27b4:	aa 0b       	sbc	r26, r26
    27b6:	e0 e8       	ldi	r30, 0x80	; 128
    27b8:	fe ef       	ldi	r31, 0xFE	; 254
    27ba:	16 16       	cp	r1, r22
    27bc:	17 06       	cpc	r1, r23
    27be:	e8 07       	cpc	r30, r24
    27c0:	f9 07       	cpc	r31, r25
    27c2:	c0 f0       	brcs	.+48     	; 0x27f4 <__fp_cmp+0x46>
    27c4:	12 16       	cp	r1, r18
    27c6:	13 06       	cpc	r1, r19
    27c8:	e4 07       	cpc	r30, r20
    27ca:	f5 07       	cpc	r31, r21
    27cc:	98 f0       	brcs	.+38     	; 0x27f4 <__fp_cmp+0x46>
    27ce:	62 1b       	sub	r22, r18
    27d0:	73 0b       	sbc	r23, r19
    27d2:	84 0b       	sbc	r24, r20
    27d4:	95 0b       	sbc	r25, r21
    27d6:	39 f4       	brne	.+14     	; 0x27e6 <__fp_cmp+0x38>
    27d8:	0a 26       	eor	r0, r26
    27da:	61 f0       	breq	.+24     	; 0x27f4 <__fp_cmp+0x46>
    27dc:	23 2b       	or	r18, r19
    27de:	24 2b       	or	r18, r20
    27e0:	25 2b       	or	r18, r21
    27e2:	21 f4       	brne	.+8      	; 0x27ec <__fp_cmp+0x3e>
    27e4:	08 95       	ret
    27e6:	0a 26       	eor	r0, r26
    27e8:	09 f4       	brne	.+2      	; 0x27ec <__fp_cmp+0x3e>
    27ea:	a1 40       	sbci	r26, 0x01	; 1
    27ec:	a6 95       	lsr	r26
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	81 1d       	adc	r24, r1
    27f2:	81 1d       	adc	r24, r1
    27f4:	08 95       	ret

000027f6 <__fp_inf>:
    27f6:	97 f9       	bld	r25, 7
    27f8:	9f 67       	ori	r25, 0x7F	; 127
    27fa:	80 e8       	ldi	r24, 0x80	; 128
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	08 95       	ret

00002802 <__fp_nan>:
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	80 ec       	ldi	r24, 0xC0	; 192
    2806:	08 95       	ret

00002808 <__fp_pscA>:
    2808:	00 24       	eor	r0, r0
    280a:	0a 94       	dec	r0
    280c:	16 16       	cp	r1, r22
    280e:	17 06       	cpc	r1, r23
    2810:	18 06       	cpc	r1, r24
    2812:	09 06       	cpc	r0, r25
    2814:	08 95       	ret

00002816 <__fp_pscB>:
    2816:	00 24       	eor	r0, r0
    2818:	0a 94       	dec	r0
    281a:	12 16       	cp	r1, r18
    281c:	13 06       	cpc	r1, r19
    281e:	14 06       	cpc	r1, r20
    2820:	05 06       	cpc	r0, r21
    2822:	08 95       	ret
    2824:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>

00002828 <__fp_rempio2>:
    2828:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_splitA>
    282c:	d8 f3       	brcs	.-10     	; 0x2824 <__fp_pscB+0xe>
    282e:	e8 94       	clt
    2830:	e0 e0       	ldi	r30, 0x00	; 0
    2832:	bb 27       	eor	r27, r27
    2834:	9f 57       	subi	r25, 0x7F	; 127
    2836:	f0 f0       	brcs	.+60     	; 0x2874 <__fp_rempio2+0x4c>
    2838:	2a ed       	ldi	r18, 0xDA	; 218
    283a:	3f e0       	ldi	r19, 0x0F	; 15
    283c:	49 ec       	ldi	r20, 0xC9	; 201
    283e:	06 c0       	rjmp	.+12     	; 0x284c <__fp_rempio2+0x24>
    2840:	ee 0f       	add	r30, r30
    2842:	bb 0f       	add	r27, r27
    2844:	66 1f       	adc	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	28 f0       	brcs	.+10     	; 0x2856 <__fp_rempio2+0x2e>
    284c:	b2 3a       	cpi	r27, 0xA2	; 162
    284e:	62 07       	cpc	r22, r18
    2850:	73 07       	cpc	r23, r19
    2852:	84 07       	cpc	r24, r20
    2854:	28 f0       	brcs	.+10     	; 0x2860 <__fp_rempio2+0x38>
    2856:	b2 5a       	subi	r27, 0xA2	; 162
    2858:	62 0b       	sbc	r22, r18
    285a:	73 0b       	sbc	r23, r19
    285c:	84 0b       	sbc	r24, r20
    285e:	e3 95       	inc	r30
    2860:	9a 95       	dec	r25
    2862:	72 f7       	brpl	.-36     	; 0x2840 <__fp_rempio2+0x18>
    2864:	80 38       	cpi	r24, 0x80	; 128
    2866:	30 f4       	brcc	.+12     	; 0x2874 <__fp_rempio2+0x4c>
    2868:	9a 95       	dec	r25
    286a:	bb 0f       	add	r27, r27
    286c:	66 1f       	adc	r22, r22
    286e:	77 1f       	adc	r23, r23
    2870:	88 1f       	adc	r24, r24
    2872:	d2 f7       	brpl	.-12     	; 0x2868 <__fp_rempio2+0x40>
    2874:	90 48       	sbci	r25, 0x80	; 128
    2876:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__fp_mpack_finite>

0000287a <__fp_round>:
    287a:	09 2e       	mov	r0, r25
    287c:	03 94       	inc	r0
    287e:	00 0c       	add	r0, r0
    2880:	11 f4       	brne	.+4      	; 0x2886 <__fp_round+0xc>
    2882:	88 23       	and	r24, r24
    2884:	52 f0       	brmi	.+20     	; 0x289a <__fp_round+0x20>
    2886:	bb 0f       	add	r27, r27
    2888:	40 f4       	brcc	.+16     	; 0x289a <__fp_round+0x20>
    288a:	bf 2b       	or	r27, r31
    288c:	11 f4       	brne	.+4      	; 0x2892 <__fp_round+0x18>
    288e:	60 ff       	sbrs	r22, 0
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__fp_round+0x20>
    2892:	6f 5f       	subi	r22, 0xFF	; 255
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	8f 4f       	sbci	r24, 0xFF	; 255
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	08 95       	ret

0000289c <__fp_sinus>:
    289c:	ef 93       	push	r30
    289e:	e0 ff       	sbrs	r30, 0
    28a0:	07 c0       	rjmp	.+14     	; 0x28b0 <__fp_sinus+0x14>
    28a2:	a2 ea       	ldi	r26, 0xA2	; 162
    28a4:	2a ed       	ldi	r18, 0xDA	; 218
    28a6:	3f e0       	ldi	r19, 0x0F	; 15
    28a8:	49 ec       	ldi	r20, 0xC9	; 201
    28aa:	5f eb       	ldi	r21, 0xBF	; 191
    28ac:	0e 94 93 12 	call	0x2526	; 0x2526 <__addsf3x>
    28b0:	0e 94 3d 14 	call	0x287a	; 0x287a <__fp_round>
    28b4:	0f 90       	pop	r0
    28b6:	03 94       	inc	r0
    28b8:	01 fc       	sbrc	r0, 1
    28ba:	90 58       	subi	r25, 0x80	; 128
    28bc:	e4 e5       	ldi	r30, 0x54	; 84
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__fp_powsodd>

000028c4 <__fp_split3>:
    28c4:	57 fd       	sbrc	r21, 7
    28c6:	90 58       	subi	r25, 0x80	; 128
    28c8:	44 0f       	add	r20, r20
    28ca:	55 1f       	adc	r21, r21
    28cc:	59 f0       	breq	.+22     	; 0x28e4 <__fp_splitA+0x10>
    28ce:	5f 3f       	cpi	r21, 0xFF	; 255
    28d0:	71 f0       	breq	.+28     	; 0x28ee <__fp_splitA+0x1a>
    28d2:	47 95       	ror	r20

000028d4 <__fp_splitA>:
    28d4:	88 0f       	add	r24, r24
    28d6:	97 fb       	bst	r25, 7
    28d8:	99 1f       	adc	r25, r25
    28da:	61 f0       	breq	.+24     	; 0x28f4 <__fp_splitA+0x20>
    28dc:	9f 3f       	cpi	r25, 0xFF	; 255
    28de:	79 f0       	breq	.+30     	; 0x28fe <__fp_splitA+0x2a>
    28e0:	87 95       	ror	r24
    28e2:	08 95       	ret
    28e4:	12 16       	cp	r1, r18
    28e6:	13 06       	cpc	r1, r19
    28e8:	14 06       	cpc	r1, r20
    28ea:	55 1f       	adc	r21, r21
    28ec:	f2 cf       	rjmp	.-28     	; 0x28d2 <__fp_split3+0xe>
    28ee:	46 95       	lsr	r20
    28f0:	f1 df       	rcall	.-30     	; 0x28d4 <__fp_splitA>
    28f2:	08 c0       	rjmp	.+16     	; 0x2904 <__fp_splitA+0x30>
    28f4:	16 16       	cp	r1, r22
    28f6:	17 06       	cpc	r1, r23
    28f8:	18 06       	cpc	r1, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	f1 cf       	rjmp	.-30     	; 0x28e0 <__fp_splitA+0xc>
    28fe:	86 95       	lsr	r24
    2900:	71 05       	cpc	r23, r1
    2902:	61 05       	cpc	r22, r1
    2904:	08 94       	sec
    2906:	08 95       	ret

00002908 <__fp_zero>:
    2908:	e8 94       	clt

0000290a <__fp_szero>:
    290a:	bb 27       	eor	r27, r27
    290c:	66 27       	eor	r22, r22
    290e:	77 27       	eor	r23, r23
    2910:	cb 01       	movw	r24, r22
    2912:	97 f9       	bld	r25, 7
    2914:	08 95       	ret

00002916 <__gesf2>:
    2916:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_cmp>
    291a:	08 f4       	brcc	.+2      	; 0x291e <__gesf2+0x8>
    291c:	8f ef       	ldi	r24, 0xFF	; 255
    291e:	08 95       	ret
    2920:	16 f0       	brts	.+4      	; 0x2926 <__gesf2+0x10>
    2922:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__fp_mpack>
    2926:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>
    292a:	68 94       	set
    292c:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>

00002930 <log>:
    2930:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_splitA>
    2934:	a8 f3       	brcs	.-22     	; 0x2920 <__gesf2+0xa>
    2936:	99 23       	and	r25, r25
    2938:	c1 f3       	breq	.-16     	; 0x292a <__gesf2+0x14>
    293a:	ae f3       	brts	.-22     	; 0x2926 <__gesf2+0x10>
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	1f 93       	push	r17
    2942:	0f 93       	push	r16
    2944:	ff 92       	push	r15
    2946:	c9 2f       	mov	r28, r25
    2948:	dd 27       	eor	r29, r29
    294a:	88 23       	and	r24, r24
    294c:	2a f0       	brmi	.+10     	; 0x2958 <log+0x28>
    294e:	21 97       	sbiw	r28, 0x01	; 1
    2950:	66 0f       	add	r22, r22
    2952:	77 1f       	adc	r23, r23
    2954:	88 1f       	adc	r24, r24
    2956:	da f7       	brpl	.-10     	; 0x294e <log+0x1e>
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f eb       	ldi	r21, 0xBF	; 191
    2960:	9f e3       	ldi	r25, 0x3F	; 63
    2962:	88 39       	cpi	r24, 0x98	; 152
    2964:	20 f0       	brcs	.+8      	; 0x296e <log+0x3e>
    2966:	80 3e       	cpi	r24, 0xE0	; 224
    2968:	38 f0       	brcs	.+14     	; 0x2978 <log+0x48>
    296a:	21 96       	adiw	r28, 0x01	; 1
    296c:	8f 77       	andi	r24, 0x7F	; 127
    296e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    2972:	e2 e7       	ldi	r30, 0x72	; 114
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <log+0x50>
    2978:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__addsf3>
    297c:	ef e9       	ldi	r30, 0x9F	; 159
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__fp_powser>
    2984:	8b 01       	movw	r16, r22
    2986:	be 01       	movw	r22, r28
    2988:	ec 01       	movw	r28, r24
    298a:	fb 2e       	mov	r15, r27
    298c:	6f 57       	subi	r22, 0x7F	; 127
    298e:	71 09       	sbc	r23, r1
    2990:	75 95       	asr	r23
    2992:	77 1f       	adc	r23, r23
    2994:	88 0b       	sbc	r24, r24
    2996:	99 0b       	sbc	r25, r25
    2998:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatsisf>
    299c:	28 e1       	ldi	r18, 0x18	; 24
    299e:	32 e7       	ldi	r19, 0x72	; 114
    29a0:	41 e3       	ldi	r20, 0x31	; 49
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3x>
    29a8:	af 2d       	mov	r26, r15
    29aa:	98 01       	movw	r18, r16
    29ac:	ae 01       	movw	r20, r28
    29ae:	ff 90       	pop	r15
    29b0:	0f 91       	pop	r16
    29b2:	1f 91       	pop	r17
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	0e 94 93 12 	call	0x2526	; 0x2526 <__addsf3x>
    29bc:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_round>

000029c0 <__mulsf3>:
    29c0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3x>
    29c4:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_round>
    29c8:	0e 94 04 14 	call	0x2808	; 0x2808 <__fp_pscA>
    29cc:	38 f0       	brcs	.+14     	; 0x29dc <__mulsf3+0x1c>
    29ce:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fp_pscB>
    29d2:	20 f0       	brcs	.+8      	; 0x29dc <__mulsf3+0x1c>
    29d4:	95 23       	and	r25, r21
    29d6:	11 f0       	breq	.+4      	; 0x29dc <__mulsf3+0x1c>
    29d8:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>
    29dc:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>
    29e0:	11 24       	eor	r1, r1
    29e2:	0c 94 85 14 	jmp	0x290a	; 0x290a <__fp_szero>

000029e6 <__mulsf3x>:
    29e6:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__fp_split3>
    29ea:	70 f3       	brcs	.-36     	; 0x29c8 <__mulsf3+0x8>

000029ec <__mulsf3_pse>:
    29ec:	95 9f       	mul	r25, r21
    29ee:	c1 f3       	breq	.-16     	; 0x29e0 <__mulsf3+0x20>
    29f0:	95 0f       	add	r25, r21
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	55 1f       	adc	r21, r21
    29f6:	62 9f       	mul	r22, r18
    29f8:	f0 01       	movw	r30, r0
    29fa:	72 9f       	mul	r23, r18
    29fc:	bb 27       	eor	r27, r27
    29fe:	f0 0d       	add	r31, r0
    2a00:	b1 1d       	adc	r27, r1
    2a02:	63 9f       	mul	r22, r19
    2a04:	aa 27       	eor	r26, r26
    2a06:	f0 0d       	add	r31, r0
    2a08:	b1 1d       	adc	r27, r1
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	64 9f       	mul	r22, r20
    2a0e:	66 27       	eor	r22, r22
    2a10:	b0 0d       	add	r27, r0
    2a12:	a1 1d       	adc	r26, r1
    2a14:	66 1f       	adc	r22, r22
    2a16:	82 9f       	mul	r24, r18
    2a18:	22 27       	eor	r18, r18
    2a1a:	b0 0d       	add	r27, r0
    2a1c:	a1 1d       	adc	r26, r1
    2a1e:	62 1f       	adc	r22, r18
    2a20:	73 9f       	mul	r23, r19
    2a22:	b0 0d       	add	r27, r0
    2a24:	a1 1d       	adc	r26, r1
    2a26:	62 1f       	adc	r22, r18
    2a28:	83 9f       	mul	r24, r19
    2a2a:	a0 0d       	add	r26, r0
    2a2c:	61 1d       	adc	r22, r1
    2a2e:	22 1f       	adc	r18, r18
    2a30:	74 9f       	mul	r23, r20
    2a32:	33 27       	eor	r19, r19
    2a34:	a0 0d       	add	r26, r0
    2a36:	61 1d       	adc	r22, r1
    2a38:	23 1f       	adc	r18, r19
    2a3a:	84 9f       	mul	r24, r20
    2a3c:	60 0d       	add	r22, r0
    2a3e:	21 1d       	adc	r18, r1
    2a40:	82 2f       	mov	r24, r18
    2a42:	76 2f       	mov	r23, r22
    2a44:	6a 2f       	mov	r22, r26
    2a46:	11 24       	eor	r1, r1
    2a48:	9f 57       	subi	r25, 0x7F	; 127
    2a4a:	50 40       	sbci	r21, 0x00	; 0
    2a4c:	9a f0       	brmi	.+38     	; 0x2a74 <__mulsf3_pse+0x88>
    2a4e:	f1 f0       	breq	.+60     	; 0x2a8c <__mulsf3_pse+0xa0>
    2a50:	88 23       	and	r24, r24
    2a52:	4a f0       	brmi	.+18     	; 0x2a66 <__mulsf3_pse+0x7a>
    2a54:	ee 0f       	add	r30, r30
    2a56:	ff 1f       	adc	r31, r31
    2a58:	bb 1f       	adc	r27, r27
    2a5a:	66 1f       	adc	r22, r22
    2a5c:	77 1f       	adc	r23, r23
    2a5e:	88 1f       	adc	r24, r24
    2a60:	91 50       	subi	r25, 0x01	; 1
    2a62:	50 40       	sbci	r21, 0x00	; 0
    2a64:	a9 f7       	brne	.-22     	; 0x2a50 <__mulsf3_pse+0x64>
    2a66:	9e 3f       	cpi	r25, 0xFE	; 254
    2a68:	51 05       	cpc	r21, r1
    2a6a:	80 f0       	brcs	.+32     	; 0x2a8c <__mulsf3_pse+0xa0>
    2a6c:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_inf>
    2a70:	0c 94 85 14 	jmp	0x290a	; 0x290a <__fp_szero>
    2a74:	5f 3f       	cpi	r21, 0xFF	; 255
    2a76:	e4 f3       	brlt	.-8      	; 0x2a70 <__mulsf3_pse+0x84>
    2a78:	98 3e       	cpi	r25, 0xE8	; 232
    2a7a:	d4 f3       	brlt	.-12     	; 0x2a70 <__mulsf3_pse+0x84>
    2a7c:	86 95       	lsr	r24
    2a7e:	77 95       	ror	r23
    2a80:	67 95       	ror	r22
    2a82:	b7 95       	ror	r27
    2a84:	f7 95       	ror	r31
    2a86:	e7 95       	ror	r30
    2a88:	9f 5f       	subi	r25, 0xFF	; 255
    2a8a:	c1 f7       	brne	.-16     	; 0x2a7c <__mulsf3_pse+0x90>
    2a8c:	fe 2b       	or	r31, r30
    2a8e:	88 0f       	add	r24, r24
    2a90:	91 1d       	adc	r25, r1
    2a92:	96 95       	lsr	r25
    2a94:	87 95       	ror	r24
    2a96:	97 f9       	bld	r25, 7
    2a98:	08 95       	ret

00002a9a <sin>:
    2a9a:	9f 93       	push	r25
    2a9c:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_rempio2>
    2aa0:	0f 90       	pop	r0
    2aa2:	07 fc       	sbrc	r0, 7
    2aa4:	ee 5f       	subi	r30, 0xFE	; 254
    2aa6:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__fp_sinus>
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <sin+0x18>
    2aac:	16 f4       	brtc	.+4      	; 0x2ab2 <sin+0x18>
    2aae:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__fp_nan>
    2ab2:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__fp_mpack>

00002ab6 <sqrt>:
    2ab6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_splitA>
    2aba:	b8 f3       	brcs	.-18     	; 0x2aaa <sin+0x10>
    2abc:	99 23       	and	r25, r25
    2abe:	c9 f3       	breq	.-14     	; 0x2ab2 <sin+0x18>
    2ac0:	b6 f3       	brts	.-20     	; 0x2aae <sin+0x14>
    2ac2:	9f 57       	subi	r25, 0x7F	; 127
    2ac4:	55 0b       	sbc	r21, r21
    2ac6:	87 ff       	sbrs	r24, 7
    2ac8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__fp_norm2>
    2acc:	00 24       	eor	r0, r0
    2ace:	a0 e6       	ldi	r26, 0x60	; 96
    2ad0:	40 ea       	ldi	r20, 0xA0	; 160
    2ad2:	90 01       	movw	r18, r0
    2ad4:	80 58       	subi	r24, 0x80	; 128
    2ad6:	56 95       	lsr	r21
    2ad8:	97 95       	ror	r25
    2ada:	28 f4       	brcc	.+10     	; 0x2ae6 <sqrt+0x30>
    2adc:	80 5c       	subi	r24, 0xC0	; 192
    2ade:	66 0f       	add	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <sqrt+0x38>
    2ae6:	26 17       	cp	r18, r22
    2ae8:	37 07       	cpc	r19, r23
    2aea:	48 07       	cpc	r20, r24
    2aec:	30 f4       	brcc	.+12     	; 0x2afa <sqrt+0x44>
    2aee:	62 1b       	sub	r22, r18
    2af0:	73 0b       	sbc	r23, r19
    2af2:	84 0b       	sbc	r24, r20
    2af4:	20 29       	or	r18, r0
    2af6:	31 29       	or	r19, r1
    2af8:	4a 2b       	or	r20, r26
    2afa:	a6 95       	lsr	r26
    2afc:	17 94       	ror	r1
    2afe:	07 94       	ror	r0
    2b00:	20 25       	eor	r18, r0
    2b02:	31 25       	eor	r19, r1
    2b04:	4a 27       	eor	r20, r26
    2b06:	58 f7       	brcc	.-42     	; 0x2ade <sqrt+0x28>
    2b08:	66 0f       	add	r22, r22
    2b0a:	77 1f       	adc	r23, r23
    2b0c:	88 1f       	adc	r24, r24
    2b0e:	20 f0       	brcs	.+8      	; 0x2b18 <sqrt+0x62>
    2b10:	26 17       	cp	r18, r22
    2b12:	37 07       	cpc	r19, r23
    2b14:	48 07       	cpc	r20, r24
    2b16:	30 f4       	brcc	.+12     	; 0x2b24 <sqrt+0x6e>
    2b18:	62 0b       	sbc	r22, r18
    2b1a:	73 0b       	sbc	r23, r19
    2b1c:	84 0b       	sbc	r24, r20
    2b1e:	20 0d       	add	r18, r0
    2b20:	31 1d       	adc	r19, r1
    2b22:	41 1d       	adc	r20, r1
    2b24:	a0 95       	com	r26
    2b26:	81 f7       	brne	.-32     	; 0x2b08 <sqrt+0x52>
    2b28:	b9 01       	movw	r22, r18
    2b2a:	84 2f       	mov	r24, r20
    2b2c:	91 58       	subi	r25, 0x81	; 129
    2b2e:	88 0f       	add	r24, r24
    2b30:	96 95       	lsr	r25
    2b32:	87 95       	ror	r24
    2b34:	08 95       	ret

00002b36 <__fp_mpack>:
    2b36:	9f 3f       	cpi	r25, 0xFF	; 255
    2b38:	31 f0       	breq	.+12     	; 0x2b46 <__fp_mpack_finite+0xc>

00002b3a <__fp_mpack_finite>:
    2b3a:	91 50       	subi	r25, 0x01	; 1
    2b3c:	20 f4       	brcc	.+8      	; 0x2b46 <__fp_mpack_finite+0xc>
    2b3e:	87 95       	ror	r24
    2b40:	77 95       	ror	r23
    2b42:	67 95       	ror	r22
    2b44:	b7 95       	ror	r27
    2b46:	88 0f       	add	r24, r24
    2b48:	91 1d       	adc	r25, r1
    2b4a:	96 95       	lsr	r25
    2b4c:	87 95       	ror	r24
    2b4e:	97 f9       	bld	r25, 7
    2b50:	08 95       	ret

00002b52 <__fp_norm2>:
    2b52:	91 50       	subi	r25, 0x01	; 1
    2b54:	50 40       	sbci	r21, 0x00	; 0
    2b56:	66 0f       	add	r22, r22
    2b58:	77 1f       	adc	r23, r23
    2b5a:	88 1f       	adc	r24, r24
    2b5c:	d2 f7       	brpl	.-12     	; 0x2b52 <__fp_norm2>
    2b5e:	08 95       	ret

00002b60 <__fp_powser>:
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	1f 93       	push	r17
    2b66:	0f 93       	push	r16
    2b68:	ff 92       	push	r15
    2b6a:	ef 92       	push	r14
    2b6c:	df 92       	push	r13
    2b6e:	7b 01       	movw	r14, r22
    2b70:	8c 01       	movw	r16, r24
    2b72:	68 94       	set
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <__fp_powser+0x22>
    2b76:	da 2e       	mov	r13, r26
    2b78:	ef 01       	movw	r28, r30
    2b7a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3x>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e8 94       	clt
    2b82:	a5 91       	lpm	r26, Z+
    2b84:	25 91       	lpm	r18, Z+
    2b86:	35 91       	lpm	r19, Z+
    2b88:	45 91       	lpm	r20, Z+
    2b8a:	55 91       	lpm	r21, Z+
    2b8c:	a6 f3       	brts	.-24     	; 0x2b76 <__fp_powser+0x16>
    2b8e:	ef 01       	movw	r28, r30
    2b90:	0e 94 93 12 	call	0x2526	; 0x2526 <__addsf3x>
    2b94:	fe 01       	movw	r30, r28
    2b96:	97 01       	movw	r18, r14
    2b98:	a8 01       	movw	r20, r16
    2b9a:	da 94       	dec	r13
    2b9c:	69 f7       	brne	.-38     	; 0x2b78 <__fp_powser+0x18>
    2b9e:	df 90       	pop	r13
    2ba0:	ef 90       	pop	r14
    2ba2:	ff 90       	pop	r15
    2ba4:	0f 91       	pop	r16
    2ba6:	1f 91       	pop	r17
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <__fp_powsodd>:
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	7f 93       	push	r23
    2bb4:	6f 93       	push	r22
    2bb6:	ff 93       	push	r31
    2bb8:	ef 93       	push	r30
    2bba:	9b 01       	movw	r18, r22
    2bbc:	ac 01       	movw	r20, r24
    2bbe:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    2bc2:	ef 91       	pop	r30
    2bc4:	ff 91       	pop	r31
    2bc6:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__fp_powser>
    2bca:	2f 91       	pop	r18
    2bcc:	3f 91       	pop	r19
    2bce:	4f 91       	pop	r20
    2bd0:	5f 91       	pop	r21
    2bd2:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__mulsf3>

00002bd6 <__divmodsi4>:
    2bd6:	05 2e       	mov	r0, r21
    2bd8:	97 fb       	bst	r25, 7
    2bda:	1e f4       	brtc	.+6      	; 0x2be2 <__divmodsi4+0xc>
    2bdc:	00 94       	com	r0
    2bde:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__negsi2>
    2be2:	57 fd       	sbrc	r21, 7
    2be4:	07 d0       	rcall	.+14     	; 0x2bf4 <__divmodsi4_neg2>
    2be6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__udivmodsi4>
    2bea:	07 fc       	sbrc	r0, 7
    2bec:	03 d0       	rcall	.+6      	; 0x2bf4 <__divmodsi4_neg2>
    2bee:	4e f4       	brtc	.+18     	; 0x2c02 <__divmodsi4_exit>
    2bf0:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__negsi2>

00002bf4 <__divmodsi4_neg2>:
    2bf4:	50 95       	com	r21
    2bf6:	40 95       	com	r20
    2bf8:	30 95       	com	r19
    2bfa:	21 95       	neg	r18
    2bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfe:	4f 4f       	sbci	r20, 0xFF	; 255
    2c00:	5f 4f       	sbci	r21, 0xFF	; 255

00002c02 <__divmodsi4_exit>:
    2c02:	08 95       	ret

00002c04 <__negsi2>:
    2c04:	90 95       	com	r25
    2c06:	80 95       	com	r24
    2c08:	70 95       	com	r23
    2c0a:	61 95       	neg	r22
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	08 95       	ret

00002c14 <__muluhisi3>:
    2c14:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__umulhisi3>
    2c18:	a5 9f       	mul	r26, r21
    2c1a:	90 0d       	add	r25, r0
    2c1c:	b4 9f       	mul	r27, r20
    2c1e:	90 0d       	add	r25, r0
    2c20:	a4 9f       	mul	r26, r20
    2c22:	80 0d       	add	r24, r0
    2c24:	91 1d       	adc	r25, r1
    2c26:	11 24       	eor	r1, r1
    2c28:	08 95       	ret

00002c2a <__udivmodsi4>:
    2c2a:	a1 e2       	ldi	r26, 0x21	; 33
    2c2c:	1a 2e       	mov	r1, r26
    2c2e:	aa 1b       	sub	r26, r26
    2c30:	bb 1b       	sub	r27, r27
    2c32:	fd 01       	movw	r30, r26
    2c34:	0d c0       	rjmp	.+26     	; 0x2c50 <__udivmodsi4_ep>

00002c36 <__udivmodsi4_loop>:
    2c36:	aa 1f       	adc	r26, r26
    2c38:	bb 1f       	adc	r27, r27
    2c3a:	ee 1f       	adc	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	a2 17       	cp	r26, r18
    2c40:	b3 07       	cpc	r27, r19
    2c42:	e4 07       	cpc	r30, r20
    2c44:	f5 07       	cpc	r31, r21
    2c46:	20 f0       	brcs	.+8      	; 0x2c50 <__udivmodsi4_ep>
    2c48:	a2 1b       	sub	r26, r18
    2c4a:	b3 0b       	sbc	r27, r19
    2c4c:	e4 0b       	sbc	r30, r20
    2c4e:	f5 0b       	sbc	r31, r21

00002c50 <__udivmodsi4_ep>:
    2c50:	66 1f       	adc	r22, r22
    2c52:	77 1f       	adc	r23, r23
    2c54:	88 1f       	adc	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	1a 94       	dec	r1
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <__udivmodsi4_loop>
    2c5c:	60 95       	com	r22
    2c5e:	70 95       	com	r23
    2c60:	80 95       	com	r24
    2c62:	90 95       	com	r25
    2c64:	9b 01       	movw	r18, r22
    2c66:	ac 01       	movw	r20, r24
    2c68:	bd 01       	movw	r22, r26
    2c6a:	cf 01       	movw	r24, r30
    2c6c:	08 95       	ret

00002c6e <__umulhisi3>:
    2c6e:	a2 9f       	mul	r26, r18
    2c70:	b0 01       	movw	r22, r0
    2c72:	b3 9f       	mul	r27, r19
    2c74:	c0 01       	movw	r24, r0
    2c76:	a3 9f       	mul	r26, r19
    2c78:	70 0d       	add	r23, r0
    2c7a:	81 1d       	adc	r24, r1
    2c7c:	11 24       	eor	r1, r1
    2c7e:	91 1d       	adc	r25, r1
    2c80:	b2 9f       	mul	r27, r18
    2c82:	70 0d       	add	r23, r0
    2c84:	81 1d       	adc	r24, r1
    2c86:	11 24       	eor	r1, r1
    2c88:	91 1d       	adc	r25, r1
    2c8a:	08 95       	ret

00002c8c <dtostrf>:
    2c8c:	ef 92       	push	r14
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	e8 01       	movw	r28, r16
    2c98:	47 fd       	sbrc	r20, 7
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <dtostrf+0x14>
    2c9c:	34 e0       	ldi	r19, 0x04	; 4
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <dtostrf+0x16>
    2ca0:	34 e1       	ldi	r19, 0x14	; 20
    2ca2:	04 2e       	mov	r0, r20
    2ca4:	00 0c       	add	r0, r0
    2ca6:	55 0b       	sbc	r21, r21
    2ca8:	57 ff       	sbrs	r21, 7
    2caa:	03 c0       	rjmp	.+6      	; 0x2cb2 <dtostrf+0x26>
    2cac:	51 95       	neg	r21
    2cae:	41 95       	neg	r20
    2cb0:	51 09       	sbc	r21, r1
    2cb2:	e3 2e       	mov	r14, r19
    2cb4:	02 2f       	mov	r16, r18
    2cb6:	24 2f       	mov	r18, r20
    2cb8:	ae 01       	movw	r20, r28
    2cba:	0e 94 93 18 	call	0x3126	; 0x3126 <dtoa_prf>
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ef 90       	pop	r14
    2cca:	08 95       	ret

00002ccc <atof>:
    2ccc:	66 27       	eor	r22, r22
    2cce:	77 27       	eor	r23, r23
    2cd0:	0c 94 ed 19 	jmp	0x33da	; 0x33da <strtod>

00002cd4 <atoi>:
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	88 27       	eor	r24, r24
    2cd8:	99 27       	eor	r25, r25
    2cda:	e8 94       	clt
    2cdc:	21 91       	ld	r18, Z+
    2cde:	20 32       	cpi	r18, 0x20	; 32
    2ce0:	e9 f3       	breq	.-6      	; 0x2cdc <atoi+0x8>
    2ce2:	29 30       	cpi	r18, 0x09	; 9
    2ce4:	10 f0       	brcs	.+4      	; 0x2cea <atoi+0x16>
    2ce6:	2e 30       	cpi	r18, 0x0E	; 14
    2ce8:	c8 f3       	brcs	.-14     	; 0x2cdc <atoi+0x8>
    2cea:	2b 32       	cpi	r18, 0x2B	; 43
    2cec:	41 f0       	breq	.+16     	; 0x2cfe <atoi+0x2a>
    2cee:	2d 32       	cpi	r18, 0x2D	; 45
    2cf0:	39 f4       	brne	.+14     	; 0x2d00 <atoi+0x2c>
    2cf2:	68 94       	set
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <atoi+0x2a>
    2cf6:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__mulhi_const_10>
    2cfa:	82 0f       	add	r24, r18
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	21 91       	ld	r18, Z+
    2d00:	20 53       	subi	r18, 0x30	; 48
    2d02:	2a 30       	cpi	r18, 0x0A	; 10
    2d04:	c0 f3       	brcs	.-16     	; 0x2cf6 <atoi+0x22>
    2d06:	1e f4       	brtc	.+6      	; 0x2d0e <atoi+0x3a>
    2d08:	90 95       	com	r25
    2d0a:	81 95       	neg	r24
    2d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0e:	08 95       	ret

00002d10 <__mulhi_const_10>:
    2d10:	7a e0       	ldi	r23, 0x0A	; 10
    2d12:	97 9f       	mul	r25, r23
    2d14:	90 2d       	mov	r25, r0
    2d16:	87 9f       	mul	r24, r23
    2d18:	80 2d       	mov	r24, r0
    2d1a:	91 0d       	add	r25, r1
    2d1c:	11 24       	eor	r1, r1
    2d1e:	08 95       	ret

00002d20 <sprintf>:
    2d20:	ae e0       	ldi	r26, 0x0E	; 14
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e6 e9       	ldi	r30, 0x96	; 150
    2d26:	f6 e1       	ldi	r31, 0x16	; 22
    2d28:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x1c>
    2d2c:	0d 89       	ldd	r16, Y+21	; 0x15
    2d2e:	1e 89       	ldd	r17, Y+22	; 0x16
    2d30:	86 e0       	ldi	r24, 0x06	; 6
    2d32:	8c 83       	std	Y+4, r24	; 0x04
    2d34:	1a 83       	std	Y+2, r17	; 0x02
    2d36:	09 83       	std	Y+1, r16	; 0x01
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	9f e7       	ldi	r25, 0x7F	; 127
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	ae 01       	movw	r20, r28
    2d42:	47 5e       	subi	r20, 0xE7	; 231
    2d44:	5f 4f       	sbci	r21, 0xFF	; 255
    2d46:	6f 89       	ldd	r22, Y+23	; 0x17
    2d48:	78 8d       	ldd	r23, Y+24	; 0x18
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vfprintf>
    2d52:	ef 81       	ldd	r30, Y+7	; 0x07
    2d54:	f8 85       	ldd	r31, Y+8	; 0x08
    2d56:	e0 0f       	add	r30, r16
    2d58:	f1 1f       	adc	r31, r17
    2d5a:	10 82       	st	Z, r1
    2d5c:	2e 96       	adiw	r28, 0x0e	; 14
    2d5e:	e4 e0       	ldi	r30, 0x04	; 4
    2d60:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x1c>

00002d64 <vfprintf>:
    2d64:	ab e0       	ldi	r26, 0x0B	; 11
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e8 eb       	ldi	r30, 0xB8	; 184
    2d6a:	f6 e1       	ldi	r31, 0x16	; 22
    2d6c:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__>
    2d70:	6c 01       	movw	r12, r24
    2d72:	7b 01       	movw	r14, r22
    2d74:	8a 01       	movw	r16, r20
    2d76:	fc 01       	movw	r30, r24
    2d78:	17 82       	std	Z+7, r1	; 0x07
    2d7a:	16 82       	std	Z+6, r1	; 0x06
    2d7c:	83 81       	ldd	r24, Z+3	; 0x03
    2d7e:	81 ff       	sbrs	r24, 1
    2d80:	cc c1       	rjmp	.+920    	; 0x311a <vfprintf+0x3b6>
    2d82:	ce 01       	movw	r24, r28
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	3c 01       	movw	r6, r24
    2d88:	f6 01       	movw	r30, r12
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	f7 01       	movw	r30, r14
    2d8e:	93 fd       	sbrc	r25, 3
    2d90:	85 91       	lpm	r24, Z+
    2d92:	93 ff       	sbrs	r25, 3
    2d94:	81 91       	ld	r24, Z+
    2d96:	7f 01       	movw	r14, r30
    2d98:	88 23       	and	r24, r24
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <vfprintf+0x3a>
    2d9c:	ba c1       	rjmp	.+884    	; 0x3112 <vfprintf+0x3ae>
    2d9e:	85 32       	cpi	r24, 0x25	; 37
    2da0:	39 f4       	brne	.+14     	; 0x2db0 <vfprintf+0x4c>
    2da2:	93 fd       	sbrc	r25, 3
    2da4:	85 91       	lpm	r24, Z+
    2da6:	93 ff       	sbrs	r25, 3
    2da8:	81 91       	ld	r24, Z+
    2daa:	7f 01       	movw	r14, r30
    2dac:	85 32       	cpi	r24, 0x25	; 37
    2dae:	29 f4       	brne	.+10     	; 0x2dba <vfprintf+0x56>
    2db0:	b6 01       	movw	r22, r12
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    2db8:	e7 cf       	rjmp	.-50     	; 0x2d88 <vfprintf+0x24>
    2dba:	91 2c       	mov	r9, r1
    2dbc:	21 2c       	mov	r2, r1
    2dbe:	31 2c       	mov	r3, r1
    2dc0:	ff e1       	ldi	r31, 0x1F	; 31
    2dc2:	f3 15       	cp	r31, r3
    2dc4:	d8 f0       	brcs	.+54     	; 0x2dfc <vfprintf+0x98>
    2dc6:	8b 32       	cpi	r24, 0x2B	; 43
    2dc8:	79 f0       	breq	.+30     	; 0x2de8 <vfprintf+0x84>
    2dca:	38 f4       	brcc	.+14     	; 0x2dda <vfprintf+0x76>
    2dcc:	80 32       	cpi	r24, 0x20	; 32
    2dce:	79 f0       	breq	.+30     	; 0x2dee <vfprintf+0x8a>
    2dd0:	83 32       	cpi	r24, 0x23	; 35
    2dd2:	a1 f4       	brne	.+40     	; 0x2dfc <vfprintf+0x98>
    2dd4:	23 2d       	mov	r18, r3
    2dd6:	20 61       	ori	r18, 0x10	; 16
    2dd8:	1d c0       	rjmp	.+58     	; 0x2e14 <vfprintf+0xb0>
    2dda:	8d 32       	cpi	r24, 0x2D	; 45
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <vfprintf+0x92>
    2dde:	80 33       	cpi	r24, 0x30	; 48
    2de0:	69 f4       	brne	.+26     	; 0x2dfc <vfprintf+0x98>
    2de2:	23 2d       	mov	r18, r3
    2de4:	21 60       	ori	r18, 0x01	; 1
    2de6:	16 c0       	rjmp	.+44     	; 0x2e14 <vfprintf+0xb0>
    2de8:	83 2d       	mov	r24, r3
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	38 2e       	mov	r3, r24
    2dee:	e3 2d       	mov	r30, r3
    2df0:	e4 60       	ori	r30, 0x04	; 4
    2df2:	3e 2e       	mov	r3, r30
    2df4:	2a c0       	rjmp	.+84     	; 0x2e4a <vfprintf+0xe6>
    2df6:	f3 2d       	mov	r31, r3
    2df8:	f8 60       	ori	r31, 0x08	; 8
    2dfa:	1d c0       	rjmp	.+58     	; 0x2e36 <vfprintf+0xd2>
    2dfc:	37 fc       	sbrc	r3, 7
    2dfe:	2d c0       	rjmp	.+90     	; 0x2e5a <vfprintf+0xf6>
    2e00:	20 ed       	ldi	r18, 0xD0	; 208
    2e02:	28 0f       	add	r18, r24
    2e04:	2a 30       	cpi	r18, 0x0A	; 10
    2e06:	40 f0       	brcs	.+16     	; 0x2e18 <vfprintf+0xb4>
    2e08:	8e 32       	cpi	r24, 0x2E	; 46
    2e0a:	b9 f4       	brne	.+46     	; 0x2e3a <vfprintf+0xd6>
    2e0c:	36 fc       	sbrc	r3, 6
    2e0e:	81 c1       	rjmp	.+770    	; 0x3112 <vfprintf+0x3ae>
    2e10:	23 2d       	mov	r18, r3
    2e12:	20 64       	ori	r18, 0x40	; 64
    2e14:	32 2e       	mov	r3, r18
    2e16:	19 c0       	rjmp	.+50     	; 0x2e4a <vfprintf+0xe6>
    2e18:	36 fe       	sbrs	r3, 6
    2e1a:	06 c0       	rjmp	.+12     	; 0x2e28 <vfprintf+0xc4>
    2e1c:	8a e0       	ldi	r24, 0x0A	; 10
    2e1e:	98 9e       	mul	r9, r24
    2e20:	20 0d       	add	r18, r0
    2e22:	11 24       	eor	r1, r1
    2e24:	92 2e       	mov	r9, r18
    2e26:	11 c0       	rjmp	.+34     	; 0x2e4a <vfprintf+0xe6>
    2e28:	ea e0       	ldi	r30, 0x0A	; 10
    2e2a:	2e 9e       	mul	r2, r30
    2e2c:	20 0d       	add	r18, r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	22 2e       	mov	r2, r18
    2e32:	f3 2d       	mov	r31, r3
    2e34:	f0 62       	ori	r31, 0x20	; 32
    2e36:	3f 2e       	mov	r3, r31
    2e38:	08 c0       	rjmp	.+16     	; 0x2e4a <vfprintf+0xe6>
    2e3a:	8c 36       	cpi	r24, 0x6C	; 108
    2e3c:	21 f4       	brne	.+8      	; 0x2e46 <vfprintf+0xe2>
    2e3e:	83 2d       	mov	r24, r3
    2e40:	80 68       	ori	r24, 0x80	; 128
    2e42:	38 2e       	mov	r3, r24
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <vfprintf+0xe6>
    2e46:	88 36       	cpi	r24, 0x68	; 104
    2e48:	41 f4       	brne	.+16     	; 0x2e5a <vfprintf+0xf6>
    2e4a:	f7 01       	movw	r30, r14
    2e4c:	93 fd       	sbrc	r25, 3
    2e4e:	85 91       	lpm	r24, Z+
    2e50:	93 ff       	sbrs	r25, 3
    2e52:	81 91       	ld	r24, Z+
    2e54:	7f 01       	movw	r14, r30
    2e56:	81 11       	cpse	r24, r1
    2e58:	b3 cf       	rjmp	.-154    	; 0x2dc0 <vfprintf+0x5c>
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	9f 7d       	andi	r25, 0xDF	; 223
    2e5e:	95 54       	subi	r25, 0x45	; 69
    2e60:	93 30       	cpi	r25, 0x03	; 3
    2e62:	28 f4       	brcc	.+10     	; 0x2e6e <vfprintf+0x10a>
    2e64:	0c 5f       	subi	r16, 0xFC	; 252
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	9f e3       	ldi	r25, 0x3F	; 63
    2e6a:	99 83       	std	Y+1, r25	; 0x01
    2e6c:	0d c0       	rjmp	.+26     	; 0x2e88 <vfprintf+0x124>
    2e6e:	83 36       	cpi	r24, 0x63	; 99
    2e70:	31 f0       	breq	.+12     	; 0x2e7e <vfprintf+0x11a>
    2e72:	83 37       	cpi	r24, 0x73	; 115
    2e74:	71 f0       	breq	.+28     	; 0x2e92 <vfprintf+0x12e>
    2e76:	83 35       	cpi	r24, 0x53	; 83
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <vfprintf+0x118>
    2e7a:	59 c0       	rjmp	.+178    	; 0x2f2e <vfprintf+0x1ca>
    2e7c:	21 c0       	rjmp	.+66     	; 0x2ec0 <vfprintf+0x15c>
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 81       	ld	r24, Z
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	0e 5f       	subi	r16, 0xFE	; 254
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	88 24       	eor	r8, r8
    2e8a:	83 94       	inc	r8
    2e8c:	91 2c       	mov	r9, r1
    2e8e:	53 01       	movw	r10, r6
    2e90:	13 c0       	rjmp	.+38     	; 0x2eb8 <vfprintf+0x154>
    2e92:	28 01       	movw	r4, r16
    2e94:	f2 e0       	ldi	r31, 0x02	; 2
    2e96:	4f 0e       	add	r4, r31
    2e98:	51 1c       	adc	r5, r1
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	a0 80       	ld	r10, Z
    2e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    2ea0:	36 fe       	sbrs	r3, 6
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <vfprintf+0x146>
    2ea4:	69 2d       	mov	r22, r9
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <vfprintf+0x14a>
    2eaa:	6f ef       	ldi	r22, 0xFF	; 255
    2eac:	7f ef       	ldi	r23, 0xFF	; 255
    2eae:	c5 01       	movw	r24, r10
    2eb0:	0e 94 3f 1c 	call	0x387e	; 0x387e <strnlen>
    2eb4:	4c 01       	movw	r8, r24
    2eb6:	82 01       	movw	r16, r4
    2eb8:	f3 2d       	mov	r31, r3
    2eba:	ff 77       	andi	r31, 0x7F	; 127
    2ebc:	3f 2e       	mov	r3, r31
    2ebe:	16 c0       	rjmp	.+44     	; 0x2eec <vfprintf+0x188>
    2ec0:	28 01       	movw	r4, r16
    2ec2:	22 e0       	ldi	r18, 0x02	; 2
    2ec4:	42 0e       	add	r4, r18
    2ec6:	51 1c       	adc	r5, r1
    2ec8:	f8 01       	movw	r30, r16
    2eca:	a0 80       	ld	r10, Z
    2ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    2ece:	36 fe       	sbrs	r3, 6
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <vfprintf+0x174>
    2ed2:	69 2d       	mov	r22, r9
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <vfprintf+0x178>
    2ed8:	6f ef       	ldi	r22, 0xFF	; 255
    2eda:	7f ef       	ldi	r23, 0xFF	; 255
    2edc:	c5 01       	movw	r24, r10
    2ede:	0e 94 34 1c 	call	0x3868	; 0x3868 <strnlen_P>
    2ee2:	4c 01       	movw	r8, r24
    2ee4:	f3 2d       	mov	r31, r3
    2ee6:	f0 68       	ori	r31, 0x80	; 128
    2ee8:	3f 2e       	mov	r3, r31
    2eea:	82 01       	movw	r16, r4
    2eec:	33 fc       	sbrc	r3, 3
    2eee:	1b c0       	rjmp	.+54     	; 0x2f26 <vfprintf+0x1c2>
    2ef0:	82 2d       	mov	r24, r2
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	88 16       	cp	r8, r24
    2ef6:	99 06       	cpc	r9, r25
    2ef8:	b0 f4       	brcc	.+44     	; 0x2f26 <vfprintf+0x1c2>
    2efa:	b6 01       	movw	r22, r12
    2efc:	80 e2       	ldi	r24, 0x20	; 32
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    2f04:	2a 94       	dec	r2
    2f06:	f4 cf       	rjmp	.-24     	; 0x2ef0 <vfprintf+0x18c>
    2f08:	f5 01       	movw	r30, r10
    2f0a:	37 fc       	sbrc	r3, 7
    2f0c:	85 91       	lpm	r24, Z+
    2f0e:	37 fe       	sbrs	r3, 7
    2f10:	81 91       	ld	r24, Z+
    2f12:	5f 01       	movw	r10, r30
    2f14:	b6 01       	movw	r22, r12
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    2f1c:	21 10       	cpse	r2, r1
    2f1e:	2a 94       	dec	r2
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	82 1a       	sub	r8, r18
    2f24:	91 08       	sbc	r9, r1
    2f26:	81 14       	cp	r8, r1
    2f28:	91 04       	cpc	r9, r1
    2f2a:	71 f7       	brne	.-36     	; 0x2f08 <vfprintf+0x1a4>
    2f2c:	e8 c0       	rjmp	.+464    	; 0x30fe <vfprintf+0x39a>
    2f2e:	84 36       	cpi	r24, 0x64	; 100
    2f30:	11 f0       	breq	.+4      	; 0x2f36 <vfprintf+0x1d2>
    2f32:	89 36       	cpi	r24, 0x69	; 105
    2f34:	41 f5       	brne	.+80     	; 0x2f86 <vfprintf+0x222>
    2f36:	f8 01       	movw	r30, r16
    2f38:	37 fe       	sbrs	r3, 7
    2f3a:	07 c0       	rjmp	.+14     	; 0x2f4a <vfprintf+0x1e6>
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	0c 5f       	subi	r16, 0xFC	; 252
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	08 c0       	rjmp	.+16     	; 0x2f5a <vfprintf+0x1f6>
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	07 2e       	mov	r0, r23
    2f50:	00 0c       	add	r0, r0
    2f52:	88 0b       	sbc	r24, r24
    2f54:	99 0b       	sbc	r25, r25
    2f56:	0e 5f       	subi	r16, 0xFE	; 254
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	f3 2d       	mov	r31, r3
    2f5c:	ff 76       	andi	r31, 0x6F	; 111
    2f5e:	3f 2e       	mov	r3, r31
    2f60:	97 ff       	sbrs	r25, 7
    2f62:	09 c0       	rjmp	.+18     	; 0x2f76 <vfprintf+0x212>
    2f64:	90 95       	com	r25
    2f66:	80 95       	com	r24
    2f68:	70 95       	com	r23
    2f6a:	61 95       	neg	r22
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	f0 68       	ori	r31, 0x80	; 128
    2f74:	3f 2e       	mov	r3, r31
    2f76:	2a e0       	ldi	r18, 0x0A	; 10
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	a3 01       	movw	r20, r6
    2f7c:	0e 94 86 1c 	call	0x390c	; 0x390c <__ultoa_invert>
    2f80:	88 2e       	mov	r8, r24
    2f82:	86 18       	sub	r8, r6
    2f84:	45 c0       	rjmp	.+138    	; 0x3010 <vfprintf+0x2ac>
    2f86:	85 37       	cpi	r24, 0x75	; 117
    2f88:	31 f4       	brne	.+12     	; 0x2f96 <vfprintf+0x232>
    2f8a:	23 2d       	mov	r18, r3
    2f8c:	2f 7e       	andi	r18, 0xEF	; 239
    2f8e:	b2 2e       	mov	r11, r18
    2f90:	2a e0       	ldi	r18, 0x0A	; 10
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	25 c0       	rjmp	.+74     	; 0x2fe0 <vfprintf+0x27c>
    2f96:	93 2d       	mov	r25, r3
    2f98:	99 7f       	andi	r25, 0xF9	; 249
    2f9a:	b9 2e       	mov	r11, r25
    2f9c:	8f 36       	cpi	r24, 0x6F	; 111
    2f9e:	c1 f0       	breq	.+48     	; 0x2fd0 <vfprintf+0x26c>
    2fa0:	18 f4       	brcc	.+6      	; 0x2fa8 <vfprintf+0x244>
    2fa2:	88 35       	cpi	r24, 0x58	; 88
    2fa4:	79 f0       	breq	.+30     	; 0x2fc4 <vfprintf+0x260>
    2fa6:	b5 c0       	rjmp	.+362    	; 0x3112 <vfprintf+0x3ae>
    2fa8:	80 37       	cpi	r24, 0x70	; 112
    2faa:	19 f0       	breq	.+6      	; 0x2fb2 <vfprintf+0x24e>
    2fac:	88 37       	cpi	r24, 0x78	; 120
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <vfprintf+0x254>
    2fb0:	b0 c0       	rjmp	.+352    	; 0x3112 <vfprintf+0x3ae>
    2fb2:	e9 2f       	mov	r30, r25
    2fb4:	e0 61       	ori	r30, 0x10	; 16
    2fb6:	be 2e       	mov	r11, r30
    2fb8:	b4 fe       	sbrs	r11, 4
    2fba:	0d c0       	rjmp	.+26     	; 0x2fd6 <vfprintf+0x272>
    2fbc:	fb 2d       	mov	r31, r11
    2fbe:	f4 60       	ori	r31, 0x04	; 4
    2fc0:	bf 2e       	mov	r11, r31
    2fc2:	09 c0       	rjmp	.+18     	; 0x2fd6 <vfprintf+0x272>
    2fc4:	34 fe       	sbrs	r3, 4
    2fc6:	0a c0       	rjmp	.+20     	; 0x2fdc <vfprintf+0x278>
    2fc8:	29 2f       	mov	r18, r25
    2fca:	26 60       	ori	r18, 0x06	; 6
    2fcc:	b2 2e       	mov	r11, r18
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <vfprintf+0x278>
    2fd0:	28 e0       	ldi	r18, 0x08	; 8
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	05 c0       	rjmp	.+10     	; 0x2fe0 <vfprintf+0x27c>
    2fd6:	20 e1       	ldi	r18, 0x10	; 16
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <vfprintf+0x27c>
    2fdc:	20 e1       	ldi	r18, 0x10	; 16
    2fde:	32 e0       	ldi	r19, 0x02	; 2
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	b7 fe       	sbrs	r11, 7
    2fe4:	07 c0       	rjmp	.+14     	; 0x2ff4 <vfprintf+0x290>
    2fe6:	60 81       	ld	r22, Z
    2fe8:	71 81       	ldd	r23, Z+1	; 0x01
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	0c 5f       	subi	r16, 0xFC	; 252
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	06 c0       	rjmp	.+12     	; 0x3000 <vfprintf+0x29c>
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	0e 5f       	subi	r16, 0xFE	; 254
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	a3 01       	movw	r20, r6
    3002:	0e 94 86 1c 	call	0x390c	; 0x390c <__ultoa_invert>
    3006:	88 2e       	mov	r8, r24
    3008:	86 18       	sub	r8, r6
    300a:	fb 2d       	mov	r31, r11
    300c:	ff 77       	andi	r31, 0x7F	; 127
    300e:	3f 2e       	mov	r3, r31
    3010:	36 fe       	sbrs	r3, 6
    3012:	0d c0       	rjmp	.+26     	; 0x302e <vfprintf+0x2ca>
    3014:	23 2d       	mov	r18, r3
    3016:	2e 7f       	andi	r18, 0xFE	; 254
    3018:	a2 2e       	mov	r10, r18
    301a:	89 14       	cp	r8, r9
    301c:	58 f4       	brcc	.+22     	; 0x3034 <vfprintf+0x2d0>
    301e:	34 fe       	sbrs	r3, 4
    3020:	0b c0       	rjmp	.+22     	; 0x3038 <vfprintf+0x2d4>
    3022:	32 fc       	sbrc	r3, 2
    3024:	09 c0       	rjmp	.+18     	; 0x3038 <vfprintf+0x2d4>
    3026:	83 2d       	mov	r24, r3
    3028:	8e 7e       	andi	r24, 0xEE	; 238
    302a:	a8 2e       	mov	r10, r24
    302c:	05 c0       	rjmp	.+10     	; 0x3038 <vfprintf+0x2d4>
    302e:	b8 2c       	mov	r11, r8
    3030:	a3 2c       	mov	r10, r3
    3032:	03 c0       	rjmp	.+6      	; 0x303a <vfprintf+0x2d6>
    3034:	b8 2c       	mov	r11, r8
    3036:	01 c0       	rjmp	.+2      	; 0x303a <vfprintf+0x2d6>
    3038:	b9 2c       	mov	r11, r9
    303a:	a4 fe       	sbrs	r10, 4
    303c:	0f c0       	rjmp	.+30     	; 0x305c <vfprintf+0x2f8>
    303e:	fe 01       	movw	r30, r28
    3040:	e8 0d       	add	r30, r8
    3042:	f1 1d       	adc	r31, r1
    3044:	80 81       	ld	r24, Z
    3046:	80 33       	cpi	r24, 0x30	; 48
    3048:	21 f4       	brne	.+8      	; 0x3052 <vfprintf+0x2ee>
    304a:	9a 2d       	mov	r25, r10
    304c:	99 7e       	andi	r25, 0xE9	; 233
    304e:	a9 2e       	mov	r10, r25
    3050:	09 c0       	rjmp	.+18     	; 0x3064 <vfprintf+0x300>
    3052:	a2 fe       	sbrs	r10, 2
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <vfprintf+0x2fe>
    3056:	b3 94       	inc	r11
    3058:	b3 94       	inc	r11
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <vfprintf+0x300>
    305c:	8a 2d       	mov	r24, r10
    305e:	86 78       	andi	r24, 0x86	; 134
    3060:	09 f0       	breq	.+2      	; 0x3064 <vfprintf+0x300>
    3062:	b3 94       	inc	r11
    3064:	a3 fc       	sbrc	r10, 3
    3066:	11 c0       	rjmp	.+34     	; 0x308a <vfprintf+0x326>
    3068:	a0 fe       	sbrs	r10, 0
    306a:	06 c0       	rjmp	.+12     	; 0x3078 <vfprintf+0x314>
    306c:	b2 14       	cp	r11, r2
    306e:	88 f4       	brcc	.+34     	; 0x3092 <vfprintf+0x32e>
    3070:	28 0c       	add	r2, r8
    3072:	92 2c       	mov	r9, r2
    3074:	9b 18       	sub	r9, r11
    3076:	0e c0       	rjmp	.+28     	; 0x3094 <vfprintf+0x330>
    3078:	b2 14       	cp	r11, r2
    307a:	60 f4       	brcc	.+24     	; 0x3094 <vfprintf+0x330>
    307c:	b6 01       	movw	r22, r12
    307e:	80 e2       	ldi	r24, 0x20	; 32
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    3086:	b3 94       	inc	r11
    3088:	f7 cf       	rjmp	.-18     	; 0x3078 <vfprintf+0x314>
    308a:	b2 14       	cp	r11, r2
    308c:	18 f4       	brcc	.+6      	; 0x3094 <vfprintf+0x330>
    308e:	2b 18       	sub	r2, r11
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x332>
    3092:	98 2c       	mov	r9, r8
    3094:	21 2c       	mov	r2, r1
    3096:	a4 fe       	sbrs	r10, 4
    3098:	10 c0       	rjmp	.+32     	; 0x30ba <vfprintf+0x356>
    309a:	b6 01       	movw	r22, r12
    309c:	80 e3       	ldi	r24, 0x30	; 48
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    30a4:	a2 fe       	sbrs	r10, 2
    30a6:	17 c0       	rjmp	.+46     	; 0x30d6 <vfprintf+0x372>
    30a8:	a1 fc       	sbrc	r10, 1
    30aa:	03 c0       	rjmp	.+6      	; 0x30b2 <vfprintf+0x34e>
    30ac:	88 e7       	ldi	r24, 0x78	; 120
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <vfprintf+0x352>
    30b2:	88 e5       	ldi	r24, 0x58	; 88
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	b6 01       	movw	r22, r12
    30b8:	0c c0       	rjmp	.+24     	; 0x30d2 <vfprintf+0x36e>
    30ba:	8a 2d       	mov	r24, r10
    30bc:	86 78       	andi	r24, 0x86	; 134
    30be:	59 f0       	breq	.+22     	; 0x30d6 <vfprintf+0x372>
    30c0:	a1 fe       	sbrs	r10, 1
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <vfprintf+0x364>
    30c4:	8b e2       	ldi	r24, 0x2B	; 43
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <vfprintf+0x366>
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	a7 fc       	sbrc	r10, 7
    30cc:	8d e2       	ldi	r24, 0x2D	; 45
    30ce:	b6 01       	movw	r22, r12
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    30d6:	89 14       	cp	r8, r9
    30d8:	38 f4       	brcc	.+14     	; 0x30e8 <vfprintf+0x384>
    30da:	b6 01       	movw	r22, r12
    30dc:	80 e3       	ldi	r24, 0x30	; 48
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    30e4:	9a 94       	dec	r9
    30e6:	f7 cf       	rjmp	.-18     	; 0x30d6 <vfprintf+0x372>
    30e8:	8a 94       	dec	r8
    30ea:	f3 01       	movw	r30, r6
    30ec:	e8 0d       	add	r30, r8
    30ee:	f1 1d       	adc	r31, r1
    30f0:	80 81       	ld	r24, Z
    30f2:	b6 01       	movw	r22, r12
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    30fa:	81 10       	cpse	r8, r1
    30fc:	f5 cf       	rjmp	.-22     	; 0x30e8 <vfprintf+0x384>
    30fe:	22 20       	and	r2, r2
    3100:	09 f4       	brne	.+2      	; 0x3104 <vfprintf+0x3a0>
    3102:	42 ce       	rjmp	.-892    	; 0x2d88 <vfprintf+0x24>
    3104:	b6 01       	movw	r22, r12
    3106:	80 e2       	ldi	r24, 0x20	; 32
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <fputc>
    310e:	2a 94       	dec	r2
    3110:	f6 cf       	rjmp	.-20     	; 0x30fe <vfprintf+0x39a>
    3112:	f6 01       	movw	r30, r12
    3114:	86 81       	ldd	r24, Z+6	; 0x06
    3116:	97 81       	ldd	r25, Z+7	; 0x07
    3118:	02 c0       	rjmp	.+4      	; 0x311e <vfprintf+0x3ba>
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	9f ef       	ldi	r25, 0xFF	; 255
    311e:	2b 96       	adiw	r28, 0x0b	; 11
    3120:	e2 e1       	ldi	r30, 0x12	; 18
    3122:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__>

00003126 <dtoa_prf>:
    3126:	a9 e0       	ldi	r26, 0x09	; 9
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e9 e9       	ldi	r30, 0x99	; 153
    312c:	f8 e1       	ldi	r31, 0x18	; 24
    312e:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__prologue_saves__+0xc>
    3132:	6a 01       	movw	r12, r20
    3134:	12 2f       	mov	r17, r18
    3136:	b0 2e       	mov	r11, r16
    3138:	2b e3       	ldi	r18, 0x3B	; 59
    313a:	20 17       	cp	r18, r16
    313c:	20 f0       	brcs	.+8      	; 0x3146 <dtoa_prf+0x20>
    313e:	ff 24       	eor	r15, r15
    3140:	f3 94       	inc	r15
    3142:	f0 0e       	add	r15, r16
    3144:	02 c0       	rjmp	.+4      	; 0x314a <dtoa_prf+0x24>
    3146:	2c e3       	ldi	r18, 0x3C	; 60
    3148:	f2 2e       	mov	r15, r18
    314a:	0f 2d       	mov	r16, r15
    314c:	27 e0       	ldi	r18, 0x07	; 7
    314e:	ae 01       	movw	r20, r28
    3150:	4f 5f       	subi	r20, 0xFF	; 255
    3152:	5f 4f       	sbci	r21, 0xFF	; 255
    3154:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__ftoa_engine>
    3158:	bc 01       	movw	r22, r24
    315a:	49 81       	ldd	r20, Y+1	; 0x01
    315c:	84 2f       	mov	r24, r20
    315e:	89 70       	andi	r24, 0x09	; 9
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	31 f0       	breq	.+12     	; 0x3170 <dtoa_prf+0x4a>
    3164:	e1 fc       	sbrc	r14, 1
    3166:	06 c0       	rjmp	.+12     	; 0x3174 <dtoa_prf+0x4e>
    3168:	e0 fe       	sbrs	r14, 0
    316a:	06 c0       	rjmp	.+12     	; 0x3178 <dtoa_prf+0x52>
    316c:	90 e2       	ldi	r25, 0x20	; 32
    316e:	05 c0       	rjmp	.+10     	; 0x317a <dtoa_prf+0x54>
    3170:	9d e2       	ldi	r25, 0x2D	; 45
    3172:	03 c0       	rjmp	.+6      	; 0x317a <dtoa_prf+0x54>
    3174:	9b e2       	ldi	r25, 0x2B	; 43
    3176:	01 c0       	rjmp	.+2      	; 0x317a <dtoa_prf+0x54>
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	5e 2d       	mov	r21, r14
    317c:	50 71       	andi	r21, 0x10	; 16
    317e:	43 ff       	sbrs	r20, 3
    3180:	3c c0       	rjmp	.+120    	; 0x31fa <dtoa_prf+0xd4>
    3182:	91 11       	cpse	r25, r1
    3184:	02 c0       	rjmp	.+4      	; 0x318a <dtoa_prf+0x64>
    3186:	83 e0       	ldi	r24, 0x03	; 3
    3188:	01 c0       	rjmp	.+2      	; 0x318c <dtoa_prf+0x66>
    318a:	84 e0       	ldi	r24, 0x04	; 4
    318c:	81 17       	cp	r24, r17
    318e:	18 f4       	brcc	.+6      	; 0x3196 <dtoa_prf+0x70>
    3190:	21 2f       	mov	r18, r17
    3192:	28 1b       	sub	r18, r24
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <dtoa_prf+0x72>
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	51 11       	cpse	r21, r1
    319a:	0b c0       	rjmp	.+22     	; 0x31b2 <dtoa_prf+0x8c>
    319c:	f6 01       	movw	r30, r12
    319e:	82 2f       	mov	r24, r18
    31a0:	30 e2       	ldi	r19, 0x20	; 32
    31a2:	88 23       	and	r24, r24
    31a4:	19 f0       	breq	.+6      	; 0x31ac <dtoa_prf+0x86>
    31a6:	31 93       	st	Z+, r19
    31a8:	81 50       	subi	r24, 0x01	; 1
    31aa:	fb cf       	rjmp	.-10     	; 0x31a2 <dtoa_prf+0x7c>
    31ac:	c2 0e       	add	r12, r18
    31ae:	d1 1c       	adc	r13, r1
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	99 23       	and	r25, r25
    31b4:	29 f0       	breq	.+10     	; 0x31c0 <dtoa_prf+0x9a>
    31b6:	d6 01       	movw	r26, r12
    31b8:	9c 93       	st	X, r25
    31ba:	f6 01       	movw	r30, r12
    31bc:	31 96       	adiw	r30, 0x01	; 1
    31be:	6f 01       	movw	r12, r30
    31c0:	c6 01       	movw	r24, r12
    31c2:	03 96       	adiw	r24, 0x03	; 3
    31c4:	e2 fe       	sbrs	r14, 2
    31c6:	0a c0       	rjmp	.+20     	; 0x31dc <dtoa_prf+0xb6>
    31c8:	3e e4       	ldi	r19, 0x4E	; 78
    31ca:	d6 01       	movw	r26, r12
    31cc:	3c 93       	st	X, r19
    31ce:	41 e4       	ldi	r20, 0x41	; 65
    31d0:	11 96       	adiw	r26, 0x01	; 1
    31d2:	4c 93       	st	X, r20
    31d4:	11 97       	sbiw	r26, 0x01	; 1
    31d6:	12 96       	adiw	r26, 0x02	; 2
    31d8:	3c 93       	st	X, r19
    31da:	06 c0       	rjmp	.+12     	; 0x31e8 <dtoa_prf+0xc2>
    31dc:	3e e6       	ldi	r19, 0x6E	; 110
    31de:	f6 01       	movw	r30, r12
    31e0:	30 83       	st	Z, r19
    31e2:	41 e6       	ldi	r20, 0x61	; 97
    31e4:	41 83       	std	Z+1, r20	; 0x01
    31e6:	32 83       	std	Z+2, r19	; 0x02
    31e8:	fc 01       	movw	r30, r24
    31ea:	32 2f       	mov	r19, r18
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	33 23       	and	r19, r19
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <dtoa_prf+0xce>
    31f2:	42 c0       	rjmp	.+132    	; 0x3278 <dtoa_prf+0x152>
    31f4:	41 93       	st	Z+, r20
    31f6:	31 50       	subi	r19, 0x01	; 1
    31f8:	fa cf       	rjmp	.-12     	; 0x31ee <dtoa_prf+0xc8>
    31fa:	42 ff       	sbrs	r20, 2
    31fc:	44 c0       	rjmp	.+136    	; 0x3286 <dtoa_prf+0x160>
    31fe:	91 11       	cpse	r25, r1
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <dtoa_prf+0xe0>
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	01 c0       	rjmp	.+2      	; 0x3208 <dtoa_prf+0xe2>
    3206:	84 e0       	ldi	r24, 0x04	; 4
    3208:	81 17       	cp	r24, r17
    320a:	18 f4       	brcc	.+6      	; 0x3212 <dtoa_prf+0xec>
    320c:	21 2f       	mov	r18, r17
    320e:	28 1b       	sub	r18, r24
    3210:	01 c0       	rjmp	.+2      	; 0x3214 <dtoa_prf+0xee>
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	51 11       	cpse	r21, r1
    3216:	0b c0       	rjmp	.+22     	; 0x322e <dtoa_prf+0x108>
    3218:	f6 01       	movw	r30, r12
    321a:	82 2f       	mov	r24, r18
    321c:	30 e2       	ldi	r19, 0x20	; 32
    321e:	88 23       	and	r24, r24
    3220:	19 f0       	breq	.+6      	; 0x3228 <dtoa_prf+0x102>
    3222:	31 93       	st	Z+, r19
    3224:	81 50       	subi	r24, 0x01	; 1
    3226:	fb cf       	rjmp	.-10     	; 0x321e <dtoa_prf+0xf8>
    3228:	c2 0e       	add	r12, r18
    322a:	d1 1c       	adc	r13, r1
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	99 23       	and	r25, r25
    3230:	29 f0       	breq	.+10     	; 0x323c <dtoa_prf+0x116>
    3232:	d6 01       	movw	r26, r12
    3234:	9c 93       	st	X, r25
    3236:	f6 01       	movw	r30, r12
    3238:	31 96       	adiw	r30, 0x01	; 1
    323a:	6f 01       	movw	r12, r30
    323c:	c6 01       	movw	r24, r12
    323e:	03 96       	adiw	r24, 0x03	; 3
    3240:	e2 fe       	sbrs	r14, 2
    3242:	0b c0       	rjmp	.+22     	; 0x325a <dtoa_prf+0x134>
    3244:	39 e4       	ldi	r19, 0x49	; 73
    3246:	d6 01       	movw	r26, r12
    3248:	3c 93       	st	X, r19
    324a:	3e e4       	ldi	r19, 0x4E	; 78
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	3c 93       	st	X, r19
    3250:	11 97       	sbiw	r26, 0x01	; 1
    3252:	36 e4       	ldi	r19, 0x46	; 70
    3254:	12 96       	adiw	r26, 0x02	; 2
    3256:	3c 93       	st	X, r19
    3258:	07 c0       	rjmp	.+14     	; 0x3268 <dtoa_prf+0x142>
    325a:	39 e6       	ldi	r19, 0x69	; 105
    325c:	f6 01       	movw	r30, r12
    325e:	30 83       	st	Z, r19
    3260:	3e e6       	ldi	r19, 0x6E	; 110
    3262:	31 83       	std	Z+1, r19	; 0x01
    3264:	36 e6       	ldi	r19, 0x66	; 102
    3266:	32 83       	std	Z+2, r19	; 0x02
    3268:	fc 01       	movw	r30, r24
    326a:	32 2f       	mov	r19, r18
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	33 23       	and	r19, r19
    3270:	19 f0       	breq	.+6      	; 0x3278 <dtoa_prf+0x152>
    3272:	41 93       	st	Z+, r20
    3274:	31 50       	subi	r19, 0x01	; 1
    3276:	fb cf       	rjmp	.-10     	; 0x326e <dtoa_prf+0x148>
    3278:	fc 01       	movw	r30, r24
    327a:	e2 0f       	add	r30, r18
    327c:	f1 1d       	adc	r31, r1
    327e:	10 82       	st	Z, r1
    3280:	8e ef       	ldi	r24, 0xFE	; 254
    3282:	9f ef       	ldi	r25, 0xFF	; 255
    3284:	a6 c0       	rjmp	.+332    	; 0x33d2 <dtoa_prf+0x2ac>
    3286:	21 e0       	ldi	r18, 0x01	; 1
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	91 11       	cpse	r25, r1
    328c:	02 c0       	rjmp	.+4      	; 0x3292 <dtoa_prf+0x16c>
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	16 16       	cp	r1, r22
    3294:	17 06       	cpc	r1, r23
    3296:	1c f4       	brge	.+6      	; 0x329e <dtoa_prf+0x178>
    3298:	fb 01       	movw	r30, r22
    329a:	31 96       	adiw	r30, 0x01	; 1
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <dtoa_prf+0x17c>
    329e:	e1 e0       	ldi	r30, 0x01	; 1
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	2e 0f       	add	r18, r30
    32a4:	3f 1f       	adc	r19, r31
    32a6:	bb 20       	and	r11, r11
    32a8:	21 f0       	breq	.+8      	; 0x32b2 <dtoa_prf+0x18c>
    32aa:	eb 2d       	mov	r30, r11
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	31 96       	adiw	r30, 0x01	; 1
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <dtoa_prf+0x190>
    32b2:	e0 e0       	ldi	r30, 0x00	; 0
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	2e 0f       	add	r18, r30
    32b8:	3f 1f       	adc	r19, r31
    32ba:	e1 2f       	mov	r30, r17
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	2e 17       	cp	r18, r30
    32c0:	3f 07       	cpc	r19, r31
    32c2:	1c f4       	brge	.+6      	; 0x32ca <dtoa_prf+0x1a4>
    32c4:	12 1b       	sub	r17, r18
    32c6:	21 2f       	mov	r18, r17
    32c8:	01 c0       	rjmp	.+2      	; 0x32cc <dtoa_prf+0x1a6>
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	8e 2d       	mov	r24, r14
    32ce:	88 71       	andi	r24, 0x18	; 24
    32d0:	59 f4       	brne	.+22     	; 0x32e8 <dtoa_prf+0x1c2>
    32d2:	f6 01       	movw	r30, r12
    32d4:	82 2f       	mov	r24, r18
    32d6:	30 e2       	ldi	r19, 0x20	; 32
    32d8:	88 23       	and	r24, r24
    32da:	19 f0       	breq	.+6      	; 0x32e2 <dtoa_prf+0x1bc>
    32dc:	31 93       	st	Z+, r19
    32de:	81 50       	subi	r24, 0x01	; 1
    32e0:	fb cf       	rjmp	.-10     	; 0x32d8 <dtoa_prf+0x1b2>
    32e2:	c2 0e       	add	r12, r18
    32e4:	d1 1c       	adc	r13, r1
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	99 23       	and	r25, r25
    32ea:	29 f0       	breq	.+10     	; 0x32f6 <dtoa_prf+0x1d0>
    32ec:	d6 01       	movw	r26, r12
    32ee:	9c 93       	st	X, r25
    32f0:	f6 01       	movw	r30, r12
    32f2:	31 96       	adiw	r30, 0x01	; 1
    32f4:	6f 01       	movw	r12, r30
    32f6:	51 11       	cpse	r21, r1
    32f8:	0b c0       	rjmp	.+22     	; 0x3310 <dtoa_prf+0x1ea>
    32fa:	f6 01       	movw	r30, r12
    32fc:	82 2f       	mov	r24, r18
    32fe:	90 e3       	ldi	r25, 0x30	; 48
    3300:	88 23       	and	r24, r24
    3302:	19 f0       	breq	.+6      	; 0x330a <dtoa_prf+0x1e4>
    3304:	91 93       	st	Z+, r25
    3306:	81 50       	subi	r24, 0x01	; 1
    3308:	fb cf       	rjmp	.-10     	; 0x3300 <dtoa_prf+0x1da>
    330a:	c2 0e       	add	r12, r18
    330c:	d1 1c       	adc	r13, r1
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	0f 2d       	mov	r16, r15
    3312:	06 0f       	add	r16, r22
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	34 2f       	mov	r19, r20
    3318:	30 71       	andi	r19, 0x10	; 16
    331a:	44 ff       	sbrs	r20, 4
    331c:	03 c0       	rjmp	.+6      	; 0x3324 <dtoa_prf+0x1fe>
    331e:	91 33       	cpi	r25, 0x31	; 49
    3320:	09 f4       	brne	.+2      	; 0x3324 <dtoa_prf+0x1fe>
    3322:	01 50       	subi	r16, 0x01	; 1
    3324:	10 16       	cp	r1, r16
    3326:	24 f4       	brge	.+8      	; 0x3330 <dtoa_prf+0x20a>
    3328:	09 30       	cpi	r16, 0x09	; 9
    332a:	18 f0       	brcs	.+6      	; 0x3332 <dtoa_prf+0x20c>
    332c:	08 e0       	ldi	r16, 0x08	; 8
    332e:	01 c0       	rjmp	.+2      	; 0x3332 <dtoa_prf+0x20c>
    3330:	01 e0       	ldi	r16, 0x01	; 1
    3332:	ab 01       	movw	r20, r22
    3334:	77 ff       	sbrs	r23, 7
    3336:	02 c0       	rjmp	.+4      	; 0x333c <dtoa_prf+0x216>
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	fb 01       	movw	r30, r22
    333e:	e4 1b       	sub	r30, r20
    3340:	f5 0b       	sbc	r31, r21
    3342:	a1 e0       	ldi	r26, 0x01	; 1
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	ac 0f       	add	r26, r28
    3348:	bd 1f       	adc	r27, r29
    334a:	ea 0f       	add	r30, r26
    334c:	fb 1f       	adc	r31, r27
    334e:	8e e2       	ldi	r24, 0x2E	; 46
    3350:	a8 2e       	mov	r10, r24
    3352:	4b 01       	movw	r8, r22
    3354:	80 1a       	sub	r8, r16
    3356:	91 08       	sbc	r9, r1
    3358:	0b 2d       	mov	r16, r11
    335a:	10 e0       	ldi	r17, 0x00	; 0
    335c:	11 95       	neg	r17
    335e:	01 95       	neg	r16
    3360:	11 09       	sbc	r17, r1
    3362:	4f 3f       	cpi	r20, 0xFF	; 255
    3364:	bf ef       	ldi	r27, 0xFF	; 255
    3366:	5b 07       	cpc	r21, r27
    3368:	21 f4       	brne	.+8      	; 0x3372 <dtoa_prf+0x24c>
    336a:	d6 01       	movw	r26, r12
    336c:	ac 92       	st	X, r10
    336e:	11 96       	adiw	r26, 0x01	; 1
    3370:	6d 01       	movw	r12, r26
    3372:	64 17       	cp	r22, r20
    3374:	75 07       	cpc	r23, r21
    3376:	2c f0       	brlt	.+10     	; 0x3382 <dtoa_prf+0x25c>
    3378:	84 16       	cp	r8, r20
    337a:	95 06       	cpc	r9, r21
    337c:	14 f4       	brge	.+4      	; 0x3382 <dtoa_prf+0x25c>
    337e:	81 81       	ldd	r24, Z+1	; 0x01
    3380:	01 c0       	rjmp	.+2      	; 0x3384 <dtoa_prf+0x25e>
    3382:	80 e3       	ldi	r24, 0x30	; 48
    3384:	41 50       	subi	r20, 0x01	; 1
    3386:	51 09       	sbc	r21, r1
    3388:	31 96       	adiw	r30, 0x01	; 1
    338a:	d6 01       	movw	r26, r12
    338c:	11 96       	adiw	r26, 0x01	; 1
    338e:	7d 01       	movw	r14, r26
    3390:	40 17       	cp	r20, r16
    3392:	51 07       	cpc	r21, r17
    3394:	24 f0       	brlt	.+8      	; 0x339e <dtoa_prf+0x278>
    3396:	d6 01       	movw	r26, r12
    3398:	8c 93       	st	X, r24
    339a:	67 01       	movw	r12, r14
    339c:	e2 cf       	rjmp	.-60     	; 0x3362 <dtoa_prf+0x23c>
    339e:	64 17       	cp	r22, r20
    33a0:	75 07       	cpc	r23, r21
    33a2:	39 f4       	brne	.+14     	; 0x33b2 <dtoa_prf+0x28c>
    33a4:	96 33       	cpi	r25, 0x36	; 54
    33a6:	20 f4       	brcc	.+8      	; 0x33b0 <dtoa_prf+0x28a>
    33a8:	95 33       	cpi	r25, 0x35	; 53
    33aa:	19 f4       	brne	.+6      	; 0x33b2 <dtoa_prf+0x28c>
    33ac:	31 11       	cpse	r19, r1
    33ae:	01 c0       	rjmp	.+2      	; 0x33b2 <dtoa_prf+0x28c>
    33b0:	81 e3       	ldi	r24, 0x31	; 49
    33b2:	f6 01       	movw	r30, r12
    33b4:	80 83       	st	Z, r24
    33b6:	f7 01       	movw	r30, r14
    33b8:	82 2f       	mov	r24, r18
    33ba:	90 e2       	ldi	r25, 0x20	; 32
    33bc:	88 23       	and	r24, r24
    33be:	19 f0       	breq	.+6      	; 0x33c6 <dtoa_prf+0x2a0>
    33c0:	91 93       	st	Z+, r25
    33c2:	81 50       	subi	r24, 0x01	; 1
    33c4:	fb cf       	rjmp	.-10     	; 0x33bc <dtoa_prf+0x296>
    33c6:	f7 01       	movw	r30, r14
    33c8:	e2 0f       	add	r30, r18
    33ca:	f1 1d       	adc	r31, r1
    33cc:	10 82       	st	Z, r1
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	29 96       	adiw	r28, 0x09	; 9
    33d4:	ec e0       	ldi	r30, 0x0C	; 12
    33d6:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__epilogue_restores__+0xc>

000033da <strtod>:
    33da:	a0 e0       	ldi	r26, 0x00	; 0
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e3 ef       	ldi	r30, 0xF3	; 243
    33e0:	f9 e1       	ldi	r31, 0x19	; 25
    33e2:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__prologue_saves__+0xc>
    33e6:	ec 01       	movw	r28, r24
    33e8:	6b 01       	movw	r12, r22
    33ea:	61 15       	cp	r22, r1
    33ec:	71 05       	cpc	r23, r1
    33ee:	19 f0       	breq	.+6      	; 0x33f6 <strtod+0x1c>
    33f0:	fb 01       	movw	r30, r22
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    33f6:	7e 01       	movw	r14, r28
    33f8:	ff ef       	ldi	r31, 0xFF	; 255
    33fa:	ef 1a       	sub	r14, r31
    33fc:	ff 0a       	sbc	r15, r31
    33fe:	08 81       	ld	r16, Y
    3400:	80 2f       	mov	r24, r16
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 13 1c 	call	0x3826	; 0x3826 <isspace>
    3408:	89 2b       	or	r24, r25
    340a:	11 f0       	breq	.+4      	; 0x3410 <strtod+0x36>
    340c:	e7 01       	movw	r28, r14
    340e:	f3 cf       	rjmp	.-26     	; 0x33f6 <strtod+0x1c>
    3410:	0d 32       	cpi	r16, 0x2D	; 45
    3412:	39 f4       	brne	.+14     	; 0x3422 <strtod+0x48>
    3414:	7e 01       	movw	r14, r28
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	e8 0e       	add	r14, r24
    341a:	f1 1c       	adc	r15, r1
    341c:	09 81       	ldd	r16, Y+1	; 0x01
    341e:	11 e0       	ldi	r17, 0x01	; 1
    3420:	08 c0       	rjmp	.+16     	; 0x3432 <strtod+0x58>
    3422:	0b 32       	cpi	r16, 0x2B	; 43
    3424:	29 f4       	brne	.+10     	; 0x3430 <strtod+0x56>
    3426:	7e 01       	movw	r14, r28
    3428:	92 e0       	ldi	r25, 0x02	; 2
    342a:	e9 0e       	add	r14, r25
    342c:	f1 1c       	adc	r15, r1
    342e:	09 81       	ldd	r16, Y+1	; 0x01
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	e7 01       	movw	r28, r14
    3434:	21 97       	sbiw	r28, 0x01	; 1
    3436:	43 e0       	ldi	r20, 0x03	; 3
    3438:	50 e0       	ldi	r21, 0x00	; 0
    343a:	64 ed       	ldi	r22, 0xD4	; 212
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	ce 01       	movw	r24, r28
    3440:	0e 94 1c 1c 	call	0x3838	; 0x3838 <strncasecmp_P>
    3444:	89 2b       	or	r24, r25
    3446:	c1 f4       	brne	.+48     	; 0x3478 <strtod+0x9e>
    3448:	23 96       	adiw	r28, 0x03	; 3
    344a:	45 e0       	ldi	r20, 0x05	; 5
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	6f ec       	ldi	r22, 0xCF	; 207
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	ce 01       	movw	r24, r28
    3454:	0e 94 1c 1c 	call	0x3838	; 0x3838 <strncasecmp_P>
    3458:	89 2b       	or	r24, r25
    345a:	09 f4       	brne	.+2      	; 0x345e <strtod+0x84>
    345c:	25 96       	adiw	r28, 0x05	; 5
    345e:	c1 14       	cp	r12, r1
    3460:	d1 04       	cpc	r13, r1
    3462:	19 f0       	breq	.+6      	; 0x346a <strtod+0x90>
    3464:	f6 01       	movw	r30, r12
    3466:	d1 83       	std	Z+1, r29	; 0x01
    3468:	c0 83       	st	Z, r28
    346a:	11 11       	cpse	r17, r1
    346c:	f6 c0       	rjmp	.+492    	; 0x365a <strtod+0x280>
    346e:	60 e0       	ldi	r22, 0x00	; 0
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	80 e8       	ldi	r24, 0x80	; 128
    3474:	9f e7       	ldi	r25, 0x7F	; 127
    3476:	fa c0       	rjmp	.+500    	; 0x366c <strtod+0x292>
    3478:	43 e0       	ldi	r20, 0x03	; 3
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	6c ec       	ldi	r22, 0xCC	; 204
    347e:	70 e0       	ldi	r23, 0x00	; 0
    3480:	ce 01       	movw	r24, r28
    3482:	0e 94 1c 1c 	call	0x3838	; 0x3838 <strncasecmp_P>
    3486:	89 2b       	or	r24, r25
    3488:	59 f4       	brne	.+22     	; 0x34a0 <strtod+0xc6>
    348a:	c1 14       	cp	r12, r1
    348c:	d1 04       	cpc	r13, r1
    348e:	09 f4       	brne	.+2      	; 0x3492 <strtod+0xb8>
    3490:	e9 c0       	rjmp	.+466    	; 0x3664 <strtod+0x28a>
    3492:	f2 e0       	ldi	r31, 0x02	; 2
    3494:	ef 0e       	add	r14, r31
    3496:	f1 1c       	adc	r15, r1
    3498:	f6 01       	movw	r30, r12
    349a:	f1 82       	std	Z+1, r15	; 0x01
    349c:	e0 82       	st	Z, r14
    349e:	e2 c0       	rjmp	.+452    	; 0x3664 <strtod+0x28a>
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	a9 01       	movw	r20, r18
    34a6:	c0 e0       	ldi	r28, 0x00	; 0
    34a8:	d0 e0       	ldi	r29, 0x00	; 0
    34aa:	f7 01       	movw	r30, r14
    34ac:	80 ed       	ldi	r24, 0xD0	; 208
    34ae:	a8 2e       	mov	r10, r24
    34b0:	a0 0e       	add	r10, r16
    34b2:	89 e0       	ldi	r24, 0x09	; 9
    34b4:	8a 15       	cp	r24, r10
    34b6:	30 f1       	brcs	.+76     	; 0x3504 <strtod+0x12a>
    34b8:	91 2f       	mov	r25, r17
    34ba:	92 60       	ori	r25, 0x02	; 2
    34bc:	b9 2e       	mov	r11, r25
    34be:	81 2f       	mov	r24, r17
    34c0:	88 70       	andi	r24, 0x08	; 8
    34c2:	12 ff       	sbrs	r17, 2
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <strtod+0xf4>
    34c6:	81 11       	cpse	r24, r1
    34c8:	24 c0       	rjmp	.+72     	; 0x3512 <strtod+0x138>
    34ca:	21 96       	adiw	r28, 0x01	; 1
    34cc:	22 c0       	rjmp	.+68     	; 0x3512 <strtod+0x138>
    34ce:	81 11       	cpse	r24, r1
    34d0:	21 97       	sbiw	r28, 0x01	; 1
    34d2:	a5 e0       	ldi	r26, 0x05	; 5
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__muluhisi3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	aa 1f       	adc	r26, r26
    34e4:	bb 1f       	adc	r27, r27
    34e6:	9c 01       	movw	r18, r24
    34e8:	ad 01       	movw	r20, r26
    34ea:	2a 0d       	add	r18, r10
    34ec:	31 1d       	adc	r19, r1
    34ee:	41 1d       	adc	r20, r1
    34f0:	51 1d       	adc	r21, r1
    34f2:	28 39       	cpi	r18, 0x98	; 152
    34f4:	89 e9       	ldi	r24, 0x99	; 153
    34f6:	38 07       	cpc	r19, r24
    34f8:	48 07       	cpc	r20, r24
    34fa:	89 e1       	ldi	r24, 0x19	; 25
    34fc:	58 07       	cpc	r21, r24
    34fe:	48 f0       	brcs	.+18     	; 0x3512 <strtod+0x138>
    3500:	16 60       	ori	r17, 0x06	; 6
    3502:	06 c0       	rjmp	.+12     	; 0x3510 <strtod+0x136>
    3504:	9e ef       	ldi	r25, 0xFE	; 254
    3506:	a9 12       	cpse	r10, r25
    3508:	0a c0       	rjmp	.+20     	; 0x351e <strtod+0x144>
    350a:	13 fd       	sbrc	r17, 3
    350c:	40 c0       	rjmp	.+128    	; 0x358e <strtod+0x1b4>
    350e:	18 60       	ori	r17, 0x08	; 8
    3510:	b1 2e       	mov	r11, r17
    3512:	8f ef       	ldi	r24, 0xFF	; 255
    3514:	e8 1a       	sub	r14, r24
    3516:	f8 0a       	sbc	r15, r24
    3518:	00 81       	ld	r16, Z
    351a:	1b 2d       	mov	r17, r11
    351c:	c6 cf       	rjmp	.-116    	; 0x34aa <strtod+0xd0>
    351e:	80 2f       	mov	r24, r16
    3520:	8f 7d       	andi	r24, 0xDF	; 223
    3522:	85 34       	cpi	r24, 0x45	; 69
    3524:	a1 f5       	brne	.+104    	; 0x358e <strtod+0x1b4>
    3526:	80 81       	ld	r24, Z
    3528:	8d 32       	cpi	r24, 0x2D	; 45
    352a:	11 f4       	brne	.+4      	; 0x3530 <strtod+0x156>
    352c:	10 61       	ori	r17, 0x10	; 16
    352e:	06 c0       	rjmp	.+12     	; 0x353c <strtod+0x162>
    3530:	8b 32       	cpi	r24, 0x2B	; 43
    3532:	21 f0       	breq	.+8      	; 0x353c <strtod+0x162>
    3534:	31 96       	adiw	r30, 0x01	; 1
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <strtod+0x16a>
    353c:	81 81       	ldd	r24, Z+1	; 0x01
    353e:	32 96       	adiw	r30, 0x02	; 2
    3540:	62 e0       	ldi	r22, 0x02	; 2
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	80 53       	subi	r24, 0x30	; 48
    3546:	8a 30       	cpi	r24, 0x0A	; 10
    3548:	18 f0       	brcs	.+6      	; 0x3550 <strtod+0x176>
    354a:	e6 1b       	sub	r30, r22
    354c:	f7 0b       	sbc	r31, r23
    354e:	1f c0       	rjmp	.+62     	; 0x358e <strtod+0x1b4>
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	60 38       	cpi	r22, 0x80	; 128
    3556:	9c e0       	ldi	r25, 0x0C	; 12
    3558:	79 07       	cpc	r23, r25
    355a:	5c f4       	brge	.+22     	; 0x3572 <strtod+0x198>
    355c:	db 01       	movw	r26, r22
    355e:	aa 0f       	add	r26, r26
    3560:	bb 1f       	adc	r27, r27
    3562:	aa 0f       	add	r26, r26
    3564:	bb 1f       	adc	r27, r27
    3566:	6a 0f       	add	r22, r26
    3568:	7b 1f       	adc	r23, r27
    356a:	66 0f       	add	r22, r22
    356c:	77 1f       	adc	r23, r23
    356e:	68 0f       	add	r22, r24
    3570:	71 1d       	adc	r23, r1
    3572:	31 96       	adiw	r30, 0x01	; 1
    3574:	df 01       	movw	r26, r30
    3576:	11 97       	sbiw	r26, 0x01	; 1
    3578:	8c 91       	ld	r24, X
    357a:	80 53       	subi	r24, 0x30	; 48
    357c:	8a 30       	cpi	r24, 0x0A	; 10
    357e:	50 f3       	brcs	.-44     	; 0x3554 <strtod+0x17a>
    3580:	14 ff       	sbrs	r17, 4
    3582:	03 c0       	rjmp	.+6      	; 0x358a <strtod+0x1b0>
    3584:	71 95       	neg	r23
    3586:	61 95       	neg	r22
    3588:	71 09       	sbc	r23, r1
    358a:	c6 0f       	add	r28, r22
    358c:	d7 1f       	adc	r29, r23
    358e:	11 ff       	sbrs	r17, 1
    3590:	08 c0       	rjmp	.+16     	; 0x35a2 <strtod+0x1c8>
    3592:	c1 14       	cp	r12, r1
    3594:	d1 04       	cpc	r13, r1
    3596:	29 f0       	breq	.+10     	; 0x35a2 <strtod+0x1c8>
    3598:	cf 01       	movw	r24, r30
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f6 01       	movw	r30, r12
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	ca 01       	movw	r24, r20
    35a4:	b9 01       	movw	r22, r18
    35a6:	0e 94 9a 13 	call	0x2734	; 0x2734 <__floatunsisf>
    35aa:	21 2f       	mov	r18, r17
    35ac:	23 70       	andi	r18, 0x03	; 3
    35ae:	23 30       	cpi	r18, 0x03	; 3
    35b0:	19 f0       	breq	.+6      	; 0x35b8 <strtod+0x1de>
    35b2:	4b 01       	movw	r8, r22
    35b4:	5c 01       	movw	r10, r24
    35b6:	06 c0       	rjmp	.+12     	; 0x35c4 <strtod+0x1ea>
    35b8:	4b 01       	movw	r8, r22
    35ba:	5c 01       	movw	r10, r24
    35bc:	b7 fa       	bst	r11, 7
    35be:	b0 94       	com	r11
    35c0:	b7 f8       	bld	r11, 7
    35c2:	b0 94       	com	r11
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	a9 01       	movw	r20, r18
    35ca:	c5 01       	movw	r24, r10
    35cc:	b4 01       	movw	r22, r8
    35ce:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    35d2:	88 23       	and	r24, r24
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <strtod+0x1fe>
    35d6:	3e c0       	rjmp	.+124    	; 0x3654 <strtod+0x27a>
    35d8:	d7 ff       	sbrs	r29, 7
    35da:	06 c0       	rjmp	.+12     	; 0x35e8 <strtod+0x20e>
    35dc:	d1 95       	neg	r29
    35de:	c1 95       	neg	r28
    35e0:	d1 09       	sbc	r29, r1
    35e2:	0b ee       	ldi	r16, 0xEB	; 235
    35e4:	10 e0       	ldi	r17, 0x00	; 0
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <strtod+0x212>
    35e8:	03 e0       	ldi	r16, 0x03	; 3
    35ea:	11 e0       	ldi	r17, 0x01	; 1
    35ec:	68 01       	movw	r12, r16
    35ee:	f8 e1       	ldi	r31, 0x18	; 24
    35f0:	cf 1a       	sub	r12, r31
    35f2:	d1 08       	sbc	r13, r1
    35f4:	90 e2       	ldi	r25, 0x20	; 32
    35f6:	e9 2e       	mov	r14, r25
    35f8:	f1 2c       	mov	r15, r1
    35fa:	ce 15       	cp	r28, r14
    35fc:	df 05       	cpc	r29, r15
    35fe:	74 f0       	brlt	.+28     	; 0x361c <strtod+0x242>
    3600:	f8 01       	movw	r30, r16
    3602:	25 91       	lpm	r18, Z+
    3604:	35 91       	lpm	r19, Z+
    3606:	45 91       	lpm	r20, Z+
    3608:	54 91       	lpm	r21, Z
    360a:	c5 01       	movw	r24, r10
    360c:	b4 01       	movw	r22, r8
    360e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__mulsf3>
    3612:	4b 01       	movw	r8, r22
    3614:	5c 01       	movw	r10, r24
    3616:	ce 19       	sub	r28, r14
    3618:	df 09       	sbc	r29, r15
    361a:	ef cf       	rjmp	.-34     	; 0x35fa <strtod+0x220>
    361c:	04 50       	subi	r16, 0x04	; 4
    361e:	11 09       	sbc	r17, r1
    3620:	f5 94       	asr	r15
    3622:	e7 94       	ror	r14
    3624:	0c 15       	cp	r16, r12
    3626:	1d 05       	cpc	r17, r13
    3628:	41 f7       	brne	.-48     	; 0x35fa <strtod+0x220>
    362a:	8a 2d       	mov	r24, r10
    362c:	88 0f       	add	r24, r24
    362e:	8b 2d       	mov	r24, r11
    3630:	88 1f       	adc	r24, r24
    3632:	8f 3f       	cpi	r24, 0xFF	; 255
    3634:	49 f0       	breq	.+18     	; 0x3648 <strtod+0x26e>
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	a9 01       	movw	r20, r18
    363c:	c5 01       	movw	r24, r10
    363e:	b4 01       	movw	r22, r8
    3640:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__cmpsf2>
    3644:	81 11       	cpse	r24, r1
    3646:	06 c0       	rjmp	.+12     	; 0x3654 <strtod+0x27a>
    3648:	82 e2       	ldi	r24, 0x22	; 34
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <errno+0x1>
    3650:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <errno>
    3654:	c5 01       	movw	r24, r10
    3656:	b4 01       	movw	r22, r8
    3658:	09 c0       	rjmp	.+18     	; 0x366c <strtod+0x292>
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	80 e8       	ldi	r24, 0x80	; 128
    3660:	9f ef       	ldi	r25, 0xFF	; 255
    3662:	04 c0       	rjmp	.+8      	; 0x366c <strtod+0x292>
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	80 ec       	ldi	r24, 0xC0	; 192
    366a:	9f e7       	ldi	r25, 0x7F	; 127
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	ec e0       	ldi	r30, 0x0C	; 12
    3672:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__epilogue_restores__+0xc>

00003676 <__ftoa_engine>:
    3676:	28 30       	cpi	r18, 0x08	; 8
    3678:	08 f0       	brcs	.+2      	; 0x367c <__ftoa_engine+0x6>
    367a:	27 e0       	ldi	r18, 0x07	; 7
    367c:	33 27       	eor	r19, r19
    367e:	da 01       	movw	r26, r20
    3680:	99 0f       	add	r25, r25
    3682:	31 1d       	adc	r19, r1
    3684:	87 fd       	sbrc	r24, 7
    3686:	91 60       	ori	r25, 0x01	; 1
    3688:	00 96       	adiw	r24, 0x00	; 0
    368a:	61 05       	cpc	r22, r1
    368c:	71 05       	cpc	r23, r1
    368e:	39 f4       	brne	.+14     	; 0x369e <__ftoa_engine+0x28>
    3690:	32 60       	ori	r19, 0x02	; 2
    3692:	2e 5f       	subi	r18, 0xFE	; 254
    3694:	3d 93       	st	X+, r19
    3696:	30 e3       	ldi	r19, 0x30	; 48
    3698:	2a 95       	dec	r18
    369a:	e1 f7       	brne	.-8      	; 0x3694 <__ftoa_engine+0x1e>
    369c:	08 95       	ret
    369e:	9f 3f       	cpi	r25, 0xFF	; 255
    36a0:	30 f0       	brcs	.+12     	; 0x36ae <__ftoa_engine+0x38>
    36a2:	80 38       	cpi	r24, 0x80	; 128
    36a4:	71 05       	cpc	r23, r1
    36a6:	61 05       	cpc	r22, r1
    36a8:	09 f0       	breq	.+2      	; 0x36ac <__ftoa_engine+0x36>
    36aa:	3c 5f       	subi	r19, 0xFC	; 252
    36ac:	3c 5f       	subi	r19, 0xFC	; 252
    36ae:	3d 93       	st	X+, r19
    36b0:	91 30       	cpi	r25, 0x01	; 1
    36b2:	08 f0       	brcs	.+2      	; 0x36b6 <__ftoa_engine+0x40>
    36b4:	80 68       	ori	r24, 0x80	; 128
    36b6:	91 1d       	adc	r25, r1
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	1f 93       	push	r17
    36be:	0f 93       	push	r16
    36c0:	ff 92       	push	r15
    36c2:	ef 92       	push	r14
    36c4:	19 2f       	mov	r17, r25
    36c6:	98 7f       	andi	r25, 0xF8	; 248
    36c8:	96 95       	lsr	r25
    36ca:	e9 2f       	mov	r30, r25
    36cc:	96 95       	lsr	r25
    36ce:	96 95       	lsr	r25
    36d0:	e9 0f       	add	r30, r25
    36d2:	ff 27       	eor	r31, r31
    36d4:	ef 59       	subi	r30, 0x9F	; 159
    36d6:	fe 4f       	sbci	r31, 0xFE	; 254
    36d8:	99 27       	eor	r25, r25
    36da:	33 27       	eor	r19, r19
    36dc:	ee 24       	eor	r14, r14
    36de:	ff 24       	eor	r15, r15
    36e0:	a7 01       	movw	r20, r14
    36e2:	e7 01       	movw	r28, r14
    36e4:	05 90       	lpm	r0, Z+
    36e6:	08 94       	sec
    36e8:	07 94       	ror	r0
    36ea:	28 f4       	brcc	.+10     	; 0x36f6 <__ftoa_engine+0x80>
    36ec:	36 0f       	add	r19, r22
    36ee:	e7 1e       	adc	r14, r23
    36f0:	f8 1e       	adc	r15, r24
    36f2:	49 1f       	adc	r20, r25
    36f4:	51 1d       	adc	r21, r1
    36f6:	66 0f       	add	r22, r22
    36f8:	77 1f       	adc	r23, r23
    36fa:	88 1f       	adc	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	06 94       	lsr	r0
    3700:	a1 f7       	brne	.-24     	; 0x36ea <__ftoa_engine+0x74>
    3702:	05 90       	lpm	r0, Z+
    3704:	07 94       	ror	r0
    3706:	28 f4       	brcc	.+10     	; 0x3712 <__ftoa_engine+0x9c>
    3708:	e7 0e       	add	r14, r23
    370a:	f8 1e       	adc	r15, r24
    370c:	49 1f       	adc	r20, r25
    370e:	56 1f       	adc	r21, r22
    3710:	c1 1d       	adc	r28, r1
    3712:	77 0f       	add	r23, r23
    3714:	88 1f       	adc	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	66 1f       	adc	r22, r22
    371a:	06 94       	lsr	r0
    371c:	a1 f7       	brne	.-24     	; 0x3706 <__ftoa_engine+0x90>
    371e:	05 90       	lpm	r0, Z+
    3720:	07 94       	ror	r0
    3722:	28 f4       	brcc	.+10     	; 0x372e <__ftoa_engine+0xb8>
    3724:	f8 0e       	add	r15, r24
    3726:	49 1f       	adc	r20, r25
    3728:	56 1f       	adc	r21, r22
    372a:	c7 1f       	adc	r28, r23
    372c:	d1 1d       	adc	r29, r1
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	66 1f       	adc	r22, r22
    3734:	77 1f       	adc	r23, r23
    3736:	06 94       	lsr	r0
    3738:	a1 f7       	brne	.-24     	; 0x3722 <__ftoa_engine+0xac>
    373a:	05 90       	lpm	r0, Z+
    373c:	07 94       	ror	r0
    373e:	20 f4       	brcc	.+8      	; 0x3748 <__ftoa_engine+0xd2>
    3740:	49 0f       	add	r20, r25
    3742:	56 1f       	adc	r21, r22
    3744:	c7 1f       	adc	r28, r23
    3746:	d8 1f       	adc	r29, r24
    3748:	99 0f       	add	r25, r25
    374a:	66 1f       	adc	r22, r22
    374c:	77 1f       	adc	r23, r23
    374e:	88 1f       	adc	r24, r24
    3750:	06 94       	lsr	r0
    3752:	a9 f7       	brne	.-22     	; 0x373e <__ftoa_engine+0xc8>
    3754:	84 91       	lpm	r24, Z
    3756:	10 95       	com	r17
    3758:	17 70       	andi	r17, 0x07	; 7
    375a:	41 f0       	breq	.+16     	; 0x376c <__ftoa_engine+0xf6>
    375c:	d6 95       	lsr	r29
    375e:	c7 95       	ror	r28
    3760:	57 95       	ror	r21
    3762:	47 95       	ror	r20
    3764:	f7 94       	ror	r15
    3766:	e7 94       	ror	r14
    3768:	1a 95       	dec	r17
    376a:	c1 f7       	brne	.-16     	; 0x375c <__ftoa_engine+0xe6>
    376c:	e7 e0       	ldi	r30, 0x07	; 7
    376e:	f1 e0       	ldi	r31, 0x01	; 1
    3770:	68 94       	set
    3772:	15 90       	lpm	r1, Z+
    3774:	15 91       	lpm	r17, Z+
    3776:	35 91       	lpm	r19, Z+
    3778:	65 91       	lpm	r22, Z+
    377a:	95 91       	lpm	r25, Z+
    377c:	05 90       	lpm	r0, Z+
    377e:	7f e2       	ldi	r23, 0x2F	; 47
    3780:	73 95       	inc	r23
    3782:	e1 18       	sub	r14, r1
    3784:	f1 0a       	sbc	r15, r17
    3786:	43 0b       	sbc	r20, r19
    3788:	56 0b       	sbc	r21, r22
    378a:	c9 0b       	sbc	r28, r25
    378c:	d0 09       	sbc	r29, r0
    378e:	c0 f7       	brcc	.-16     	; 0x3780 <__ftoa_engine+0x10a>
    3790:	e1 0c       	add	r14, r1
    3792:	f1 1e       	adc	r15, r17
    3794:	43 1f       	adc	r20, r19
    3796:	56 1f       	adc	r21, r22
    3798:	c9 1f       	adc	r28, r25
    379a:	d0 1d       	adc	r29, r0
    379c:	7e f4       	brtc	.+30     	; 0x37bc <__ftoa_engine+0x146>
    379e:	70 33       	cpi	r23, 0x30	; 48
    37a0:	11 f4       	brne	.+4      	; 0x37a6 <__ftoa_engine+0x130>
    37a2:	8a 95       	dec	r24
    37a4:	e6 cf       	rjmp	.-52     	; 0x3772 <__ftoa_engine+0xfc>
    37a6:	e8 94       	clt
    37a8:	01 50       	subi	r16, 0x01	; 1
    37aa:	30 f0       	brcs	.+12     	; 0x37b8 <__ftoa_engine+0x142>
    37ac:	08 0f       	add	r16, r24
    37ae:	0a f4       	brpl	.+2      	; 0x37b2 <__ftoa_engine+0x13c>
    37b0:	00 27       	eor	r16, r16
    37b2:	02 17       	cp	r16, r18
    37b4:	08 f4       	brcc	.+2      	; 0x37b8 <__ftoa_engine+0x142>
    37b6:	20 2f       	mov	r18, r16
    37b8:	23 95       	inc	r18
    37ba:	02 2f       	mov	r16, r18
    37bc:	7a 33       	cpi	r23, 0x3A	; 58
    37be:	28 f0       	brcs	.+10     	; 0x37ca <__ftoa_engine+0x154>
    37c0:	79 e3       	ldi	r23, 0x39	; 57
    37c2:	7d 93       	st	X+, r23
    37c4:	2a 95       	dec	r18
    37c6:	e9 f7       	brne	.-6      	; 0x37c2 <__ftoa_engine+0x14c>
    37c8:	10 c0       	rjmp	.+32     	; 0x37ea <__ftoa_engine+0x174>
    37ca:	7d 93       	st	X+, r23
    37cc:	2a 95       	dec	r18
    37ce:	89 f6       	brne	.-94     	; 0x3772 <__ftoa_engine+0xfc>
    37d0:	06 94       	lsr	r0
    37d2:	97 95       	ror	r25
    37d4:	67 95       	ror	r22
    37d6:	37 95       	ror	r19
    37d8:	17 95       	ror	r17
    37da:	17 94       	ror	r1
    37dc:	e1 18       	sub	r14, r1
    37de:	f1 0a       	sbc	r15, r17
    37e0:	43 0b       	sbc	r20, r19
    37e2:	56 0b       	sbc	r21, r22
    37e4:	c9 0b       	sbc	r28, r25
    37e6:	d0 09       	sbc	r29, r0
    37e8:	98 f0       	brcs	.+38     	; 0x3810 <__ftoa_engine+0x19a>
    37ea:	23 95       	inc	r18
    37ec:	7e 91       	ld	r23, -X
    37ee:	73 95       	inc	r23
    37f0:	7a 33       	cpi	r23, 0x3A	; 58
    37f2:	08 f0       	brcs	.+2      	; 0x37f6 <__ftoa_engine+0x180>
    37f4:	70 e3       	ldi	r23, 0x30	; 48
    37f6:	7c 93       	st	X, r23
    37f8:	20 13       	cpse	r18, r16
    37fa:	b8 f7       	brcc	.-18     	; 0x37ea <__ftoa_engine+0x174>
    37fc:	7e 91       	ld	r23, -X
    37fe:	70 61       	ori	r23, 0x10	; 16
    3800:	7d 93       	st	X+, r23
    3802:	30 f0       	brcs	.+12     	; 0x3810 <__ftoa_engine+0x19a>
    3804:	83 95       	inc	r24
    3806:	71 e3       	ldi	r23, 0x31	; 49
    3808:	7d 93       	st	X+, r23
    380a:	70 e3       	ldi	r23, 0x30	; 48
    380c:	2a 95       	dec	r18
    380e:	e1 f7       	brne	.-8      	; 0x3808 <__ftoa_engine+0x192>
    3810:	11 24       	eor	r1, r1
    3812:	ef 90       	pop	r14
    3814:	ff 90       	pop	r15
    3816:	0f 91       	pop	r16
    3818:	1f 91       	pop	r17
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	99 27       	eor	r25, r25
    3820:	87 fd       	sbrc	r24, 7
    3822:	90 95       	com	r25
    3824:	08 95       	ret

00003826 <isspace>:
    3826:	91 11       	cpse	r25, r1
    3828:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__ctype_isfalse>
    382c:	80 32       	cpi	r24, 0x20	; 32
    382e:	19 f0       	breq	.+6      	; 0x3836 <isspace+0x10>
    3830:	89 50       	subi	r24, 0x09	; 9
    3832:	85 50       	subi	r24, 0x05	; 5
    3834:	c8 f7       	brcc	.-14     	; 0x3828 <isspace+0x2>
    3836:	08 95       	ret

00003838 <strncasecmp_P>:
    3838:	fb 01       	movw	r30, r22
    383a:	dc 01       	movw	r26, r24
    383c:	41 50       	subi	r20, 0x01	; 1
    383e:	50 40       	sbci	r21, 0x00	; 0
    3840:	88 f0       	brcs	.+34     	; 0x3864 <strncasecmp_P+0x2c>
    3842:	8d 91       	ld	r24, X+
    3844:	81 34       	cpi	r24, 0x41	; 65
    3846:	1c f0       	brlt	.+6      	; 0x384e <strncasecmp_P+0x16>
    3848:	8b 35       	cpi	r24, 0x5B	; 91
    384a:	0c f4       	brge	.+2      	; 0x384e <strncasecmp_P+0x16>
    384c:	80 5e       	subi	r24, 0xE0	; 224
    384e:	65 91       	lpm	r22, Z+
    3850:	61 34       	cpi	r22, 0x41	; 65
    3852:	1c f0       	brlt	.+6      	; 0x385a <strncasecmp_P+0x22>
    3854:	6b 35       	cpi	r22, 0x5B	; 91
    3856:	0c f4       	brge	.+2      	; 0x385a <strncasecmp_P+0x22>
    3858:	60 5e       	subi	r22, 0xE0	; 224
    385a:	86 1b       	sub	r24, r22
    385c:	61 11       	cpse	r22, r1
    385e:	71 f3       	breq	.-36     	; 0x383c <strncasecmp_P+0x4>
    3860:	99 0b       	sbc	r25, r25
    3862:	08 95       	ret
    3864:	88 1b       	sub	r24, r24
    3866:	fc cf       	rjmp	.-8      	; 0x3860 <strncasecmp_P+0x28>

00003868 <strnlen_P>:
    3868:	fc 01       	movw	r30, r24
    386a:	05 90       	lpm	r0, Z+
    386c:	61 50       	subi	r22, 0x01	; 1
    386e:	70 40       	sbci	r23, 0x00	; 0
    3870:	01 10       	cpse	r0, r1
    3872:	d8 f7       	brcc	.-10     	; 0x386a <strnlen_P+0x2>
    3874:	80 95       	com	r24
    3876:	90 95       	com	r25
    3878:	8e 0f       	add	r24, r30
    387a:	9f 1f       	adc	r25, r31
    387c:	08 95       	ret

0000387e <strnlen>:
    387e:	fc 01       	movw	r30, r24
    3880:	61 50       	subi	r22, 0x01	; 1
    3882:	70 40       	sbci	r23, 0x00	; 0
    3884:	01 90       	ld	r0, Z+
    3886:	01 10       	cpse	r0, r1
    3888:	d8 f7       	brcc	.-10     	; 0x3880 <strnlen+0x2>
    388a:	80 95       	com	r24
    388c:	90 95       	com	r25
    388e:	8e 0f       	add	r24, r30
    3890:	9f 1f       	adc	r25, r31
    3892:	08 95       	ret

00003894 <fputc>:
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	fb 01       	movw	r30, r22
    389e:	23 81       	ldd	r18, Z+3	; 0x03
    38a0:	21 fd       	sbrc	r18, 1
    38a2:	03 c0       	rjmp	.+6      	; 0x38aa <fputc+0x16>
    38a4:	8f ef       	ldi	r24, 0xFF	; 255
    38a6:	9f ef       	ldi	r25, 0xFF	; 255
    38a8:	2c c0       	rjmp	.+88     	; 0x3902 <fputc+0x6e>
    38aa:	22 ff       	sbrs	r18, 2
    38ac:	16 c0       	rjmp	.+44     	; 0x38da <fputc+0x46>
    38ae:	46 81       	ldd	r20, Z+6	; 0x06
    38b0:	57 81       	ldd	r21, Z+7	; 0x07
    38b2:	24 81       	ldd	r18, Z+4	; 0x04
    38b4:	35 81       	ldd	r19, Z+5	; 0x05
    38b6:	42 17       	cp	r20, r18
    38b8:	53 07       	cpc	r21, r19
    38ba:	44 f4       	brge	.+16     	; 0x38cc <fputc+0x38>
    38bc:	a0 81       	ld	r26, Z
    38be:	b1 81       	ldd	r27, Z+1	; 0x01
    38c0:	9d 01       	movw	r18, r26
    38c2:	2f 5f       	subi	r18, 0xFF	; 255
    38c4:	3f 4f       	sbci	r19, 0xFF	; 255
    38c6:	31 83       	std	Z+1, r19	; 0x01
    38c8:	20 83       	st	Z, r18
    38ca:	8c 93       	st	X, r24
    38cc:	26 81       	ldd	r18, Z+6	; 0x06
    38ce:	37 81       	ldd	r19, Z+7	; 0x07
    38d0:	2f 5f       	subi	r18, 0xFF	; 255
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	37 83       	std	Z+7, r19	; 0x07
    38d6:	26 83       	std	Z+6, r18	; 0x06
    38d8:	14 c0       	rjmp	.+40     	; 0x3902 <fputc+0x6e>
    38da:	8b 01       	movw	r16, r22
    38dc:	ec 01       	movw	r28, r24
    38de:	fb 01       	movw	r30, r22
    38e0:	00 84       	ldd	r0, Z+8	; 0x08
    38e2:	f1 85       	ldd	r31, Z+9	; 0x09
    38e4:	e0 2d       	mov	r30, r0
    38e6:	09 95       	icall
    38e8:	89 2b       	or	r24, r25
    38ea:	e1 f6       	brne	.-72     	; 0x38a4 <fputc+0x10>
    38ec:	d8 01       	movw	r26, r16
    38ee:	16 96       	adiw	r26, 0x06	; 6
    38f0:	8d 91       	ld	r24, X+
    38f2:	9c 91       	ld	r25, X
    38f4:	17 97       	sbiw	r26, 0x07	; 7
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	17 96       	adiw	r26, 0x07	; 7
    38fa:	9c 93       	st	X, r25
    38fc:	8e 93       	st	-X, r24
    38fe:	16 97       	sbiw	r26, 0x06	; 6
    3900:	ce 01       	movw	r24, r28
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	08 95       	ret

0000390c <__ultoa_invert>:
    390c:	fa 01       	movw	r30, r20
    390e:	aa 27       	eor	r26, r26
    3910:	28 30       	cpi	r18, 0x08	; 8
    3912:	51 f1       	breq	.+84     	; 0x3968 <__ultoa_invert+0x5c>
    3914:	20 31       	cpi	r18, 0x10	; 16
    3916:	81 f1       	breq	.+96     	; 0x3978 <__ultoa_invert+0x6c>
    3918:	e8 94       	clt
    391a:	6f 93       	push	r22
    391c:	6e 7f       	andi	r22, 0xFE	; 254
    391e:	6e 5f       	subi	r22, 0xFE	; 254
    3920:	7f 4f       	sbci	r23, 0xFF	; 255
    3922:	8f 4f       	sbci	r24, 0xFF	; 255
    3924:	9f 4f       	sbci	r25, 0xFF	; 255
    3926:	af 4f       	sbci	r26, 0xFF	; 255
    3928:	b1 e0       	ldi	r27, 0x01	; 1
    392a:	3e d0       	rcall	.+124    	; 0x39a8 <__ultoa_invert+0x9c>
    392c:	b4 e0       	ldi	r27, 0x04	; 4
    392e:	3c d0       	rcall	.+120    	; 0x39a8 <__ultoa_invert+0x9c>
    3930:	67 0f       	add	r22, r23
    3932:	78 1f       	adc	r23, r24
    3934:	89 1f       	adc	r24, r25
    3936:	9a 1f       	adc	r25, r26
    3938:	a1 1d       	adc	r26, r1
    393a:	68 0f       	add	r22, r24
    393c:	79 1f       	adc	r23, r25
    393e:	8a 1f       	adc	r24, r26
    3940:	91 1d       	adc	r25, r1
    3942:	a1 1d       	adc	r26, r1
    3944:	6a 0f       	add	r22, r26
    3946:	71 1d       	adc	r23, r1
    3948:	81 1d       	adc	r24, r1
    394a:	91 1d       	adc	r25, r1
    394c:	a1 1d       	adc	r26, r1
    394e:	20 d0       	rcall	.+64     	; 0x3990 <__ultoa_invert+0x84>
    3950:	09 f4       	brne	.+2      	; 0x3954 <__ultoa_invert+0x48>
    3952:	68 94       	set
    3954:	3f 91       	pop	r19
    3956:	2a e0       	ldi	r18, 0x0A	; 10
    3958:	26 9f       	mul	r18, r22
    395a:	11 24       	eor	r1, r1
    395c:	30 19       	sub	r19, r0
    395e:	30 5d       	subi	r19, 0xD0	; 208
    3960:	31 93       	st	Z+, r19
    3962:	de f6       	brtc	.-74     	; 0x391a <__ultoa_invert+0xe>
    3964:	cf 01       	movw	r24, r30
    3966:	08 95       	ret
    3968:	46 2f       	mov	r20, r22
    396a:	47 70       	andi	r20, 0x07	; 7
    396c:	40 5d       	subi	r20, 0xD0	; 208
    396e:	41 93       	st	Z+, r20
    3970:	b3 e0       	ldi	r27, 0x03	; 3
    3972:	0f d0       	rcall	.+30     	; 0x3992 <__ultoa_invert+0x86>
    3974:	c9 f7       	brne	.-14     	; 0x3968 <__ultoa_invert+0x5c>
    3976:	f6 cf       	rjmp	.-20     	; 0x3964 <__ultoa_invert+0x58>
    3978:	46 2f       	mov	r20, r22
    397a:	4f 70       	andi	r20, 0x0F	; 15
    397c:	40 5d       	subi	r20, 0xD0	; 208
    397e:	4a 33       	cpi	r20, 0x3A	; 58
    3980:	18 f0       	brcs	.+6      	; 0x3988 <__ultoa_invert+0x7c>
    3982:	49 5d       	subi	r20, 0xD9	; 217
    3984:	31 fd       	sbrc	r19, 1
    3986:	40 52       	subi	r20, 0x20	; 32
    3988:	41 93       	st	Z+, r20
    398a:	02 d0       	rcall	.+4      	; 0x3990 <__ultoa_invert+0x84>
    398c:	a9 f7       	brne	.-22     	; 0x3978 <__ultoa_invert+0x6c>
    398e:	ea cf       	rjmp	.-44     	; 0x3964 <__ultoa_invert+0x58>
    3990:	b4 e0       	ldi	r27, 0x04	; 4
    3992:	a6 95       	lsr	r26
    3994:	97 95       	ror	r25
    3996:	87 95       	ror	r24
    3998:	77 95       	ror	r23
    399a:	67 95       	ror	r22
    399c:	ba 95       	dec	r27
    399e:	c9 f7       	brne	.-14     	; 0x3992 <__ultoa_invert+0x86>
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	61 05       	cpc	r22, r1
    39a4:	71 05       	cpc	r23, r1
    39a6:	08 95       	ret
    39a8:	9b 01       	movw	r18, r22
    39aa:	ac 01       	movw	r20, r24
    39ac:	0a 2e       	mov	r0, r26
    39ae:	06 94       	lsr	r0
    39b0:	57 95       	ror	r21
    39b2:	47 95       	ror	r20
    39b4:	37 95       	ror	r19
    39b6:	27 95       	ror	r18
    39b8:	ba 95       	dec	r27
    39ba:	c9 f7       	brne	.-14     	; 0x39ae <__ultoa_invert+0xa2>
    39bc:	62 0f       	add	r22, r18
    39be:	73 1f       	adc	r23, r19
    39c0:	84 1f       	adc	r24, r20
    39c2:	95 1f       	adc	r25, r21
    39c4:	a0 1d       	adc	r26, r0
    39c6:	08 95       	ret

000039c8 <__ctype_isfalse>:
    39c8:	99 27       	eor	r25, r25
    39ca:	88 27       	eor	r24, r24

000039cc <__ctype_istrue>:
    39cc:	08 95       	ret

000039ce <__prologue_saves__>:
    39ce:	2f 92       	push	r2
    39d0:	3f 92       	push	r3
    39d2:	4f 92       	push	r4
    39d4:	5f 92       	push	r5
    39d6:	6f 92       	push	r6
    39d8:	7f 92       	push	r7
    39da:	8f 92       	push	r8
    39dc:	9f 92       	push	r9
    39de:	af 92       	push	r10
    39e0:	bf 92       	push	r11
    39e2:	cf 92       	push	r12
    39e4:	df 92       	push	r13
    39e6:	ef 92       	push	r14
    39e8:	ff 92       	push	r15
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	ca 1b       	sub	r28, r26
    39f8:	db 0b       	sbc	r29, r27
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	09 94       	ijmp

00003a06 <__epilogue_restores__>:
    3a06:	2a 88       	ldd	r2, Y+18	; 0x12
    3a08:	39 88       	ldd	r3, Y+17	; 0x11
    3a0a:	48 88       	ldd	r4, Y+16	; 0x10
    3a0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a10:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a12:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a14:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a16:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a18:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a1c:	df 80       	ldd	r13, Y+7	; 0x07
    3a1e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a20:	fd 80       	ldd	r15, Y+5	; 0x05
    3a22:	0c 81       	ldd	r16, Y+4	; 0x04
    3a24:	1b 81       	ldd	r17, Y+3	; 0x03
    3a26:	aa 81       	ldd	r26, Y+2	; 0x02
    3a28:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2a:	ce 0f       	add	r28, r30
    3a2c:	d1 1d       	adc	r29, r1
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	ed 01       	movw	r28, r26
    3a3a:	08 95       	ret

00003a3c <_exit>:
    3a3c:	f8 94       	cli

00003a3e <__stop_program>:
    3a3e:	ff cf       	rjmp	.-2      	; 0x3a3e <__stop_program>
